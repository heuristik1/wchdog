
WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002ac  20000000  0800a53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050bc  200002b0  0800a7e8  000202b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  2000536c  0800a7e8  0002536c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013ad1  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035d2  00000000  00000000  00033da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e98  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d28  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000067c8  00000000  00000000  00038f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f66  00000000  00000000  0003f700  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043666  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003dc4  00000000  00000000  000436e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000df  00000000  00000000  000474a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002b0 	.word	0x200002b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800973c 	.word	0x0800973c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002b4 	.word	0x200002b4
 8000100:	0800973c 	.word	0x0800973c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	b083      	sub	sp, #12
 8000464:	000d      	movs	r5, r1
 8000466:	4692      	mov	sl, r2
 8000468:	4699      	mov	r9, r3
 800046a:	428b      	cmp	r3, r1
 800046c:	d82f      	bhi.n	80004ce <__udivmoddi4+0x7a>
 800046e:	d02c      	beq.n	80004ca <__udivmoddi4+0x76>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ae 	bl	80005d4 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8a9 	bl	80005d4 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d500      	bpl.n	800048e <__udivmoddi4+0x3a>
 800048c:	e074      	b.n	8000578 <__udivmoddi4+0x124>
 800048e:	4653      	mov	r3, sl
 8000490:	465a      	mov	r2, fp
 8000492:	4093      	lsls	r3, r2
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4642      	mov	r2, r8
 800049a:	4093      	lsls	r3, r2
 800049c:	001e      	movs	r6, r3
 800049e:	42af      	cmp	r7, r5
 80004a0:	d829      	bhi.n	80004f6 <__udivmoddi4+0xa2>
 80004a2:	d026      	beq.n	80004f2 <__udivmoddi4+0x9e>
 80004a4:	465b      	mov	r3, fp
 80004a6:	1ba4      	subs	r4, r4, r6
 80004a8:	41bd      	sbcs	r5, r7
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	da00      	bge.n	80004b0 <__udivmoddi4+0x5c>
 80004ae:	e079      	b.n	80005a4 <__udivmoddi4+0x150>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	2301      	movs	r3, #1
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2301      	movs	r3, #1
 80004c2:	4642      	mov	r2, r8
 80004c4:	4093      	lsls	r3, r2
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	e019      	b.n	80004fe <__udivmoddi4+0xaa>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d9d0      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <__udivmoddi4+0x8c>
 80004dc:	601c      	str	r4, [r3, #0]
 80004de:	605d      	str	r5, [r3, #4]
 80004e0:	9800      	ldr	r0, [sp, #0]
 80004e2:	9901      	ldr	r1, [sp, #4]
 80004e4:	b003      	add	sp, #12
 80004e6:	bc3c      	pop	{r2, r3, r4, r5}
 80004e8:	4690      	mov	r8, r2
 80004ea:	4699      	mov	r9, r3
 80004ec:	46a2      	mov	sl, r4
 80004ee:	46ab      	mov	fp, r5
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	42a3      	cmp	r3, r4
 80004f4:	d9d6      	bls.n	80004a4 <__udivmoddi4+0x50>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0e8      	beq.n	80004d6 <__udivmoddi4+0x82>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xda>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xc4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xde>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0xe8>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xbc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xda>
 800053c:	465b      	mov	r3, fp
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db22      	blt.n	8000590 <__udivmoddi4+0x13c>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	4644      	mov	r4, r8
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2c      	blt.n	80005ba <__udivmoddi4+0x166>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e7ae      	b.n	80004d6 <__udivmoddi4+0x82>
 8000578:	4642      	mov	r2, r8
 800057a:	2320      	movs	r3, #32
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	4652      	mov	r2, sl
 8000580:	40da      	lsrs	r2, r3
 8000582:	4641      	mov	r1, r8
 8000584:	0013      	movs	r3, r2
 8000586:	464a      	mov	r2, r9
 8000588:	408a      	lsls	r2, r1
 800058a:	0017      	movs	r7, r2
 800058c:	431f      	orrs	r7, r3
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x42>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4313      	orrs	r3, r2
 80005a2:	e7d5      	b.n	8000550 <__udivmoddi4+0xfc>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x6c>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	002f      	movs	r7, r5
 80005c6:	46b4      	mov	ip, r6
 80005c8:	4097      	lsls	r7, r2
 80005ca:	4666      	mov	r6, ip
 80005cc:	003b      	movs	r3, r7
 80005ce:	4333      	orrs	r3, r6
 80005d0:	e7c9      	b.n	8000566 <__udivmoddi4+0x112>
 80005d2:	46c0      	nop			; (mov r8, r8)

080005d4 <__clzdi2>:
 80005d4:	b510      	push	{r4, lr}
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d103      	bne.n	80005e2 <__clzdi2+0xe>
 80005da:	f000 f807 	bl	80005ec <__clzsi2>
 80005de:	3020      	adds	r0, #32
 80005e0:	e002      	b.n	80005e8 <__clzdi2+0x14>
 80005e2:	1c08      	adds	r0, r1, #0
 80005e4:	f000 f802 	bl	80005ec <__clzsi2>
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3308      	adds	r3, #8
 8000634:	001a      	movs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	4252      	negs	r2, r2
 8000640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3308      	adds	r3, #8
 8000646:	001a      	movs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3308      	adds	r3, #8
 8000650:	001a      	movs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}

08000664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}

0800067a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3301      	adds	r3, #1
 80006da:	d103      	bne.n	80006e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00c      	b.n	80006fe <vListInsert+0x38>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3308      	adds	r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e002      	b.n	80006f2 <vListInsert+0x2c>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d9f6      	bls.n	80006ec <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}

08000732 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6892      	ldr	r2, [r2, #8]
 8000742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6852      	ldr	r2, [r2, #4]
 800074c:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d103      	bne.n	8000766 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}

0800077e <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b04      	subs	r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0452      	lsls	r2, r2, #17
 8000796:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3b04      	subs	r3, #4
 800079c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3b18      	subs	r3, #24
 80007a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3b20      	subs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b004      	add	sp, #16
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <pxCurrentTCBConst2>)
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	3010      	adds	r0, #16
 80007c8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007ca:	46a0      	mov	r8, r4
 80007cc:	46a9      	mov	r9, r5
 80007ce:	46b2      	mov	sl, r6
 80007d0:	46bb      	mov	fp, r7
 80007d2:	f380 8809 	msr	PSP, r0
 80007d6:	3820      	subs	r0, #32
 80007d8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007da:	4671      	mov	r1, lr
 80007dc:	200d      	movs	r0, #13
 80007de:	4301      	orrs	r1, r0
 80007e0:	4708      	bx	r1
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <pxCurrentTCBConst2>:
 80007e4:	20001ed4 	.word	0x20001ed4
					"	bx r1							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB	\n"
				);
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)

080007ec <vPortStartFirstTask>:
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 80007ec:	2000      	movs	r0, #0
 80007ee:	6800      	ldr	r0, [r0, #0]
 80007f0:	f380 8808 	msr	MSP, r0
 80007f4:	b662      	cpsie	i
 80007f6:	df00      	svc	0
 80007f8:	46c0      	nop			; (mov r8, r8)
					" msr msp, r0		\n" /* Set the msp back to the start of the stack. */
					" cpsie i			\n" /* Globally enable interrupts. */
					" svc 0				\n" /* System call to start first task. */
					" nop				\n"
				);
}
 80007fa:	46c0      	nop			; (mov r8, r8)

080007fc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <xPortStartScheduler+0x38>)
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <xPortStartScheduler+0x38>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <xPortStartScheduler+0x38>)
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <xPortStartScheduler+0x38>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	0609      	lsls	r1, r1, #24
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800081c:	f000 f872 	bl	8000904 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <xPortStartScheduler+0x3c>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8000826:	f7ff ffe1 	bl	80007ec <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	e000ed20 	.word	0xe000ed20
 8000838:	20000000 	.word	0x20000000

0800083c <vPortYieldFromISR>:
    is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <vPortYieldFromISR+0x14>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0552      	lsls	r2, r2, #21
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	e000ed04 	.word	0xe000ed04

08000854 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8000858:	b672      	cpsid	i
    uxCriticalNesting++;
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <vPortEnterCritical+0x18>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <vPortEnterCritical+0x18>)
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000000 	.word	0x20000000

08000870 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    uxCriticalNesting--;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <vPortExitCritical+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <vPortExitCritical+0x20>)
 800087c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <vPortExitCritical+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 8000886:	b662      	cpsie	i
    }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000000 	.word	0x20000000

08000894 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000894:	f3ef 8009 	mrs	r0, PSP
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <pxCurrentTCBConst>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	3820      	subs	r0, #32
 800089e:	6010      	str	r0, [r2, #0]
 80008a0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80008a2:	4644      	mov	r4, r8
 80008a4:	464d      	mov	r5, r9
 80008a6:	4656      	mov	r6, sl
 80008a8:	465f      	mov	r7, fp
 80008aa:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80008ac:	b508      	push	{r3, lr}
 80008ae:	b672      	cpsid	i
 80008b0:	f000 fea0 	bl	80015f4 <vTaskSwitchContext>
 80008b4:	b662      	cpsie	i
 80008b6:	bc0c      	pop	{r2, r3}
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	6808      	ldr	r0, [r1, #0]
 80008bc:	3010      	adds	r0, #16
 80008be:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80008c0:	46a0      	mov	r8, r4
 80008c2:	46a9      	mov	r9, r5
 80008c4:	46b2      	mov	sl, r6
 80008c6:	46bb      	mov	fp, r7
 80008c8:	f380 8809 	msr	PSP, r0
 80008cc:	3820      	subs	r0, #32
 80008ce:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80008d0:	4718      	bx	r3
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <pxCurrentTCBConst>:
 80008d4:	20001ed4 	.word	0x20001ed4
	"	bx r3								\n"
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <SysTick_Handler+0x24>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0552      	lsls	r2, r2, #21
 80008e8:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	b672      	cpsid	i
	{
		vTaskIncrementTick();
 80008f0:	f000 fdda 	bl	80014a8 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80008f4:	b662      	cpsie	i
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	e000ed04 	.word	0xe000ed04

08000904 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <prvSetupTimerInterrupt+0x18>)
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <prvSetupTimerInterrupt+0x1c>)
 800090c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <prvSetupTimerInterrupt+0x20>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	e000e014 	.word	0xe000e014
 8000920:	00005dbf 	.word	0x00005dbf
 8000924:	e000e010 	.word	0xe000e010

08000928 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2207      	movs	r2, #7
 8000938:	4013      	ands	r3, r2
 800093a:	d004      	beq.n	8000946 <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2207      	movs	r2, #7
 8000940:	4393      	bics	r3, r2
 8000942:	3308      	adds	r3, #8
 8000944:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8000946:	f000 fd11 	bl	800136c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <pvPortMalloc+0x70>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <pvPortMalloc+0x74>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d812      	bhi.n	800097e <pvPortMalloc+0x56>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <pvPortMalloc+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <pvPortMalloc+0x70>)
 8000962:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8000964:	429a      	cmp	r2, r3
 8000966:	d90a      	bls.n	800097e <pvPortMalloc+0x56>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <pvPortMalloc+0x70>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <pvPortMalloc+0x78>)
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <pvPortMalloc+0x70>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	18d2      	adds	r2, r2, r3
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <pvPortMalloc+0x70>)
 800097c:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
 800097e:	f000 fd01 	bl	8001384 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <pvPortMalloc+0x64>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000988:	f005 fb96 	bl	80060b8 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20001ed0 	.word	0x20001ed0
 800099c:	00001bff 	.word	0x00001bff
 80009a0:	200002d0 	.word	0x200002d0

080009a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <xPortGetFreeHeapSize+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	22e0      	movs	r2, #224	; 0xe0
 80009be:	0152      	lsls	r2, r2, #5
 80009c0:	1ad3      	subs	r3, r2, r3
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20001ed0 	.word	0x20001ed0

080009cc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <xQueueGenericReset+0x14>
 80009dc:	b672      	cpsid	i
 80009de:	e7fe      	b.n	80009de <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
 80009e0:	f7ff ff38 	bl	8000854 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	434b      	muls	r3, r1
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0e:	1e59      	subs	r1, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	434b      	muls	r3, r1
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4252      	negs	r2, r2
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4252      	negs	r2, r2
 8000a2a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10e      	bne.n	8000a50 <xQueueGenericReset+0x84>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d014      	beq.n	8000a64 <xQueueGenericReset+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3310      	adds	r3, #16
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 feae 	bl	80017a0 <xTaskRemoveFromEventList>
 8000a44:	0003      	movs	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10c      	bne.n	8000a64 <xQueueGenericReset+0x98>
				{
					portYIELD_WITHIN_API();
 8000a4a:	f7ff fef7 	bl	800083c <vPortYieldFromISR>
 8000a4e:	e009      	b.n	8000a64 <xQueueGenericReset+0x98>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3310      	adds	r3, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fde7 	bl	8000628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3324      	adds	r3, #36	; 0x24
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fde2 	bl	8000628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000a64:	f7ff ff04 	bl	8000870 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b088      	sub	sp, #32
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d029      	beq.n	8000ade <xQueueGenericCreate+0x6c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8000a8a:	204c      	movs	r0, #76	; 0x4c
 8000a8c:	f7ff ff4c 	bl	8000928 <pvPortMalloc>
 8000a90:	0003      	movs	r3, r0
 8000a92:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d021      	beq.n	8000ade <xQueueGenericCreate+0x6c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4353      	muls	r3, r2
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff ff3e 	bl	8000928 <pvPortMalloc>
 8000aac:	0002      	movs	r2, r0
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00d      	beq.n	8000ad6 <xQueueGenericCreate+0x64>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff7e 	bl	80009cc <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	e003      	b.n	8000ade <xQueueGenericCreate+0x6c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff63 	bl	80009a4 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <xQueueGenericCreate+0x76>
 8000ae4:	b672      	cpsid	i
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericCreate+0x74>

	return xReturn;
 8000ae8:	69fb      	ldr	r3, [r7, #28]
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b008      	add	sp, #32
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	0002      	movs	r2, r0
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8000afe:	204c      	movs	r0, #76	; 0x4c
 8000b00:	f7ff ff12 	bl	8000928 <pvPortMalloc>
 8000b04:	0003      	movs	r3, r0
 8000b06:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d02c      	beq.n	8000b68 <xQueueCreateMutex+0x76>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4252      	negs	r2, r2
 8000b46:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fd6b 	bl	8000628 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3324      	adds	r3, #36	; 0x24
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fd66 	bl	8000628 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	f000 f80a 	bl	8000b7c <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <xQueueCreateMutex+0x80>
 8000b6e:	b672      	cpsid	i
 8000b70:	e7fe      	b.n	8000b70 <xQueueCreateMutex+0x7e>
		return pxNewQueue;
 8000b72:	68fb      	ldr	r3, [r7, #12]
	}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b004      	add	sp, #16
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <xQueueGenericSend+0x1c>
 8000b94:	b672      	cpsid	i
 8000b96:	e7fe      	b.n	8000b96 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <xQueueGenericSend+0x2a>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <xQueueGenericSend+0x2e>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <xQueueGenericSend+0x30>
 8000baa:	2300      	movs	r3, #0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <xQueueGenericSend+0x38>
 8000bb0:	b672      	cpsid	i
 8000bb2:	e7fe      	b.n	8000bb2 <xQueueGenericSend+0x36>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000bb4:	f7ff fe4e 	bl	8000854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d217      	bcs.n	8000bf4 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f982 	bl	8000ed4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <xQueueGenericSend+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3324      	adds	r3, #36	; 0x24
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 fddf 	bl	80017a0 <xTaskRemoveFromEventList>
 8000be2:	0003      	movs	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <xQueueGenericSend+0x70>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8000be8:	f7ff fe28 	bl	800083c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8000bec:	f7ff fe40 	bl	8000870 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e055      	b.n	8000ca0 <xQueueGenericSend+0x124>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <xQueueGenericSend+0x86>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bfa:	f7ff fe39 	bl	8000870 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e04e      	b.n	8000ca0 <xQueueGenericSend+0x124>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d106      	bne.n	8000c16 <xQueueGenericSend+0x9a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000c08:	2314      	movs	r3, #20
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fe1f 	bl	8001850 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8000c16:	f7ff fe2b 	bl	8000870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000c1a:	f000 fba7 	bl	800136c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c1e:	f7ff fe19 	bl	8000854 <vPortEnterCritical>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	3301      	adds	r3, #1
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericSend+0xb4>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c34:	3301      	adds	r3, #1
 8000c36:	d102      	bne.n	8000c3e <xQueueGenericSend+0xc2>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	649a      	str	r2, [r3, #72]	; 0x48
 8000c3e:	f7ff fe17 	bl	8000870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	2314      	movs	r3, #20
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fe1a 	bl	8001884 <xTaskCheckForTimeOut>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d11e      	bne.n	8000c92 <xQueueGenericSend+0x116>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fa1a 	bl	8001090 <prvIsQueueFull>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d011      	beq.n	8000c84 <xQueueGenericSend+0x108>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3310      	adds	r3, #16
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fd37 	bl	80016dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 f9b0 	bl	8000fd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000c76:	f000 fb85 	bl	8001384 <xTaskResumeAll>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d19a      	bne.n	8000bb4 <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
 8000c7e:	f7ff fddd 	bl	800083c <vPortYieldFromISR>
 8000c82:	e797      	b.n	8000bb4 <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f9a5 	bl	8000fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c8c:	f000 fb7a 	bl	8001384 <xTaskResumeAll>
 8000c90:	e790      	b.n	8000bb4 <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 f99e 	bl	8000fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c9a:	f000 fb73 	bl	8001384 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000c9e:	2300      	movs	r3, #0
		}
	}
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b008      	add	sp, #32
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <xQueueGenericSendFromISR+0x18>
 8000cbc:	b672      	cpsid	i
 8000cbe:	e7fe      	b.n	8000cbe <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <xQueueGenericSendFromISR+0x26>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <xQueueGenericSendFromISR+0x2a>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <xQueueGenericSendFromISR+0x2c>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <xQueueGenericSendFromISR+0x34>
 8000cd8:	b672      	cpsid	i
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSendFromISR+0x32>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d223      	bcs.n	8000d36 <xQueueGenericSendFromISR+0x8e>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 f8ed 	bl	8000ed4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d111      	bne.n	8000d26 <xQueueGenericSendFromISR+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d012      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3324      	adds	r3, #36	; 0x24
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fd46 	bl	80017a0 <xTaskRemoveFromEventList>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d00b      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e004      	b.n	8000d30 <xQueueGenericSendFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8000d30:	2301      	movs	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e001      	b.n	8000d3a <xQueueGenericSendFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000d3a:	b662      	cpsie	i

	return xReturn;
 8000d3c:	697b      	ldr	r3, [r7, #20]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b006      	add	sp, #24
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b088      	sub	sp, #32
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <xQueueGenericReceive+0x1c>
 8000d5e:	b672      	cpsid	i
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <xQueueGenericReceive+0x2a>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <xQueueGenericReceive+0x2e>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <xQueueGenericReceive+0x30>
 8000d74:	2300      	movs	r3, #0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <xQueueGenericReceive+0x38>
 8000d7a:	b672      	cpsid	i
 8000d7c:	e7fe      	b.n	8000d7c <xQueueGenericReceive+0x36>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d7e:	f7ff fd69 	bl	8000854 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d03c      	beq.n	8000e04 <xQueueGenericReceive+0xbe>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f8f7 	bl	8000f8a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11c      	bne.n	8000ddc <xQueueGenericReceive+0x96>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <xQueueGenericReceive+0x78>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8000db4:	f000 ff02 	bl	8001bbc <xTaskGetCurrentTaskHandle>
 8000db8:	0002      	movs	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d01a      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3310      	adds	r3, #16
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fce8 	bl	80017a0 <xTaskRemoveFromEventList>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d112      	bne.n	8000dfc <xQueueGenericReceive+0xb6>
						{
							portYIELD_WITHIN_API();
 8000dd6:	f7ff fd31 	bl	800083c <vPortYieldFromISR>
 8000dda:	e00f      	b.n	8000dfc <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3324      	adds	r3, #36	; 0x24
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fcd6 	bl	80017a0 <xTaskRemoveFromEventList>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8000df8:	f7ff fd20 	bl	800083c <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 8000dfc:	f7ff fd38 	bl	8000870 <vPortExitCritical>
				return pdPASS;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e063      	b.n	8000ecc <xQueueGenericReceive+0x186>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e0a:	f7ff fd31 	bl	8000870 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e05c      	b.n	8000ecc <xQueueGenericReceive+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <xQueueGenericReceive+0xe0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e18:	2310      	movs	r3, #16
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 fd17 	bl	8001850 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e26:	f7ff fd23 	bl	8000870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e2a:	f000 fa9f 	bl	800136c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e2e:	f7ff fd11 	bl	8000854 <vPortEnterCritical>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	3301      	adds	r3, #1
 8000e38:	d102      	bne.n	8000e40 <xQueueGenericReceive+0xfa>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e44:	3301      	adds	r3, #1
 8000e46:	d102      	bne.n	8000e4e <xQueueGenericReceive+0x108>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	649a      	str	r2, [r3, #72]	; 0x48
 8000e4e:	f7ff fd0f 	bl	8000870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	2310      	movs	r3, #16
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fd12 	bl	8001884 <xTaskCheckForTimeOut>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d12c      	bne.n	8000ebe <xQueueGenericReceive+0x178>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 f8ff 	bl	800106a <prvIsQueueEmpty>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d01f      	beq.n	8000eb0 <xQueueGenericReceive+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <xQueueGenericReceive+0x144>
					{
						portENTER_CRITICAL();
 8000e78:	f7ff fcec 	bl	8000854 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fec5 	bl	8001c10 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8000e86:	f7ff fcf3 	bl	8000870 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3324      	adds	r3, #36	; 0x24
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fc22 	bl	80016dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f89b 	bl	8000fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000ea0:	f000 fa70 	bl	8001384 <xTaskResumeAll>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d000      	beq.n	8000eaa <xQueueGenericReceive+0x164>
 8000ea8:	e769      	b.n	8000d7e <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
 8000eaa:	f7ff fcc7 	bl	800083c <vPortYieldFromISR>
 8000eae:	e766      	b.n	8000d7e <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f88f 	bl	8000fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eb8:	f000 fa64 	bl	8001384 <xTaskResumeAll>
 8000ebc:	e75f      	b.n	8000d7e <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 f888 	bl	8000fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ec6:	f000 fa5d 	bl	8001384 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000eca:	2300      	movs	r3, #0
		}
	}
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b008      	add	sp, #32
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10c      	bne.n	8000f02 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d143      	bne.n	8000f78 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fee3 	bl	8001cc0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	e03a      	b.n	8000f78 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d119      	bne.n	8000f3c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6898      	ldr	r0, [r3, #8]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	0019      	movs	r1, r3
 8000f14:	f006 fcdd 	bl	80078d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	18d2      	adds	r2, r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d322      	bcc.n	8000f78 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	e01d      	b.n	8000f78 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68d8      	ldr	r0, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	0019      	movs	r1, r3
 8000f48:	f006 fcc3 	bl	80078d2 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	425b      	negs	r3, r3
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	425b      	negs	r3, r3
 8000f72:	18d2      	adds	r2, r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b004      	add	sp, #16
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d018      	beq.n	8000fce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	18d2      	adds	r2, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d303      	bcc.n	8000fbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f006 fc82 	bl	80078d2 <memcpy>
	}
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000fde:	f7ff fc39 	bl	8000854 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fe2:	e011      	b.n	8001008 <prvUnlockQueue+0x32>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d012      	beq.n	8001012 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3324      	adds	r3, #36	; 0x24
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 fbd5 	bl	80017a0 <xTaskRemoveFromEventList>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8000ffa:	f000 fc91 	bl	8001920 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100c:	2b00      	cmp	r3, #0
 800100e:	dce9      	bgt.n	8000fe4 <prvUnlockQueue+0xe>
 8001010:	e000      	b.n	8001014 <prvUnlockQueue+0x3e>
			}
			else
			{
				break;
 8001012:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	4252      	negs	r2, r2
 800101a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800101c:	f7ff fc28 	bl	8000870 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001020:	f7ff fc18 	bl	8000854 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001024:	e011      	b.n	800104a <prvUnlockQueue+0x74>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d012      	beq.n	8001054 <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3310      	adds	r3, #16
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fbb4 	bl	80017a0 <xTaskRemoveFromEventList>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d001      	beq.n	8001040 <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
 800103c:	f000 fc70 	bl	8001920 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	2b00      	cmp	r3, #0
 8001050:	dce9      	bgt.n	8001026 <prvUnlockQueue+0x50>
 8001052:	e000      	b.n	8001056 <prvUnlockQueue+0x80>
			}
			else
			{
				break;
 8001054:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	4252      	negs	r2, r2
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800105e:	f7ff fc07 	bl	8000870 <vPortExitCritical>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001072:	f7ff fbef 	bl	8000854 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	425a      	negs	r2, r3
 800107c:	4153      	adcs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001082:	f7ff fbf5 	bl	8000870 <vPortExitCritical>

	return xReturn;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}

08001090 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001098:	f7ff fbdc 	bl	8000854 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	425a      	negs	r2, r3
 80010a8:	4153      	adcs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80010ae:	f7ff fbdf 	bl	8000870 <vPortExitCritical>

	return xReturn;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}

080010bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80010c6:	f7ff fbc5 	bl	8000854 <vPortEnterCritical>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	3301      	adds	r3, #1
 80010d0:	d102      	bne.n	80010d8 <vQueueWaitForMessageRestricted+0x1c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010dc:	3301      	adds	r3, #1
 80010de:	d102      	bne.n	80010e6 <vQueueWaitForMessageRestricted+0x2a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	649a      	str	r2, [r3, #72]	; 0x48
 80010e6:	f7ff fbc3 	bl	8000870 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fb26 	bl	800174c <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff ff67 	bl	8000fd6 <prvUnlockQueue>
	}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	801a      	strh	r2, [r3, #0]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <xTaskGenericCreate+0x1a>
 8001126:	b672      	cpsid	i
 8001128:	e7fe      	b.n	8001128 <xTaskGenericCreate+0x18>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 800112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112c:	2b04      	cmp	r3, #4
 800112e:	d901      	bls.n	8001134 <xTaskGenericCreate+0x24>
 8001130:	b672      	cpsid	i
 8001132:	e7fe      	b.n	8001132 <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8001134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001136:	1dbb      	adds	r3, r7, #6
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fcf5 	bl	8001b2c <prvAllocateTCBAndStack>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d100      	bne.n	800114e <xTaskGenericCreate+0x3e>
 800114c:	e082      	b.n	8001254 <xTaskGenericCreate+0x144>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <xTaskGenericCreate+0x174>)
 8001158:	468c      	mov	ip, r1
 800115a:	4463      	add	r3, ip
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2207      	movs	r2, #7
 8001166:	4393      	bics	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2207      	movs	r2, #7
 800116e:	4013      	ands	r3, r2
 8001170:	d001      	beq.n	8001176 <xTaskGenericCreate+0x66>
 8001172:	b672      	cpsid	i
 8001174:	e7fe      	b.n	8001174 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001176:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	69b8      	ldr	r0, [r7, #24]
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	0023      	movs	r3, r4
 8001186:	f000 fbe7 	bl	8001958 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	68f9      	ldr	r1, [r7, #12]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff faf4 	bl	800077e <pxPortInitialiseStack>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	2307      	movs	r3, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	d001      	beq.n	80011ac <xTaskGenericCreate+0x9c>
 80011a8:	b672      	cpsid	i
 80011aa:	e7fe      	b.n	80011aa <xTaskGenericCreate+0x9a>

		if( ( void * ) pxCreatedTask != NULL )
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80011b8:	f7ff fb4c 	bl	8000854 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <xTaskGenericCreate+0x178>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <xTaskGenericCreate+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <xTaskGenericCreate+0x17c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <xTaskGenericCreate+0xd2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <xTaskGenericCreate+0x17c>)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <xTaskGenericCreate+0x178>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10f      	bne.n	80011fc <xTaskGenericCreate+0xec>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80011dc:	f000 fbf2 	bl	80019c4 <prvInitialiseTaskLists>
 80011e0:	e00c      	b.n	80011fc <xTaskGenericCreate+0xec>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <xTaskGenericCreate+0x180>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d108      	bne.n	80011fc <xTaskGenericCreate+0xec>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <xTaskGenericCreate+0x17c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d802      	bhi.n	80011fc <xTaskGenericCreate+0xec>
					{
						pxCurrentTCB = pxNewTCB;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <xTaskGenericCreate+0x17c>)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <xTaskGenericCreate+0x184>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d903      	bls.n	8001210 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <xTaskGenericCreate+0x184>)
 800120e:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <xTaskGenericCreate+0x188>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <xTaskGenericCreate+0x188>)
 8001218:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <xTaskGenericCreate+0x18c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d903      	bls.n	800122e <xTaskGenericCreate+0x11e>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <xTaskGenericCreate+0x18c>)
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001232:	0013      	movs	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	189b      	adds	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <xTaskGenericCreate+0x190>)
 800123c:	189a      	adds	r2, r3, r2
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	3304      	adds	r3, #4
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f7ff fa18 	bl	800067a <vListInsertEnd>

			xReturn = pdPASS;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800124e:	f7ff fb0f 	bl	8000870 <vPortExitCritical>
 8001252:	e002      	b.n	800125a <xTaskGenericCreate+0x14a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <xTaskGenericCreate+0x168>
	{
		if( xSchedulerRunning != pdFALSE )
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <xTaskGenericCreate+0x180>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <xTaskGenericCreate+0x168>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <xTaskGenericCreate+0x17c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	429a      	cmp	r2, r3
 8001272:	d201      	bcs.n	8001278 <xTaskGenericCreate+0x168>
			{
				portYIELD_WITHIN_API();
 8001274:	f7ff fae2 	bl	800083c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8001278:	69fb      	ldr	r3, [r7, #28]
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b009      	add	sp, #36	; 0x24
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	3fffffff 	.word	0x3fffffff
 8001288:	20001fac 	.word	0x20001fac
 800128c:	20001ed4 	.word	0x20001ed4
 8001290:	20001fbc 	.word	0x20001fbc
 8001294:	20001fb4 	.word	0x20001fb4
 8001298:	20001fd0 	.word	0x20001fd0
 800129c:	20001fb8 	.word	0x20001fb8
 80012a0:	20001ed8 	.word	0x20001ed8

080012a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d014      	beq.n	80012e0 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
 80012b6:	f000 f859 	bl	800136c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <vTaskDelay+0x50>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <vTaskDelay+0x54>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff fa31 	bl	8000732 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fbf4 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80012d8:	f000 f854 	bl	8001384 <xTaskResumeAll>
 80012dc:	0003      	movs	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
 80012e6:	f7ff faa9 	bl	800083c <vPortYieldFromISR>
		}
	}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20001fb0 	.word	0x20001fb0
 80012f8:	20001ed4 	.word	0x20001ed4

080012fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8001302:	4916      	ldr	r1, [pc, #88]	; (800135c <vTaskStartScheduler+0x60>)
 8001304:	4816      	ldr	r0, [pc, #88]	; (8001360 <vTaskStartScheduler+0x64>)
 8001306:	2300      	movs	r3, #0
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	2246      	movs	r2, #70	; 0x46
 800131a:	f7ff fef9 	bl	8001110 <xTaskGenericCreate>
 800131e:	0003      	movs	r3, r0
 8001320:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d103      	bne.n	8001330 <vTaskStartScheduler+0x34>
		{
			xReturn = xTimerCreateTimerTask();
 8001328:	f000 fd08 	bl	8001d3c <xTimerCreateTimerTask>
 800132c:	0003      	movs	r3, r0
 800132e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <vTaskStartScheduler+0x4c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8001336:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <vTaskStartScheduler+0x68>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <vTaskStartScheduler+0x6c>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001344:	f7ff fa5a 	bl	80007fc <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <vTaskStartScheduler+0x56>
 800134e:	b672      	cpsid	i
 8001350:	e7fe      	b.n	8001350 <vTaskStartScheduler+0x54>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	08009754 	.word	0x08009754
 8001360:	08001935 	.word	0x08001935
 8001364:	20001fbc 	.word	0x20001fbc
 8001368:	20001fb0 	.word	0x20001fb0

0800136c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <vTaskSuspendAll+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <vTaskSuspendAll+0x14>)
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20001fc0 	.word	0x20001fc0

08001384 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <xTaskResumeAll+0xe0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <xTaskResumeAll+0x16>
 8001396:	b672      	cpsid	i
 8001398:	e7fe      	b.n	8001398 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800139a:	f7ff fa5b 	bl	8000854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <xTaskResumeAll+0xe0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <xTaskResumeAll+0xe0>)
 80013a6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <xTaskResumeAll+0xe0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d152      	bne.n	8001456 <xTaskResumeAll+0xd2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <xTaskResumeAll+0xe4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d04e      	beq.n	8001456 <xTaskResumeAll+0xd2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80013bc:	e027      	b.n	800140e <xTaskResumeAll+0x8a>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <xTaskResumeAll+0xe8>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 80013c4:	0023      	movs	r3, r4
 80013c6:	3318      	adds	r3, #24
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff f9b2 	bl	8000732 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 80013ce:	1d23      	adds	r3, r4, #4
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f9ae 	bl	8000732 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80013d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <xTaskResumeAll+0xec>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d902      	bls.n	80013e6 <xTaskResumeAll+0x62>
 80013e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <xTaskResumeAll+0xec>)
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013e8:	0013      	movs	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	189b      	adds	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <xTaskResumeAll+0xf0>)
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	1d22      	adds	r2, r4, #4
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff f93e 	bl	800067a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <xTaskResumeAll+0xf4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	429a      	cmp	r2, r3
 8001408:	d301      	bcc.n	800140e <xTaskResumeAll+0x8a>
					{
						xYieldRequired = pdTRUE;
 800140a:	2301      	movs	r3, #1
 800140c:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <xTaskResumeAll+0xe8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1d3      	bne.n	80013be <xTaskResumeAll+0x3a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <xTaskResumeAll+0xf8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00d      	beq.n	800143a <xTaskResumeAll+0xb6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800141e:	e006      	b.n	800142e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
 8001420:	f000 f842 	bl	80014a8 <vTaskIncrementTick>
						--uxMissedTicks;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <xTaskResumeAll+0xf8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <xTaskResumeAll+0xf8>)
 800142c:	601a      	str	r2, [r3, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <xTaskResumeAll+0xf8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f4      	bne.n	8001420 <xTaskResumeAll+0x9c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8001436:	2301      	movs	r3, #1
 8001438:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <xTaskResumeAll+0xc4>
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <xTaskResumeAll+0xfc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <xTaskResumeAll+0xd2>
				{
					xAlreadyYielded = pdTRUE;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <xTaskResumeAll+0xfc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001452:	f7ff f9f3 	bl	800083c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001456:	f7ff fa0b 	bl	8000870 <vPortExitCritical>

	return xAlreadyYielded;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	20001fc0 	.word	0x20001fc0
 8001468:	20001fac 	.word	0x20001fac
 800146c:	20001f6c 	.word	0x20001f6c
 8001470:	20001fb8 	.word	0x20001fb8
 8001474:	20001ed8 	.word	0x20001ed8
 8001478:	20001ed4 	.word	0x20001ed4
 800147c:	20001fc4 	.word	0x20001fc4
 8001480:	20001fc8 	.word	0x20001fc8

08001484 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800148a:	f7ff f9e3 	bl	8000854 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <xTaskGetTickCount+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001494:	f7ff f9ec 	bl	8000870 <vPortExitCritical>

	return xTicks;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20001fb0 	.word	0x20001fb0

080014a8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <vTaskIncrementTick+0x128>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d000      	beq.n	80014b8 <vTaskIncrementTick+0x10>
 80014b6:	e079      	b.n	80015ac <vTaskIncrementTick+0x104>
	{
		++xTickCount;
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014c0:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d128      	bne.n	800151c <vTaskIncrementTick+0x74>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <vTaskIncrementTick+0x30>
 80014d4:	b672      	cpsid	i
 80014d6:	e7fe      	b.n	80014d6 <vTaskIncrementTick+0x2e>
			
			pxTemp = pxDelayedTaskList;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <vTaskIncrementTick+0x134>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014e4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <vTaskIncrementTick+0x134>)
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <vTaskIncrementTick+0x138>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <vTaskIncrementTick+0x138>)
 80014f4:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d104      	bne.n	800150a <vTaskIncrementTick+0x62>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001502:	2201      	movs	r2, #1
 8001504:	4252      	negs	r2, r2
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e008      	b.n	800151c <vTaskIncrementTick+0x74>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <vTaskIncrementTick+0x130>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <vTaskIncrementTick+0x13c>)
 800151a:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <vTaskIncrementTick+0x12c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d348      	bcc.n	80015ba <vTaskIncrementTick+0x112>
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <vTaskIncrementTick+0x130>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <vTaskIncrementTick+0x94>
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001534:	2201      	movs	r2, #1
 8001536:	4252      	negs	r2, r2
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e03e      	b.n	80015ba <vTaskIncrementTick+0x112>
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <vTaskIncrementTick+0x130>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <vTaskIncrementTick+0x12c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d203      	bcs.n	800155e <vTaskIncrementTick+0xb6>
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e02d      	b.n	80015ba <vTaskIncrementTick+0x112>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3304      	adds	r3, #4
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff f8e5 	bl	8000732 <vListRemove>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <vTaskIncrementTick+0xd2>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3318      	adds	r3, #24
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff f8dc 	bl	8000732 <vListRemove>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <vTaskIncrementTick+0x140>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d903      	bls.n	800158e <vTaskIncrementTick+0xe6>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <vTaskIncrementTick+0x140>)
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	0013      	movs	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	189b      	adds	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <vTaskIncrementTick+0x144>)
 800159c:	189a      	adds	r2, r3, r2
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3304      	adds	r3, #4
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f7ff f868 	bl	800067a <vListInsertEnd>
 80015aa:	e7bd      	b.n	8001528 <vTaskIncrementTick+0x80>
	}
	else
	{
		++uxMissedTicks;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015b4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80015b6:	f004 fd45 	bl	8006044 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <vTaskIncrementTick+0x11e>
		{
			vApplicationTickHook();
 80015c2:	f004 fd3f 	bl	8006044 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20001fc0 	.word	0x20001fc0
 80015d4:	20001fb0 	.word	0x20001fb0
 80015d8:	20001f64 	.word	0x20001f64
 80015dc:	20001f68 	.word	0x20001f68
 80015e0:	20001fcc 	.word	0x20001fcc
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20001fb8 	.word	0x20001fb8
 80015ec:	20001ed8 	.word	0x20001ed8
 80015f0:	20001fc4 	.word	0x20001fc4

080015f4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <vTaskSwitchContext+0xd0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <vTaskSwitchContext+0xd4>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 8001608:	e057      	b.n	80016ba <vTaskSwitchContext+0xc6>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <vTaskSwitchContext+0xd8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	429a      	cmp	r2, r3
 8001618:	d808      	bhi.n	800162c <vTaskSwitchContext+0x38>
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <vTaskSwitchContext+0xd8>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3334      	adds	r3, #52	; 0x34
 8001624:	0019      	movs	r1, r3
 8001626:	0010      	movs	r0, r2
 8001628:	f004 fd49 	bl	80060be <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <vTaskSwitchContext+0xd8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <vTaskSwitchContext+0xdc>)
 8001634:	2214      	movs	r2, #20
 8001636:	0018      	movs	r0, r3
 8001638:	f006 f93c 	bl	80078b4 <memcmp>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d014      	beq.n	800166a <vTaskSwitchContext+0x76>
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3334      	adds	r3, #52	; 0x34
 800164a:	0019      	movs	r1, r3
 800164c:	0010      	movs	r0, r2
 800164e:	f004 fd36 	bl	80060be <vApplicationStackOverflowHook>
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001652:	e00a      	b.n	800166a <vTaskSwitchContext+0x76>
			configASSERT( uxTopReadyPriority );
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <vTaskSwitchContext+0x6c>
 800165c:	b672      	cpsid	i
 800165e:	e7fe      	b.n	800165e <vTaskSwitchContext+0x6a>
			--uxTopReadyPriority;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001668:	601a      	str	r2, [r3, #0]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <vTaskSwitchContext+0xe0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	491a      	ldr	r1, [pc, #104]	; (80016d8 <vTaskSwitchContext+0xe4>)
 8001670:	0013      	movs	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	189b      	adds	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	585b      	ldr	r3, [r3, r1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ea      	beq.n	8001654 <vTaskSwitchContext+0x60>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	0013      	movs	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <vTaskSwitchContext+0xe4>)
 800168c:	189b      	adds	r3, r3, r2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3308      	adds	r3, #8
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d104      	bne.n	80016b0 <vTaskSwitchContext+0xbc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <vTaskSwitchContext+0xd8>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20001fc0 	.word	0x20001fc0
 80016c8:	20001fc8 	.word	0x20001fc8
 80016cc:	20001ed4 	.word	0x20001ed4
 80016d0:	08009e98 	.word	0x08009e98
 80016d4:	20001fb8 	.word	0x20001fb8
 80016d8:	20001ed8 	.word	0x20001ed8

080016dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <vTaskPlaceOnEventList+0x14>
 80016ec:	b672      	cpsid	i
 80016ee:	e7fe      	b.n	80016ee <vTaskPlaceOnEventList+0x12>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3318      	adds	r3, #24
 80016f6:	001a      	movs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe ffe2 	bl	80006c6 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3304      	adds	r3, #4
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff f812 	bl	8000732 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	d108      	bne.n	8001726 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1d1a      	adds	r2, r3, #4
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <vTaskPlaceOnEventList+0x68>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe ffab 	bl	800067a <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001724:	e008      	b.n	8001738 <vTaskPlaceOnEventList+0x5c>
			xTimeToWake = xTickCount + xTicksToWait;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <vTaskPlaceOnEventList+0x6c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 f9c4 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b004      	add	sp, #16
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20001ed4 	.word	0x20001ed4
 8001744:	20001f98 	.word	0x20001f98
 8001748:	20001fb0 	.word	0x20001fb0

0800174c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <vTaskPlaceOnEventListRestricted+0x14>
 800175c:	b672      	cpsid	i
 800175e:	e7fe      	b.n	800175e <vTaskPlaceOnEventListRestricted+0x12>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3318      	adds	r3, #24
 8001766:	001a      	movs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe ff84 	bl	800067a <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe ffda 	bl	8000732 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <vTaskPlaceOnEventListRestricted+0x50>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f998 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
	}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20001ed4 	.word	0x20001ed4
 800179c:	20001fb0 	.word	0x20001fb0

080017a0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <xTaskRemoveFromEventList+0x1a>
 80017b6:	b672      	cpsid	i
 80017b8:	e7fe      	b.n	80017b8 <xTaskRemoveFromEventList+0x18>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3318      	adds	r3, #24
 80017be:	0018      	movs	r0, r3
 80017c0:	f7fe ffb7 	bl	8000732 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <xTaskRemoveFromEventList+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11d      	bne.n	8001808 <xTaskRemoveFromEventList+0x68>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3304      	adds	r3, #4
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe ffae 	bl	8000732 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <xTaskRemoveFromEventList+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d903      	bls.n	80017ea <xTaskRemoveFromEventList+0x4a>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <xTaskRemoveFromEventList+0xa0>)
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ee:	0013      	movs	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	189b      	adds	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <xTaskRemoveFromEventList+0xa4>)
 80017f8:	189a      	adds	r2, r3, r2
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3304      	adds	r3, #4
 80017fe:	0019      	movs	r1, r3
 8001800:	0010      	movs	r0, r2
 8001802:	f7fe ff3a 	bl	800067a <vListInsertEnd>
 8001806:	e007      	b.n	8001818 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3318      	adds	r3, #24
 800180c:	001a      	movs	r2, r3
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <xTaskRemoveFromEventList+0xa8>)
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f7fe ff31 	bl	800067a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <xTaskRemoveFromEventList+0xac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001826:	2301      	movs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e001      	b.n	8001830 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20001fc0 	.word	0x20001fc0
 8001840:	20001fb8 	.word	0x20001fb8
 8001844:	20001ed8 	.word	0x20001ed8
 8001848:	20001f6c 	.word	0x20001f6c
 800184c:	20001ed4 	.word	0x20001ed4

08001850 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <vTaskSetTimeOutState+0x12>
 800185e:	b672      	cpsid	i
 8001860:	e7fe      	b.n	8001860 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <vTaskSetTimeOutState+0x2c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <vTaskSetTimeOutState+0x30>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20001fcc 	.word	0x20001fcc
 8001880:	20001fb0 	.word	0x20001fb0

08001884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <xTaskCheckForTimeOut+0x14>
 8001894:	b672      	cpsid	i
 8001896:	e7fe      	b.n	8001896 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <xTaskCheckForTimeOut+0x1e>
 800189e:	b672      	cpsid	i
 80018a0:	e7fe      	b.n	80018a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80018a2:	f7fe ffd7 	bl	8000854 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	d102      	bne.n	80018b4 <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e02a      	b.n	800190a <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <xTaskCheckForTimeOut+0x94>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d008      	beq.n	80018d2 <xTaskCheckForTimeOut+0x4e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d802      	bhi.n	80018d2 <xTaskCheckForTimeOut+0x4e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e01b      	b.n	800190a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d210      	bcs.n	8001906 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1a9a      	subs	r2, r3, r2
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ffa8 	bl	8001850 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e001      	b.n	800190a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800190a:	f7fe ffb1 	bl	8000870 <vPortExitCritical>

	return xReturn;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20001fcc 	.word	0x20001fcc
 800191c:	20001fb0 	.word	0x20001fb0

08001920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <vTaskMissedYield+0x10>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20001fc8 	.word	0x20001fc8

08001934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800193c:	f000 f886 	bl	8001a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <prvIdleTask+0x20>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d901      	bls.n	800194c <prvIdleTask+0x18>
			{
				taskYIELD();
 8001948:	f7fe ff78 	bl	800083c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800194c:	f004 fbbd 	bl	80060ca <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001950:	e7f4      	b.n	800193c <prvIdleTask+0x8>
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	20001ed8 	.word	0x20001ed8

08001958 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3334      	adds	r3, #52	; 0x34
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	220a      	movs	r2, #10
 800196e:	0018      	movs	r0, r3
 8001970:	f006 fb58 	bl	8008024 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	223d      	movs	r2, #61	; 0x3d
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b04      	cmp	r3, #4
 8001980:	d901      	bls.n	8001986 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001982:	2304      	movs	r3, #4
 8001984:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3304      	adds	r3, #4
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe fe64 	bl	8000664 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3318      	adds	r3, #24
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7fe fe5f 	bl	8000664 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2205      	movs	r2, #5
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	e00c      	b.n	80019ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	0013      	movs	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	189b      	adds	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <prvInitialiseTaskLists+0x68>)
 80019dc:	189b      	adds	r3, r3, r2
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe fe22 	bl	8000628 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d9ef      	bls.n	80019d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <prvInitialiseTaskLists+0x6c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fe18 	bl	8000628 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <prvInitialiseTaskLists+0x70>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe fe14 	bl	8000628 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <prvInitialiseTaskLists+0x74>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7fe fe10 	bl	8000628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <prvInitialiseTaskLists+0x78>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fe0c 	bl	8000628 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <prvInitialiseTaskLists+0x7c>)
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7fe fe08 	bl	8000628 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <prvInitialiseTaskLists+0x80>)
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <prvInitialiseTaskLists+0x6c>)
 8001a1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <prvInitialiseTaskLists+0x84>)
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <prvInitialiseTaskLists+0x70>)
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20001ed8 	.word	0x20001ed8
 8001a30:	20001f3c 	.word	0x20001f3c
 8001a34:	20001f50 	.word	0x20001f50
 8001a38:	20001f6c 	.word	0x20001f6c
 8001a3c:	20001f80 	.word	0x20001f80
 8001a40:	20001f98 	.word	0x20001f98
 8001a44:	20001f64 	.word	0x20001f64
 8001a48:	20001f68 	.word	0x20001f68

08001a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d027      	beq.n	8001aaa <prvCheckTasksWaitingTermination+0x5e>
		{
			vTaskSuspendAll();
 8001a5a:	f7ff fc87 	bl	800136c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	425a      	negs	r2, r3
 8001a64:	4153      	adcs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8001a6a:	f7ff fc8b 	bl	8001384 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <prvCheckTasksWaitingTermination+0x5e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001a74:	f7fe feee 	bl	8000854 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3304      	adds	r3, #4
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fe54 	bl	8000732 <vListRemove>
					--uxCurrentNumberOfTasks;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <prvCheckTasksWaitingTermination+0x70>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <prvCheckTasksWaitingTermination+0x70>)
 8001a92:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001a9e:	f7fe fee7 	bl	8000870 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f877 	bl	8001b98 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20001f94 	.word	0x20001f94
 8001ab8:	20001f80 	.word	0x20001f80
 8001abc:	20001fac 	.word	0x20001fac

08001ac0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <prvAddCurrentTaskToDelayedList+0x5c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d209      	bcs.n	8001aee <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <prvAddCurrentTaskToDelayedList+0x60>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	0010      	movs	r0, r2
 8001ae8:	f7fe fded 	bl	80006c6 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8001aec:	e010      	b.n	8001b10 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3304      	adds	r3, #4
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f7fe fde3 	bl	80006c6 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d202      	bcs.n	8001b10 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001ed4 	.word	0x20001ed4
 8001b1c:	20001fb0 	.word	0x20001fb0
 8001b20:	20001f68 	.word	0x20001f68
 8001b24:	20001f64 	.word	0x20001f64
 8001b28:	20000004 	.word	0x20000004

08001b2c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	1dbb      	adds	r3, r7, #6
 8001b38:	801a      	strh	r2, [r3, #0]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001b3a:	2044      	movs	r0, #68	; 0x44
 8001b3c:	f7fe fef4 	bl	8000928 <pvPortMalloc>
 8001b40:	0003      	movs	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d021      	beq.n	8001b8e <prvAllocateTCBAndStack+0x62>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <prvAllocateTCBAndStack+0x34>
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe fee6 	bl	8000928 <pvPortMalloc>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	e000      	b.n	8001b62 <prvAllocateTCBAndStack+0x36>
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe ff17 	bl	80009a4 <vPortFree>
			pxNewTCB = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e008      	b.n	8001b8e <prvAllocateTCBAndStack+0x62>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b80:	1dbb      	adds	r3, r7, #6
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	001a      	movs	r2, r3
 8001b88:	21a5      	movs	r1, #165	; 0xa5
 8001b8a:	f005 feab 	bl	80078e4 <memset>
		}
	}

	return pxNewTCB;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe fefd 	bl	80009a4 <vPortFree>
		vPortFree( pxTCB );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fef9 	bl	80009a4 <vPortFree>
	}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <xTaskGetCurrentTaskHandle+0x18>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001bc8:	687b      	ldr	r3, [r7, #4]
	}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	20001ed4 	.word	0x20001ed4

08001bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <xTaskGetSchedulerState+0x30>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e008      	b.n	8001bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <xTaskGetSchedulerState+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001bfe:	687b      	ldr	r3, [r7, #4]
	}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20001fbc 	.word	0x20001fbc
 8001c0c:	20001fc0 	.word	0x20001fc0

08001c10 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <vTaskPriorityInherit+0x16>
 8001c22:	b672      	cpsid	i
 8001c24:	e7fe      	b.n	8001c24 <vTaskPriorityInherit+0x14>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d23a      	bcs.n	8001caa <vTaskPriorityInherit+0x9a>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <vTaskPriorityInherit+0xa8>)
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	4299      	cmp	r1, r3
 8001c58:	d122      	bne.n	8001ca0 <vTaskPriorityInherit+0x90>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7fe fd67 	bl	8000732 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <vTaskPriorityInherit+0xac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d903      	bls.n	8001c82 <vTaskPriorityInherit+0x72>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <vTaskPriorityInherit+0xac>)
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	0013      	movs	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <vTaskPriorityInherit+0xa8>)
 8001c90:	189a      	adds	r2, r3, r2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f7fe fcee 	bl	800067a <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001c9e:	e004      	b.n	8001caa <vTaskPriorityInherit+0x9a>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20001ed4 	.word	0x20001ed4
 8001cb8:	20001ed8 	.word	0x20001ed8
 8001cbc:	20001fb8 	.word	0x20001fb8

08001cc0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d026      	beq.n	8001d2c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7fe fd25 	bl	8000732 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <vTaskPriorityDisinherit+0x74>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d903      	bls.n	8001d10 <vTaskPriorityDisinherit+0x50>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <vTaskPriorityDisinherit+0x74>)
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	0013      	movs	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	189b      	adds	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <vTaskPriorityDisinherit+0x78>)
 8001d1e:	189a      	adds	r2, r3, r2
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3304      	adds	r3, #4
 8001d24:	0019      	movs	r1, r3
 8001d26:	0010      	movs	r0, r2
 8001d28:	f7fe fca7 	bl	800067a <vListInsertEnd>
			}
		}
	}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20001fb8 	.word	0x20001fb8
 8001d38:	20001ed8 	.word	0x20001ed8

08001d3c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001d46:	f000 fa89 	bl	800225c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <xTimerCreateTimerTask+0x4c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00f      	beq.n	8001d72 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <xTimerCreateTimerTask+0x50>)
 8001d54:	480e      	ldr	r0, [pc, #56]	; (8001d90 <xTimerCreateTimerTask+0x54>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	9303      	str	r3, [sp, #12]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2303      	movs	r3, #3
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2246      	movs	r2, #70	; 0x46
 8001d6a:	f7ff f9d1 	bl	8001110 <xTaskGenericCreate>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	607b      	str	r3, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <xTimerCreateTimerTask+0x40>
 8001d78:	b672      	cpsid	i
 8001d7a:	e7fe      	b.n	8001d7a <xTimerCreateTimerTask+0x3e>
	return xReturn;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	20002004 	.word	0x20002004
 8001d8c:	0800975c 	.word	0x0800975c
 8001d90:	08001f01 	.word	0x08001f01

08001d94 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <xTimerCreate+0x22>
	{
		pxNewTimer = NULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <xTimerCreate+0x5e>
 8001db2:	b672      	cpsid	i
 8001db4:	e7fe      	b.n	8001db4 <xTimerCreate+0x20>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 8001db6:	2028      	movs	r0, #40	; 0x28
 8001db8:	f7fe fdb6 	bl	8000928 <pvPortMalloc>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]
		if( pxNewTimer != NULL )
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d015      	beq.n	8001df2 <xTimerCreate+0x5e>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8001dc6:	f000 fa49 	bl	800225c <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3304      	adds	r3, #4
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7fe fc39 	bl	8000664 <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
 8001df2:	697b      	ldr	r3, [r7, #20]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b006      	add	sp, #24
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <xTimerGenericCommand+0x8c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d033      	beq.n	8001e7e <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001e16:	2310      	movs	r3, #16
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	601a      	str	r2, [r3, #0]
		xMessage.xMessageValue = xOptionalValue;
 8001e1e:	2310      	movs	r3, #16
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001e26:	2310      	movs	r3, #16
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	609a      	str	r2, [r3, #8]

		if( pxHigherPriorityTaskWoken == NULL )
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d11a      	bne.n	8001e6a <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001e34:	f7ff fed0 	bl	8001bd8 <xTaskGetSchedulerState>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10a      	bne.n	8001e54 <xTimerGenericCommand+0x58>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <xTimerGenericCommand+0x8c>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e44:	2310      	movs	r3, #16
 8001e46:	18f9      	adds	r1, r7, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f7fe fe97 	bl	8000b7c <xQueueGenericSend>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e014      	b.n	8001e7e <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <xTimerGenericCommand+0x8c>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	2310      	movs	r3, #16
 8001e5a:	18f9      	adds	r1, r7, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f7fe fe8c 	bl	8000b7c <xQueueGenericSend>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	e009      	b.n	8001e7e <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <xTimerGenericCommand+0x8c>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	2310      	movs	r3, #16
 8001e72:	18f9      	adds	r1, r7, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	f7fe ff17 	bl	8000ca8 <xQueueGenericSendFromISR>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	61fb      	str	r3, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b008      	add	sp, #32
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20002004 	.word	0x20002004

08001e8c <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <prvProcessExpiredTimer+0x70>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fc44 	bl	8000732 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d11a      	bne.n	8001ee8 <prvProcessExpiredTimer+0x5c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	18d1      	adds	r1, r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8ae 	bl	8002020 <prvInsertTimerInActiveList>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10e      	bne.n	8001ee8 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f7ff ff91 	bl	8001dfc <xTimerGenericCommand>
 8001eda:	0003      	movs	r3, r0
 8001edc:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <prvProcessExpiredTimer+0x5c>
 8001ee4:	b672      	cpsid	i
 8001ee6:	e7fe      	b.n	8001ee6 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	0010      	movs	r0, r2
 8001ef0:	4798      	blx	r3
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20001ffc 	.word	0x20001ffc

08001f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f08:	2308      	movs	r3, #8
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f843 	bl	8001f98 <prvGetNextExpireTime>
 8001f12:	0003      	movs	r3, r0
 8001f14:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f000 f803 	bl	8001f28 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8001f22:	f000 f8bf 	bl	80020a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f26:	e7ef      	b.n	8001f08 <prvTimerTask+0x8>

08001f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001f32:	f7ff fa1b 	bl	800136c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f36:	2308      	movs	r3, #8
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f84c 	bl	8001fd8 <prvSampleTimeNow>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11e      	bne.n	8001f88 <prvProcessTimerOrBlockTask+0x60>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <prvProcessTimerOrBlockTask+0x42>
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d808      	bhi.n	8001f6a <prvProcessTimerOrBlockTask+0x42>
			{
				xTaskResumeAll();
 8001f58:	f7ff fa14 	bl	8001384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff ff92 	bl	8001e8c <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8001f68:	e010      	b.n	8001f8c <prvProcessTimerOrBlockTask+0x64>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <prvProcessTimerOrBlockTask+0x6c>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	0019      	movs	r1, r3
 8001f76:	f7ff f8a1 	bl	80010bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001f7a:	f7ff fa03 	bl	8001384 <xTaskResumeAll>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d104      	bne.n	8001f8c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 8001f82:	f7fe fc5b 	bl	800083c <vPortYieldFromISR>
}
 8001f86:	e001      	b.n	8001f8c <prvProcessTimerOrBlockTask+0x64>
			xTaskResumeAll();
 8001f88:	f7ff f9fc 	bl	8001384 <xTaskResumeAll>
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20002004 	.word	0x20002004

08001f98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <prvGetNextExpireTime+0x3c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	425a      	negs	r2, r3
 8001fa8:	4153      	adcs	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	001a      	movs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d105      	bne.n	8001fc6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <prvGetNextExpireTime+0x3c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e001      	b.n	8001fca <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b004      	add	sp, #16
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20001ffc 	.word	0x20001ffc

08001fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8001fe0:	f7ff fa50 	bl	8001484 <xTaskGetTickCount>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <prvSampleTimeNow+0x44>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <prvSampleTimeNow+0x2c>
	{
		prvSwitchTimerLists( xLastTime );
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <prvSampleTimeNow+0x44>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f8d4 	bl	80021a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e002      	b.n	800200a <prvSampleTimeNow+0x32>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <prvSampleTimeNow+0x44>)
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b004      	add	sp, #16
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	20002008 	.word	0x20002008

08002020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d812      	bhi.n	800206c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	429a      	cmp	r2, r3
 8002052:	d302      	bcc.n	800205a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e01b      	b.n	8002092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <prvInsertTimerInActiveList+0x7c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	0019      	movs	r1, r3
 8002064:	0010      	movs	r0, r2
 8002066:	f7fe fb2e 	bl	80006c6 <vListInsert>
 800206a:	e012      	b.n	8002092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d206      	bcs.n	8002082 <prvInsertTimerInActiveList+0x62>
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d302      	bcc.n	8002082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800207c:	2301      	movs	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e007      	b.n	8002092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <prvInsertTimerInActiveList+0x80>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3304      	adds	r3, #4
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7fe fb1a 	bl	80006c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002092:	697b      	ldr	r3, [r7, #20]
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b006      	add	sp, #24
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20002000 	.word	0x20002000
 80020a0:	20001ffc 	.word	0x20001ffc

080020a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff93 	bl	8001fd8 <prvSampleTimeNow>
 80020b2:	0003      	movs	r3, r0
 80020b4:	61fb      	str	r3, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80020b6:	e065      	b.n	8002184 <prvProcessReceivedCommands+0xe0>
	{
		pxTimer = xMessage.pxTimer;
 80020b8:	2308      	movs	r3, #8
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <prvProcessReceivedCommands+0x34>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <prvProcessReceivedCommands+0x34>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	3304      	adds	r3, #4
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fb2d 	bl	8000732 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 80020d8:	2308      	movs	r3, #8
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d050      	beq.n	8002184 <prvProcessReceivedCommands+0xe0>
 80020e2:	dc02      	bgt.n	80020ea <prvProcessReceivedCommands+0x46>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <prvProcessReceivedCommands+0x50>
 80020e8:	e04b      	b.n	8002182 <prvProcessReceivedCommands+0xde>
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d02f      	beq.n	800214e <prvProcessReceivedCommands+0xaa>
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d042      	beq.n	8002178 <prvProcessReceivedCommands+0xd4>
 80020f2:	e046      	b.n	8002182 <prvProcessReceivedCommands+0xde>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80020f4:	2308      	movs	r3, #8
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	18d1      	adds	r1, r2, r3
 8002100:	2308      	movs	r3, #8
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	69b8      	ldr	r0, [r7, #24]
 800210a:	f7ff ff89 	bl	8002020 <prvInsertTimerInActiveList>
 800210e:	0003      	movs	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d137      	bne.n	8002184 <prvProcessReceivedCommands+0xe0>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	0010      	movs	r0, r2
 800211c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d12e      	bne.n	8002184 <prvProcessReceivedCommands+0xe0>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002126:	2308      	movs	r3, #8
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	18d2      	adds	r2, r2, r3
 8002132:	69b8      	ldr	r0, [r7, #24]
 8002134:	2300      	movs	r3, #0
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	2100      	movs	r1, #0
 800213c:	f7ff fe5e 	bl	8001dfc <xTimerGenericCommand>
 8002140:	0003      	movs	r3, r0
 8002142:	617b      	str	r3, [r7, #20]
						configASSERT( xResult );
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11c      	bne.n	8002184 <prvProcessReceivedCommands+0xe0>
 800214a:	b672      	cpsid	i
 800214c:	e7fe      	b.n	800214c <prvProcessReceivedCommands+0xa8>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 800214e:	2308      	movs	r3, #8
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <prvProcessReceivedCommands+0xc0>
 8002160:	b672      	cpsid	i
 8002162:	e7fe      	b.n	8002162 <prvProcessReceivedCommands+0xbe>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	18d1      	adds	r1, r2, r3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	69b8      	ldr	r0, [r7, #24]
 8002172:	f7ff ff55 	bl	8002020 <prvInsertTimerInActiveList>
				break;
 8002176:	e005      	b.n	8002184 <prvProcessReceivedCommands+0xe0>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0018      	movs	r0, r3
 800217c:	f7fe fc12 	bl	80009a4 <vPortFree>
				break;
 8002180:	e000      	b.n	8002184 <prvProcessReceivedCommands+0xe0>

			default	:			
				/* Don't expect to get here. */
				break;
 8002182:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <prvProcessReceivedCommands+0xfc>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	2308      	movs	r3, #8
 800218a:	18f9      	adds	r1, r7, r3
 800218c:	2300      	movs	r3, #0
 800218e:	2200      	movs	r2, #0
 8002190:	f7fe fdd9 	bl	8000d46 <xQueueGenericReceive>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d18f      	bne.n	80020b8 <prvProcessReceivedCommands+0x14>
		}
	}
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b008      	add	sp, #32
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20002004 	.word	0x20002004

080021a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021ac:	e03e      	b.n	800222c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <prvSwitchTimerLists+0xb0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <prvSwitchTimerLists+0xb0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	3304      	adds	r3, #4
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7fe fab3 	bl	8000732 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	0010      	movs	r0, r2
 80021d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d126      	bne.n	800222c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	18d3      	adds	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d90e      	bls.n	800220e <prvSwitchTimerLists+0x6a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <prvSwitchTimerLists+0xb0>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3304      	adds	r3, #4
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f7fe fa5d 	bl	80006c6 <vListInsert>
 800220c:	e00e      	b.n	800222c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	69b8      	ldr	r0, [r7, #24]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2300      	movs	r3, #0
 8002218:	2100      	movs	r1, #0
 800221a:	f7ff fdef 	bl	8001dfc <xTimerGenericCommand>
 800221e:	0003      	movs	r3, r0
 8002220:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <prvSwitchTimerLists+0x88>
 8002228:	b672      	cpsid	i
 800222a:	e7fe      	b.n	800222a <prvSwitchTimerLists+0x86>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <prvSwitchTimerLists+0xb0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1bb      	bne.n	80021ae <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <prvSwitchTimerLists+0xb0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <prvSwitchTimerLists+0xb4>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <prvSwitchTimerLists+0xb0>)
 8002242:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <prvSwitchTimerLists+0xb4>)
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b008      	add	sp, #32
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20001ffc 	.word	0x20001ffc
 8002258:	20002000 	.word	0x20002000

0800225c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002260:	f7fe faf8 	bl	8000854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <prvCheckForValidListAndQueue+0x48>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d115      	bne.n	8002298 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <prvCheckForValidListAndQueue+0x4c>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7fe f9da 	bl	8000628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <prvCheckForValidListAndQueue+0x50>)
 8002276:	0018      	movs	r0, r3
 8002278:	f7fe f9d6 	bl	8000628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <prvCheckForValidListAndQueue+0x54>)
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <prvCheckForValidListAndQueue+0x4c>)
 8002280:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <prvCheckForValidListAndQueue+0x58>)
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <prvCheckForValidListAndQueue+0x50>)
 8002286:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002288:	2200      	movs	r2, #0
 800228a:	210c      	movs	r1, #12
 800228c:	2005      	movs	r0, #5
 800228e:	f7fe fbf0 	bl	8000a72 <xQueueGenericCreate>
 8002292:	0002      	movs	r2, r0
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <prvCheckForValidListAndQueue+0x48>)
 8002296:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002298:	f7fe faea 	bl	8000870 <vPortExitCritical>
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	20002004 	.word	0x20002004
 80022a8:	20001fd4 	.word	0x20001fd4
 80022ac:	20001fe8 	.word	0x20001fe8
 80022b0:	20001ffc 	.word	0x20001ffc
 80022b4:	20002000 	.word	0x20002000

080022b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e07c      	b.n	80023ce <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80022d4:	2201      	movs	r2, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d16b      	bne.n	80023c8 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d003      	beq.n	8002300 <GPIO_Init+0x48>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d134      	bne.n	800236a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	0052      	lsls	r2, r2, #1
 8002308:	2103      	movs	r1, #3
 800230a:	4091      	lsls	r1, r2
 800230c:	000a      	movs	r2, r1
 800230e:	43d2      	mvns	r2, r2
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	795b      	ldrb	r3, [r3, #5]
 800231e:	0019      	movs	r1, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4099      	lsls	r1, r3
 8002326:	000b      	movs	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	b29b      	uxth	r3, r3
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	b292      	uxth	r2, r2
 8002338:	0011      	movs	r1, r2
 800233a:	2201      	movs	r2, #1
 800233c:	408a      	lsls	r2, r1
 800233e:	b292      	uxth	r2, r2
 8002340:	43d2      	mvns	r2, r2
 8002342:	b292      	uxth	r2, r2
 8002344:	4013      	ands	r3, r2
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	889b      	ldrh	r3, [r3, #4]
 8002350:	b29a      	uxth	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	799b      	ldrb	r3, [r3, #6]
 8002356:	0019      	movs	r1, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4099      	lsls	r1, r3
 800235e:	000b      	movs	r3, r1
 8002360:	b29b      	uxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	2103      	movs	r1, #3
 8002374:	4091      	lsls	r1, r2
 8002376:	000a      	movs	r2, r1
 8002378:	43d2      	mvns	r2, r2
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	0019      	movs	r1, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4099      	lsls	r1, r3
 8002390:	000b      	movs	r3, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	b292      	uxth	r2, r2
 80023a0:	0052      	lsls	r2, r2, #1
 80023a2:	2103      	movs	r1, #3
 80023a4:	4091      	lsls	r1, r2
 80023a6:	000a      	movs	r2, r1
 80023a8:	43d2      	mvns	r2, r2
 80023aa:	401a      	ands	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	79db      	ldrb	r3, [r3, #7]
 80023b8:	0019      	movs	r1, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4099      	lsls	r1, r3
 80023c0:	000b      	movs	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d800      	bhi.n	80023d6 <GPIO_Init+0x11e>
 80023d4:	e77e      	b.n	80022d4 <GPIO_Init+0x1c>
    }
  }
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b006      	add	sp, #24
 80023dc:	bd80      	pop	{r7, pc}

080023de <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	0008      	movs	r0, r1
 80023e8:	0011      	movs	r1, r2
 80023ea:	1cbb      	adds	r3, r7, #2
 80023ec:	1c02      	adds	r2, r0, #0
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	1c7b      	adds	r3, r7, #1
 80023f2:	1c0a      	adds	r2, r1, #0
 80023f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80023f6:	1c7b      	adds	r3, r7, #1
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	1cbb      	adds	r3, r7, #2
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002406:	e003      	b.n	8002410 <GPIO_WriteBit+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1cba      	adds	r2, r7, #2
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}

08002418 <GPIO_Write>:
  * @note   GPIOD is not available for STM32F031.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	000a      	movs	r2, r1
 8002422:	1cbb      	adds	r3, r7, #2
 8002424:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1cba      	adds	r2, r7, #2
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	829a      	strh	r2, [r3, #20]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	0008      	movs	r0, r1
 8002440:	0011      	movs	r1, r2
 8002442:	1cbb      	adds	r3, r7, #2
 8002444:	1c02      	adds	r2, r0, #0
 8002446:	801a      	strh	r2, [r3, #0]
 8002448:	1c7b      	adds	r3, r7, #1
 800244a:	1c0a      	adds	r2, r1, #0
 800244c:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002456:	1c7b      	adds	r3, r7, #1
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	1cbb      	adds	r3, r7, #2
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	2107      	movs	r1, #7
 8002460:	400b      	ands	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800246a:	1cbb      	adds	r3, r7, #2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	b29b      	uxth	r3, r3
 8002472:	0018      	movs	r0, r3
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	b29b      	uxth	r3, r3
 800247c:	001a      	movs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	58d3      	ldr	r3, [r2, r3]
 8002486:	1cba      	adds	r2, r7, #2
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	2107      	movs	r1, #7
 800248c:	400a      	ands	r2, r1
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	210f      	movs	r1, #15
 8002492:	4091      	lsls	r1, r2
 8002494:	000a      	movs	r2, r1
 8002496:	43d2      	mvns	r2, r2
 8002498:	401a      	ands	r2, r3
 800249a:	0011      	movs	r1, r2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0002      	movs	r2, r0
 80024a0:	3208      	adds	r2, #8
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80024a6:	1cbb      	adds	r3, r7, #2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	001a      	movs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	58d2      	ldr	r2, [r2, r3]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80024be:	1cbb      	adds	r3, r7, #2
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	001a      	movs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	50d1      	str	r1, [r2, r3]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	789b      	ldrb	r3, [r3, #2]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d039      	beq.n	8002564 <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <NVIC_Init+0xa8>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	33c0      	adds	r3, #192	; 0xc0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	589b      	ldr	r3, [r3, r2]
 8002500:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	001a      	movs	r2, r3
 8002508:	2303      	movs	r3, #3
 800250a:	4013      	ands	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	409a      	lsls	r2, r3
 8002512:	0013      	movs	r3, r2
 8002514:	43da      	mvns	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	22ff      	movs	r2, #255	; 0xff
 8002524:	401a      	ands	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	0019      	movs	r1, r3
 800252c:	2303      	movs	r3, #3
 800252e:	400b      	ands	r3, r1
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 800253c:	4911      	ldr	r1, [pc, #68]	; (8002584 <NVIC_Init+0xa8>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	b2db      	uxtb	r3, r3
 8002546:	33c0      	adds	r3, #192	; 0xc0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <NVIC_Init+0xa8>)
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	0011      	movs	r1, r2
 8002556:	221f      	movs	r2, #31
 8002558:	400a      	ands	r2, r1
 800255a:	2101      	movs	r1, #1
 800255c:	4091      	lsls	r1, r2
 800255e:	000a      	movs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002562:	e00a      	b.n	800257a <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <NVIC_Init+0xa8>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	001a      	movs	r2, r3
 800256c:	231f      	movs	r3, #31
 800256e:	4013      	ands	r3, r2
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	508b      	str	r3, [r1, r2]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	e000e100 	.word	0xe000e100

08002588 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80025a8:	4ba8      	ldr	r3, [pc, #672]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	220c      	movs	r2, #12
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d00c      	beq.n	80025d2 <RCC_GetClocksFreq+0x4a>
 80025b8:	d802      	bhi.n	80025c0 <RCC_GetClocksFreq+0x38>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <RCC_GetClocksFreq+0x42>
 80025be:	e03b      	b.n	8002638 <RCC_GetClocksFreq+0xb0>
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d00a      	beq.n	80025da <RCC_GetClocksFreq+0x52>
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d033      	beq.n	8002630 <RCC_GetClocksFreq+0xa8>
 80025c8:	e036      	b.n	8002638 <RCC_GetClocksFreq+0xb0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4aa0      	ldr	r2, [pc, #640]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 80025ce:	601a      	str	r2, [r3, #0]
      break;
 80025d0:	e036      	b.n	8002640 <RCC_GetClocksFreq+0xb8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a9f      	ldr	r2, [pc, #636]	; (8002854 <RCC_GetClocksFreq+0x2cc>)
 80025d6:	601a      	str	r2, [r3, #0]
      break;
 80025d8:	e032      	b.n	8002640 <RCC_GetClocksFreq+0xb8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80025da:	4b9c      	ldr	r3, [pc, #624]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23f0      	movs	r3, #240	; 0xf0
 80025e0:	039b      	lsls	r3, r3, #14
 80025e2:	4013      	ands	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80025e6:	4b99      	ldr	r3, [pc, #612]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	23c0      	movs	r3, #192	; 0xc0
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	3302      	adds	r3, #2
 80025f8:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <RCC_GetClocksFreq+0x82>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a95      	ldr	r2, [pc, #596]	; (8002858 <RCC_GetClocksFreq+0x2d0>)
 8002604:	4353      	muls	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e00e      	b.n	8002628 <RCC_GetClocksFreq+0xa0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800260a:	4b90      	ldr	r3, [pc, #576]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	220f      	movs	r2, #15
 8002610:	4013      	ands	r3, r2
 8002612:	3301      	adds	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	488e      	ldr	r0, [pc, #568]	; (8002854 <RCC_GetClocksFreq+0x2cc>)
 800261a:	f7fd fd85 	bl	8000128 <__udivsi3>
 800261e:	0003      	movs	r3, r0
 8002620:	001a      	movs	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4353      	muls	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	601a      	str	r2, [r3, #0]
      break;
 800262e:	e007      	b.n	8002640 <RCC_GetClocksFreq+0xb8>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a8a      	ldr	r2, [pc, #552]	; (800285c <RCC_GetClocksFreq+0x2d4>)
 8002634:	601a      	str	r2, [r3, #0]
      break;
 8002636:	e003      	b.n	8002640 <RCC_GetClocksFreq+0xb8>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a85      	ldr	r2, [pc, #532]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 800263c:	601a      	str	r2, [r3, #0]
      break;
 800263e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002640:	4b82      	ldr	r3, [pc, #520]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	22f0      	movs	r2, #240	; 0xf0
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 8002650:	4a83      	ldr	r2, [pc, #524]	; (8002860 <RCC_GetClocksFreq+0x2d8>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	40da      	lsrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8002668:	4b78      	ldr	r3, [pc, #480]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23e0      	movs	r3, #224	; 0xe0
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800267a:	4a79      	ldr	r2, [pc, #484]	; (8002860 <RCC_GetClocksFreq+0x2d8>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	18d3      	adds	r3, r2, r3
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	40da      	lsrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	401a      	ands	r2, r3
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d003      	beq.n	80026ac <RCC_GetClocksFreq+0x124>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a6f      	ldr	r2, [pc, #444]	; (8002864 <RCC_GetClocksFreq+0x2dc>)
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	e013      	b.n	80026d4 <RCC_GetClocksFreq+0x14c>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	01db      	lsls	r3, r3, #7
 80026b4:	401a      	ands	r2, r3
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	01db      	lsls	r3, r3, #7
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d005      	beq.n	80026ca <RCC_GetClocksFreq+0x142>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	085a      	lsrs	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e004      	b.n	80026d4 <RCC_GetClocksFreq+0x14c>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	089a      	lsrs	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80026d4:	4b5d      	ldr	r3, [pc, #372]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	4013      	ands	r3, r2
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d003      	beq.n	80026e8 <RCC_GetClocksFreq+0x160>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <RCC_GetClocksFreq+0x2e0>)
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	e003      	b.n	80026f0 <RCC_GetClocksFreq+0x168>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	0212      	lsls	r2, r2, #8
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2210      	movs	r2, #16
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d003      	beq.n	8002704 <RCC_GetClocksFreq+0x17c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a54      	ldr	r2, [pc, #336]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 8002700:	615a      	str	r2, [r3, #20]
 8002702:	e003      	b.n	800270c <RCC_GetClocksFreq+0x184>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	2203      	movs	r2, #3
 8002712:	4013      	ands	r3, r2
 8002714:	d104      	bne.n	8002720 <RCC_GetClocksFreq+0x198>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	e01e      	b.n	800275e <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2203      	movs	r2, #3
 8002726:	4013      	ands	r3, r2
 8002728:	2b01      	cmp	r3, #1
 800272a:	d104      	bne.n	8002736 <RCC_GetClocksFreq+0x1ae>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	e013      	b.n	800275e <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2203      	movs	r2, #3
 800273c:	4013      	ands	r3, r2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d104      	bne.n	800274c <RCC_GetClocksFreq+0x1c4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0212      	lsls	r2, r2, #8
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	e008      	b.n	800275e <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800274c:	4b3f      	ldr	r3, [pc, #252]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	2b03      	cmp	r3, #3
 8002756:	d102      	bne.n	800275e <RCC_GetClocksFreq+0x1d6>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3d      	ldr	r2, [pc, #244]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 800275c:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002762:	23c0      	movs	r3, #192	; 0xc0
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	4013      	ands	r3, r2
 8002768:	d104      	bne.n	8002774 <RCC_GetClocksFreq+0x1ec>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	61da      	str	r2, [r3, #28]
 8002772:	e027      	b.n	80027c4 <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	23c0      	movs	r3, #192	; 0xc0
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	401a      	ands	r2, r3
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	429a      	cmp	r2, r3
 8002784:	d104      	bne.n	8002790 <RCC_GetClocksFreq+0x208>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	61da      	str	r2, [r3, #28]
 800278e:	e019      	b.n	80027c4 <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8002790:	4b2e      	ldr	r3, [pc, #184]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	23c0      	movs	r3, #192	; 0xc0
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	401a      	ands	r2, r3
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	429a      	cmp	r2, r3
 80027a0:	d104      	bne.n	80027ac <RCC_GetClocksFreq+0x224>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	0212      	lsls	r2, r2, #8
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	e00b      	b.n	80027c4 <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80027ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	401a      	ands	r2, r3
 80027b6:	23c0      	movs	r3, #192	; 0xc0
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d102      	bne.n	80027c4 <RCC_GetClocksFreq+0x23c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a23      	ldr	r2, [pc, #140]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 80027c2:	61da      	str	r2, [r3, #28]
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	4013      	ands	r3, r2
 80027ce:	d104      	bne.n	80027da <RCC_GetClocksFreq+0x252>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	621a      	str	r2, [r3, #32]
 80027d8:	e027      	b.n	800282a <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80027dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027de:	23c0      	movs	r3, #192	; 0xc0
 80027e0:	031b      	lsls	r3, r3, #12
 80027e2:	401a      	ands	r2, r3
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	02db      	lsls	r3, r3, #11
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d104      	bne.n	80027f6 <RCC_GetClocksFreq+0x26e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	621a      	str	r2, [r3, #32]
 80027f4:	e019      	b.n	800282a <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 80027f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	031b      	lsls	r3, r3, #12
 80027fe:	401a      	ands	r2, r3
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	031b      	lsls	r3, r3, #12
 8002804:	429a      	cmp	r2, r3
 8002806:	d104      	bne.n	8002812 <RCC_GetClocksFreq+0x28a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0212      	lsls	r2, r2, #8
 800280e:	621a      	str	r2, [r3, #32]
 8002810:	e00b      	b.n	800282a <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 8002814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	401a      	ands	r2, r3
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	031b      	lsls	r3, r3, #12
 8002820:	429a      	cmp	r2, r3
 8002822:	d102      	bne.n	800282a <RCC_GetClocksFreq+0x2a2>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <RCC_GetClocksFreq+0x2c8>)
 8002828:	621a      	str	r2, [r3, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <RCC_GetClocksFreq+0x2c4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	4013      	ands	r3, r2
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d003      	beq.n	800283e <RCC_GetClocksFreq+0x2b6>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <RCC_GetClocksFreq+0x2d4>)
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 800283c:	e002      	b.n	8002844 <RCC_GetClocksFreq+0x2bc>
    RCC_Clocks->USBCLK_Frequency = pllclk;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b008      	add	sp, #32
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	00b71b00 	.word	0x00b71b00
 8002858:	003d0900 	.word	0x003d0900
 800285c:	02dc6c00 	.word	0x02dc6c00
 8002860:	20000008 	.word	0x20000008
 8002864:	00d59f80 	.word	0x00d59f80
 8002868:	00008012 	.word	0x00008012

0800286c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	000a      	movs	r2, r1
 8002876:	1cfb      	adds	r3, r7, #3
 8002878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800287a:	1cfb      	adds	r3, r7, #3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <RCC_AHBPeriphClockCmd+0x3c>)
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <RCC_AHBPeriphClockCmd+0x3c>)
 8002886:	6951      	ldr	r1, [r2, #20]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	430a      	orrs	r2, r1
 800288c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800288e:	e006      	b.n	800289e <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <RCC_AHBPeriphClockCmd+0x3c>)
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <RCC_AHBPeriphClockCmd+0x3c>)
 8002894:	6952      	ldr	r2, [r2, #20]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	43c9      	mvns	r1, r1
 800289a:	400a      	ands	r2, r1
 800289c:	615a      	str	r2, [r3, #20]
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000

080028ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	000a      	movs	r2, r1
 80028b6:	1cfb      	adds	r3, r7, #3
 80028b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028ba:	1cfb      	adds	r3, r7, #3
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80028c6:	6991      	ldr	r1, [r2, #24]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80028ce:	e006      	b.n	80028de <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80028d4:	6992      	ldr	r2, [r2, #24]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	43c9      	mvns	r1, r1
 80028da:	400a      	ands	r2, r1
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000

080028ec <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	000a      	movs	r2, r1
 80028f6:	1cfb      	adds	r3, r7, #3
 80028f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028fa:	1cfb      	adds	r3, r7, #3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <RCC_APB1PeriphClockCmd+0x3c>)
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <RCC_APB1PeriphClockCmd+0x3c>)
 8002906:	69d1      	ldr	r1, [r2, #28]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	430a      	orrs	r2, r1
 800290c:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800290e:	e006      	b.n	800291e <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <RCC_APB1PeriphClockCmd+0x3c>)
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <RCC_APB1PeriphClockCmd+0x3c>)
 8002914:	69d2      	ldr	r2, [r2, #28]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	43c9      	mvns	r1, r1
 800291a:	400a      	ands	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000

0800292c <SPI_SendData8>:
  * @note   SPI2 is not available for STM32F031 devices.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	000a      	movs	r2, r1
 8002936:	1cfb      	adds	r3, r7, #3
 8002938:	701a      	strb	r2, [r3, #0]
  uint32_t spixbase = 0x00;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	330c      	adds	r3, #12
 8002946:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1cfa      	adds	r2, r7, #3
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	701a      	strb	r2, [r3, #0]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}

08002958 <SPI_ReceiveData8>:
  * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
  * @note   SPI2 is not available for STM32F031 devices.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  
  spixbase = (uint32_t)SPIx; 
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	330c      	adds	r3, #12
 800296c:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}

0800297c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	; 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	2300      	movs	r3, #0
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4393      	bics	r3, r2
 800299a:	001a      	movs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	4a50      	ldr	r2, [pc, #320]	; (8002aec <USART_Init+0x170>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b4:	4313      	orrs	r3, r2
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029bc:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <USART_Init+0x174>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029da:	4313      	orrs	r3, r2
 80029dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029de:	4313      	orrs	r3, r2
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e6:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <USART_Init+0x178>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029fc:	4313      	orrs	r3, r2
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a04:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002a06:	230c      	movs	r3, #12
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff fdbc 	bl	8002588 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <USART_Init+0x17c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d104      	bne.n	8002a22 <USART_Init+0xa6>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a20:	e015      	b.n	8002a4e <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <USART_Init+0x180>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d104      	bne.n	8002a34 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a32:	e00c      	b.n	8002a4e <USART_Init+0xd2>
  }
   else if (USARTx == USART3)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <USART_Init+0x184>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d104      	bne.n	8002a46 <USART_Init+0xca>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a44:	e003      	b.n	8002a4e <USART_Init+0xd2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8002a46:	230c      	movs	r3, #12
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	4013      	ands	r3, r2
 8002a58:	d014      	beq.n	8002a84 <USART_Init+0x108>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	005a      	lsls	r2, r3, #1
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0019      	movs	r1, r3
 8002a64:	0010      	movs	r0, r2
 8002a66:	f7fd fb5f 	bl	8000128 <__udivsi3>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0019      	movs	r1, r3
 8002a78:	0010      	movs	r0, r2
 8002a7a:	f7fd fbdb 	bl	8000234 <__aeabi_uidivmod>
 8002a7e:	000b      	movs	r3, r1
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	e010      	b.n	8002aa6 <USART_Init+0x12a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0019      	movs	r1, r3
 8002a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a8c:	f7fd fb4c 	bl	8000128 <__udivsi3>
 8002a90:	0003      	movs	r3, r0
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fd fbc9 	bl	8000234 <__aeabi_uidivmod>
 8002aa2:	000b      	movs	r3, r1
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	085a      	lsrs	r2, r3, #1
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d802      	bhi.n	8002ab8 <USART_Init+0x13c>
  {
    divider++;
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d00a      	beq.n	8002ada <USART_Init+0x15e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <USART_Init+0x188>)
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	819a      	strh	r2, [r3, #12]
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b010      	add	sp, #64	; 0x40
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	ffffcfff 	.word	0xffffcfff
 8002af0:	ffffe9f3 	.word	0xffffe9f3
 8002af4:	fffffcff 	.word	0xfffffcff
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40004400 	.word	0x40004400
 8002b00:	40004800 	.word	0x40004800
 8002b04:	0000fff0 	.word	0x0000fff0

08002b08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cfb      	adds	r3, r7, #3
 8002b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b16:	1cfb      	adds	r3, r7, #3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8002b2a:	e006      	b.n	8002b3a <USART_Cmd+0x32>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4393      	bics	r3, r2
 8002b34:	001a      	movs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	1cbb      	adds	r3, r7, #2
 8002b4e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8002b50:	1cbb      	adds	r3, r7, #2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	0ddb      	lsrs	r3, r3, #23
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	22ff      	movs	r2, #255	; 0xff
 8002b96:	4013      	ands	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	e005      	b.n	8002bbe <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d102      	bne.n	8002bbe <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	6811      	ldr	r1, [r2, #0]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002bd2:	e006      	b.n	8002be2 <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	6939      	ldr	r1, [r7, #16]
 8002bdc:	43c9      	mvns	r1, r1
 8002bde:	400a      	ands	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b008      	add	sp, #32
 8002be8:	bd80      	pop	{r7, pc}

08002bea <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4013      	ands	r3, r2
 8002c04:	d004      	beq.n	8002c10 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e003      	b.n	8002c18 <USART_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c18:	230f      	movs	r3, #15
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <USART_ClearFlag>:
  * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *           (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002c54:	2313      	movs	r3, #19
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002c6e:	2201      	movs	r2, #1
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e00d      	b.n	8002ca6 <USART_GetITStatus+0x68>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d105      	bne.n	8002c9c <USART_GetITStatus+0x5e>
  {
    itmask &= USARTx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e004      	b.n	8002ca6 <USART_GetITStatus+0x68>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002cac:	2201      	movs	r2, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	0013      	movs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <USART_GetITStatus+0x98>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <USART_GetITStatus+0x98>
  {
    bitstatus = SET;
 8002ccc:	2313      	movs	r3, #19
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e003      	b.n	8002cde <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8002cd6:	2313      	movs	r3, #19
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
 8002cde:	2313      	movs	r3, #19
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}

08002cec <debug_Init>:
#include <string.h>
#include "Debug.h"


void debug_Init()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	uart1_Init();		//	Debug UART
 8002cf0:	f004 f8e8 	bl	8006ec4 <uart1_Init>
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <debug_Puts>:


void debug_Puts (char const *s)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
	uart1_Puts(s);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f004 fa17 	bl	8007138 <uart1_Puts>
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <debug_PutLine>:

void debug_PutLine (char const *s)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	uart1_PutLine(s);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 fa31 	bl	8007184 <uart1_PutLine>
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <SPI1_Init>:
xSemaphoreHandle	flash_Mutex;

//---------------------------------------

void SPI1_Init()
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	GPIO_PinAFConfig (GPIOA, 5, 0);		//	Pin A5 = SPI fnc  (SCK)
 8002d30:	2390      	movs	r3, #144	; 0x90
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	2200      	movs	r2, #0
 8002d36:	2105      	movs	r1, #5
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff fb7c 	bl	8002436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig (GPIOA, 6, 0);		//	Pin A6 = SPI fnc  (MOSI)
 8002d3e:	2390      	movs	r3, #144	; 0x90
 8002d40:	05db      	lsls	r3, r3, #23
 8002d42:	2200      	movs	r2, #0
 8002d44:	2106      	movs	r1, #6
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fb75 	bl	8002436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig (GPIOA, 7, 0);		//	Pin A7 = SPI fnc  (MISO)
 8002d4c:	2390      	movs	r3, #144	; 0x90
 8002d4e:	05db      	lsls	r3, r3, #23
 8002d50:	2200      	movs	r2, #0
 8002d52:	2107      	movs	r1, #7
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fb6e 	bl	8002436 <GPIO_PinAFConfig>
//	GPIO_PinAFConfig (GPIOA,15, 0);		//	Pin A15= SPI fnc  (-CS)

//	SPI_RxFIFOThresholdConfig (SPI1, SPI_RxFIFOThreshold_HF);

	SPI1->CR1 = 0x0304;					//	Master;  SS pin in software;  MSB first;  no CRC;  CLK = 24MHz/2
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <SPI1_Init+0x54>)
 8002d5c:	22c1      	movs	r2, #193	; 0xc1
 8002d5e:	0092      	lsls	r2, r2, #2
 8002d60:	801a      	strh	r2, [r3, #0]
	SPI1->CR2 = 0x1700;					//	8-bit data
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <SPI1_Init+0x54>)
 8002d64:	22b8      	movs	r2, #184	; 0xb8
 8002d66:	0152      	lsls	r2, r2, #5
 8002d68:	809a      	strh	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;			//	Enable the SPI unit
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <SPI1_Init+0x54>)
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SPI1_Init+0x54>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	430b      	orrs	r3, r1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013000 	.word	0x40013000

08002d84 <SPI_Tx_Wait>:
	  ;
}


void SPI_Tx_Wait()				//	Polls the SPI unit for Tx FIFO Full
{								//	Returns when Tx not full - ready for another byte
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	while ((SPI1->SR & 0x1800) == 0x1800)
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <SPI_Tx_Wait+0x24>)
 8002d8c:	891b      	ldrh	r3, [r3, #8]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	001a      	movs	r2, r3
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	401a      	ands	r2, r3
 8002d98:	23c0      	movs	r3, #192	; 0xc0
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d0f4      	beq.n	8002d8a <SPI_Tx_Wait+0x6>
	  ;
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	40013000 	.word	0x40013000

08002dac <SPI_Rx_Wait>:


void SPI_Rx_Wait()				//	Polls the SPI unit for Tx FIFO Full
{								//	Returns when Tx not full - ready for another byte
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	while ((SPI1->SR & 1) == 0)
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SPI_Rx_Wait+0x1c>)
 8002db4:	891b      	ldrh	r3, [r3, #8]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	001a      	movs	r2, r3
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f8      	beq.n	8002db2 <SPI_Rx_Wait+0x6>
	  ;
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40013000 	.word	0x40013000

08002dcc <SPI_Write>:


uint8 SPI_Write (uint8 byte)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	701a      	strb	r2, [r3, #0]
	uint8  b;

	SPI_Tx_Wait();				//	Wait for Tx to be Not Full
 8002dd8:	f7ff ffd4 	bl	8002d84 <SPI_Tx_Wait>
	SPI_SendData8 (SPI1, byte);
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <SPI_Write+0x48>)
 8002de2:	0019      	movs	r1, r3
 8002de4:	0010      	movs	r0, r2
 8002de6:	f7ff fda1 	bl	800292c <SPI_SendData8>
	uS_Delay (3);
 8002dea:	2003      	movs	r0, #3
 8002dec:	f003 f97e 	bl	80060ec <uS_Delay>
	SPI_Rx_Wait();				//	Wait for Rx to have something
 8002df0:	f7ff ffdc 	bl	8002dac <SPI_Rx_Wait>
	b = SPI_ReceiveData8 (SPI1);
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fc      	adds	r4, r7, r3
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <SPI_Write+0x48>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7ff fdac 	bl	8002958 <SPI_ReceiveData8>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]
	return	b;
 8002e04:	230f      	movs	r3, #15
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b005      	add	sp, #20
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	40013000 	.word	0x40013000

08002e18 <SPI_Write_3>:


uint8 SPI_Write_3 (uint8 b1, uint8 b2, uint8 b3)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	0004      	movs	r4, r0
 8002e20:	0008      	movs	r0, r1
 8002e22:	0011      	movs	r1, r2
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	1c22      	adds	r2, r4, #0
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	1dbb      	adds	r3, r7, #6
 8002e2c:	1c02      	adds	r2, r0, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	1d7b      	adds	r3, r7, #5
 8002e32:	1c0a      	adds	r2, r1, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	uint8  b;

	while (SPI1->SR & 0x1800)	//	Wait for Tx FIFO to be Empty
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e3a:	891b      	ldrh	r3, [r3, #8]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	001a      	movs	r2, r3
 8002e40:	23c0      	movs	r3, #192	; 0xc0
 8002e42:	015b      	lsls	r3, r3, #5
 8002e44:	4013      	ands	r3, r2
 8002e46:	d1f7      	bne.n	8002e38 <SPI_Write_3+0x20>
	  ;
	SPI_SendData8 (SPI1, b1);
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f7ff fd6b 	bl	800292c <SPI_SendData8>
	SPI_SendData8 (SPI1, b2);
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f7ff fd64 	bl	800292c <SPI_SendData8>
	SPI_SendData8 (SPI1, b3);
 8002e64:	1d7b      	adds	r3, r7, #5
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	f7ff fd5d 	bl	800292c <SPI_SendData8>

	while ((SPI1->SR & 2)==0)	//	wait here until Tx Empty
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e76:	891b      	ldrh	r3, [r3, #8]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d0f8      	beq.n	8002e74 <SPI_Write_3+0x5c>
		;
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002e82:	e007      	b.n	8002e94 <SPI_Write_3+0x7c>
		b = SPI_ReceiveData8 (SPI1);
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fc      	adds	r4, r7, r3
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff fd64 	bl	8002958 <SPI_ReceiveData8>
 8002e90:	0003      	movs	r3, r0
 8002e92:	7023      	strb	r3, [r4, #0]
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <SPI_Write_3+0x98>)
 8002e96:	891b      	ldrh	r3, [r3, #8]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f0      	bne.n	8002e84 <SPI_Write_3+0x6c>
	return	b;					//	Return final byte
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b005      	add	sp, #20
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	40013000 	.word	0x40013000

08002eb4 <SPI_Write_4>:


uint8 SPI_Write_4 (uint8 b1, uint8 b2, uint8 b3, uint8 b4)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0005      	movs	r5, r0
 8002ebc:	000c      	movs	r4, r1
 8002ebe:	0010      	movs	r0, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	1c2a      	adds	r2, r5, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	1c22      	adds	r2, r4, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	1d7b      	adds	r3, r7, #5
 8002ed0:	1c02      	adds	r2, r0, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	1c0a      	adds	r2, r1, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	uint8  b=0;
 8002eda:	230f      	movs	r3, #15
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]

	while (SPI1->SR & 0x1800)	//	Wait for Tx FIFO to be Empty
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <SPI_Write_4+0xc0>)
 8002ee6:	891b      	ldrh	r3, [r3, #8]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	001a      	movs	r2, r3
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	015b      	lsls	r3, r3, #5
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d1f7      	bne.n	8002ee4 <SPI_Write_4+0x30>
	  ;
	SPI_SendData8 (SPI1, b1);
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <SPI_Write_4+0xc0>)
 8002efa:	0019      	movs	r1, r3
 8002efc:	0010      	movs	r0, r2
 8002efe:	f7ff fd15 	bl	800292c <SPI_SendData8>
	SPI_SendData8 (SPI1, b2);
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f08:	0019      	movs	r1, r3
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	f7ff fd0e 	bl	800292c <SPI_SendData8>
	SPI_SendData8 (SPI1, b3);
 8002f10:	1d7b      	adds	r3, r7, #5
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f7ff fd07 	bl	800292c <SPI_SendData8>
	SPI_SendData8 (SPI1, b4);
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f24:	0019      	movs	r1, r3
 8002f26:	0010      	movs	r0, r2
 8002f28:	f7ff fd00 	bl	800292c <SPI_SendData8>

	while ((SPI1->SR & 2)==0)	//	wait here until Tx Empty
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f30:	891b      	ldrh	r3, [r3, #8]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	001a      	movs	r2, r3
 8002f36:	2302      	movs	r3, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d0f8      	beq.n	8002f2e <SPI_Write_4+0x7a>
		;
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002f3c:	e00c      	b.n	8002f58 <SPI_Write_4+0xa4>
		b += SPI_ReceiveData8 (SPI1);
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fd09 	bl	8002958 <SPI_ReceiveData8>
 8002f46:	0003      	movs	r3, r0
 8002f48:	0019      	movs	r1, r3
 8002f4a:	230f      	movs	r3, #15
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	220f      	movs	r2, #15
 8002f50:	18ba      	adds	r2, r7, r2
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	188a      	adds	r2, r1, r2
 8002f56:	701a      	strb	r2, [r3, #0]
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <SPI_Write_4+0xc0>)
 8002f5a:	891b      	ldrh	r3, [r3, #8]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	001a      	movs	r2, r3
 8002f60:	2301      	movs	r3, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d1eb      	bne.n	8002f3e <SPI_Write_4+0x8a>
	return	b;					//	Return dummy byte  (avoid compiler warnings)
 8002f66:	230f      	movs	r3, #15
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bdb0      	pop	{r4, r5, r7, pc}
 8002f74:	40013000 	.word	0x40013000

08002f78 <Flash_Enable>:


void Flash_Enable()				//	Asserts the Chip Select line to the FLASH
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	GPIO_WriteBit (GPIOA, SS_pin, Bit_RESET);	//	Select the FLASH IC   (line LOW)
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	0219      	lsls	r1, r3, #8
 8002f80:	2390      	movs	r3, #144	; 0x90
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	2200      	movs	r2, #0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7ff fa29 	bl	80023de <GPIO_WriteBit>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <Flash_Disable>:


void Flash_Disable()			//	De-asserts the Chip Select line to the FLASH
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	af00      	add	r7, sp, #0
	GPIO_WriteBit (GPIOA, SS_pin, Bit_SET);		//	De-select the FLASH IC   (line HIGH)
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	0219      	lsls	r1, r3, #8
 8002f9a:	2390      	movs	r3, #144	; 0x90
 8002f9c:	05db      	lsls	r3, r3, #23
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff fa1c 	bl	80023de <GPIO_WriteBit>
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <Flash_Wait>:


uint8 Flash_Wait()				//	Polls the Flash IC for BUSY.  Returns when the IC is Not Busy.
{								//	Returns the ECC-Fail, Write-Fail, and Erase-Fail bits.
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
	uint8  b;

	Flash_Enable();
 8002fb2:	f7ff ffe1 	bl	8002f78 <Flash_Enable>
	b = SPI_Write_3 (5,0xC0,0);	//	Read status register 3...
 8002fb6:	1dfc      	adds	r4, r7, #7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	21c0      	movs	r1, #192	; 0xc0
 8002fbc:	2005      	movs	r0, #5
 8002fbe:	f7ff ff2b 	bl	8002e18 <SPI_Write_3>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
	while (b & 1)
 8002fc6:	e005      	b.n	8002fd4 <Flash_Wait+0x28>
		b = SPI_Write (0);		//	Read continuously, without breaking the access, until ready
 8002fc8:	1dfc      	adds	r4, r7, #7
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7ff fefe 	bl	8002dcc <SPI_Write>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	7023      	strb	r3, [r4, #0]
	while (b & 1)
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d1f4      	bne.n	8002fc8 <Flash_Wait+0x1c>
	Flash_Disable();
 8002fde:	f7ff ffd8 	bl	8002f92 <Flash_Disable>
	return	(b & 0x3C);			//	Return just the failure bits
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	223c      	movs	r2, #60	; 0x3c
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b2db      	uxtb	r3, r3
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b003      	add	sp, #12
 8002ff2:	bd90      	pop	{r4, r7, pc}

08002ff4 <DMA_Wait>:


bool DMA_Wait()					//	Polls the DMA engine.  Returns when the full transfer is complete
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
	uint32  f;

	while (1)						//	no timeout
	{								//	Loop here until both Tx and Rx finish, with or without errors
		uS_Delay (30);
 8002ffa:	201e      	movs	r0, #30
 8002ffc:	f003 f876 	bl	80060ec <uS_Delay>
		f = DMA1->ISR;				//	Get Interrupt Status Register
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <DMA_Wait+0x88>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	607b      	str	r3, [r7, #4]
		if (f & DMA_ISR_TCIF3)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d007      	beq.n	8003020 <DMA_Wait+0x2c>
			if ((f & DMA_ISR_TCIF2) || (f & DMA_ISR_TEIF2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	4013      	ands	r3, r2
 8003016:	d10a      	bne.n	800302e <DMA_Wait+0x3a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	4013      	ands	r3, r2
 800301e:	d106      	bne.n	800302e <DMA_Wait+0x3a>
				break;				//	Read is Complete
		if (f & DMA_ISR_TEIF3)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4013      	ands	r3, r2
 8003028:	d100      	bne.n	800302c <DMA_Wait+0x38>
		uS_Delay (30);
 800302a:	e7e6      	b.n	8002ffa <DMA_Wait+0x6>
			break;					//	If Tx error'd out, don't wait for Rx to complete
 800302c:	46c0      	nop			; (mov r8, r8)
	}

	DMA1_Channel2->CCR = 0;			//	Disable Rx DMA
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <DMA_Wait+0x8c>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;			//	Disable Tx DMA
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <DMA_Wait+0x90>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;	//	Disable DMA transfer requests for SPI bus
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <DMA_Wait+0x94>)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <DMA_Wait+0x94>)
 800303e:	889b      	ldrh	r3, [r3, #4]
 8003040:	b29b      	uxth	r3, r3
 8003042:	2101      	movs	r1, #1
 8003044:	438b      	bics	r3, r1
 8003046:	b29b      	uxth	r3, r3
 8003048:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 &= ~SPI_CR2_TXDMAEN;
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <DMA_Wait+0x94>)
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <DMA_Wait+0x94>)
 800304e:	889b      	ldrh	r3, [r3, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	2102      	movs	r1, #2
 8003054:	438b      	bics	r3, r1
 8003056:	b29b      	uxth	r3, r3
 8003058:	8093      	strh	r3, [r2, #4]

	if (f & DMA_ISR_TCIF3)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4013      	ands	r3, r2
 8003062:	d005      	beq.n	8003070 <DMA_Wait+0x7c>
		if (!(f & DMA_ISR_TEIF2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	4013      	ands	r3, r2
 800306a:	d101      	bne.n	8003070 <DMA_Wait+0x7c>
			return	true;			//	Tx completed, no Rx error
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <DMA_Wait+0x7e>

	return false;					//	Error
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40020000 	.word	0x40020000
 8003080:	4002001c 	.word	0x4002001c
 8003084:	40020030 	.word	0x40020030
 8003088:	40013000 	.word	0x40013000

0800308c <DMA_Start_Read>:


void DMA_Start_Read (uint8 *RamAddr, uint32 Len)	//	Starts the DMA engine in reading a block of data into RAM
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	DMA1_Channel2->CCR = 0;					//	Make sure DMA is disabled for SPI
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <DMA_Start_Read+0x98>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <DMA_Start_Read+0x9c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CTCIF2 + DMA_IFCR_CTEIF2;		//	Clear the Finished and Error flags
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <DMA_Start_Read+0xa0>)
 80030a4:	22a0      	movs	r2, #160	; 0xa0
 80030a6:	605a      	str	r2, [r3, #4]
	DMA1->IFCR = DMA_IFCR_CTCIF3 + DMA_IFCR_CTEIF3;		//	  for both Tx and Rx.
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <DMA_Start_Read+0xa0>)
 80030aa:	22a0      	movs	r2, #160	; 0xa0
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CPAR = (int)&SPI1->DR;	//	Rx transfer: get the data from here
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <DMA_Start_Read+0x98>)
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <DMA_Start_Read+0xa4>)
 80030b4:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CPAR = (int)&SPI1->DR;	//	Tx transfer: send the data here
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <DMA_Start_Read+0x9c>)
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <DMA_Start_Read+0xa4>)
 80030ba:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (int)RamAddr;		//	Rx transfer: store the data here
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <DMA_Start_Read+0x98>)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (int)RamAddr;		//	Tx transfer: fetch the data from here
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <DMA_Start_Read+0x9c>)
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = Len;				//	Transfer size
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <DMA_Start_Read+0x98>)
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CNDTR = Len;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <DMA_Start_Read+0x9c>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CCR  = DMA_CCR_MINC + DMA_CCR_PL_0;					//	Incr memory, not peripheral addr (Rx)
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <DMA_Start_Read+0x98>)
 80030d6:	2284      	movs	r2, #132	; 0x84
 80030d8:	0152      	lsls	r2, r2, #5
 80030da:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR  = DMA_CCR_MINC + DMA_CCR_PL_0 + DMA_CCR_DIR;	//	Incr memory, not peripheral addr (Tx)
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <DMA_Start_Read+0x9c>)
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <DMA_Start_Read+0xa8>)
 80030e0:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_EN;		//	Enable Rx DMA
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <DMA_Start_Read+0x98>)
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <DMA_Start_Read+0x98>)
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_EN;		//	Enable Tx DMA
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <DMA_Start_Read+0x9c>)
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <DMA_Start_Read+0x9c>)
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_RXDMAEN;			//	Enable the SPI Rx requests to DMA engine
 80030fa:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <DMA_Start_Read+0xac>)
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <DMA_Start_Read+0xac>)
 80030fe:	889b      	ldrh	r3, [r3, #4]
 8003100:	b29b      	uxth	r3, r3
 8003102:	2101      	movs	r1, #1
 8003104:	430b      	orrs	r3, r1
 8003106:	b29b      	uxth	r3, r3
 8003108:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_TXDMAEN;			//	Enable the SPI Tx requests to DMA engine
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <DMA_Start_Read+0xac>)
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <DMA_Start_Read+0xac>)
 800310e:	889b      	ldrh	r3, [r3, #4]
 8003110:	b29b      	uxth	r3, r3
 8003112:	2102      	movs	r1, #2
 8003114:	430b      	orrs	r3, r1
 8003116:	b29b      	uxth	r3, r3
 8003118:	8093      	strh	r3, [r2, #4]
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	4002001c 	.word	0x4002001c
 8003128:	40020030 	.word	0x40020030
 800312c:	40020000 	.word	0x40020000
 8003130:	4001300c 	.word	0x4001300c
 8003134:	00001090 	.word	0x00001090
 8003138:	40013000 	.word	0x40013000

0800313c <DMA_Start_Write>:


void DMA_Start_Write (uint8 *RamAddr, uint32 Len)		//	Starts the DMA engine in writing a block of data into FLASH
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	DMA1_Channel2->CCR = 0;					//	Make sure DMA is disabled for SPI
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <DMA_Start_Write+0x98>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <DMA_Start_Write+0x9c>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CTCIF2 + DMA_IFCR_CTEIF2;		//	Clear the Finished and Error flags
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <DMA_Start_Write+0xa0>)
 8003154:	22a0      	movs	r2, #160	; 0xa0
 8003156:	605a      	str	r2, [r3, #4]
	DMA1->IFCR = DMA_IFCR_CTCIF3 + DMA_IFCR_CTEIF3;		//	  for both Tx and Rx.
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <DMA_Start_Write+0xa0>)
 800315a:	22a0      	movs	r2, #160	; 0xa0
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CPAR = (int)&SPI1->DR;	//	Rx transfer: get the data from here
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <DMA_Start_Write+0x98>)
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <DMA_Start_Write+0xa4>)
 8003164:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CPAR = (int)&SPI1->DR;	//	Tx transfer: send the data here
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <DMA_Start_Write+0x9c>)
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <DMA_Start_Write+0xa4>)
 800316a:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (int)&DummyRead;	//	Rx transfer: store the data here
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <DMA_Start_Write+0x98>)
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <DMA_Start_Write+0xa8>)
 8003170:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (int)RamAddr;		//	Tx transfer: fetch the data from here
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <DMA_Start_Write+0x9c>)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = Len;				//	Transfer size
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <DMA_Start_Write+0x98>)
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CNDTR = Len;
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <DMA_Start_Write+0x9c>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CCR  = DMA_CCR_PL_0;		//	No incr of RAM or Peripheral address!	(Rx)
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <DMA_Start_Write+0x98>)
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0152      	lsls	r2, r2, #5
 800318a:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR  = DMA_CCR_PL_0 + DMA_CCR_MINC + DMA_CCR_DIR;	//	Incr memory, not peripheral addr (Tx)
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <DMA_Start_Write+0x9c>)
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <DMA_Start_Write+0xac>)
 8003190:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_EN;		//	Enable Rx DMA
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <DMA_Start_Write+0x98>)
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <DMA_Start_Write+0x98>)
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_EN;		//	Enable Tx DMA
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <DMA_Start_Write+0x9c>)
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <DMA_Start_Write+0x9c>)
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

	SPI1->CR2 |= SPI_CR2_RXDMAEN;			//	Enable the SPI Rx requests to DMA engine
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <DMA_Start_Write+0xb0>)
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <DMA_Start_Write+0xb0>)
 80031ae:	889b      	ldrh	r3, [r3, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	430b      	orrs	r3, r1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_TXDMAEN;			//	Enable the SPI Tx requests to DMA engine
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <DMA_Start_Write+0xb0>)
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <DMA_Start_Write+0xb0>)
 80031be:	889b      	ldrh	r3, [r3, #4]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2102      	movs	r1, #2
 80031c4:	430b      	orrs	r3, r1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8093      	strh	r3, [r2, #4]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	4002001c 	.word	0x4002001c
 80031d8:	40020030 	.word	0x40020030
 80031dc:	40020000 	.word	0x40020000
 80031e0:	4001300c 	.word	0x4001300c
 80031e4:	20002034 	.word	0x20002034
 80031e8:	00001090 	.word	0x00001090
 80031ec:	40013000 	.word	0x40013000

080031f0 <Write_Status_Register>:


void Write_Status_Register (int reg, uint8 val)		//	REG is 1,2,3		VAL is byte to write
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	000a      	movs	r2, r1
 80031fa:	1cfb      	adds	r3, r7, #3
 80031fc:	701a      	strb	r2, [r3, #0]
	uint8 a = (reg<<4) + 0x90;		//	Status register address   (0xA0, 0xB0, 0xC0)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	b2da      	uxtb	r2, r3
 8003206:	230f      	movs	r3, #15
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	3a70      	subs	r2, #112	; 0x70
 800320c:	701a      	strb	r2, [r3, #0]
	Flash_Wait();					//	Make sure Flash is idle
 800320e:	f7ff fecd 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003212:	f7ff feb1 	bl	8002f78 <Flash_Enable>
	SPI_Write_3 (1, a, val);		//	write status
 8003216:	1cfb      	adds	r3, r7, #3
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	230f      	movs	r3, #15
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	0019      	movs	r1, r3
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff fdf8 	bl	8002e18 <SPI_Write_3>
	Flash_Disable();
 8003228:	f7ff feb3 	bl	8002f92 <Flash_Disable>
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}

08003234 <Flash_Read_Page_Info>:
	return	b;
}


bool Flash_Read_Page_Info (int page, Partial_Page_t *pp)	//	page = 0-64K	(2KByte per page)
{															//	Ptr  = RAM-based buffer area
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	uint8  b, msb, lsb;										//	OUT:	FALSE if errors in page data
	uint8  *ptr;

	msb = (page >> 8) & 0xFF;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	121a      	asrs	r2, r3, #8
 8003242:	2317      	movs	r3, #23
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 8003248:	2316      	movs	r3, #22
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)pp;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	613b      	str	r3, [r7, #16]

	Flash_Wait();					//	Make sure Flash is idle
 8003254:	f7ff feaa 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003258:	f7ff fe8e 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 800325c:	2316      	movs	r3, #22
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	7819      	ldrb	r1, [r3, #0]
 8003262:	2317      	movs	r3, #23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	000b      	movs	r3, r1
 800326a:	2100      	movs	r1, #0
 800326c:	2013      	movs	r0, #19
 800326e:	f7ff fe21 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 8003272:	f7ff fe8e 	bl	8002f92 <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal read of the page
 8003276:	230f      	movs	r3, #15
 8003278:	18fc      	adds	r4, r7, r3
 800327a:	f7ff fe97 	bl	8002fac <Flash_Wait>
 800327e:	0003      	movs	r3, r0
 8003280:	7023      	strb	r3, [r4, #0]
	if (b & 0x20)
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2220      	movs	r2, #32
 800328a:	4013      	ands	r3, r2
 800328c:	d001      	beq.n	8003292 <Flash_Read_Page_Info+0x5e>
		return	false;				//	Had Errors in the page
 800328e:	2300      	movs	r3, #0
 8003290:	e011      	b.n	80032b6 <Flash_Read_Page_Info+0x82>

	Flash_Enable();
 8003292:	f7ff fe71 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (3,0x07,0xF8,0);	//	READ...		offset (msb,lsb), dummy
 8003296:	2300      	movs	r3, #0
 8003298:	22f8      	movs	r2, #248	; 0xf8
 800329a:	2107      	movs	r1, #7
 800329c:	2003      	movs	r0, #3
 800329e:	f7ff fe09 	bl	8002eb4 <SPI_Write_4>

	DMA_Start_Read (ptr, 72);		//	Start the DMA: read final 72 bytes of the extended page
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2148      	movs	r1, #72	; 0x48
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fef0 	bl	800308c <DMA_Start_Read>
	DMA_Wait();						//	Wait for DMA complete
 80032ac:	f7ff fea2 	bl	8002ff4 <DMA_Wait>
	Flash_Disable();
 80032b0:	f7ff fe6f 	bl	8002f92 <Flash_Disable>
	return	true;
 80032b4:	2301      	movs	r3, #1
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b007      	add	sp, #28
 80032bc:	bd90      	pop	{r4, r7, pc}

080032be <Flash_Erase_Block>:

										//	Erase 128KBytes...
bool Flash_Erase_Block (int page)		//	page = 0-64K   (low 6 bits = 0.)
{										//			64 pages erased, 2KByte per page, 128KB total
 80032be:	b590      	push	{r4, r7, lr}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
	uint8  b, msb, lsb;					//	OUT:	FALSE if error

	msb = (page >> 8) & 0xFF;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	121a      	asrs	r2, r3, #8
 80032ca:	230f      	movs	r3, #15
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xC0;				//	Bottom 6 bits zeroed
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	230e      	movs	r3, #14
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	213f      	movs	r1, #63	; 0x3f
 80032da:	438a      	bics	r2, r1
 80032dc:	701a      	strb	r2, [r3, #0]

	Flash_Wait();
 80032de:	f7ff fe65 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 80032e2:	f7ff fe49 	bl	8002f78 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 80032e6:	2006      	movs	r0, #6
 80032e8:	f7ff fd70 	bl	8002dcc <SPI_Write>
	Flash_Disable();
 80032ec:	f7ff fe51 	bl	8002f92 <Flash_Disable>

	Flash_Wait();					//	Make sure Flash is idle
 80032f0:	f7ff fe5c 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 80032f4:	f7ff fe40 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0xD8,0,msb,lsb);	//	ERASE 1 BLOCK:  64 PAGES...
 80032f8:	230e      	movs	r3, #14
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	7819      	ldrb	r1, [r3, #0]
 80032fe:	230f      	movs	r3, #15
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	000b      	movs	r3, r1
 8003306:	2100      	movs	r1, #0
 8003308:	20d8      	movs	r0, #216	; 0xd8
 800330a:	f7ff fdd3 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 800330e:	f7ff fe40 	bl	8002f92 <Flash_Disable>
	b = Flash_Wait();				//	Wait for internal erase
 8003312:	230d      	movs	r3, #13
 8003314:	18fc      	adds	r4, r7, r3
 8003316:	f7ff fe49 	bl	8002fac <Flash_Wait>
 800331a:	0003      	movs	r3, r0
 800331c:	7023      	strb	r3, [r4, #0]

	if (b & 0x0C)
 800331e:	230d      	movs	r3, #13
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	220c      	movs	r2, #12
 8003326:	4013      	ands	r3, r2
 8003328:	d001      	beq.n	800332e <Flash_Erase_Block+0x70>
		return	false;				//	Had Errors
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <Flash_Erase_Block+0x72>
	return	true;
 800332e:	2301      	movs	r3, #1
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b005      	add	sp, #20
 8003336:	bd90      	pop	{r4, r7, pc}

08003338 <Flash_Read_Page>:


bool Flash_Read_Page (int page, Flash_Page_t *pp)	//	page = 0-64K	(2KByte per page)
{													//	ptr  = 2048 Byte buffer area
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	uint8  b, msb, lsb;
	uint8  *ptr;

	msb = (page >> 8) & 0xFF;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	121a      	asrs	r2, r3, #8
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 800334c:	2316      	movs	r3, #22
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)pp;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	613b      	str	r3, [r7, #16]

	Flash_Wait();					//	Make sure Flash is idle
 8003358:	f7ff fe28 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 800335c:	f7ff fe0c 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 8003360:	2316      	movs	r3, #22
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	7819      	ldrb	r1, [r3, #0]
 8003366:	2317      	movs	r3, #23
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	000b      	movs	r3, r1
 800336e:	2100      	movs	r1, #0
 8003370:	2013      	movs	r0, #19
 8003372:	f7ff fd9f 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 8003376:	f7ff fe0c 	bl	8002f92 <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal read of the page
 800337a:	230f      	movs	r3, #15
 800337c:	18fc      	adds	r4, r7, r3
 800337e:	f7ff fe15 	bl	8002fac <Flash_Wait>
 8003382:	0003      	movs	r3, r0
 8003384:	7023      	strb	r3, [r4, #0]
	if (b & 0x20)
 8003386:	230f      	movs	r3, #15
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2220      	movs	r2, #32
 800338e:	4013      	ands	r3, r2
 8003390:	d001      	beq.n	8003396 <Flash_Read_Page+0x5e>
		return	false;				//	Had Errors in the page
 8003392:	2300      	movs	r3, #0
 8003394:	e013      	b.n	80033be <Flash_Read_Page+0x86>

	Flash_Enable();
 8003396:	f7ff fdef 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (3, 0, 0, 0);		//	READ...		offset = 0
 800339a:	2300      	movs	r3, #0
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	2003      	movs	r0, #3
 80033a2:	f7ff fd87 	bl	8002eb4 <SPI_Write_4>
	DMA_Start_Read (ptr, 2048);		//	Start the DMA: read the 2048 bytes   (takes 1.36 mS)
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	0011      	movs	r1, r2
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7ff fe6c 	bl	800308c <DMA_Start_Read>
	DMA_Wait();						//	Wait for DMA complete
 80033b4:	f7ff fe1e 	bl	8002ff4 <DMA_Wait>
	Flash_Disable();
 80033b8:	f7ff fdeb 	bl	8002f92 <Flash_Disable>
	return	true;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b007      	add	sp, #28
 80033c4:	bd90      	pop	{r4, r7, pc}
	...

080033c8 <Flash_Write_Page>:


bool Flash_Write_Page (int page)
{										//	page = 0-64K
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	uint8  b, msb, lsb;					//	ThePage = 2048 Byte buffer area - also writes the 64 extra bytes
	uint8  *ptr;
										//	OUT:	FALSE if error
	msb = (page >> 8) & 0xFF;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	121a      	asrs	r2, r3, #8
 80033d4:	2317      	movs	r3, #23
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 80033da:	2316      	movs	r3, #22
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)&ThePage;
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <Flash_Write_Page+0xd8>)
 80033e4:	613b      	str	r3, [r7, #16]

	Flash_Wait();
 80033e6:	f7ff fde1 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 80033ea:	f7ff fdc5 	bl	8002f78 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 80033ee:	2006      	movs	r0, #6
 80033f0:	f7ff fcec 	bl	8002dcc <SPI_Write>
	Flash_Disable();
 80033f4:	f7ff fdcd 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 80033f8:	f7ff fdd8 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 80033fc:	f7ff fdbc 	bl	8002f78 <Flash_Enable>
	SPI_Write_3 (2, 0, 0);			//	PAGE LOAD DATA...		offset = 0
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	2002      	movs	r0, #2
 8003406:	f7ff fd07 	bl	8002e18 <SPI_Write_3>
	DMA_Start_Write (ptr, 2048+64);
 800340a:	2384      	movs	r3, #132	; 0x84
 800340c:	011a      	lsls	r2, r3, #4
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff fe92 	bl	800313c <DMA_Start_Write>
	DMA_Wait();						//	Wait for DMA complete
 8003418:	f7ff fdec 	bl	8002ff4 <DMA_Wait>
	Flash_Disable();
 800341c:	f7ff fdb9 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 8003420:	f7ff fdc4 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003424:	f7ff fda8 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 8003428:	2316      	movs	r3, #22
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	7819      	ldrb	r1, [r3, #0]
 800342e:	2317      	movs	r3, #23
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	000b      	movs	r3, r1
 8003436:	2100      	movs	r1, #0
 8003438:	2010      	movs	r0, #16
 800343a:	f7ff fd3b 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 800343e:	f7ff fda8 	bl	8002f92 <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal write
 8003442:	230f      	movs	r3, #15
 8003444:	18fc      	adds	r4, r7, r3
 8003446:	f7ff fdb1 	bl	8002fac <Flash_Wait>
 800344a:	0003      	movs	r3, r0
 800344c:	7023      	strb	r3, [r4, #0]
	if (b & 0x0C)
 800344e:	230f      	movs	r3, #15
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	220c      	movs	r2, #12
 8003456:	4013      	ands	r3, r2
 8003458:	d001      	beq.n	800345e <Flash_Write_Page+0x96>
		return	false;				//	Had Errors
 800345a:	2300      	movs	r3, #0
 800345c:	e01c      	b.n	8003498 <Flash_Write_Page+0xd0>

	b = Flash_Read_Page (page, &aPage);
 800345e:	230f      	movs	r3, #15
 8003460:	18fc      	adds	r4, r7, r3
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <Flash_Write_Page+0xdc>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff ff65 	bl	8003338 <Flash_Read_Page>
 800346e:	0003      	movs	r3, r0
 8003470:	7023      	strb	r3, [r4, #0]
	if (!b)
 8003472:	230f      	movs	r3, #15
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <Flash_Write_Page+0xb8>
		return	false;				//	Could not read it back
 800347c:	2300      	movs	r3, #0
 800347e:	e00b      	b.n	8003498 <Flash_Write_Page+0xd0>

	if (memcmp (&ThePage, &aPage, 2048))
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	011a      	lsls	r2, r3, #4
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <Flash_Write_Page+0xdc>)
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <Flash_Write_Page+0xd8>)
 8003488:	0018      	movs	r0, r3
 800348a:	f004 fa13 	bl	80078b4 <memcmp>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <Flash_Write_Page+0xce>
		return	false;				//	Did not match
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <Flash_Write_Page+0xd0>

	return	true;					//	Read back perfectly!
 8003496:	2301      	movs	r3, #1
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b007      	add	sp, #28
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	20004870 	.word	0x20004870
 80034a4:	20002038 	.word	0x20002038

080034a8 <Flash_Page_OK>:


bool Flash_Page_OK (int page)				//	IN:  page = 0-64K	(2KByte per page)
{											//	OUT: Page_Info
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	uint16	OK = 0xFFFF;
 80034b0:	230e      	movs	r3, #14
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2201      	movs	r2, #1
 80034b6:	4252      	negs	r2, r2
 80034b8:	801a      	strh	r2, [r3, #0]

	if (page == TestPageNumber)		//	don't use the test page
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a17      	ldr	r2, [pc, #92]	; (800351c <Flash_Page_OK+0x74>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <Flash_Page_OK+0x1e>
		return	false;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e026      	b.n	8003514 <Flash_Page_OK+0x6c>

	if (Flash_Read_Page_Info (page, &Page_Info))
 80034c6:	4a16      	ldr	r2, [pc, #88]	; (8003520 <Flash_Page_OK+0x78>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff feb1 	bl	8003234 <Flash_Read_Page_Info>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d01d      	beq.n	8003512 <Flash_Page_OK+0x6a>
		if (Page_Info.Spare[0].BadBlock == OK)
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <Flash_Page_OK+0x78>)
 80034d8:	891b      	ldrh	r3, [r3, #8]
 80034da:	220e      	movs	r2, #14
 80034dc:	18ba      	adds	r2, r7, r2
 80034de:	8812      	ldrh	r2, [r2, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d116      	bne.n	8003512 <Flash_Page_OK+0x6a>
			if (Page_Info.Spare[1].BadBlock == OK)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <Flash_Page_OK+0x78>)
 80034e6:	8b1b      	ldrh	r3, [r3, #24]
 80034e8:	220e      	movs	r2, #14
 80034ea:	18ba      	adds	r2, r7, r2
 80034ec:	8812      	ldrh	r2, [r2, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d10f      	bne.n	8003512 <Flash_Page_OK+0x6a>
				if (Page_Info.Spare[2].BadBlock == OK)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <Flash_Page_OK+0x78>)
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	220e      	movs	r2, #14
 80034f8:	18ba      	adds	r2, r7, r2
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d108      	bne.n	8003512 <Flash_Page_OK+0x6a>
					if (Page_Info.Spare[3].BadBlock == OK)
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <Flash_Page_OK+0x78>)
 8003502:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003504:	220e      	movs	r2, #14
 8003506:	18ba      	adds	r2, r7, r2
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d101      	bne.n	8003512 <Flash_Page_OK+0x6a>
						return	true;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <Flash_Page_OK+0x6c>
	return	false;							//	 Returns TRUE if no ECC errors, and the BadBlock markers are OK
 8003512:	2300      	movs	r3, #0
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}
 800351c:	0000ff80 	.word	0x0000ff80
 8003520:	20002878 	.word	0x20002878

08003524 <Flash_Read_Unique_ID>:


void Flash_Read_Unique_ID()				//	Out:  aPage <-- 32 bytes of unique ID as read from the FLASH IC
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
	int  i;

	Write_Status_Register(2,0x58);		//	OTP-E = 1		ECC-E = 1		BUF = 1
 800352a:	2158      	movs	r1, #88	; 0x58
 800352c:	2002      	movs	r0, #2
 800352e:	f7ff fe5f 	bl	80031f0 <Write_Status_Register>
	Flash_Wait();
 8003532:	f7ff fd3b 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003536:	f7ff fd1f 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x13,0,0,0);			//	PAGE DATA READ...		page number 0
 800353a:	2300      	movs	r3, #0
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	2013      	movs	r0, #19
 8003542:	f7ff fcb7 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 8003546:	f7ff fd24 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 800354a:	f7ff fd2f 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 800354e:	f7ff fd13 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (3,0,0,0);					//	READ...		offset = 0
 8003552:	2300      	movs	r3, #0
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	2003      	movs	r0, #3
 800355a:	f7ff fcab 	bl	8002eb4 <SPI_Write_4>
	DMA_Start_Read ((uint8 *)UniqueID,32);	//	Start DMA:  read the 32 ID bytes
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <Flash_Read_Unique_ID+0x90>)
 8003560:	2120      	movs	r1, #32
 8003562:	0018      	movs	r0, r3
 8003564:	f7ff fd92 	bl	800308c <DMA_Start_Read>
	DMA_Wait();								//	Wait for DMA complete
 8003568:	f7ff fd44 	bl	8002ff4 <DMA_Wait>
	Flash_Disable();
 800356c:	f7ff fd11 	bl	8002f92 <Flash_Disable>
	Write_Status_Register(2,0x18);		//	OTP-E = 0		ECC-E = 1		BUF = 1
 8003570:	2118      	movs	r1, #24
 8003572:	2002      	movs	r0, #2
 8003574:	f7ff fe3c 	bl	80031f0 <Write_Status_Register>

	CRC->CR = 1;						//	Begin a new CRC...
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <Flash_Read_Unique_ID+0x94>)
 800357a:	2201      	movs	r2, #1
 800357c:	609a      	str	r2, [r3, #8]
	for (i=0; i<8; i++)
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	e008      	b.n	8003596 <Flash_Read_Unique_ID+0x72>
		CRC->DR = UniqueID[i];
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <Flash_Read_Unique_ID+0x94>)
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <Flash_Read_Unique_ID+0x90>)
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	0089      	lsls	r1, r1, #2
 800358c:	588a      	ldr	r2, [r1, r2]
 800358e:	601a      	str	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3301      	adds	r3, #1
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b07      	cmp	r3, #7
 800359a:	ddf3      	ble.n	8003584 <Flash_Read_Unique_ID+0x60>
	UniqueID[0] = CRC->DR;				//	Replace the first word with the CRC of all 8 words
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <Flash_Read_Unique_ID+0x94>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <Flash_Read_Unique_ID+0x90>)
 80035a2:	601a      	str	r2, [r3, #0]
	CRC->CR = 1;
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <Flash_Read_Unique_ID+0x94>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20002014 	.word	0x20002014
 80035b8:	40023000 	.word	0x40023000

080035bc <Flash_Locate_Next_Page>:


void Flash_Locate_Next_Page()			//	Out:  Free_Page = next page to write
{										//		  Sequence  = next Sequence number to use
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
	bool erased = false;
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
	int  i;

	if (++Free_Page == 65536)			//	Begin search with next page
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	429a      	cmp	r2, r3
 80035dc:	d102      	bne.n	80035e4 <Flash_Locate_Next_Page+0x28>
		Free_Page = 0;
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

	for (i=0; i<65536; i++)				//	Try all pages once, then quit
 80035e4:	2300      	movs	r3, #0
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	e048      	b.n	800367c <Flash_Locate_Next_Page+0xc0>
	{
		if (Flash_Page_OK (Free_Page))
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7ff ff5a 	bl	80034a8 <Flash_Page_OK>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d020      	beq.n	800363a <Flash_Locate_Next_Page+0x7e>
		{
			if (Page_Info.Sequence == 0xFFFFFFFF)
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <Flash_Locate_Next_Page+0xd8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	3301      	adds	r3, #1
 80035fe:	d042      	beq.n	8003686 <Flash_Locate_Next_Page+0xca>
				break;							//	Found a good page to try

			if ((Free_Page & 0x3F)==0 && !erased)		///	TODO: fix: what about if first good page in a block is not the first page
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	4013      	ands	r3, r2
 8003608:	d117      	bne.n	800363a <Flash_Locate_Next_Page+0x7e>
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d113      	bne.n	800363a <Flash_Locate_Next_Page+0x7e>
			{
				Write_Status_Register(1,0);		//	Enable FLASH writes to all pages
 8003612:	2100      	movs	r1, #0
 8003614:	2001      	movs	r0, #1
 8003616:	f7ff fdeb 	bl	80031f0 <Write_Status_Register>
				Flash_Erase_Block (Free_Page);	//	Erase a block if at the beginning
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0018      	movs	r0, r3
 8003620:	f7ff fe4d 	bl	80032be <Flash_Erase_Block>
				Write_Status_Register(1,0x7C);	//	  and it hasn't been erased yet.
 8003624:	217c      	movs	r1, #124	; 0x7c
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff fde2 	bl	80031f0 <Write_Status_Register>
				erased = true;
 800362c:	1dfb      	adds	r3, r7, #7
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
				i--;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	603b      	str	r3, [r7, #0]
				continue;
 8003638:	e01d      	b.n	8003676 <Flash_Locate_Next_Page+0xba>
			}
		}
		erased = false;
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]

		if (++Free_Page >= 65536)
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <Flash_Locate_Next_Page+0xdc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d910      	bls.n	8003676 <Flash_Locate_Next_Page+0xba>
		{
			Free_Page = 0;
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <Flash_Locate_Next_Page+0xd4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
			Write_Status_Register(1,0);		//	Enable FLASH writes to all pages
 800365a:	2100      	movs	r1, #0
 800365c:	2001      	movs	r0, #1
 800365e:	f7ff fdc7 	bl	80031f0 <Write_Status_Register>
			Flash_Erase_Block(0);			//	Rolled over to first page: start clearing old data
 8003662:	2000      	movs	r0, #0
 8003664:	f7ff fe2b 	bl	80032be <Flash_Erase_Block>
			Write_Status_Register(1,0x7C);	//	Disable FLASH writes
 8003668:	217c      	movs	r1, #124	; 0x7c
 800366a:	2001      	movs	r0, #1
 800366c:	f7ff fdc0 	bl	80031f0 <Write_Status_Register>
			erased = true;
 8003670:	1dfb      	adds	r3, r7, #7
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
	for (i=0; i<65536; i++)				//	Try all pages once, then quit
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4a06      	ldr	r2, [pc, #24]	; (8003698 <Flash_Locate_Next_Page+0xdc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	ddb2      	ble.n	80035ea <Flash_Locate_Next_Page+0x2e>
		}
	}
}
 8003684:	e000      	b.n	8003688 <Flash_Locate_Next_Page+0xcc>
				break;							//	Found a good page to try
 8003686:	46c0      	nop			; (mov r8, r8)
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}
 8003690:	2000200c 	.word	0x2000200c
 8003694:	20002878 	.word	0x20002878
 8003698:	0000ffff 	.word	0x0000ffff

0800369c <Flash_Locate_Latest_Record>:

	//	This is called at POR to find the next free page to write,
	//		and the span of records to be uploaded.
	//
void Flash_Locate_Latest_Record()			//	Out:  Free_Page  = next page to write
{											//		  Sequence   = next Sequence number to use
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
	int32	diff;							//		  First_Page = first page requiring upload
	uint32	i, seq;							//		  Last_Page  = final page requiring upload
	uint32	LoSeq = 0;						//		  Takes 15 seconds
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
	uint32	HiSeq = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]

	Send.Nothing = true;					//	Nothing to send (yet)
 80036aa:	4a50      	ldr	r2, [pc, #320]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 80036ac:	2385      	movs	r3, #133	; 0x85
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	2101      	movs	r1, #1
 80036b2:	54d1      	strb	r1, [r2, r3]
	Free_Page = 0;
 80036b4:	4b4e      	ldr	r3, [pc, #312]	; (80037f0 <Flash_Locate_Latest_Record+0x154>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
	Sequence = 1;
 80036ba:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

	for (i=0; i<65536; i++)					//	Search every page for first valid sequence number...
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e017      	b.n	80036f6 <Flash_Locate_Latest_Record+0x5a>
	{
		if (! Flash_Page_OK(i))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff feed 	bl	80034a8 <Flash_Page_OK>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d00b      	beq.n	80036ea <Flash_Locate_Latest_Record+0x4e>
			continue;						//	Skip unreadable pages

		if (1+Page_Info.Sequence == 0)		//	Sequence = all F's ?
 80036d2:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <Flash_Locate_Latest_Record+0x15c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	3301      	adds	r3, #1
 80036d8:	d009      	beq.n	80036ee <Flash_Locate_Latest_Record+0x52>
			continue;						//	  Yes.  Un-written page - skip it

		Sequence = Page_Info.Sequence;		//	Record first sequence # so that the DIFFing in the next loop works,
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <Flash_Locate_Latest_Record+0x15c>)
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80036e0:	601a      	str	r2, [r3, #0]
		Free_Page = i;						//	  no matter what the first unsigned sequence value is.
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <Flash_Locate_Latest_Record+0x154>)
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]
		break;
 80036e8:	e009      	b.n	80036fe <Flash_Locate_Latest_Record+0x62>
			continue;						//	Skip unreadable pages
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	e000      	b.n	80036f0 <Flash_Locate_Latest_Record+0x54>
			continue;						//	  Yes.  Un-written page - skip it
 80036ee:	46c0      	nop			; (mov r8, r8)
	for (i=0; i<65536; i++)					//	Search every page for first valid sequence number...
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3301      	adds	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4a40      	ldr	r2, [pc, #256]	; (80037fc <Flash_Locate_Latest_Record+0x160>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d9e3      	bls.n	80036c6 <Flash_Locate_Latest_Record+0x2a>
	}

	if (i == 65536)							//	If a totally blank Flash chip, exit now.
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	025b      	lsls	r3, r3, #9
 8003704:	429a      	cmp	r2, r3
 8003706:	d100      	bne.n	800370a <Flash_Locate_Latest_Record+0x6e>
 8003708:	e06c      	b.n	80037e4 <Flash_Locate_Latest_Record+0x148>
		return;

	--i;									//	Decrement so we re-locate the first valid page again
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3b01      	subs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
	while (++i < 65536)						//	Search every page...
 8003710:	e052      	b.n	80037b8 <Flash_Locate_Latest_Record+0x11c>
	{
		if (Flash_Page_OK(i))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	0018      	movs	r0, r3
 8003716:	f7ff fec7 	bl	80034a8 <Flash_Page_OK>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d04c      	beq.n	80037b8 <Flash_Locate_Latest_Record+0x11c>
		{
			seq = Page_Info.Sequence;
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <Flash_Locate_Latest_Record+0x15c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60bb      	str	r3, [r7, #8]
			if (seq == 0xFFFFFFFF)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	d100      	bne.n	800372c <Flash_Locate_Latest_Record+0x90>
				continue;					//	Un-written page - ignore it
 800372a:	e045      	b.n	80037b8 <Flash_Locate_Latest_Record+0x11c>

			if (Page_Info.Uploaded == 0xFF)
 800372c:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <Flash_Locate_Latest_Record+0x15c>)
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	2bff      	cmp	r3, #255	; 0xff
 8003732:	d133      	bne.n	800379c <Flash_Locate_Latest_Record+0x100>
			{								//	This page needs uploading:  Data is good, Sequence is valid, Uploaded it is not
				if (Send.Nothing)
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 8003736:	2385      	movs	r3, #133	; 0x85
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <Flash_Locate_Latest_Record+0xca>
				{							//	This is the first page found to upload
					LoSeq = seq;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	613b      	str	r3, [r7, #16]
					HiSeq = seq;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60fb      	str	r3, [r7, #12]
					Send.Last_Page = i;
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 800374a:	492d      	ldr	r1, [pc, #180]	; (8003800 <Flash_Locate_Latest_Record+0x164>)
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	505a      	str	r2, [r3, r1]
					Send.First_Page = i;
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 8003752:	2384      	movs	r3, #132	; 0x84
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	50d1      	str	r1, [r2, r3]
					Send.Nothing = false;	//	We have something
 800375a:	4a24      	ldr	r2, [pc, #144]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 800375c:	2385      	movs	r3, #133	; 0x85
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	2100      	movs	r1, #0
 8003762:	54d1      	strb	r1, [r2, r3]
 8003764:	e01a      	b.n	800379c <Flash_Locate_Latest_Record+0x100>
				}
				else
				{
					diff = seq - LoSeq;
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]
					if (diff < 0)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	da06      	bge.n	8003782 <Flash_Locate_Latest_Record+0xe6>
					{
						LoSeq = seq;		//	Mark new first page  (happens when upload pages wrapped around)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	613b      	str	r3, [r7, #16]
						Send.First_Page = i;
 8003778:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 800377a:	2384      	movs	r3, #132	; 0x84
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	6979      	ldr	r1, [r7, #20]
 8003780:	50d1      	str	r1, [r2, r3]
					}
					diff = seq - HiSeq;
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]
					if (diff > 0)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	dd05      	ble.n	800379c <Flash_Locate_Latest_Record+0x100>
					{
						HiSeq = seq;		//	Mark new last page
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60fb      	str	r3, [r7, #12]
						Send.Last_Page = i;
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <Flash_Locate_Latest_Record+0x150>)
 8003796:	491a      	ldr	r1, [pc, #104]	; (8003800 <Flash_Locate_Latest_Record+0x164>)
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	505a      	str	r2, [r3, r1]
					}
				}
			}

			diff = seq - Sequence;
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	607b      	str	r3, [r7, #4]
			if (diff > 0)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dd05      	ble.n	80037b8 <Flash_Locate_Latest_Record+0x11c>
			{
				Sequence = seq;				//	Keep track of highest sequence number found and
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	601a      	str	r2, [r3, #0]
				Free_Page = i;				//		its location, whether it is uploaded or not.
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <Flash_Locate_Latest_Record+0x154>)
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]
	while (++i < 65536)						//	Search every page...
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <Flash_Locate_Latest_Record+0x160>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d9a5      	bls.n	8003712 <Flash_Locate_Latest_Record+0x76>
			}
		}
	}

	Flash_Locate_Next_Page();				//	Set Free_Page for first write
 80037c6:	f7ff fef9 	bl	80035bc <Flash_Locate_Next_Page>
	if (++Sequence == 0xFFFFFFFF)			//	Set sequence number for first write
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	d104      	bne.n	80037e6 <Flash_Locate_Latest_Record+0x14a>
		Sequence = 1;						//	Skip values of -1 and 0
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <Flash_Locate_Latest_Record+0x158>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e000      	b.n	80037e6 <Flash_Locate_Latest_Record+0x14a>
		return;
 80037e4:	46c0      	nop			; (mov r8, r8)
}
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b006      	add	sp, #24
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20004014 	.word	0x20004014
 80037f0:	2000200c 	.word	0x2000200c
 80037f4:	20002010 	.word	0x20002010
 80037f8:	20002878 	.word	0x20002878
 80037fc:	0000ffff 	.word	0x0000ffff
 8003800:	00000848 	.word	0x00000848

08003804 <Flash_Mark_Page_Sent>:


bool Flash_Mark_Page_Sent (int page)	//	This marks one page which was sent to the cloud as being
{										//	 successfully uploaded by writing the 'Uploaded' byte in 
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	uint8  msb, lsb;					//	 the page structure.
	uint8  a, b;
	int    offs;

	msb = (page >> 8) & 0xFF;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	121a      	asrs	r2, r3, #8
 8003810:	2317      	movs	r3, #23
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 8003816:	2316      	movs	r3, #22
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	701a      	strb	r2, [r3, #0]

	Flash_Wait();					//	Get the page into Flash Device's internal RAM area...
 800381e:	f7ff fbc5 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003822:	f7ff fba9 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 8003826:	2316      	movs	r3, #22
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	7819      	ldrb	r1, [r3, #0]
 800382c:	2317      	movs	r3, #23
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	000b      	movs	r3, r1
 8003834:	2100      	movs	r1, #0
 8003836:	2013      	movs	r0, #19
 8003838:	f7ff fb3c 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 800383c:	f7ff fba9 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 8003840:	f7ff fbb4 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003844:	f7ff fb98 	bl	8002f78 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 8003848:	2006      	movs	r0, #6
 800384a:	f7ff fabf 	bl	8002dcc <SPI_Write>
	Flash_Disable();
 800384e:	f7ff fba0 	bl	8002f92 <Flash_Disable>

	offs = offsetof(Flash_Page_t, Uploaded);
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <Flash_Mark_Page_Sent+0xd4>)
 8003854:	613b      	str	r3, [r7, #16]
	a = (offs >> 8) & 0x0F;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	121b      	asrs	r3, r3, #8
 800385a:	b2da      	uxtb	r2, r3
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	210f      	movs	r1, #15
 8003862:	400a      	ands	r2, r1
 8003864:	701a      	strb	r2, [r3, #0]
	b = offs & 0xFF;
 8003866:	230e      	movs	r3, #14
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	701a      	strb	r2, [r3, #0]

	Flash_Wait();					//	Write a '00' byte to the UPLOADED structure entry...
 800386e:	f7ff fb9d 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003872:	f7ff fb81 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x84,a,b,0);		//	RANDOM PAGE LOAD DATA   (does not affect current page data)
 8003876:	230e      	movs	r3, #14
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	230f      	movs	r3, #15
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	7819      	ldrb	r1, [r3, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	2084      	movs	r0, #132	; 0x84
 8003886:	f7ff fb15 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();
 800388a:	f7ff fb82 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 800388e:	f7ff fb8d 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003892:	f7ff fb71 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 8003896:	2316      	movs	r3, #22
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	7819      	ldrb	r1, [r3, #0]
 800389c:	2317      	movs	r3, #23
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	000b      	movs	r3, r1
 80038a4:	2100      	movs	r1, #0
 80038a6:	2010      	movs	r0, #16
 80038a8:	f7ff fb04 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 80038ac:	f7ff fb71 	bl	8002f92 <Flash_Disable>
	b = Flash_Wait();				//	Wait for internal write
 80038b0:	230e      	movs	r3, #14
 80038b2:	18fc      	adds	r4, r7, r3
 80038b4:	f7ff fb7a 	bl	8002fac <Flash_Wait>
 80038b8:	0003      	movs	r3, r0
 80038ba:	7023      	strb	r3, [r4, #0]

	if (b & 0x0C)
 80038bc:	230e      	movs	r3, #14
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	220c      	movs	r2, #12
 80038c4:	4013      	ands	r3, r2
 80038c6:	d001      	beq.n	80038cc <Flash_Mark_Page_Sent+0xc8>
		return	false;				//	Had Errors
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <Flash_Mark_Page_Sent+0xca>
	return	true;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b007      	add	sp, #28
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	000007fb 	.word	0x000007fb

080038dc <Flash_Mark_Page_Bad>:


void Flash_Mark_Page_Bad (int page)		//	This marks the page as being unusable by writing to the BadBlock bytes
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	uint8  msb, lsb;
	uint8  *ptr;

	msb = (page >> 8) & 0xFF;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	121a      	asrs	r2, r3, #8
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 80038ee:	230e      	movs	r3, #14
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)&Page_Info;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <Flash_Mark_Page_Bad+0x90>)
 80038f8:	60bb      	str	r3, [r7, #8]
	memset (ptr, 0, 64);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	2100      	movs	r1, #0
 8003900:	0018      	movs	r0, r3
 8003902:	f003 ffef 	bl	80078e4 <memset>

	Flash_Wait();
 8003906:	f7ff fb51 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 800390a:	f7ff fb35 	bl	8002f78 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 800390e:	2006      	movs	r0, #6
 8003910:	f7ff fa5c 	bl	8002dcc <SPI_Write>
	Flash_Disable();
 8003914:	f7ff fb3d 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 8003918:	f7ff fb48 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 800391c:	f7ff fb2c 	bl	8002f78 <Flash_Enable>
	SPI_Write_3 (2, 8, 0);			//	PAGE LOAD DATA...		offset = 0800h = 2K		point to EXTRA section
 8003920:	2200      	movs	r2, #0
 8003922:	2108      	movs	r1, #8
 8003924:	2002      	movs	r0, #2
 8003926:	f7ff fa77 	bl	8002e18 <SPI_Write_3>
	DMA_Start_Write (ptr, 64);		//	Write 64 bytes of zeros in EXTRA section
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2140      	movs	r1, #64	; 0x40
 800392e:	0018      	movs	r0, r3
 8003930:	f7ff fc04 	bl	800313c <DMA_Start_Write>
	DMA_Wait();						//	Wait for DMA complete
 8003934:	f7ff fb5e 	bl	8002ff4 <DMA_Wait>
	Flash_Disable();
 8003938:	f7ff fb2b 	bl	8002f92 <Flash_Disable>

	Flash_Wait();
 800393c:	f7ff fb36 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003940:	f7ff fb1a 	bl	8002f78 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 8003944:	230e      	movs	r3, #14
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	7819      	ldrb	r1, [r3, #0]
 800394a:	230f      	movs	r3, #15
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	000b      	movs	r3, r1
 8003952:	2100      	movs	r1, #0
 8003954:	2010      	movs	r0, #16
 8003956:	f7ff faad 	bl	8002eb4 <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 800395a:	f7ff fb1a 	bl	8002f92 <Flash_Disable>
	Flash_Wait();					//	Wait for internal write - ignore errors
 800395e:	f7ff fb25 	bl	8002fac <Flash_Wait>
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b004      	add	sp, #16
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	20002878 	.word	0x20002878

08003970 <Flash_Write_Events>:


void Flash_Write_Events()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
	int  i;

	ThePage.Sequence = Sequence;		//	Store the sequence number to use
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <Flash_Write_Events+0xbc>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <Flash_Write_Events+0xc0>)
 800397c:	492d      	ldr	r1, [pc, #180]	; (8003a34 <Flash_Write_Events+0xc4>)
 800397e:	505a      	str	r2, [r3, r1]
	if (++Sequence == 0xFFFFFFFF)		//	Set sequence number for next time
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <Flash_Write_Events+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <Flash_Write_Events+0xbc>)
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <Flash_Write_Events+0xbc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	d102      	bne.n	8003998 <Flash_Write_Events+0x28>
		Sequence = 1;					//	Skip values of -1 and 0
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <Flash_Write_Events+0xbc>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

	if (Send.Nothing)
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <Flash_Write_Events+0xc8>)
 800399a:	2385      	movs	r3, #133	; 0x85
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <Flash_Write_Events+0x4a>
	{
		Send.First_Page = Free_Page;
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <Flash_Write_Events+0xcc>)
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <Flash_Write_Events+0xc8>)
 80039aa:	2384      	movs	r3, #132	; 0x84
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	50d1      	str	r1, [r2, r3]
		Send.Nothing = false;			//	We have something
 80039b0:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <Flash_Write_Events+0xc8>)
 80039b2:	2385      	movs	r3, #133	; 0x85
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	54d1      	strb	r1, [r2, r3]
	}

	Write_Status_Register (1,0);		//	Enable FLASH writes to all pages
 80039ba:	2100      	movs	r1, #0
 80039bc:	2001      	movs	r0, #1
 80039be:	f7ff fc17 	bl	80031f0 <Write_Status_Register>
	for (i=0; i<25; i++)				//	Try 25 times to write it
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	e010      	b.n	80039ea <Flash_Write_Events+0x7a>
	{
		if (Flash_Write_Page (Free_Page))
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <Flash_Write_Events+0xcc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fcfb 	bl	80033c8 <Flash_Write_Page>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d10d      	bne.n	80039f2 <Flash_Write_Events+0x82>
			break;						//	Worked!
		Flash_Mark_Page_Bad (Free_Page);
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <Flash_Write_Events+0xcc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff ff7e 	bl	80038dc <Flash_Mark_Page_Bad>
		Flash_Locate_Next_Page();		//	Find another page to try
 80039e0:	f7ff fdec 	bl	80035bc <Flash_Locate_Next_Page>
	for (i=0; i<25; i++)				//	Try 25 times to write it
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b18      	cmp	r3, #24
 80039ee:	ddeb      	ble.n	80039c8 <Flash_Write_Events+0x58>
 80039f0:	e000      	b.n	80039f4 <Flash_Write_Events+0x84>
			break;						//	Worked!
 80039f2:	46c0      	nop			; (mov r8, r8)
	}
	Write_Status_Register (1,0x7C);		//	Disable all FLASH writes -- write protected
 80039f4:	217c      	movs	r1, #124	; 0x7c
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7ff fbfa 	bl	80031f0 <Write_Status_Register>
	Send.Last_Page = Free_Page;			//	Keep track of final page to be uploaded
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <Flash_Write_Events+0xcc>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <Flash_Write_Events+0xc8>)
 8003a02:	490f      	ldr	r1, [pc, #60]	; (8003a40 <Flash_Write_Events+0xd0>)
 8003a04:	505a      	str	r2, [r3, r1]

	if (i < 25)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b18      	cmp	r3, #24
 8003a0a:	dc01      	bgt.n	8003a10 <Flash_Write_Events+0xa0>
		Flash_Locate_Next_Page();		//	Find next available page for next time
 8003a0c:	f7ff fdd6 	bl	80035bc <Flash_Locate_Next_Page>

	memset (&ThePage, 0xFF, sizeof(ThePage));
 8003a10:	2384      	movs	r3, #132	; 0x84
 8003a12:	011a      	lsls	r2, r3, #4
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <Flash_Write_Events+0xc0>)
 8003a16:	21ff      	movs	r1, #255	; 0xff
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f003 ff63 	bl	80078e4 <memset>
	nEvents = 0;						//	Clear the buffer area
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <Flash_Write_Events+0xd4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20002010 	.word	0x20002010
 8003a30:	20004870 	.word	0x20004870
 8003a34:	000007fc 	.word	0x000007fc
 8003a38:	20004014 	.word	0x20004014
 8003a3c:	2000200c 	.word	0x2000200c
 8003a40:	00000848 	.word	0x00000848
 8003a44:	20004868 	.word	0x20004868

08003a48 <Begin_Report>:


void Begin_Report()
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
	flash_Log (FLAG_FLUSH);					//	Generate a log, and flush the record to FLASH
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f95c 	bl	8003d10 <flash_Log>

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);	//  lock it
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <Begin_Report+0xbc>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	425a      	negs	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	2100      	movs	r1, #0
 8003a64:	f7fd f96f 	bl	8000d46 <xQueueGenericReceive>
	Send.Index = 0;							//	Start with first event of first page
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <Begin_Report+0xc0>)
 8003a6a:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <Begin_Report+0xc4>)
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5099      	str	r1, [r3, r2]
	Send.Current_Page = Send.First_Page;
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <Begin_Report+0xc0>)
 8003a72:	2384      	movs	r3, #132	; 0x84
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	58d2      	ldr	r2, [r2, r3]
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <Begin_Report+0xc0>)
 8003a7a:	4925      	ldr	r1, [pc, #148]	; (8003b10 <Begin_Report+0xc8>)
 8003a7c:	505a      	str	r2, [r3, r1]
	bool b = Send.Nothing;
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	4921      	ldr	r1, [pc, #132]	; (8003b08 <Begin_Report+0xc0>)
 8003a82:	2285      	movs	r2, #133	; 0x85
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	5c8a      	ldrb	r2, [r1, r2]
 8003a88:	701a      	strb	r2, [r3, #0]

	while (!b)								//	While looking for valid data to send...
 8003a8a:	e020      	b.n	8003ace <Begin_Report+0x86>
	{
		b = Flash_Read_Page (Send.Current_Page, &Send.Data);
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <Begin_Report+0xc0>)
 8003a8e:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <Begin_Report+0xc8>)
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	001a      	movs	r2, r3
 8003a94:	1dfc      	adds	r4, r7, #7
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <Begin_Report+0xc0>)
 8003a98:	0019      	movs	r1, r3
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	f7ff fc4c 	bl	8003338 <Flash_Read_Page>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	7023      	strb	r3, [r4, #0]
		if (!b)								//	Fail...
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <Begin_Report+0x86>
		{									//	Try next page if Current is unreadable
			if (Send.Current_Page == Send.Last_Page)
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <Begin_Report+0xc0>)
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <Begin_Report+0xc8>)
 8003ab0:	589a      	ldr	r2, [r3, r2]
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <Begin_Report+0xc0>)
 8003ab4:	4917      	ldr	r1, [pc, #92]	; (8003b14 <Begin_Report+0xcc>)
 8003ab6:	585b      	ldr	r3, [r3, r1]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d00d      	beq.n	8003ad8 <Begin_Report+0x90>
				break;						//	Stop looping if Last page is unreadable
			Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <Begin_Report+0xc0>)
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <Begin_Report+0xc8>)
 8003ac0:	589b      	ldr	r3, [r3, r2]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	0c1a      	lsrs	r2, r3, #16
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <Begin_Report+0xc0>)
 8003aca:	4911      	ldr	r1, [pc, #68]	; (8003b10 <Begin_Report+0xc8>)
 8003acc:	505a      	str	r2, [r3, r1]
	while (!b)								//	While looking for valid data to send...
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0da      	beq.n	8003a8c <Begin_Report+0x44>
 8003ad6:	e000      	b.n	8003ada <Begin_Report+0x92>
				break;						//	Stop looping if Last page is unreadable
 8003ad8:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (!b)
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <Begin_Report+0xa4>
		Send.Nothing = true;				//	Nothing to send: all records are unreadable
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <Begin_Report+0xc0>)
 8003ae4:	2385      	movs	r3, #133	; 0x85
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	54d1      	strb	r1, [r2, r3]
	xSemaphoreGive(flash_Mutex);			//  release it
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <Begin_Report+0xbc>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	f7fd f841 	bl	8000b7c <xQueueGenericSend>
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b003      	add	sp, #12
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	2000486c 	.word	0x2000486c
 8003b08:	20004014 	.word	0x20004014
 8003b0c:	0000084c 	.word	0x0000084c
 8003b10:	00000844 	.word	0x00000844
 8003b14:	00000848 	.word	0x00000848

08003b18 <Report_Callback>:


int  Report_Callback (Event_t *OneEvent)	//	OUT:	 0: OneEvent points to valid event
{											//			-1: no more data
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	bool  b;								//			Send.Index is updated for next call

	if (Send.Nothing)
 8003b20:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <Report_Callback+0x14c>)
 8003b22:	2385      	movs	r3, #133	; 0x85
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <Report_Callback+0x1a>
		return	-1;							//	Quit immediately if no records to upload
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	425b      	negs	r3, r3
 8003b30:	e093      	b.n	8003c5a <Report_Callback+0x142>

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);		//  lock it
 8003b32:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <Report_Callback+0x150>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	2301      	movs	r3, #1
 8003b38:	425a      	negs	r2, r3
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f7fd f902 	bl	8000d46 <xQueueGenericReceive>
	while (1)
	{
		if (Send.Index < EventsPerPage)
 8003b42:	4b48      	ldr	r3, [pc, #288]	; (8003c64 <Report_Callback+0x14c>)
 8003b44:	4a49      	ldr	r2, [pc, #292]	; (8003c6c <Report_Callback+0x154>)
 8003b46:	589b      	ldr	r3, [r3, r2]
 8003b48:	2ba9      	cmp	r3, #169	; 0xa9
 8003b4a:	d820      	bhi.n	8003b8e <Report_Callback+0x76>
		{											//	Copy the data into caller's memory - may or may not be valid data
			*OneEvent = Send.Data.Events[Send.Index];
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <Report_Callback+0x14c>)
 8003b4e:	4a47      	ldr	r2, [pc, #284]	; (8003c6c <Report_Callback+0x154>)
 8003b50:	589a      	ldr	r2, [r3, r2]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4943      	ldr	r1, [pc, #268]	; (8003c64 <Report_Callback+0x14c>)
 8003b56:	0013      	movs	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	0002      	movs	r2, r0
 8003b60:	18cb      	adds	r3, r1, r3
 8003b62:	cb13      	ldmia	r3!, {r0, r1, r4}
 8003b64:	c213      	stmia	r2!, {r0, r1, r4}
			if (OneEvent->TimeStamp != 0xFFFFFFFF)	//	This entry was valid...
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	d00f      	beq.n	8003b8e <Report_Callback+0x76>
			{
				Send.Index++;						//	Update index for next call
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <Report_Callback+0x14c>)
 8003b70:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <Report_Callback+0x154>)
 8003b72:	589b      	ldr	r3, [r3, r2]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <Report_Callback+0x14c>)
 8003b78:	493c      	ldr	r1, [pc, #240]	; (8003c6c <Report_Callback+0x154>)
 8003b7a:	505a      	str	r2, [r3, r1]
				xSemaphoreGive(flash_Mutex);		//  release it
 8003b7c:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <Report_Callback+0x150>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	2200      	movs	r2, #0
 8003b84:	2100      	movs	r1, #0
 8003b86:	f7fc fff9 	bl	8000b7c <xQueueGenericSend>
				return	0;							//	PASS: page is not exhausted and data is valid
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e065      	b.n	8003c5a <Report_Callback+0x142>
			}
		}
	
		if (Send.Current_Page == Send.Last_Page)
 8003b8e:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <Report_Callback+0x14c>)
 8003b90:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <Report_Callback+0x158>)
 8003b92:	589a      	ldr	r2, [r3, r2]
 8003b94:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <Report_Callback+0x14c>)
 8003b96:	4937      	ldr	r1, [pc, #220]	; (8003c74 <Report_Callback+0x15c>)
 8003b98:	585b      	ldr	r3, [r3, r1]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10e      	bne.n	8003bbc <Report_Callback+0xa4>
		{
			Send.Nothing = true;
 8003b9e:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <Report_Callback+0x14c>)
 8003ba0:	2385      	movs	r3, #133	; 0x85
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	54d1      	strb	r1, [r2, r3]
			xSemaphoreGive(flash_Mutex);			//  release it
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <Report_Callback+0x150>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f7fc ffe3 	bl	8000b7c <xQueueGenericSend>
			return	-1;								//	STOP: no more pages to read out
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	425b      	negs	r3, r3
 8003bba:	e04e      	b.n	8003c5a <Report_Callback+0x142>
		}
													//	Advance to next page
		Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <Report_Callback+0x14c>)
 8003bbe:	4a2c      	ldr	r2, [pc, #176]	; (8003c70 <Report_Callback+0x158>)
 8003bc0:	589b      	ldr	r3, [r3, r2]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	0c1a      	lsrs	r2, r3, #16
 8003bc8:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <Report_Callback+0x14c>)
 8003bca:	4929      	ldr	r1, [pc, #164]	; (8003c70 <Report_Callback+0x158>)
 8003bcc:	505a      	str	r2, [r3, r1]
		Send.Index = 0;								//	Start with first event of first page
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <Report_Callback+0x14c>)
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <Report_Callback+0x154>)
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5099      	str	r1, [r3, r2]

		b = false;
 8003bd6:	230f      	movs	r3, #15
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
		while (!b)									//	Find next readable page...
 8003bde:	e036      	b.n	8003c4e <Report_Callback+0x136>
		{
			b = Flash_Read_Page (Send.Current_Page, &Send.Data);
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <Report_Callback+0x14c>)
 8003be2:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <Report_Callback+0x158>)
 8003be4:	589b      	ldr	r3, [r3, r2]
 8003be6:	001a      	movs	r2, r3
 8003be8:	230f      	movs	r3, #15
 8003bea:	18fc      	adds	r4, r7, r3
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <Report_Callback+0x14c>)
 8003bee:	0019      	movs	r1, r3
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	f7ff fba1 	bl	8003338 <Flash_Read_Page>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	7023      	strb	r3, [r4, #0]
			if ((!b) || (Send.Data.Uploaded != 0xFF))
 8003bfa:	230f      	movs	r3, #15
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <Report_Callback+0xf6>
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <Report_Callback+0x14c>)
 8003c06:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <Report_Callback+0x160>)
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d01f      	beq.n	8003c4e <Report_Callback+0x136>
			{										//	Current Page is unreadable or uploaded: skip over it
				if (Send.Current_Page == Send.Last_Page)
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <Report_Callback+0x14c>)
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <Report_Callback+0x158>)
 8003c12:	589a      	ldr	r2, [r3, r2]
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <Report_Callback+0x14c>)
 8003c16:	4917      	ldr	r1, [pc, #92]	; (8003c74 <Report_Callback+0x15c>)
 8003c18:	585b      	ldr	r3, [r3, r1]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d10e      	bne.n	8003c3c <Report_Callback+0x124>
				{
					Send.Nothing = true;
 8003c1e:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <Report_Callback+0x14c>)
 8003c20:	2385      	movs	r3, #133	; 0x85
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	2101      	movs	r1, #1
 8003c26:	54d1      	strb	r1, [r2, r3]
					xSemaphoreGive(flash_Mutex);	//  release it
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <Report_Callback+0x150>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	f7fc ffa3 	bl	8000b7c <xQueueGenericSend>
					return	-1;						//	STOP: nothing more to upload due to unreadable
 8003c36:	2301      	movs	r3, #1
 8003c38:	425b      	negs	r3, r3
 8003c3a:	e00e      	b.n	8003c5a <Report_Callback+0x142>
				}
				Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <Report_Callback+0x14c>)
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <Report_Callback+0x158>)
 8003c40:	589b      	ldr	r3, [r3, r2]
 8003c42:	3301      	adds	r3, #1
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	0c1a      	lsrs	r2, r3, #16
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <Report_Callback+0x14c>)
 8003c4a:	4909      	ldr	r1, [pc, #36]	; (8003c70 <Report_Callback+0x158>)
 8003c4c:	505a      	str	r2, [r3, r1]
		while (!b)									//	Find next readable page...
 8003c4e:	230f      	movs	r3, #15
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0c3      	beq.n	8003be0 <Report_Callback+0xc8>
		if (Send.Index < EventsPerPage)
 8003c58:	e773      	b.n	8003b42 <Report_Callback+0x2a>
			}
		}
	}
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b005      	add	sp, #20
 8003c60:	bd90      	pop	{r4, r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20004014 	.word	0x20004014
 8003c68:	2000486c 	.word	0x2000486c
 8003c6c:	0000084c 	.word	0x0000084c
 8003c70:	00000844 	.word	0x00000844
 8003c74:	00000848 	.word	0x00000848
 8003c78:	000007fb 	.word	0x000007fb

08003c7c <Successful_Xfer_Callback>:


void Successful_Xfer_Callback()						//	All pages fully transferred, so far, during this 
{													//	  connection are marked as 'sent'.
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	xSemaphoreTake(flash_Mutex,portMAX_DELAY);
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <Successful_Xfer_Callback+0x84>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	2301      	movs	r3, #1
 8003c86:	425a      	negs	r2, r3
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f7fd f85b 	bl	8000d46 <xQueueGenericReceive>
	Write_Status_Register (1, 0);					//	Enable FLASH writes to all pages
 8003c90:	2100      	movs	r1, #0
 8003c92:	2001      	movs	r0, #1
 8003c94:	f7ff faac 	bl	80031f0 <Write_Status_Register>

	while (Send.First_Page < Send.Current_Page)
 8003c98:	e00f      	b.n	8003cba <Successful_Xfer_Callback+0x3e>
	{
		Flash_Mark_Page_Sent (Send.First_Page);		//	Mark that page as done
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003c9c:	2384      	movs	r3, #132	; 0x84
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	58d3      	ldr	r3, [r2, r3]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff fdae 	bl	8003804 <Flash_Mark_Page_Sent>
		Send.First_Page++;
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003caa:	2384      	movs	r3, #132	; 0x84
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	58d3      	ldr	r3, [r2, r3]
 8003cb0:	1c59      	adds	r1, r3, #1
 8003cb2:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003cb4:	2384      	movs	r3, #132	; 0x84
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	50d1      	str	r1, [r2, r3]
	while (Send.First_Page < Send.Current_Page)
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003cbc:	2384      	movs	r3, #132	; 0x84
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	58d2      	ldr	r2, [r2, r3]
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003cc4:	4910      	ldr	r1, [pc, #64]	; (8003d08 <Successful_Xfer_Callback+0x8c>)
 8003cc6:	585b      	ldr	r3, [r3, r1]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3e6      	bcc.n	8003c9a <Successful_Xfer_Callback+0x1e>
	}

	if (Send.Nothing == true)
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003cce:	2385      	movs	r3, #133	; 0x85
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <Successful_Xfer_Callback+0x68>
	{
		Flash_Mark_Page_Sent (Send.Last_Page);		//	Mark final page as done
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <Successful_Xfer_Callback+0x88>)
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <Successful_Xfer_Callback+0x90>)
 8003cdc:	589b      	ldr	r3, [r3, r2]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff fd90 	bl	8003804 <Flash_Mark_Page_Sent>
	}

	Write_Status_Register (1, 0x7C);				//	Disable all FLASH writes -- write protected
 8003ce4:	217c      	movs	r1, #124	; 0x7c
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f7ff fa82 	bl	80031f0 <Write_Status_Register>
	xSemaphoreGive(flash_Mutex);
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <Successful_Xfer_Callback+0x84>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	f7fc ff41 	bl	8000b7c <xQueueGenericSend>
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000486c 	.word	0x2000486c
 8003d04:	20004014 	.word	0x20004014
 8003d08:	00000844 	.word	0x00000844
 8003d0c:	00000848 	.word	0x00000848

08003d10 <flash_Log>:


void flash_Log (int cause)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	6078      	str	r0, [r7, #4]
	Event_t  Event;

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);	//  lock it
 8003d18:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <flash_Log+0xd8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	425a      	negs	r2, r3
 8003d20:	2300      	movs	r3, #0
 8003d22:	2100      	movs	r1, #0
 8003d24:	f7fd f80f 	bl	8000d46 <xQueueGenericReceive>
	Periodic = Config.Periodic_Event_Rate;		//	Force another event in x seconds, if nothing else happens
 8003d28:	4b30      	ldr	r3, [pc, #192]	; (8003dec <flash_Log+0xdc>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <flash_Log+0xe0>)
 8003d2e:	601a      	str	r2, [r3, #0]

	Event.TimeStamp = TheTime.Epoch;		//	Store time, Volts, and Temp of right now
 8003d30:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <flash_Log+0xe4>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	230c      	movs	r3, #12
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	601a      	str	r2, [r3, #0]
	Event.mVolts = Current_Volts;			//	0.001 V
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <flash_Log+0xe8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	230c      	movs	r3, #12
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	809a      	strh	r2, [r3, #4]
	Event.dTemp  = Current_Temp;			//	0.1 C
 8003d46:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <flash_Log+0xec>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	80da      	strh	r2, [r3, #6]

	Last_Logged_Volts = Event.mVolts;
 8003d52:	230c      	movs	r3, #12
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	001a      	movs	r2, r3
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <flash_Log+0xf0>)
 8003d5c:	601a      	str	r2, [r3, #0]
	Last_Logged_Temp = Event.dTemp;
 8003d5e:	230c      	movs	r3, #12
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	88db      	ldrh	r3, [r3, #6]
 8003d64:	001a      	movs	r2, r3
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <flash_Log+0xf4>)
 8003d68:	601a      	str	r2, [r3, #0]

	Event.flags = cause;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	230c      	movs	r3, #12
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	811a      	strh	r2, [r3, #8]
	ThePage.Events[nEvents] = Event;
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <flash_Log+0xf8>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4924      	ldr	r1, [pc, #144]	; (8003e0c <flash_Log+0xfc>)
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220c      	movs	r2, #12
 8003d84:	18ba      	adds	r2, r7, r2
 8003d86:	18cb      	adds	r3, r1, r3
 8003d88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d8a:	c313      	stmia	r3!, {r0, r1, r4}

	if ((++nEvents >= EventsPerPage) || (cause == FLAG_FLUSH))
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <flash_Log+0xf8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <flash_Log+0xf8>)
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <flash_Log+0xf8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2ba9      	cmp	r3, #169	; 0xa9
 8003d9c:	dc04      	bgt.n	8003da8 <flash_Log+0x98>
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d101      	bne.n	8003dac <flash_Log+0x9c>
		Flash_Write_Events();
 8003da8:	f7ff fde2 	bl	8003970 <Flash_Write_Events>
	xSemaphoreGive(flash_Mutex);			// give it back
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <flash_Log+0xd8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	2300      	movs	r3, #0
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	f7fc fee1 	bl	8000b7c <xQueueGenericSend>
#if 1
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003dba:	230c      	movs	r3, #12
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	6819      	ldr	r1, [r3, #0]
												  Event.mVolts,
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	889b      	ldrh	r3, [r3, #4]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003dc6:	001a      	movs	r2, r3
												  Event.dTemp,
 8003dc8:	230c      	movs	r3, #12
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	88db      	ldrh	r3, [r3, #6]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003dce:	001c      	movs	r4, r3
												  Event.flags);
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	891b      	ldrh	r3, [r3, #8]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003dd6:	480e      	ldr	r0, [pc, #56]	; (8003e10 <flash_Log+0x100>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	f003 f9fe 	bl	80071dc <uart1_Printf>
#endif
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b007      	add	sp, #28
 8003de6:	bd90      	pop	{r4, r7, pc}
 8003de8:	2000486c 	.word	0x2000486c
 8003dec:	20005118 	.word	0x20005118
 8003df0:	200050b4 	.word	0x200050b4
 8003df4:	200050d0 	.word	0x200050d0
 8003df8:	200050ec 	.word	0x200050ec
 8003dfc:	200050fc 	.word	0x200050fc
 8003e00:	20005110 	.word	0x20005110
 8003e04:	200050f4 	.word	0x200050f4
 8003e08:	20004868 	.word	0x20004868
 8003e0c:	20004870 	.word	0x20004870
 8003e10:	08009764 	.word	0x08009764

08003e14 <Flash_Test>:


static void Flash_Test()				//	Performs a quick test of the FLASH device at POR
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	int  i;
	uint8  *ptr;
	ptr = (uint8 *)&ThePage;
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <Flash_Test+0xb4>)
 8003e1c:	603b      	str	r3, [r7, #0]

	for (i=0; i<2048; i++)					//	'ThePage' gets generated test data
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	e00a      	b.n	8003e3a <Flash_Test+0x26>
		*ptr++ = 1+i;						//	 'aPage' gets Flash contents
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	603a      	str	r2, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	3201      	adds	r2, #1
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
	for (i=0; i<2048; i++)					//	'ThePage' gets generated test data
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <Flash_Test+0xb8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	ddf0      	ble.n	8003e24 <Flash_Test+0x10>

	if (Flash_Read_Page (TestPageNumber, &aPage))
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <Flash_Test+0xbc>)
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <Flash_Test+0xc0>)
 8003e46:	0019      	movs	r1, r3
 8003e48:	0010      	movs	r0, r2
 8003e4a:	f7ff fa75 	bl	8003338 <Flash_Read_Page>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d008      	beq.n	8003e64 <Flash_Test+0x50>
		if (!memcmp (&ThePage, &aPage, 2048))
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	491e      	ldr	r1, [pc, #120]	; (8003ed0 <Flash_Test+0xbc>)
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <Flash_Test+0xb4>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f003 fd2a 	bl	80078b4 <memcmp>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d02c      	beq.n	8003ebe <Flash_Test+0xaa>
			return;							//	ThePage == aPage:  Flash already has the test data, and works

	Write_Status_Register (1, 0);			//	Enable FLASH writes to all pages
 8003e64:	2100      	movs	r1, #0
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7ff f9c2 	bl	80031f0 <Write_Status_Register>

	Flash_Erase_Block (TestPageNumber);		//	Erase the block containing the test page
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <Flash_Test+0xc0>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7ff fa25 	bl	80032be <Flash_Erase_Block>
											//	Note: ThePage still has the test data in it
	ThePage.Spare[0].BadBlock = 0;
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <Flash_Test+0xb4>)
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[1].BadBlock = 0;			//	Mark the Test Page as no good for normal use
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <Flash_Test+0xb4>)
 8003e80:	2381      	movs	r3, #129	; 0x81
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	2100      	movs	r1, #0
 8003e86:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[2].BadBlock = 0;
 8003e88:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <Flash_Test+0xb4>)
 8003e8a:	2382      	movs	r3, #130	; 0x82
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[3].BadBlock = 0;
 8003e92:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <Flash_Test+0xb4>)
 8003e94:	2383      	movs	r3, #131	; 0x83
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	2100      	movs	r1, #0
 8003e9a:	52d1      	strh	r1, [r2, r3]

	if (! Flash_Write_Page (TestPageNumber))
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <Flash_Test+0xc0>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7ff fa92 	bl	80033c8 <Flash_Write_Page>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d105      	bne.n	8003eb4 <Flash_Test+0xa0>
		Board_Fails |= FLASH_FAIL;			//	Performs write of ThePage, read-back into aPage, and comparison
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <Flash_Test+0xc4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2204      	movs	r2, #4
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <Flash_Test+0xc4>)
 8003eb2:	601a      	str	r2, [r3, #0]

	Write_Status_Register (1, 0x7C);		//	Disable all FLASH writes -- write protected
 8003eb4:	217c      	movs	r1, #124	; 0x7c
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f7ff f99a 	bl	80031f0 <Write_Status_Register>
 8003ebc:	e000      	b.n	8003ec0 <Flash_Test+0xac>
			return;							//	ThePage == aPage:  Flash already has the test data, and works
 8003ebe:	46c0      	nop			; (mov r8, r8)
}
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	20004870 	.word	0x20004870
 8003ecc:	000007ff 	.word	0x000007ff
 8003ed0:	20002038 	.word	0x20002038
 8003ed4:	0000ff80 	.word	0x0000ff80
 8003ed8:	200050c4 	.word	0x200050c4

08003edc <Flash_Init>:


void Flash_Init()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	SPI1_Init();			//	Interface to external flash memory
 8003ee0:	f7fe ff24 	bl	8002d2c <SPI1_Init>
	Flash_Wait();			//	Make sure Flash is idle
 8003ee4:	f7ff f862 	bl	8002fac <Flash_Wait>
	Flash_Enable();
 8003ee8:	f7ff f846 	bl	8002f78 <Flash_Enable>
	SPI_Write (0xFF);		//	Perform a DEVICE RESET of the Flash
 8003eec:	20ff      	movs	r0, #255	; 0xff
 8003eee:	f7fe ff6d 	bl	8002dcc <SPI_Write>
	Flash_Disable();
 8003ef2:	f7ff f84e 	bl	8002f92 <Flash_Disable>
	Flash_Read_Unique_ID();
 8003ef6:	f7ff fb15 	bl	8003524 <Flash_Read_Unique_ID>
	Flash_Test();
 8003efa:	f7ff ff8b 	bl	8003e14 <Flash_Test>

	memset (&ThePage, 0xFF, sizeof(ThePage));
 8003efe:	2384      	movs	r3, #132	; 0x84
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <Flash_Init+0x54>)
 8003f04:	21ff      	movs	r1, #255	; 0xff
 8003f06:	0018      	movs	r0, r3
 8003f08:	f003 fcec 	bl	80078e4 <memset>
	nEvents = 0;
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <Flash_Init+0x58>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
	Send.Nothing = true;
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <Flash_Init+0x5c>)
 8003f14:	2385      	movs	r3, #133	; 0x85
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	2101      	movs	r1, #1
 8003f1a:	54d1      	strb	r1, [r2, r3]
	flash_Mutex = xSemaphoreCreateMutex(); // initialize the mutex for access to flash
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7fc fde8 	bl	8000af2 <xQueueCreateMutex>
 8003f22:	0002      	movs	r2, r0
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <Flash_Init+0x60>)
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20004870 	.word	0x20004870
 8003f34:	20004868 	.word	0x20004868
 8003f38:	20004014 	.word	0x20004014
 8003f3c:	2000486c 	.word	0x2000486c

08003f40 <LED_ON>:
  * @brief	Turn specified LED on
  * @param	None
  * @retval None
  */
void LED_ON (int LED_pin)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	GPIO_WriteBit (GPIOB, LED_pin, Bit_RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4804      	ldr	r0, [pc, #16]	; (8003f60 <LED_ON+0x20>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	0019      	movs	r1, r3
 8003f52:	f7fe fa44 	bl	80023de <GPIO_WriteBit>
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	48000400 	.word	0x48000400

08003f64 <LED_OFF>:
  * @brief	Turn specified LED off
  * @param	None
  * @retval None
  */
void LED_OFF (int LED_pin)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	GPIO_WriteBit (GPIOB, LED_pin, Bit_SET);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4804      	ldr	r0, [pc, #16]	; (8003f84 <LED_OFF+0x20>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	0019      	movs	r1, r3
 8003f76:	f7fe fa32 	bl	80023de <GPIO_WriteBit>
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	48000400 	.word	0x48000400

08003f88 <Modem_Init>:




void Modem_Init()
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	uart5_Init();		//	CELL MODEM UART
 8003f8c:	f003 f9f8 	bl	8007380 <uart5_Init>
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <START_I2C>:
	 1958,  1912,  1868,  1824,  1782,  1741,  1701,  1662,  1624,  1587
};


static void START_I2C()
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	af00      	add	r7, sp, #0
	TEMP_SDA(1);				//	Send repeated-start if necessary
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f001 fe78 	bl	8005c90 <TEMP_SDA>
	TEMP_SCL(1);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f001 fe5f 	bl	8005c64 <TEMP_SCL>
	uS_Delay(3);
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	f002 f8a0 	bl	80060ec <uS_Delay>
	TEMP_SDA(0);				//	Do START bit
 8003fac:	2000      	movs	r0, #0
 8003fae:	f001 fe6f 	bl	8005c90 <TEMP_SDA>
	uS_Delay(3);
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	f002 f89a 	bl	80060ec <uS_Delay>
	TEMP_SCL(0);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f001 fe53 	bl	8005c64 <TEMP_SCL>
	uS_Delay(5);
 8003fbe:	2005      	movs	r0, #5
 8003fc0:	f002 f894 	bl	80060ec <uS_Delay>
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <STOP_I2C>:


static void STOP_I2C()
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	af00      	add	r7, sp, #0
	TEMP_SDA(0);
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f001 fe5e 	bl	8005c90 <TEMP_SDA>
	uS_Delay(3);
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	f002 f889 	bl	80060ec <uS_Delay>
	TEMP_SCL(1);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f001 fe42 	bl	8005c64 <TEMP_SCL>
	uS_Delay(3);
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	f002 f883 	bl	80060ec <uS_Delay>
	TEMP_SDA(1);
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f001 fe52 	bl	8005c90 <TEMP_SDA>
	uS_Delay(5);
 8003fec:	2005      	movs	r0, #5
 8003fee:	f002 f87d 	bl	80060ec <uS_Delay>
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <ACK_I2C>:


static void ACK_I2C()			//	ACK ==> continue reading
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
	TEMP_SDA(0);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f001 fe47 	bl	8005c90 <TEMP_SDA>
	TEMP_SCL(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f001 fe2e 	bl	8005c64 <TEMP_SCL>
	uS_Delay(3);
 8004008:	2003      	movs	r0, #3
 800400a:	f002 f86f 	bl	80060ec <uS_Delay>
	TEMP_SCL(0);
 800400e:	2000      	movs	r0, #0
 8004010:	f001 fe28 	bl	8005c64 <TEMP_SCL>
	TEMP_SDA(1);				//	allow slave's data to come in again
 8004014:	2001      	movs	r0, #1
 8004016:	f001 fe3b 	bl	8005c90 <TEMP_SDA>
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <NACK_I2C>:


static void NACK_I2C()			//	NACK ==> discontinue read
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
	TEMP_SDA(1);
 8004024:	2001      	movs	r0, #1
 8004026:	f001 fe33 	bl	8005c90 <TEMP_SDA>
	uS_Delay(3);
 800402a:	2003      	movs	r0, #3
 800402c:	f002 f85e 	bl	80060ec <uS_Delay>
	TEMP_SCL(1);
 8004030:	2001      	movs	r0, #1
 8004032:	f001 fe17 	bl	8005c64 <TEMP_SCL>
	uS_Delay(3);
 8004036:	2003      	movs	r0, #3
 8004038:	f002 f858 	bl	80060ec <uS_Delay>
	TEMP_SCL(0);
 800403c:	2000      	movs	r0, #0
 800403e:	f001 fe11 	bl	8005c64 <TEMP_SCL>
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <WRITE_I2C_BYTE>:


static bool WRITE_I2C_BYTE (int c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	int  n;
	bool b;

	for (n=0; n<8; n++)
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e019      	b.n	800408a <WRITE_I2C_BYTE+0x42>
	{
		if (c & 0x80)			//	Shift out the data, MSB first...
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	4013      	ands	r3, r2
 800405c:	d003      	beq.n	8004066 <WRITE_I2C_BYTE+0x1e>
			TEMP_SDA(1);
 800405e:	2001      	movs	r0, #1
 8004060:	f001 fe16 	bl	8005c90 <TEMP_SDA>
 8004064:	e002      	b.n	800406c <WRITE_I2C_BYTE+0x24>
		else
			TEMP_SDA(0);
 8004066:	2000      	movs	r0, #0
 8004068:	f001 fe12 	bl	8005c90 <TEMP_SDA>

		c <<= 1;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	607b      	str	r3, [r7, #4]
		TEMP_SCL(1);
 8004072:	2001      	movs	r0, #1
 8004074:	f001 fdf6 	bl	8005c64 <TEMP_SCL>
		uS_Delay(3);
 8004078:	2003      	movs	r0, #3
 800407a:	f002 f837 	bl	80060ec <uS_Delay>
		TEMP_SCL(0);
 800407e:	2000      	movs	r0, #0
 8004080:	f001 fdf0 	bl	8005c64 <TEMP_SCL>
	for (n=0; n<8; n++)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b07      	cmp	r3, #7
 800408e:	dde2      	ble.n	8004056 <WRITE_I2C_BYTE+0xe>
	}
	TEMP_SDA(1);				//	Set data line HI so ACK can come in
 8004090:	2001      	movs	r0, #1
 8004092:	f001 fdfd 	bl	8005c90 <TEMP_SDA>
	uS_Delay(3);
 8004096:	2003      	movs	r0, #3
 8004098:	f002 f828 	bl	80060ec <uS_Delay>
	TEMP_SCL(1);				//	Clock in the device's ACK bit
 800409c:	2001      	movs	r0, #1
 800409e:	f001 fde1 	bl	8005c64 <TEMP_SCL>
	uS_Delay(5);
 80040a2:	2005      	movs	r0, #5
 80040a4:	f002 f822 	bl	80060ec <uS_Delay>
	b = true;
 80040a8:	230b      	movs	r3, #11
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
	if (TEMP_DAT)
 80040b0:	2390      	movs	r3, #144	; 0x90
 80040b2:	05db      	lsls	r3, r3, #23
 80040b4:	8a1b      	ldrh	r3, [r3, #16]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	001a      	movs	r2, r3
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4013      	ands	r3, r2
 80040c0:	d003      	beq.n	80040ca <WRITE_I2C_BYTE+0x82>
		b = false;
 80040c2:	230b      	movs	r3, #11
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
	TEMP_SCL(0);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f001 fdca 	bl	8005c64 <TEMP_SCL>
	return	b;
 80040d0:	230b      	movs	r3, #11
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b004      	add	sp, #16
 80040dc:	bd80      	pop	{r7, pc}

080040de <READ_I2C_BYTE>:


static int READ_I2C_BYTE()
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
	int	n=8;
 80040e4:	2308      	movs	r3, #8
 80040e6:	607b      	str	r3, [r7, #4]
	int c=0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]

	while (--n >= 0)
 80040ec:	e017      	b.n	800411e <READ_I2C_BYTE+0x40>
	{
		c <<= 1;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	603b      	str	r3, [r7, #0]
		if (TEMP_DAT)			//	Shift in the data, MSB first...
 80040f4:	2390      	movs	r3, #144	; 0x90
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	8a1b      	ldrh	r3, [r3, #16]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	001a      	movs	r2, r3
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4013      	ands	r3, r2
 8004104:	d002      	beq.n	800410c <READ_I2C_BYTE+0x2e>
			c++;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	603b      	str	r3, [r7, #0]
		TEMP_SCL(1);
 800410c:	2001      	movs	r0, #1
 800410e:	f001 fda9 	bl	8005c64 <TEMP_SCL>
		uS_Delay(3);
 8004112:	2003      	movs	r0, #3
 8004114:	f001 ffea 	bl	80060ec <uS_Delay>
		TEMP_SCL(0);
 8004118:	2000      	movs	r0, #0
 800411a:	f001 fda3 	bl	8005c64 <TEMP_SCL>
	while (--n >= 0)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3b01      	subs	r3, #1
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	dae1      	bge.n	80040ee <READ_I2C_BYTE+0x10>
	}
	return	c;
 800412a:	683b      	ldr	r3, [r7, #0]
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <Read_Temperature>:


bool Read_Temperature (uint32 *v)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	bool	b;
	uint32  a;
	int		msb, lsb;

	a = 0x29;						//	Perform a read access
 800413c:	2329      	movs	r3, #41	; 0x29
 800413e:	617b      	str	r3, [r7, #20]
	if (Set_Temp_Update_Rate)
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <Read_Temperature+0xec>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <Read_Temperature+0x1a>
		a--;						//	If time to set the update rate, make it a write access
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3b01      	subs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]

	START_I2C();
 800414e:	f7ff ff22 	bl	8003f96 <START_I2C>
	b = WRITE_I2C_BYTE (a);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2213      	movs	r2, #19
 8004156:	18bc      	adds	r4, r7, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff ff75 	bl	8004048 <WRITE_I2C_BYTE>
 800415e:	0003      	movs	r3, r0
 8004160:	7023      	strb	r3, [r4, #0]
	if (!b)
 8004162:	2313      	movs	r3, #19
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <Read_Temperature+0x40>
	{
		STOP_I2C();					//	A/D still converting: close the bus transaction and exit
 800416c:	f7ff ff2d 	bl	8003fca <STOP_I2C>
		return	false;
 8004170:	2300      	movs	r3, #0
 8004172:	e051      	b.n	8004218 <Read_Temperature+0xe4>
	}

	if (Set_Temp_Update_Rate)
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <Read_Temperature+0xec>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <Read_Temperature+0x8a>
	{
		Set_Temp_Update_Rate = false;
 800417c:	4b28      	ldr	r3, [pc, #160]	; (8004220 <Read_Temperature+0xec>)
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
		b = WRITE_I2C_BYTE (1);		//	Set conversion rate to 30 Hz
 8004182:	2313      	movs	r3, #19
 8004184:	18fc      	adds	r4, r7, r3
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff ff5e 	bl	8004048 <WRITE_I2C_BYTE>
 800418c:	0003      	movs	r3, r0
 800418e:	7023      	strb	r3, [r4, #0]
		START_I2C();				//	This is actually a repeated-start condition
 8004190:	f7ff ff01 	bl	8003f96 <START_I2C>
		b &= WRITE_I2C_BYTE(0x29);	//	Address the A/D again, for a read access
 8004194:	2029      	movs	r0, #41	; 0x29
 8004196:	f7ff ff57 	bl	8004048 <WRITE_I2C_BYTE>
 800419a:	0003      	movs	r3, r0
 800419c:	0019      	movs	r1, r3
 800419e:	2313      	movs	r3, #19
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2213      	movs	r2, #19
 80041a4:	18ba      	adds	r2, r7, r2
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	400a      	ands	r2, r1
 80041aa:	701a      	strb	r2, [r3, #0]

		if (!b)
 80041ac:	2313      	movs	r3, #19
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <Read_Temperature+0x8a>
		{
			STOP_I2C();				//	A/D stopped talking: close the bus transaction and exit
 80041b6:	f7ff ff08 	bl	8003fca <STOP_I2C>
			return	false;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e02c      	b.n	8004218 <Read_Temperature+0xe4>
		}
	}

	msb = READ_I2C_BYTE();			//	MSB of result
 80041be:	f7ff ff8e 	bl	80040de <READ_I2C_BYTE>
 80041c2:	0003      	movs	r3, r0
 80041c4:	60fb      	str	r3, [r7, #12]
	ACK_I2C();
 80041c6:	f7ff ff17 	bl	8003ff8 <ACK_I2C>
	lsb = READ_I2C_BYTE();			//	LSB of result
 80041ca:	f7ff ff88 	bl	80040de <READ_I2C_BYTE>
 80041ce:	0003      	movs	r3, r0
 80041d0:	60bb      	str	r3, [r7, #8]
	NACK_I2C();
 80041d2:	f7ff ff25 	bl	8004020 <NACK_I2C>
	STOP_I2C();
 80041d6:	f7ff fef8 	bl	8003fca <STOP_I2C>

	a = msb & 0xFF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	4013      	ands	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
	a <<= 8;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	617b      	str	r3, [r7, #20]
	a += lsb & 0xFF;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	4013      	ands	r3, r2
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
	*v = a;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	601a      	str	r2, [r3, #0]

	if (a >= Temp_Table[0])
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <Read_Temperature+0xf0>)
 80041fc:	001a      	movs	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	d801      	bhi.n	8004208 <Read_Temperature+0xd4>
		return	false;				//	Reading too high
 8004204:	2300      	movs	r3, #0
 8004206:	e007      	b.n	8004218 <Read_Temperature+0xe4>
	if (a <= Temp_Table[Temp_Table_Size-1])
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <Read_Temperature+0xf4>)
 800420a:	001a      	movs	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	d301      	bcc.n	8004216 <Read_Temperature+0xe2>
		return	false;				//	Reading too low
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <Read_Temperature+0xe4>

	return	true;					//	Valid reading
 8004216:	2301      	movs	r3, #1
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b007      	add	sp, #28
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	200050b8 	.word	0x200050b8
 8004224:	0000c5c8 	.word	0x0000c5c8
 8004228:	00000633 	.word	0x00000633

0800422c <Get_Temperature>:


int  Get_Temperature()				//	OUT:	battery temperature, averaged over previous second.  LSB= 0.1 C
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
	int32  v, t, i;
	int32  a, b;

	if (nV > 0)
 8004232:	4b34      	ldr	r3, [pc, #208]	; (8004304 <Get_Temperature+0xd8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	dd0a      	ble.n	8004250 <Get_Temperature+0x24>
		v = sumV / nV;
 800423a:	4b33      	ldr	r3, [pc, #204]	; (8004308 <Get_Temperature+0xdc>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <Get_Temperature+0xd8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0019      	movs	r1, r3
 8004244:	0010      	movs	r0, r2
 8004246:	f7fb fff9 	bl	800023c <__divsi3>
 800424a:	0003      	movs	r3, r0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e002      	b.n	8004256 <Get_Temperature+0x2a>
	else
		v = AvgV;					//	No average available: use last second's value
 8004250:	4b2e      	ldr	r3, [pc, #184]	; (800430c <Get_Temperature+0xe0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]

	AvgV = v;
 8004256:	4b2d      	ldr	r3, [pc, #180]	; (800430c <Get_Temperature+0xe0>)
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]
	sumV = 0;						//	Ready for next average
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <Get_Temperature+0xdc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
	nV = 0;
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <Get_Temperature+0xd8>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

	if ((uint16)v >= Temp_Table[0])
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	b29b      	uxth	r3, r3
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <Get_Temperature+0xe4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d301      	bcc.n	8004276 <Get_Temperature+0x4a>
		return	0;					//	Temp is 0 or less
 8004272:	2300      	movs	r3, #0
 8004274:	e042      	b.n	80042fc <Get_Temperature+0xd0>

	for (i=1; i<Temp_Table_Size; i++)
 8004276:	2301      	movs	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e00a      	b.n	8004292 <Get_Temperature+0x66>
		if (Temp_Table[i] <= v)
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <Get_Temperature+0xe8>)
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	0052      	lsls	r2, r2, #1
 8004282:	5ad3      	ldrh	r3, [r2, r3]
 8004284:	001a      	movs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	dd06      	ble.n	800429a <Get_Temperature+0x6e>
	for (i=1; i<Temp_Table_Size; i++)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3301      	adds	r3, #1
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b8b      	cmp	r3, #139	; 0x8b
 8004296:	ddf1      	ble.n	800427c <Get_Temperature+0x50>
 8004298:	e000      	b.n	800429c <Get_Temperature+0x70>
			break;					//	Temp is between [i-1] and [i]
 800429a:	46c0      	nop			; (mov r8, r8)

	if (i >= Temp_Table_Size)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b8b      	cmp	r3, #139	; 0x8b
 80042a0:	dd01      	ble.n	80042a6 <Get_Temperature+0x7a>
		return	139;				//	Temp is 139 or greater
 80042a2:	238b      	movs	r3, #139	; 0x8b
 80042a4:	e02a      	b.n	80042fc <Get_Temperature+0xd0>

	a = Temp_Table[i-1];			//	Temp is between i-1 and i  (degrees C)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <Get_Temperature+0xe8>)
 80042ac:	0052      	lsls	r2, r2, #1
 80042ae:	5ad3      	ldrh	r3, [r2, r3]
 80042b0:	60fb      	str	r3, [r7, #12]
	b = a - Temp_Table[i];			//	B = distance from [i-1] to [i]
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <Get_Temperature+0xe8>)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	0052      	lsls	r2, r2, #1
 80042b8:	5ad3      	ldrh	r3, [r2, r3]
 80042ba:	001a      	movs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	60bb      	str	r3, [r7, #8]
	t = (i-1) * 10;					//	Store the whole-degrees part	LSB = 0.1 C
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	0013      	movs	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	607b      	str	r3, [r7, #4]

	i = (((a-v)*10)+(b>>1)) / b;	//	Fractional degrees, rounded off   (tenths)
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	0013      	movs	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	001a      	movs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	105b      	asrs	r3, r3, #1
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7fb ffa7 	bl	800023c <__divsi3>
 80042ee:	0003      	movs	r3, r0
 80042f0:	613b      	str	r3, [r7, #16]
	t += i;
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	607b      	str	r3, [r7, #4]
	return	t;						//	Full temperature	LSB = 0.1 C
 80042fa:	687b      	ldr	r3, [r7, #4]
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b006      	add	sp, #24
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200028c4 	.word	0x200028c4
 8004308:	200028c0 	.word	0x200028c0
 800430c:	200028c8 	.word	0x200028c8
 8004310:	0000c5c8 	.word	0x0000c5c8
 8004314:	08009eac 	.word	0x08009eac

08004318 <Handle_Temp>:


void Handle_Temp()
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
	uint32  t;

	Need_Temp = false;
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <Handle_Temp+0x3c>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
	if (Read_Temperature (&t))		//	Ignore process if data not available yet
 8004324:	1d3b      	adds	r3, r7, #4
 8004326:	0018      	movs	r0, r3
 8004328:	f7ff ff04 	bl	8004134 <Read_Temperature>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d00c      	beq.n	800434a <Handle_Temp+0x32>
	{
		sumV += t;					//	Add to the average
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <Handle_Temp+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	001a      	movs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	001a      	movs	r2, r3
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <Handle_Temp+0x40>)
 800433e:	601a      	str	r2, [r3, #0]
		nV++;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <Handle_Temp+0x44>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <Handle_Temp+0x44>)
 8004348:	601a      	str	r2, [r3, #0]
			if (t < 32757 || t > 32760)
				debug_Printf("*** t: %d ***\r\n", t);
		}
#endif
	}
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200050e4 	.word	0x200050e4
 8004358:	200028c0 	.word	0x200028c0
 800435c:	200028c4 	.word	0x200028c4

08004360 <Temperature_Init>:


void Temperature_Init()
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
	uint32  v;

	STOP_I2C();
 8004366:	f7ff fe30 	bl	8003fca <STOP_I2C>

	nV = 0;
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <Temperature_Init+0x5c>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
	sumV = 0;
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <Temperature_Init+0x60>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
	AvgV = 0;
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <Temperature_Init+0x64>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
	Read_Temperature (&v);		//	Read 3 times...
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff fed8 	bl	8004134 <Read_Temperature>
	uS_Delay(100000);
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <Temperature_Init+0x68>)
 8004386:	0018      	movs	r0, r3
 8004388:	f001 feb0 	bl	80060ec <uS_Delay>
	Read_Temperature (&v);
 800438c:	1d3b      	adds	r3, r7, #4
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fed0 	bl	8004134 <Read_Temperature>
	uS_Delay(100000);
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <Temperature_Init+0x68>)
 8004396:	0018      	movs	r0, r3
 8004398:	f001 fea8 	bl	80060ec <uS_Delay>
	if (!Read_Temperature (&v))
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	0018      	movs	r0, r3
 80043a0:	f7ff fec8 	bl	8004134 <Read_Temperature>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d105      	bne.n	80043b4 <Temperature_Init+0x54>
		Board_Fails |= TEMP_FAIL;	//	Reading is out of range on the third try
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <Temperature_Init+0x6c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <Temperature_Init+0x6c>)
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	200028c4 	.word	0x200028c4
 80043c0:	200028c0 	.word	0x200028c0
 80043c4:	200028c8 	.word	0x200028c8
 80043c8:	000186a0 	.word	0x000186a0
 80043cc:	200050c4 	.word	0x200050c4

080043d0 <START_I2C>:
static uint32	AbsMaxV;		//	Absolute maximum valid Voltage, given the battery size
static uint32	AbsMinV;		//	Absolute minimum valid Voltage, given the battery size


static void START_I2C()
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	VOLT_SDA(1);				//	Send repeated-start if necessary
 80043d4:	2001      	movs	r0, #1
 80043d6:	f001 fc87 	bl	8005ce8 <VOLT_SDA>
	VOLT_SCL(1);
 80043da:	2001      	movs	r0, #1
 80043dc:	f001 fc6e 	bl	8005cbc <VOLT_SCL>
	uS_Delay(3);
 80043e0:	2003      	movs	r0, #3
 80043e2:	f001 fe83 	bl	80060ec <uS_Delay>
	VOLT_SDA(0);				//	Do START bit
 80043e6:	2000      	movs	r0, #0
 80043e8:	f001 fc7e 	bl	8005ce8 <VOLT_SDA>
	uS_Delay(3);
 80043ec:	2003      	movs	r0, #3
 80043ee:	f001 fe7d 	bl	80060ec <uS_Delay>
	VOLT_SCL(0);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f001 fc62 	bl	8005cbc <VOLT_SCL>
	uS_Delay(5);
 80043f8:	2005      	movs	r0, #5
 80043fa:	f001 fe77 	bl	80060ec <uS_Delay>
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <STOP_I2C>:


static void STOP_I2C()
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
	VOLT_SDA(0);
 8004408:	2000      	movs	r0, #0
 800440a:	f001 fc6d 	bl	8005ce8 <VOLT_SDA>
	uS_Delay(3);
 800440e:	2003      	movs	r0, #3
 8004410:	f001 fe6c 	bl	80060ec <uS_Delay>
	VOLT_SCL(1);
 8004414:	2001      	movs	r0, #1
 8004416:	f001 fc51 	bl	8005cbc <VOLT_SCL>
	uS_Delay(3);
 800441a:	2003      	movs	r0, #3
 800441c:	f001 fe66 	bl	80060ec <uS_Delay>
	VOLT_SDA(1);
 8004420:	2001      	movs	r0, #1
 8004422:	f001 fc61 	bl	8005ce8 <VOLT_SDA>
	uS_Delay(5);
 8004426:	2005      	movs	r0, #5
 8004428:	f001 fe60 	bl	80060ec <uS_Delay>
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <ACK_I2C>:


static void ACK_I2C()			//	ACK ==> continue reading
{
 8004432:	b580      	push	{r7, lr}
 8004434:	af00      	add	r7, sp, #0
	VOLT_SDA(0);
 8004436:	2000      	movs	r0, #0
 8004438:	f001 fc56 	bl	8005ce8 <VOLT_SDA>
	VOLT_SCL(1);
 800443c:	2001      	movs	r0, #1
 800443e:	f001 fc3d 	bl	8005cbc <VOLT_SCL>
	uS_Delay(3);
 8004442:	2003      	movs	r0, #3
 8004444:	f001 fe52 	bl	80060ec <uS_Delay>
	VOLT_SCL(0);
 8004448:	2000      	movs	r0, #0
 800444a:	f001 fc37 	bl	8005cbc <VOLT_SCL>
	VOLT_SDA(1);				//	allow slave's data to come in again
 800444e:	2001      	movs	r0, #1
 8004450:	f001 fc4a 	bl	8005ce8 <VOLT_SDA>
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <NACK_I2C>:


static void NACK_I2C()			//	NACK ==> discontinue read
{
 800445a:	b580      	push	{r7, lr}
 800445c:	af00      	add	r7, sp, #0
	VOLT_SDA(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f001 fc42 	bl	8005ce8 <VOLT_SDA>
	uS_Delay(3);
 8004464:	2003      	movs	r0, #3
 8004466:	f001 fe41 	bl	80060ec <uS_Delay>
	VOLT_SCL(1);
 800446a:	2001      	movs	r0, #1
 800446c:	f001 fc26 	bl	8005cbc <VOLT_SCL>
	uS_Delay(3);
 8004470:	2003      	movs	r0, #3
 8004472:	f001 fe3b 	bl	80060ec <uS_Delay>
	VOLT_SCL(0);
 8004476:	2000      	movs	r0, #0
 8004478:	f001 fc20 	bl	8005cbc <VOLT_SCL>
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <WRITE_I2C_BYTE>:


static bool WRITE_I2C_BYTE (int c)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	int  n;
	bool b;

	for (n=0; n<8; n++)
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e019      	b.n	80044c4 <WRITE_I2C_BYTE+0x42>
	{
		if (c & 0x80)			//	Shift out the data, MSB first...
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	4013      	ands	r3, r2
 8004496:	d003      	beq.n	80044a0 <WRITE_I2C_BYTE+0x1e>
			VOLT_SDA(1);
 8004498:	2001      	movs	r0, #1
 800449a:	f001 fc25 	bl	8005ce8 <VOLT_SDA>
 800449e:	e002      	b.n	80044a6 <WRITE_I2C_BYTE+0x24>
		else
			VOLT_SDA(0);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f001 fc21 	bl	8005ce8 <VOLT_SDA>

		c <<= 1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
		VOLT_SCL(1);
 80044ac:	2001      	movs	r0, #1
 80044ae:	f001 fc05 	bl	8005cbc <VOLT_SCL>
		uS_Delay(3);
 80044b2:	2003      	movs	r0, #3
 80044b4:	f001 fe1a 	bl	80060ec <uS_Delay>
		VOLT_SCL(0);
 80044b8:	2000      	movs	r0, #0
 80044ba:	f001 fbff 	bl	8005cbc <VOLT_SCL>
	for (n=0; n<8; n++)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b07      	cmp	r3, #7
 80044c8:	dde2      	ble.n	8004490 <WRITE_I2C_BYTE+0xe>
	}
	VOLT_SDA(1);				//	Set data line HI so ACK can come in
 80044ca:	2001      	movs	r0, #1
 80044cc:	f001 fc0c 	bl	8005ce8 <VOLT_SDA>
	uS_Delay(3);
 80044d0:	2003      	movs	r0, #3
 80044d2:	f001 fe0b 	bl	80060ec <uS_Delay>
	VOLT_SCL(1);				//	Clock in the device's ACK bit
 80044d6:	2001      	movs	r0, #1
 80044d8:	f001 fbf0 	bl	8005cbc <VOLT_SCL>
	uS_Delay(5);
 80044dc:	2005      	movs	r0, #5
 80044de:	f001 fe05 	bl	80060ec <uS_Delay>
	b = true;
 80044e2:	230b      	movs	r3, #11
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
	if (VOLT_DAT)
 80044ea:	2390      	movs	r3, #144	; 0x90
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	8a1b      	ldrh	r3, [r3, #16]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	015b      	lsls	r3, r3, #5
 80044f8:	4013      	ands	r3, r2
 80044fa:	d003      	beq.n	8004504 <WRITE_I2C_BYTE+0x82>
		b = false;
 80044fc:	230b      	movs	r3, #11
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
	VOLT_SCL(0);
 8004504:	2000      	movs	r0, #0
 8004506:	f001 fbd9 	bl	8005cbc <VOLT_SCL>
	return	b;
 800450a:	230b      	movs	r3, #11
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	781b      	ldrb	r3, [r3, #0]
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b004      	add	sp, #16
 8004516:	bd80      	pop	{r7, pc}

08004518 <READ_I2C_BYTE>:


static int READ_I2C_BYTE()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	int	n=8;
 800451e:	2308      	movs	r3, #8
 8004520:	607b      	str	r3, [r7, #4]
	int c=0;
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]

	while (--n >= 0)
 8004526:	e017      	b.n	8004558 <READ_I2C_BYTE+0x40>
	{
		c <<= 1;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	603b      	str	r3, [r7, #0]
		if (VOLT_DAT)			//	Shift in the data, MSB first...
 800452e:	2390      	movs	r3, #144	; 0x90
 8004530:	05db      	lsls	r3, r3, #23
 8004532:	8a1b      	ldrh	r3, [r3, #16]
 8004534:	b29b      	uxth	r3, r3
 8004536:	001a      	movs	r2, r3
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	4013      	ands	r3, r2
 800453e:	d002      	beq.n	8004546 <READ_I2C_BYTE+0x2e>
			c++;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	603b      	str	r3, [r7, #0]
		VOLT_SCL(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f001 fbb8 	bl	8005cbc <VOLT_SCL>
		uS_Delay(3);
 800454c:	2003      	movs	r0, #3
 800454e:	f001 fdcd 	bl	80060ec <uS_Delay>
		VOLT_SCL(0);
 8004552:	2000      	movs	r0, #0
 8004554:	f001 fbb2 	bl	8005cbc <VOLT_SCL>
	while (--n >= 0)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dae1      	bge.n	8004528 <READ_I2C_BYTE+0x10>
	}
	return	c;
 8004564:	683b      	ldr	r3, [r7, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <Read_Volts>:


bool Read_Volts (uint32 *v)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	bool b;
	int  a;
	int  msb, lsb;

	a = 0x29;						//	Perform a read access
 8004578:	2329      	movs	r3, #41	; 0x29
 800457a:	617b      	str	r3, [r7, #20]
	if (Set_Volt_Update_Rate)
 800457c:	4b38      	ldr	r3, [pc, #224]	; (8004660 <Read_Volts+0xf0>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <Read_Volts+0x1a>
		a--;						//	If time to set the update rate, make it a write access
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3b01      	subs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]

	START_I2C();
 800458a:	f7ff ff21 	bl	80043d0 <START_I2C>
	b = WRITE_I2C_BYTE (a);
 800458e:	2313      	movs	r3, #19
 8004590:	18fc      	adds	r4, r7, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff ff74 	bl	8004482 <WRITE_I2C_BYTE>
 800459a:	0003      	movs	r3, r0
 800459c:	7023      	strb	r3, [r4, #0]
	if (!b)
 800459e:	2313      	movs	r3, #19
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d103      	bne.n	80045b0 <Read_Volts+0x40>
	{
		STOP_I2C();					//	A/D still converting: close the bus transaction and exit
 80045a8:	f7ff ff2c 	bl	8004404 <STOP_I2C>
		return	false;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e053      	b.n	8004658 <Read_Volts+0xe8>
	}

	if (Set_Volt_Update_Rate)
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <Read_Volts+0xf0>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <Read_Volts+0x8a>
	{
		Set_Volt_Update_Rate = false;
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <Read_Volts+0xf0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
		b = WRITE_I2C_BYTE (1);		//	Set conversion rate to 30 Hz
 80045be:	2313      	movs	r3, #19
 80045c0:	18fc      	adds	r4, r7, r3
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7ff ff5d 	bl	8004482 <WRITE_I2C_BYTE>
 80045c8:	0003      	movs	r3, r0
 80045ca:	7023      	strb	r3, [r4, #0]
		START_I2C();				//	This is actually a repeated-start condition
 80045cc:	f7ff ff00 	bl	80043d0 <START_I2C>
		b &= WRITE_I2C_BYTE(0x29);	//	Address the A/D again, for a read access
 80045d0:	2029      	movs	r0, #41	; 0x29
 80045d2:	f7ff ff56 	bl	8004482 <WRITE_I2C_BYTE>
 80045d6:	0003      	movs	r3, r0
 80045d8:	0019      	movs	r1, r3
 80045da:	2313      	movs	r3, #19
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2213      	movs	r2, #19
 80045e0:	18ba      	adds	r2, r7, r2
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	400a      	ands	r2, r1
 80045e6:	701a      	strb	r2, [r3, #0]

		if (!b)
 80045e8:	2313      	movs	r3, #19
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <Read_Volts+0x8a>
		{
			STOP_I2C();				//	A/D stopped talking: close the bus transaction and exit
 80045f2:	f7ff ff07 	bl	8004404 <STOP_I2C>
			return	false;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e02e      	b.n	8004658 <Read_Volts+0xe8>
		}
	}

	msb = READ_I2C_BYTE();			//	MSB of result
 80045fa:	f7ff ff8d 	bl	8004518 <READ_I2C_BYTE>
 80045fe:	0003      	movs	r3, r0
 8004600:	60fb      	str	r3, [r7, #12]
	ACK_I2C();
 8004602:	f7ff ff16 	bl	8004432 <ACK_I2C>
	lsb = READ_I2C_BYTE();			//	LSB of result
 8004606:	f7ff ff87 	bl	8004518 <READ_I2C_BYTE>
 800460a:	0003      	movs	r3, r0
 800460c:	60bb      	str	r3, [r7, #8]
	NACK_I2C();
 800460e:	f7ff ff24 	bl	800445a <NACK_I2C>
	STOP_I2C();
 8004612:	f7ff fef7 	bl	8004404 <STOP_I2C>

	*v = msb & 0xFF;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	401a      	ands	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
	*v <<= 8;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
	*v += lsb & 0xFF;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	21ff      	movs	r1, #255	; 0xff
 8004632:	400b      	ands	r3, r1
 8004634:	18d2      	adds	r2, r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]

	if (*v == 0 || *v == 0xFFFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <Read_Volts+0xdc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <Read_Volts+0xf4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d104      	bne.n	8004656 <Read_Volts+0xe6>
	{
		*v = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
		return	false;				//	Invalid reading
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <Read_Volts+0xe8>
	}
	return	true;					//	Valid reading
 8004656:	2301      	movs	r3, #1
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b007      	add	sp, #28
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	200050c8 	.word	0x200050c8
 8004664:	0000ffff 	.word	0x0000ffff

08004668 <ADC_To_Volts>:


static int32 ADC_To_Volts (int32 adc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	return (adc * 8442) >> 13;		//	Convert ADC value to voltage    LSB = 1mV
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a03      	ldr	r2, [pc, #12]	; (8004680 <ADC_To_Volts+0x18>)
 8004674:	4353      	muls	r3, r2
 8004676:	135b      	asrs	r3, r3, #13
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}
 8004680:	000020fa 	.word	0x000020fa

08004684 <Volts_To_ADC>:


static int32 Volts_To_ADC (int v)	//	Volts in, corresponding A/D value out
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	int32 t = v;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
	return (t << 13) / 8442;		//	Convert ADC value to voltage    LSB = 1mV
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	035b      	lsls	r3, r3, #13
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <Volts_To_ADC+0x24>)
 8004696:	0018      	movs	r0, r3
 8004698:	f7fb fdd0 	bl	800023c <__divsi3>
 800469c:	0003      	movs	r3, r0
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	000020fa 	.word	0x000020fa

080046ac <Get_Volts>:


int  Get_Volts()					//	OUT:	battery voltage, averaged over previous second.  LSB=1mV
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
	int32  v;

	if (nV > 0)
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <Get_Volts+0x54>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <Get_Volts+0x24>
		v = sumV / nV;
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <Get_Volts+0x58>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <Get_Volts+0x54>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0019      	movs	r1, r3
 80046c4:	0010      	movs	r0, r2
 80046c6:	f7fb fd2f 	bl	8000128 <__udivsi3>
 80046ca:	0003      	movs	r3, r0
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e002      	b.n	80046d6 <Get_Volts+0x2a>
	else
		v = AvgV;					//	No average available: use last second's value
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <Get_Volts+0x5c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	607b      	str	r3, [r7, #4]

	AvgV = v;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <Get_Volts+0x5c>)
 80046da:	601a      	str	r2, [r3, #0]
	sumV = 0;						//	Ready for next average
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <Get_Volts+0x58>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
	nV = 0;
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <Get_Volts+0x54>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	v = ADC_To_Volts (v);			//	Convert to voltage    LSB = 1mV
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff ffbc 	bl	8004668 <ADC_To_Volts>
 80046f0:	0003      	movs	r3, r0
 80046f2:	607b      	str	r3, [r7, #4]
	return	v;
 80046f4:	687b      	ldr	r3, [r7, #4]
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	200028d0 	.word	0x200028d0
 8004704:	200028cc 	.word	0x200028cc
 8004708:	200028d4 	.word	0x200028d4

0800470c <Handle_Volts>:


void Handle_Volts()
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
	uint32  v;

	if (Read_Volts (&v))			//	Ignore process if data not available yet
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	0018      	movs	r0, r3
 8004716:	f7ff ff2b 	bl	8004570 <Read_Volts>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d014      	beq.n	8004748 <Handle_Volts+0x3c>
	{								//	Validate the A/D value
		if ((v < AbsMaxV) && (v > AbsMinV))
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <Handle_Volts+0x4c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d20f      	bcs.n	8004748 <Handle_Volts+0x3c>
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <Handle_Volts+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90a      	bls.n	8004748 <Handle_Volts+0x3c>
		{
			sumV += v;				//	Add to the average
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <Handle_Volts+0x54>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	18d2      	adds	r2, r2, r3
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <Handle_Volts+0x54>)
 800473c:	601a      	str	r2, [r3, #0]
			nV++;
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <Handle_Volts+0x58>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <Handle_Volts+0x58>)
 8004746:	601a      	str	r2, [r3, #0]
				// did we read 10% off?
				debug_Printf("*** v: %d ***\r\n", v);
		}
#endif
	}
	Need_Volts = false;
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <Handle_Volts+0x5c>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b002      	add	sp, #8
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	200028d8 	.word	0x200028d8
 800475c:	200028dc 	.word	0x200028dc
 8004760:	200028cc 	.word	0x200028cc
 8004764:	200028d0 	.word	0x200028d0
 8004768:	200050ca 	.word	0x200050ca

0800476c <Voltage_Init>:


void Voltage_Init()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
	uint32	v, adc;

	STOP_I2C();
 8004772:	f7ff fe47 	bl	8004404 <STOP_I2C>
	nV = 0;
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <Voltage_Init+0xe0>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
	sumV = 0;
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <Voltage_Init+0xe4>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
	AvgV = 0;
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <Voltage_Init+0xe8>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
	Read_Volts(&v);		//	Read 3 times before using...
 8004788:	003b      	movs	r3, r7
 800478a:	0018      	movs	r0, r3
 800478c:	f7ff fef0 	bl	8004570 <Read_Volts>
	uS_Delay(100000);
 8004790:	4b31      	ldr	r3, [pc, #196]	; (8004858 <Voltage_Init+0xec>)
 8004792:	0018      	movs	r0, r3
 8004794:	f001 fcaa 	bl	80060ec <uS_Delay>
	Read_Volts(&v);
 8004798:	003b      	movs	r3, r7
 800479a:	0018      	movs	r0, r3
 800479c:	f7ff fee8 	bl	8004570 <Read_Volts>
	uS_Delay(100000);
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <Voltage_Init+0xec>)
 80047a2:	0018      	movs	r0, r3
 80047a4:	f001 fca2 	bl	80060ec <uS_Delay>
	v = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
	Read_Volts(&v);
 80047ac:	003b      	movs	r3, r7
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff fede 	bl	8004570 <Read_Volts>
	v = ADC_To_Volts (v);			//	Convert to voltage    LSB = 1mV
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff ff56 	bl	8004668 <ADC_To_Volts>
 80047bc:	0003      	movs	r3, r0
 80047be:	603b      	str	r3, [r7, #0]

	if (v < 7700)	Board_Fails |= VOLT_FAIL;	//	Vbat < 7.7
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4a26      	ldr	r2, [pc, #152]	; (800485c <Voltage_Init+0xf0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d805      	bhi.n	80047d4 <Voltage_Init+0x68>
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <Voltage_Init+0xf4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2202      	movs	r2, #2
 80047ce:	431a      	orrs	r2, r3
 80047d0:	4b23      	ldr	r3, [pc, #140]	; (8004860 <Voltage_Init+0xf4>)
 80047d2:	601a      	str	r2, [r3, #0]
	if (v > 65000)	Board_Fails |= VOLT_FAIL;	//	Vbat > 65.0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4a23      	ldr	r2, [pc, #140]	; (8004864 <Voltage_Init+0xf8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d905      	bls.n	80047e8 <Voltage_Init+0x7c>
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <Voltage_Init+0xf4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2202      	movs	r2, #2
 80047e2:	431a      	orrs	r2, r3
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <Voltage_Init+0xf4>)
 80047e6:	601a      	str	r2, [r3, #0]

	if (v < 16000)  Battery_Size = 1;		//	Its a 12v battery
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <Voltage_Init+0xfc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d803      	bhi.n	80047f8 <Voltage_Init+0x8c>
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <Voltage_Init+0x100>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e012      	b.n	800481e <Voltage_Init+0xb2>
	else
	if (v < 30000)  Battery_Size = 2;		//	Its a 24v battery
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <Voltage_Init+0x104>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d803      	bhi.n	8004808 <Voltage_Init+0x9c>
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <Voltage_Init+0x100>)
 8004802:	2202      	movs	r2, #2
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e00a      	b.n	800481e <Voltage_Init+0xb2>
	else
	if (v < 45000)  Battery_Size = 3;		//	Its a 36v battery
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <Voltage_Init+0x108>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d803      	bhi.n	8004818 <Voltage_Init+0xac>
 8004810:	4b16      	ldr	r3, [pc, #88]	; (800486c <Voltage_Init+0x100>)
 8004812:	2203      	movs	r2, #3
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e002      	b.n	800481e <Voltage_Init+0xb2>
	else
	Battery_Size = 4;						//	Its a 48v battery
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <Voltage_Init+0x100>)
 800481a:	2204      	movs	r2, #4
 800481c:	601a      	str	r2, [r3, #0]

	adc = Volts_To_ADC (Battery_Size * MODE_NOMINAL_V);	//	ADC = nominal battery voltage, in A/D counts
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <Voltage_Init+0x100>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <Voltage_Init+0x10c>)
 8004824:	4353      	muls	r3, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff ff2c 	bl	8004684 <Volts_To_ADC>
 800482c:	0003      	movs	r3, r0
 800482e:	607b      	str	r3, [r7, #4]
	AbsMinV = adc >> 1;						//	A/D reading must be greater than 0.5 * V nominal
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	085a      	lsrs	r2, r3, #1
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <Voltage_Init+0x110>)
 8004836:	601a      	str	r2, [r3, #0]
	AbsMaxV = adc + AbsMinV;				//	A/D reading must be no more than 1.5 * V nominal
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <Voltage_Init+0x110>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	18d2      	adds	r2, r2, r3
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <Voltage_Init+0x114>)
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b002      	add	sp, #8
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200028d0 	.word	0x200028d0
 8004850:	200028cc 	.word	0x200028cc
 8004854:	200028d4 	.word	0x200028d4
 8004858:	000186a0 	.word	0x000186a0
 800485c:	00001e13 	.word	0x00001e13
 8004860:	200050c4 	.word	0x200050c4
 8004864:	0000fde8 	.word	0x0000fde8
 8004868:	00003e7f 	.word	0x00003e7f
 800486c:	200050d8 	.word	0x200050d8
 8004870:	0000752f 	.word	0x0000752f
 8004874:	0000afc7 	.word	0x0000afc7
 8004878:	00003138 	.word	0x00003138
 800487c:	200028dc 	.word	0x200028dc
 8004880:	200028d8 	.word	0x200028d8

08004884 <strnmatch>:
	{ NULL, 0 }
};

// -------------------- private methods

static int strnmatch (char const *haystack, char const *needle) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	int n_match = strlen(needle), is_match = haystack && (strncmp(haystack, needle, n_match) == 0);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc41 	bl	8000118 <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <strnmatch+0x30>
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f003 fbab 	bl	8008002 <strncmp>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d101      	bne.n	80048b4 <strnmatch+0x30>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <strnmatch+0x32>
 80048b4:	2300      	movs	r3, #0
 80048b6:	60bb      	str	r3, [r7, #8]
	return is_match ? n_match : 0;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <strnmatch+0x3e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	e000      	b.n	80048c4 <strnmatch+0x40>
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}

080048cc <strfindend>:

static char const *strfindend (char const *haystack, char const *needle) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	char const *f = strstr(haystack, needle);
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	0011      	movs	r1, r2
 80048dc:	0018      	movs	r0, r3
 80048de:	f003 fbb6 	bl	800804e <strstr>
 80048e2:	0003      	movs	r3, r0
 80048e4:	60fb      	str	r3, [r7, #12]
	return f ? (char const *)(f + strlen(needle)) : NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <strfindend+0x30>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7fb fc12 	bl	8000118 <strlen>
 80048f4:	0002      	movs	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	e000      	b.n	80048fe <strfindend+0x32>
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <get_ms_timeout>:

static int get_ms_timeout (char const *cmd) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	int i;

	if (cmd[0] == 'A' && cmd[1] == 'T') {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b41      	cmp	r3, #65	; 0x41
 8004916:	d125      	bne.n	8004964 <get_ms_timeout+0x5c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b54      	cmp	r3, #84	; 0x54
 8004920:	d120      	bne.n	8004964 <get_ms_timeout+0x5c>
		for (i = 0; command_response_timeouts[i].at_cmd; ++i) {
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e017      	b.n	8004958 <get_ms_timeout+0x50>
			if (strnmatch(cmd + 2, command_response_timeouts[i].at_cmd) > 0)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1c98      	adds	r0, r3, #2
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <get_ms_timeout+0x68>)
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	00d2      	lsls	r2, r2, #3
 8004932:	58d3      	ldr	r3, [r2, r3]
 8004934:	0019      	movs	r1, r3
 8004936:	f7ff ffa5 	bl	8004884 <strnmatch>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	dd09      	ble.n	8004952 <get_ms_timeout+0x4a>
				return (command_response_timeouts[i].s_timeout * 1000);
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <get_ms_timeout+0x68>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	18d3      	adds	r3, r2, r3
 8004946:	3304      	adds	r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	22fa      	movs	r2, #250	; 0xfa
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4353      	muls	r3, r2
 8004950:	e00a      	b.n	8004968 <get_ms_timeout+0x60>
		for (i = 0; command_response_timeouts[i].at_cmd; ++i) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3301      	adds	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <get_ms_timeout+0x68>)
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	00d2      	lsls	r2, r2, #3
 800495e:	58d3      	ldr	r3, [r2, r3]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e1      	bne.n	8004928 <get_ms_timeout+0x20>
		}
	}
	return default_command_response_timeout_ms;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <get_ms_timeout+0x6c>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	b004      	add	sp, #16
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2000003c 	.word	0x2000003c
 8004974:	20000038 	.word	0x20000038

08004978 <matchright>:

static int matchright (char const *s1, char const *s2) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	int n1 = strlen(s1), n2 = strlen(s2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fb fbc7 	bl	8000118 <strlen>
 800498a:	0003      	movs	r3, r0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	0018      	movs	r0, r3
 8004992:	f7fb fbc1 	bl	8000118 <strlen>
 8004996:	0003      	movs	r3, r0
 8004998:	60bb      	str	r3, [r7, #8]

	return (n1 >= n2 && strcmp(&s1[n1 - n2], s2) == 0);
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	db0e      	blt.n	80049c0 <matchright+0x48>
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	001a      	movs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	0011      	movs	r1, r2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7fb fba6 	bl	8000104 <strcmp>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d101      	bne.n	80049c0 <matchright+0x48>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <matchright+0x4a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}

080049ca <at_puts>:

static void at_puts (char const *wbuf) {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; wbuf[i]; ++i)
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e009      	b.n	80049ec <at_puts+0x22>
		uart5_PutByte(wbuf[i]);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	18d3      	adds	r3, r2, r3
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f002 fdeb 	bl	80075bc <uart5_PutByte>
	for (i = 0; wbuf[i]; ++i)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	18d3      	adds	r3, r2, r3
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ef      	bne.n	80049d8 <at_puts+0xe>
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <scan>:

static void scan (char const *str, char const *find, int *pint0, int d0, int *pint1, int d1) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	char const *p = strstr(str, find);
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0011      	movs	r1, r2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f003 fb1a 	bl	800804e <strstr>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61fb      	str	r3, [r7, #28]
	int i, n = strlen(find);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fb fb79 	bl	8000118 <strlen>
 8004a26:	0003      	movs	r3, r0
 8004a28:	61bb      	str	r3, [r7, #24]

	if (pint0)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <scan+0x36>
		*pint0 = d0;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	601a      	str	r2, [r3, #0]
	if (pint1)
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <scan+0x42>
		*pint1 = d1;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a40:	601a      	str	r2, [r3, #0]
	if (p) {
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02b      	beq.n	8004aa0 <scan+0xa0>
		char const *e = p + n;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	18d3      	adds	r3, r2, r3
 8004a4e:	613b      	str	r3, [r7, #16]

		i = strtol(e, (char **)&e, 0);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2210      	movs	r2, #16
 8004a54:	18b9      	adds	r1, r7, r2
 8004a56:	2200      	movs	r2, #0
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f003 fba7 	bl	80081ac <strtol>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	617b      	str	r3, [r7, #20]
		if (pint0)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <scan+0x6e>
			*pint0 = i;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	601a      	str	r2, [r3, #0]
		if (*e == ',' && ++e) {
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b2c      	cmp	r3, #44	; 0x2c
 8004a74:	d114      	bne.n	8004aa0 <scan+0xa0>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <scan+0xa0>
			i = strtol(e, (char **)&e, 0);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2210      	movs	r2, #16
 8004a86:	18b9      	adds	r1, r7, r2
 8004a88:	2200      	movs	r2, #0
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f003 fb8e 	bl	80081ac <strtol>
 8004a90:	0003      	movs	r3, r0
 8004a92:	617b      	str	r3, [r7, #20]
			if (pint1)
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <scan+0xa0>
				*pint1 = i;
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b008      	add	sp, #32
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <at_readbytes>:

static int at_readbytes (char *rbuf, int sz_rbuf, int ms_initial_timeout, int is_AT_command_response) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
	static char const receiveheader[] = "\r\n+RECEIVE,";
	int len_receiveheader = sizeof(receiveheader) - 1;
 8004ab6:	230b      	movs	r3, #11
 8004ab8:	61bb      	str	r3, [r7, #24]
	int ms_timeout_subsequent = 10;
 8004aba:	230a      	movs	r3, #10
 8004abc:	617b      	str	r3, [r7, #20]
	int ms_timeout = ms_initial_timeout;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int is_receive = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	int n_receive = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
	//int n_prefix = 0;
	int i;

	rbuf[i = 0] = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
	while (i < sz_rbuf - 1) {
 8004ad4:	e085      	b.n	8004be2 <at_readbytes+0x13a>
		int ch = uart5_WaitForByte(ms_timeout);
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f002 fd8f 	bl	80075fc <uart5_WaitForByte>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	613b      	str	r3, [r7, #16]

		if (ch < 0) {
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da06      	bge.n	8004af6 <at_readbytes+0x4e>
			if (i == 0)
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d000      	beq.n	8004af0 <at_readbytes+0x48>
 8004aee:	e07f      	b.n	8004bf0 <at_readbytes+0x148>
				return -1;	// got nothing, call it a timeout
 8004af0:	2301      	movs	r3, #1
 8004af2:	425b      	negs	r3, r3
 8004af4:	e082      	b.n	8004bfc <at_readbytes+0x154>
			break;
		}

		rbuf[i++] = (char)ch;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	623a      	str	r2, [r7, #32]
 8004afc:	001a      	movs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
		rbuf[i] = 0;
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	18d3      	adds	r3, r2, r3
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
		if (is_AT_command_response) {
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d019      	beq.n	8004b4c <at_readbytes+0xa4>
			if (matchright(rbuf, "OK\r\n"))
 8004b18:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <at_readbytes+0x15c>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7ff ff2a 	bl	8004978 <matchright>
 8004b24:	1e03      	subs	r3, r0, #0
 8004b26:	d000      	beq.n	8004b2a <at_readbytes+0x82>
 8004b28:	e064      	b.n	8004bf4 <at_readbytes+0x14c>
				break;
			if (matchright(rbuf, "ERROR\r\n"))
 8004b2a:	4a37      	ldr	r2, [pc, #220]	; (8004c08 <at_readbytes+0x160>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0011      	movs	r1, r2
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff ff21 	bl	8004978 <matchright>
 8004b36:	1e03      	subs	r3, r0, #0
 8004b38:	d15e      	bne.n	8004bf8 <at_readbytes+0x150>
				break;
			if (matchright(rbuf, "> "))	// CIPSEND
 8004b3a:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <at_readbytes+0x164>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	0011      	movs	r1, r2
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7ff ff19 	bl	8004978 <matchright>
 8004b46:	1e03      	subs	r3, r0, #0
 8004b48:	d040      	beq.n	8004bcc <at_readbytes+0x124>
				break;
 8004b4a:	e056      	b.n	8004bfa <at_readbytes+0x152>
		} else {
			if (i == len_receiveheader) {
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10b      	bne.n	8004b6c <at_readbytes+0xc4>
				is_receive = (strcmp(rbuf, receiveheader) == 0);
 8004b54:	4a2e      	ldr	r2, [pc, #184]	; (8004c10 <at_readbytes+0x168>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0011      	movs	r1, r2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fb fad2 	bl	8000104 <strcmp>
 8004b60:	0003      	movs	r3, r0
 8004b62:	425a      	negs	r2, r3
 8004b64:	4153      	adcs	r3, r2
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6a:	e02f      	b.n	8004bcc <at_readbytes+0x124>
			} else if (i > len_receiveheader && is_receive && n_receive == 0 && ch == '\n') {
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	dd2b      	ble.n	8004bcc <at_readbytes+0x124>
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d028      	beq.n	8004bcc <at_readbytes+0x124>
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d125      	bne.n	8004bcc <at_readbytes+0x124>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0a      	cmp	r3, #10
 8004b84:	d122      	bne.n	8004bcc <at_readbytes+0x124>
				char *p;

				// parse out n_receive now from something like "\r\n+RECEIVE,2,1348,216.58.219.4:80\r\n"
				p = strchr(rbuf, ',');
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f003 fa23 	bl	8007fd6 <strchr>
 8004b90:	0003      	movs	r3, r0
 8004b92:	61fb      	str	r3, [r7, #28]
				if (p) {
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d013      	beq.n	8004bc2 <at_readbytes+0x11a>
					p = strchr(p + 1, ',');
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f003 fa18 	bl	8007fd6 <strchr>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	61fb      	str	r3, [r7, #28]
					if (p) {
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <at_readbytes+0x11a>
						//n_prefix = i;
						n_receive = strtol(p + 1, NULL, 10);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	220a      	movs	r2, #10
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f003 faf7 	bl	80081ac <strtol>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
						//logmsg("..receiving %d\n", n_receive);
					}
				}
				if (!p) {
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <at_readbytes+0x124>
					is_receive = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
		}
		// adjust subsequent timeout chars
		if (n_receive)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <at_readbytes+0x136>
			ms_timeout = ms_timeout_subsequent * 5;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	0013      	movs	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	189b      	adds	r3, r3, r2
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bdc:	e001      	b.n	8004be2 <at_readbytes+0x13a>
		else
			ms_timeout = ms_timeout_subsequent;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (i < sz_rbuf - 1) {
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	dd00      	ble.n	8004bee <at_readbytes+0x146>
 8004bec:	e773      	b.n	8004ad6 <at_readbytes+0x2e>
 8004bee:	e004      	b.n	8004bfa <at_readbytes+0x152>
			break;
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	e002      	b.n	8004bfa <at_readbytes+0x152>
				break;
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	e000      	b.n	8004bfa <at_readbytes+0x152>
				break;
 8004bf8:	46c0      	nop			; (mov r8, r8)
	}
	return i;
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b00c      	add	sp, #48	; 0x30
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	080097d4 	.word	0x080097d4
 8004c08:	080097dc 	.word	0x080097dc
 8004c0c:	080097e4 	.word	0x080097e4
 8004c10:	08009fc4 	.word	0x08009fc4

08004c14 <_at_recv_after_send>:

static void _at_recv_after_send (char *rbuf, int sz_rbuf, char const *fmt, va_list vl) {
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
	static char txt[1024];

	vsnprintf(txt, sizeof(txt), fmt, vl);
 8004c22:	683c      	ldr	r4, [r7, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	00d9      	lsls	r1, r3, #3
 8004c2a:	4814      	ldr	r0, [pc, #80]	; (8004c7c <_at_recv_after_send+0x68>)
 8004c2c:	0023      	movs	r3, r4
 8004c2e:	f003 fd33 	bl	8008698 <vsniprintf>
	txt[sizeof(txt) - 1] = 0;		// MSFT is buggy and won't zero terminate
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <_at_recv_after_send+0x68>)
 8004c34:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <_at_recv_after_send+0x6c>)
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

	// send...
	logbytes("  > ", txt);
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <_at_recv_after_send+0x68>)
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <_at_recv_after_send+0x70>)
 8004c3e:	0011      	movs	r1, r2
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fc95 	bl	8005570 <logbytes>
	at_puts(txt);			// fputs() doesn't unexpectedly add a newline as puts() does
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <_at_recv_after_send+0x68>)
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff febe 	bl	80049ca <at_puts>

	if (rbuf) {
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00f      	beq.n	8004c74 <_at_recv_after_send+0x60>
		// the read ms_timeout depends on the command sent
		at_readbytes(rbuf, sz_rbuf, get_ms_timeout(txt), 1);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <_at_recv_after_send+0x68>)
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fe56 	bl	8004908 <get_ms_timeout>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	2301      	movs	r3, #1
 8004c64:	f7ff ff20 	bl	8004aa8 <at_readbytes>
		logbytes("  < ", rbuf);
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <_at_recv_after_send+0x74>)
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 fc7e 	bl	8005570 <logbytes>
	}
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b005      	add	sp, #20
 8004c7a:	bd90      	pop	{r4, r7, pc}
 8004c7c:	20002960 	.word	0x20002960
 8004c80:	000003ff 	.word	0x000003ff
 8004c84:	080097e8 	.word	0x080097e8
 8004c88:	080097f0 	.word	0x080097f0

08004c8c <at_recv_after_send>:

static void at_recv_after_send (char *rbuf, int sz_rbuf, char const *fmt, ...) {
 8004c8c:	b40c      	push	{r2, r3}
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
	va_list vl;

	va_start(vl, fmt);
 8004c98:	231c      	movs	r3, #28
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	60fb      	str	r3, [r7, #12]
	_at_recv_after_send(rbuf, sz_rbuf, fmt, vl);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffb5 	bl	8004c14 <_at_recv_after_send>
	va_end(vl);
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b004      	add	sp, #16
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	b002      	add	sp, #8
 8004cb6:	4718      	bx	r3

08004cb8 <at_send>:

static void at_send (char const *fmt, ...) {
 8004cb8:	b40f      	push	{r0, r1, r2, r3}
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
	va_list vl;

	va_start(vl, fmt);
 8004cc0:	2314      	movs	r3, #20
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	607b      	str	r3, [r7, #4]
	_at_recv_after_send(NULL, 0, fmt, vl);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f7ff ffa1 	bl	8004c14 <_at_recv_after_send>
	va_end(vl);
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bc80      	pop	{r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	b004      	add	sp, #16
 8004cde:	4718      	bx	r3

08004ce0 <at_sleep>:

void at_sleep() {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	; 0x38
 8004ce4:	af00      	add	r7, sp, #0
	char rbuf[50];
	int sz_rbuf = sizeof(rbuf);
 8004ce6:	2332      	movs	r3, #50	; 0x32
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34

	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=0,1\n");	// close bearer profile first
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <at_sleep+0x40>)
 8004cec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cee:	003b      	movs	r3, r7
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff ffcb 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN=4\n");		// disable tx/rx
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <at_sleep+0x44>)
 8004cf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cfa:	003b      	movs	r3, r7
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7ff ffc5 	bl	8004c8c <at_recv_after_send>
	vTaskDelay(MS_TO_TICKS(5000));							// wait 5 seconds
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <at_sleep+0x48>)
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7fc facd 	bl	80012a4 <vTaskDelay>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=2\n");		// then sleep
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <at_sleep+0x4c>)
 8004d0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d0e:	003b      	movs	r3, r7
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff ffbb 	bl	8004c8c <at_recv_after_send>
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b00e      	add	sp, #56	; 0x38
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	080097f8 	.word	0x080097f8
 8004d24:	08009808 	.word	0x08009808
 8004d28:	00001388 	.word	0x00001388
 8004d2c:	08009814 	.word	0x08009814

08004d30 <at_wake>:

void at_wake() {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af00      	add	r7, sp, #0
	char rbuf[50];
	int sz_rbuf = sizeof(rbuf);
 8004d36:	2332      	movs	r3, #50	; 0x32
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34

	at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8004d3a:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <at_wake+0x58>)
 8004d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d3e:	003b      	movs	r3, r7
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7ff ffa3 	bl	8004c8c <at_recv_after_send>

	at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <at_wake+0x58>)
 8004d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d4a:	003b      	movs	r3, r7
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff ff9d 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=0\n");
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <at_wake+0x5c>)
 8004d54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d56:	003b      	movs	r3, r7
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff ff97 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN?\n");		// reset and enable
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <at_wake+0x60>)
 8004d60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d62:	003b      	movs	r3, r7
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7ff ff91 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN=1\n");		// reset and enable
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <at_wake+0x64>)
 8004d6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d6e:	003b      	movs	r3, r7
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff ff8b 	bl	8004c8c <at_recv_after_send>
	vTaskDelay(MS_TO_TICKS(2000));							// wait 5 seconds
 8004d76:	23fa      	movs	r3, #250	; 0xfa
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fc fa92 	bl	80012a4 <vTaskDelay>
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b00e      	add	sp, #56	; 0x38
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08009820 	.word	0x08009820
 8004d8c:	08009824 	.word	0x08009824
 8004d90:	08009830 	.word	0x08009830
 8004d94:	0800983c 	.word	0x0800983c

08004d98 <at_init>:


static void at_init (char *rbuf, int sz_rbuf) {
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	int int0, int1;

	logmsg("initializing modem\n");
 8004da2:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <at_init+0x1a4>)
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fbc1 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8004daa:	4a65      	ldr	r2, [pc, #404]	; (8004f40 <at_init+0x1a8>)
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7ff ff6b 	bl	8004c8c <at_recv_after_send>
//~	at_recv_after_send(rbuf, sz_rbuf, "ATZ\n");

	at_recv_after_send(rbuf, sz_rbuf, "ATE0\n");	// disable local echo
 8004db6:	4a63      	ldr	r2, [pc, #396]	; (8004f44 <at_init+0x1ac>)
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff ff65 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "ATE0\n");	// disable local echo to make sure
 8004dc2:	4a60      	ldr	r2, [pc, #384]	; (8004f44 <at_init+0x1ac>)
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff ff5f 	bl	8004c8c <at_recv_after_send>
	logmsg("getting modem info\n");
 8004dce:	4b5e      	ldr	r3, [pc, #376]	; (8004f48 <at_init+0x1b0>)
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 fbab 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CGMM\n");
 8004dd6:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <at_init+0x1b4>)
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff ff55 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CGMI\n");
 8004de2:	4a5b      	ldr	r2, [pc, #364]	; (8004f50 <at_init+0x1b8>)
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff ff4f 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CPIN?\n");
 8004dee:	4a59      	ldr	r2, [pc, #356]	; (8004f54 <at_init+0x1bc>)
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff49 	bl	8004c8c <at_recv_after_send>

	logmsg("getting sleep mode\n");
 8004dfa:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <at_init+0x1c0>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fb95 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK?\n");
 8004e02:	4a56      	ldr	r2, [pc, #344]	; (8004f5c <at_init+0x1c4>)
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff ff3f 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=0\n");
 8004e0e:	4a54      	ldr	r2, [pc, #336]	; (8004f60 <at_init+0x1c8>)
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff ff39 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK?\n");
 8004e1a:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <at_init+0x1c4>)
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff ff33 	bl	8004c8c <at_recv_after_send>

	logmsg("checking registration status\n");
 8004e26:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <at_init+0x1cc>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 fb7f 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CREG?\n");
 8004e2e:	4a4e      	ldr	r2, [pc, #312]	; (8004f68 <at_init+0x1d0>)
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7ff ff29 	bl	8004c8c <at_recv_after_send>
	scan(rbuf, "CREG:", &int0, -1, &int1, -1);
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	425c      	negs	r4, r3
 8004e3e:	230c      	movs	r3, #12
 8004e40:	18fa      	adds	r2, r7, r3
 8004e42:	494a      	ldr	r1, [pc, #296]	; (8004f6c <at_init+0x1d4>)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	2301      	movs	r3, #1
 8004e48:	425b      	negs	r3, r3
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	0023      	movs	r3, r4
 8004e54:	f7ff fdd4 	bl	8004a00 <scan>
	switch (int1) {
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d002      	beq.n	8004e64 <at_init+0xcc>
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d005      	beq.n	8004e6e <at_init+0xd6>
 8004e62:	e009      	b.n	8004e78 <at_init+0xe0>
		case 1: logmsg("...registered home network\n"); break;
 8004e64:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <at_init+0x1d8>)
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 fb60 	bl	800552c <logmsg>
 8004e6c:	e009      	b.n	8004e82 <at_init+0xea>
		case 5: logmsg("...registered and roaming\n"); break;
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <at_init+0x1dc>)
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 fb5b 	bl	800552c <logmsg>
 8004e76:	e004      	b.n	8004e82 <at_init+0xea>
		default: logmsg("...not registered\n"); break;
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <at_init+0x1e0>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 fb56 	bl	800552c <logmsg>
 8004e80:	46c0      	nop			; (mov r8, r8)
	}

	logmsg("no sync RTC with network\n");
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <at_init+0x1e4>)
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fb51 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CLTS=0\n");	// no sync RTC with network time
 8004e8a:	4a3d      	ldr	r2, [pc, #244]	; (8004f80 <at_init+0x1e8>)
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff fefb 	bl	8004c8c <at_recv_after_send>
	logmsg("disable call ready\n");
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <at_init+0x1ec>)
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 fb47 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CIURC=0\n");	// disable call ready URC
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <at_init+0x1f0>)
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7ff fef1 	bl	8004c8c <at_recv_after_send>
	logmsg("getting RSSI\n");
 8004eaa:	4b38      	ldr	r3, [pc, #224]	; (8004f8c <at_init+0x1f4>)
 8004eac:	0018      	movs	r0, r3
 8004eae:	f000 fb3d 	bl	800552c <logmsg>
	logmsg("   0 -115 dBm or less\n");
 8004eb2:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <at_init+0x1f8>)
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fb39 	bl	800552c <logmsg>
	logmsg("   1 -111 dBm\n");
 8004eba:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <at_init+0x1fc>)
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 fb35 	bl	800552c <logmsg>
	logmsg("   2...30 -110... -54 dBm\n");
 8004ec2:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <at_init+0x200>)
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 fb31 	bl	800552c <logmsg>
	logmsg("   31 -52 dBm or greater\n");
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <at_init+0x204>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f000 fb2d 	bl	800552c <logmsg>
	logmsg("   99 not known or not detectable\n");
 8004ed2:	4b33      	ldr	r3, [pc, #204]	; (8004fa0 <at_init+0x208>)
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 fb29 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSQ\n");		// RSSI
 8004eda:	4a32      	ldr	r2, [pc, #200]	; (8004fa4 <at_init+0x20c>)
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7ff fed3 	bl	8004c8c <at_recv_after_send>

	// buggy:
	//logmsg("getting clock\n");
	//at_recv_after_send(rbuf, sz_rbuf, "AT+CCLK?\n");	// time

	logmsg("set context type, APN, open bearer, query\n");
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <at_init+0x210>)
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fb1f 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=0,1\n");
 8004eee:	4a2f      	ldr	r2, [pc, #188]	; (8004fac <at_init+0x214>)
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7ff fec9 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"Contype\",\"GPRS\"\n");
 8004efa:	4a2d      	ldr	r2, [pc, #180]	; (8004fb0 <at_init+0x218>)
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7ff fec3 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"APN\",\"%s\"\n", g_apn);
 8004f06:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <at_init+0x21c>)
 8004f08:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <at_init+0x220>)
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff febd 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=1,1\n");
 8004f12:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <at_init+0x224>)
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7ff feb7 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=2,1\n");
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <at_init+0x228>)
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff feb1 	bl	8004c8c <at_recv_after_send>

	logmsg("------ initialized\n");
 8004f2a:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <at_init+0x22c>)
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f000 fafd 	bl	800552c <logmsg>
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b005      	add	sp, #20
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	08009848 	.word	0x08009848
 8004f40:	08009820 	.word	0x08009820
 8004f44:	0800985c 	.word	0x0800985c
 8004f48:	08009864 	.word	0x08009864
 8004f4c:	08009878 	.word	0x08009878
 8004f50:	08009884 	.word	0x08009884
 8004f54:	08009890 	.word	0x08009890
 8004f58:	0800989c 	.word	0x0800989c
 8004f5c:	080098b0 	.word	0x080098b0
 8004f60:	08009824 	.word	0x08009824
 8004f64:	080098bc 	.word	0x080098bc
 8004f68:	080098dc 	.word	0x080098dc
 8004f6c:	080098e8 	.word	0x080098e8
 8004f70:	080098f0 	.word	0x080098f0
 8004f74:	0800990c 	.word	0x0800990c
 8004f78:	08009928 	.word	0x08009928
 8004f7c:	0800993c 	.word	0x0800993c
 8004f80:	08009958 	.word	0x08009958
 8004f84:	08009964 	.word	0x08009964
 8004f88:	08009978 	.word	0x08009978
 8004f8c:	08009984 	.word	0x08009984
 8004f90:	08009994 	.word	0x08009994
 8004f94:	080099ac 	.word	0x080099ac
 8004f98:	080099bc 	.word	0x080099bc
 8004f9c:	080099d8 	.word	0x080099d8
 8004fa0:	080099f4 	.word	0x080099f4
 8004fa4:	08009a18 	.word	0x08009a18
 8004fa8:	08009a20 	.word	0x08009a20
 8004fac:	080097f8 	.word	0x080097f8
 8004fb0:	08009a4c 	.word	0x08009a4c
 8004fb4:	20000018 	.word	0x20000018
 8004fb8:	08009a6c 	.word	0x08009a6c
 8004fbc:	08009a88 	.word	0x08009a88
 8004fc0:	08009a98 	.word	0x08009a98
 8004fc4:	08009aa8 	.word	0x08009aa8

08004fc8 <scan_time>:

static uint32 scan_time (char const *p) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	struct tm tm[1];

	memset(tm, 0, sizeof(tm[0]));
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f002 fc83 	bl	80078e4 <memset>

	tm->tm_year = strtol(p, (char **)&p, 10) - 1900;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1d39      	adds	r1, r7, #4
 8004fe2:	220a      	movs	r2, #10
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f003 f8e1 	bl	80081ac <strtol>
 8004fea:	0003      	movs	r3, r0
 8004fec:	4a37      	ldr	r2, [pc, #220]	; (80050cc <scan_time+0x104>)
 8004fee:	189a      	adds	r2, r3, r2
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	615a      	str	r2, [r3, #20]
	p += (*p == '/');
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	3a2f      	subs	r2, #47	; 0x2f
 8004ffe:	4251      	negs	r1, r2
 8005000:	414a      	adcs	r2, r1
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	189b      	adds	r3, r3, r2
 8005006:	607b      	str	r3, [r7, #4]
	tm->tm_mon = strtol(p, (char **)&p, 10) - 1;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1d39      	adds	r1, r7, #4
 800500c:	220a      	movs	r2, #10
 800500e:	0018      	movs	r0, r3
 8005010:	f003 f8cc 	bl	80081ac <strtol>
 8005014:	0003      	movs	r3, r0
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	230c      	movs	r3, #12
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	611a      	str	r2, [r3, #16]
	p += (*p == '/');
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	3a2f      	subs	r2, #47	; 0x2f
 8005026:	4251      	negs	r1, r2
 8005028:	414a      	adcs	r2, r1
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	189b      	adds	r3, r3, r2
 800502e:	607b      	str	r3, [r7, #4]
	tm->tm_mday = strtol(p, (char **)&p, 10);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	1d39      	adds	r1, r7, #4
 8005034:	220a      	movs	r2, #10
 8005036:	0018      	movs	r0, r3
 8005038:	f003 f8b8 	bl	80081ac <strtol>
 800503c:	0002      	movs	r2, r0
 800503e:	230c      	movs	r3, #12
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	60da      	str	r2, [r3, #12]
	p += (*p == ',');
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	3a2c      	subs	r2, #44	; 0x2c
 800504c:	4251      	negs	r1, r2
 800504e:	414a      	adcs	r2, r1
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	189b      	adds	r3, r3, r2
 8005054:	607b      	str	r3, [r7, #4]
	tm->tm_hour = strtol(p, (char **)&p, 10);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1d39      	adds	r1, r7, #4
 800505a:	220a      	movs	r2, #10
 800505c:	0018      	movs	r0, r3
 800505e:	f003 f8a5 	bl	80081ac <strtol>
 8005062:	0002      	movs	r2, r0
 8005064:	230c      	movs	r3, #12
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	609a      	str	r2, [r3, #8]
	p += (*p == ':');
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	7812      	ldrb	r2, [r2, #0]
 8005070:	3a3a      	subs	r2, #58	; 0x3a
 8005072:	4251      	negs	r1, r2
 8005074:	414a      	adcs	r2, r1
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	189b      	adds	r3, r3, r2
 800507a:	607b      	str	r3, [r7, #4]
	tm->tm_min = strtol(p, (char **)&p, 10);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1d39      	adds	r1, r7, #4
 8005080:	220a      	movs	r2, #10
 8005082:	0018      	movs	r0, r3
 8005084:	f003 f892 	bl	80081ac <strtol>
 8005088:	0002      	movs	r2, r0
 800508a:	230c      	movs	r3, #12
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	605a      	str	r2, [r3, #4]
	p += (*p == ':');
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	3a3a      	subs	r2, #58	; 0x3a
 8005098:	4251      	negs	r1, r2
 800509a:	414a      	adcs	r2, r1
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	607b      	str	r3, [r7, #4]
	tm->tm_sec = strtol(p, (char **)&p, 10);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1d39      	adds	r1, r7, #4
 80050a6:	220a      	movs	r2, #10
 80050a8:	0018      	movs	r0, r3
 80050aa:	f003 f87f 	bl	80081ac <strtol>
 80050ae:	0002      	movs	r2, r0
 80050b0:	230c      	movs	r3, #12
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	601a      	str	r2, [r3, #0]

#if defined(_MSC_VER)
#define mktime _mkgmtime
#endif
	return (uint32)mktime(tm);
 80050b6:	230c      	movs	r3, #12
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	0018      	movs	r0, r3
 80050bc:	f002 fce6 	bl	8007a8c <mktime>
 80050c0:	0003      	movs	r3, r0
}
 80050c2:	0018      	movs	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b00c      	add	sp, #48	; 0x30
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	fffff894 	.word	0xfffff894

080050d0 <set_cipgsmloc>:

static char cipgsmloc[128];

static void set_cipgsmloc (char const *p) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	char *e;

	while (*p == ' ')	// trim leading spaces
 80050d8:	e002      	b.n	80050e0 <set_cipgsmloc+0x10>
		++p;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3301      	adds	r3, #1
 80050de:	607b      	str	r3, [r7, #4]
	while (*p == ' ')	// trim leading spaces
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d0f8      	beq.n	80050da <set_cipgsmloc+0xa>
	strncpy(cipgsmloc, p, sizeof(cipgsmloc));
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <set_cipgsmloc+0x58>)
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	0018      	movs	r0, r3
 80050f0:	f002 ff98 	bl	8008024 <strncpy>
	cipgsmloc[sizeof(cipgsmloc) - 1] = 0;
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <set_cipgsmloc+0x58>)
 80050f6:	227f      	movs	r2, #127	; 0x7f
 80050f8:	2100      	movs	r1, #0
 80050fa:	5499      	strb	r1, [r3, r2]
	// stop string at control characters
	for (e = cipgsmloc; *e; e++) {
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <set_cipgsmloc+0x58>)
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e00a      	b.n	8005118 <set_cipgsmloc+0x48>
		if (*e < ' ') {	
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b1f      	cmp	r3, #31
 8005108:	d803      	bhi.n	8005112 <set_cipgsmloc+0x42>
			*e = 0;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
			break;
 8005110:	e006      	b.n	8005120 <set_cipgsmloc+0x50>
	for (e = cipgsmloc; *e; e++) {
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3301      	adds	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <set_cipgsmloc+0x32>
		}
	}
}
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b004      	add	sp, #16
 8005126:	bd80      	pop	{r7, pc}
 8005128:	200028e0 	.word	0x200028e0

0800512c <scan_gsmloc>:

static int scan_gsmloc (char const *str, char const *find, char *long_lat, int sz_long_lat, uint32 *ptime) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	// looks like "\r\n+CIPGSMLOC: 0,-111.746056,35.198174,2018/03/08,21:02:57\r\n\r\nOK\r\n"
	char const *p = strfindend(str, find), *e;
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fbc3 	bl	80048cc <strfindend>
 8005146:	0003      	movs	r3, r0
 8005148:	613b      	str	r3, [r7, #16]
	int locationcode;

	*long_lat = 0;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
	*ptime = 0;
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
	if (p) {
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d056      	beq.n	800520a <scan_gsmloc+0xde>
		// hack since not sure if germany is responding as it should
		set_cipgsmloc(p);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	0018      	movs	r0, r3
 8005160:	f7ff ffb6 	bl	80050d0 <set_cipgsmloc>
		// resume
		locationcode = strtol(p, (char **)&p, 10);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2210      	movs	r2, #16
 8005168:	18b9      	adds	r1, r7, r2
 800516a:	220a      	movs	r2, #10
 800516c:	0018      	movs	r0, r3
 800516e:	f003 f81d 	bl	80081ac <strtol>
 8005172:	0003      	movs	r3, r0
 8005174:	61bb      	str	r3, [r7, #24]
		if (locationcode == 0) {
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d146      	bne.n	800520a <scan_gsmloc+0xde>
			p += (*p == ',');
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	3a2c      	subs	r2, #44	; 0x2c
 8005184:	4251      	negs	r1, r2
 8005186:	414a      	adcs	r2, r1
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	189b      	adds	r3, r3, r2
 800518c:	613b      	str	r3, [r7, #16]
			e = strchr(p, ',');
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	0018      	movs	r0, r3
 8005194:	f002 ff1f 	bl	8007fd6 <strchr>
 8005198:	0003      	movs	r3, r0
 800519a:	617b      	str	r3, [r7, #20]
			if (e) {
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d033      	beq.n	800520a <scan_gsmloc+0xde>
				e = strchr(e + 1, ',');
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	3301      	adds	r3, #1
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	0018      	movs	r0, r3
 80051aa:	f002 ff14 	bl	8007fd6 <strchr>
 80051ae:	0003      	movs	r3, r0
 80051b0:	617b      	str	r3, [r7, #20]
				if (e) {
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d028      	beq.n	800520a <scan_gsmloc+0xde>
					int len = e - p;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
					if (len > sz_long_lat - 1)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	da02      	bge.n	80051d0 <scan_gsmloc+0xa4>
						len = sz_long_lat - 1;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	61fb      	str	r3, [r7, #28]
					strncpy(long_lat, p, len);
 80051d0:	6939      	ldr	r1, [r7, #16]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f002 ff24 	bl	8008024 <strncpy>
					long_lat[len] = 0;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	18d3      	adds	r3, r2, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
					p = e;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	613b      	str	r3, [r7, #16]
					p += (*e == ',');
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	3a2c      	subs	r2, #44	; 0x2c
 80051f2:	4251      	negs	r1, r2
 80051f4:	414a      	adcs	r2, r1
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
					*ptime = scan_time(p);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff fee2 	bl	8004fc8 <scan_time>
 8005204:	0002      	movs	r2, r0
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	return -1;
 800520a:	2301      	movs	r3, #1
 800520c:	425b      	negs	r3, r3
}
 800520e:	0018      	movs	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	b008      	add	sp, #32
 8005214:	bd80      	pop	{r7, pc}

08005216 <trimwhitespace>:

size_t trimwhitespace(char *out, size_t len, const char *str)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
	if(len == 0)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <trimwhitespace+0x1c>
		return 0;
 8005228:	2300      	movs	r3, #0
 800522a:	e048      	b.n	80052be <trimwhitespace+0xa8>
	const char *end;
	size_t out_size;

	// Trim leading space
	while(isspace((unsigned char)*str))
		str++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3301      	adds	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
	while(isspace((unsigned char)*str))
 8005232:	f002 fb0b 	bl	800784c <__locale_ctype_ptr>
 8005236:	0002      	movs	r2, r0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	001a      	movs	r2, r3
 8005244:	2308      	movs	r3, #8
 8005246:	4013      	ands	r3, r2
 8005248:	d1f0      	bne.n	800522c <trimwhitespace+0x16>

	if(*str == 0)  // All spaces?
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <trimwhitespace+0x46>
		{
		*out = 0;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
		return 1;
 8005258:	2301      	movs	r3, #1
 800525a:	e030      	b.n	80052be <trimwhitespace+0xa8>
		}

	// Trim trailing space
	end = str;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	617b      	str	r3, [r7, #20]
	while(!isspace((unsigned char)*end) && ((end-str) < (len-1)))
 8005260:	e002      	b.n	8005268 <trimwhitespace+0x52>
		end++;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3301      	adds	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
	while(!isspace((unsigned char)*end) && ((end-str) < (len-1)))
 8005268:	f002 faf0 	bl	800784c <__locale_ctype_ptr>
 800526c:	0002      	movs	r2, r0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	001a      	movs	r2, r3
 800527a:	2308      	movs	r3, #8
 800527c:	4013      	ands	r3, r2
 800527e:	d107      	bne.n	8005290 <trimwhitespace+0x7a>
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	001a      	movs	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3b01      	subs	r3, #1
 800528c:	429a      	cmp	r2, r3
 800528e:	d3e8      	bcc.n	8005262 <trimwhitespace+0x4c>

	// Set output size to minimum of trimmed string length and buffer size minus 1
	out_size = (end - str) < len-1 ? (end - str) : len-1;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1e59      	subs	r1, r3, #1
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	001a      	movs	r2, r3
 800529c:	000b      	movs	r3, r1
 800529e:	4293      	cmp	r3, r2
 80052a0:	d900      	bls.n	80052a4 <trimwhitespace+0x8e>
 80052a2:	0013      	movs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

	// Copy trimmed string and add null terminator
	memcpy(out, str, out_size);
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f002 fb10 	bl	80078d2 <memcpy>
	out[out_size] = 0;
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]

	return out_size;
 80052bc:	693b      	ldr	r3, [r7, #16]
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b006      	add	sp, #24
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <gsm_get_IMSI>:
    // looks like "\r\n868345036355816\r\n\r\n"
	return trimwhitespace(sim_id, sz, rbuf);
}

// get International Mobile Subscriber Identity (IMSI)
int gsm_get_IMSI (char *sim_id, int sz) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	static char rbuf[kMAX_BUFFER];
	static int sz_rbuf = sizeof(rbuf);

    at_init(rbuf, sz_rbuf);
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <gsm_get_IMSI+0x3c>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <gsm_get_IMSI+0x40>)
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f7ff fd5c 	bl	8004d98 <at_init>

    at_recv_after_send(rbuf, sz_rbuf, "AT+CIMI\n");
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <gsm_get_IMSI+0x3c>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	4a09      	ldr	r2, [pc, #36]	; (800530c <gsm_get_IMSI+0x44>)
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <gsm_get_IMSI+0x40>)
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff fccf 	bl	8004c8c <at_recv_after_send>
    // looks like "\r\n868345036355816\r\n\r\n"
	return trimwhitespace(sim_id, sz, rbuf);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	4a05      	ldr	r2, [pc, #20]	; (8005308 <gsm_get_IMSI+0x40>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff ff8e 	bl	8005216 <trimwhitespace>
 80052fa:	0003      	movs	r3, r0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000084 	.word	0x20000084
 8005308:	20002d60 	.word	0x20002d60
 800530c:	08009ac8 	.word	0x08009ac8

08005310 <gsm_set_apn>:

void gsm_set_apn (char const *apn) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	strncpy(g_apn, apn, sizeof(g_apn));
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <gsm_set_apn+0x24>)
 800531c:	2220      	movs	r2, #32
 800531e:	0018      	movs	r0, r3
 8005320:	f002 fe80 	bl	8008024 <strncpy>
	g_apn[sizeof(g_apn) - 1] = 0;
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <gsm_set_apn+0x24>)
 8005326:	2200      	movs	r2, #0
 8005328:	77da      	strb	r2, [r3, #31]
}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	b002      	add	sp, #8
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	20000018 	.word	0x20000018

08005338 <gsm_get_location_and_time>:

int gsm_get_location_and_time (char *long_lat, int sz, uint32 *ptime) {
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b087      	sub	sp, #28
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
	static char rbuf[kMAX_BUFFER];
	static int sz_rbuf = sizeof(rbuf);

    at_init(rbuf, sz_rbuf);
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <gsm_get_location_and_time+0x44>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <gsm_get_location_and_time+0x48>)
 800534a:	0011      	movs	r1, r2
 800534c:	0018      	movs	r0, r3
 800534e:	f7ff fd23 	bl	8004d98 <at_init>

    at_recv_after_send(rbuf, sz_rbuf, "AT+CIPGSMLOC=1,1\n");
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <gsm_get_location_and_time+0x44>)
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <gsm_get_location_and_time+0x4c>)
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <gsm_get_location_and_time+0x48>)
 800535a:	0018      	movs	r0, r3
 800535c:	f7ff fc96 	bl	8004c8c <at_recv_after_send>
	return scan_gsmloc(rbuf, "CIPGSMLOC:", long_lat, sz, ptime);
 8005360:	68bc      	ldr	r4, [r7, #8]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4908      	ldr	r1, [pc, #32]	; (8005388 <gsm_get_location_and_time+0x50>)
 8005366:	4806      	ldr	r0, [pc, #24]	; (8005380 <gsm_get_location_and_time+0x48>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	0023      	movs	r3, r4
 800536e:	f7ff fedd 	bl	800512c <scan_gsmloc>
 8005372:	0003      	movs	r3, r0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b005      	add	sp, #20
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	20000088 	.word	0x20000088
 8005380:	20003328 	.word	0x20003328
 8005384:	08009ad4 	.word	0x08009ad4
 8005388:	08009ae8 	.word	0x08009ae8

0800538c <gsm_send_json>:

const char *gsm_get_cipgsmloc (void) {
	return cipgsmloc;
}

int gsm_send_json (char const *url, char const *auth, char const *json) {
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	static char rbuf[kMAX_BUFFER];
	static int sz_rbuf = sizeof(rbuf);
	int i;
	int result=0;	//
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]

	(void)i;
	at_init(rbuf, sz_rbuf);
 800539c:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <gsm_send_json+0x158>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <gsm_send_json+0x15c>)
 80053a2:	0011      	movs	r1, r2
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7ff fcf7 	bl	8004d98 <at_init>

	logmsg("enable HTTP\n");
 80053aa:	4b50      	ldr	r3, [pc, #320]	; (80054ec <gsm_send_json+0x160>)
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f8bd 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPTERM\n");
 80053b2:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <gsm_send_json+0x158>)
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	4a4e      	ldr	r2, [pc, #312]	; (80054f0 <gsm_send_json+0x164>)
 80053b8:	4b4b      	ldr	r3, [pc, #300]	; (80054e8 <gsm_send_json+0x15c>)
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7ff fc66 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPINIT\n");
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <gsm_send_json+0x158>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	4a4b      	ldr	r2, [pc, #300]	; (80054f4 <gsm_send_json+0x168>)
 80053c6:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <gsm_send_json+0x15c>)
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7ff fc5f 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPSSL=1\n");
 80053ce:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <gsm_send_json+0x158>)
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	4a49      	ldr	r2, [pc, #292]	; (80054f8 <gsm_send_json+0x16c>)
 80053d4:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <gsm_send_json+0x15c>)
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff fc58 	bl	8004c8c <at_recv_after_send>

	logmsg("transmit\n");
 80053dc:	4b47      	ldr	r3, [pc, #284]	; (80054fc <gsm_send_json+0x170>)
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f8a4 	bl	800552c <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"CID\",1\n");
 80053e4:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <gsm_send_json+0x158>)
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	4a45      	ldr	r2, [pc, #276]	; (8005500 <gsm_send_json+0x174>)
 80053ea:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <gsm_send_json+0x15c>)
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7ff fc4d 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"URL\",\"%s\"\n", url);
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <gsm_send_json+0x158>)
 80053f4:	6819      	ldr	r1, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a42      	ldr	r2, [pc, #264]	; (8005504 <gsm_send_json+0x178>)
 80053fa:	483b      	ldr	r0, [pc, #236]	; (80054e8 <gsm_send_json+0x15c>)
 80053fc:	f7ff fc46 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"USERDATA\",\"Authorization: %s\"\n", auth);
 8005400:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <gsm_send_json+0x158>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a40      	ldr	r2, [pc, #256]	; (8005508 <gsm_send_json+0x17c>)
 8005408:	4837      	ldr	r0, [pc, #220]	; (80054e8 <gsm_send_json+0x15c>)
 800540a:	f7ff fc3f 	bl	8004c8c <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"CONTENT\",\"application/json\"\n");
 800540e:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <gsm_send_json+0x158>)
 8005410:	6819      	ldr	r1, [r3, #0]
 8005412:	4a3e      	ldr	r2, [pc, #248]	; (800550c <gsm_send_json+0x180>)
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <gsm_send_json+0x15c>)
 8005416:	0018      	movs	r0, r3
 8005418:	f7ff fc38 	bl	8004c8c <at_recv_after_send>

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPDATA=%d,20000\r\n", strlen(json));
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <gsm_send_json+0x158>)
 800541e:	681c      	ldr	r4, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7fa fe78 	bl	8000118 <strlen>
 8005428:	0003      	movs	r3, r0
 800542a:	4a39      	ldr	r2, [pc, #228]	; (8005510 <gsm_send_json+0x184>)
 800542c:	482e      	ldr	r0, [pc, #184]	; (80054e8 <gsm_send_json+0x15c>)
 800542e:	0021      	movs	r1, r4
 8005430:	f7ff fc2c 	bl	8004c8c <at_recv_after_send>
	at_send("%s", json);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <gsm_send_json+0x188>)
 8005438:	0011      	movs	r1, r2
 800543a:	0018      	movs	r0, r3
 800543c:	f7ff fc3c 	bl	8004cb8 <at_send>
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 8005440:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <gsm_send_json+0x158>)
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	4a34      	ldr	r2, [pc, #208]	; (8005518 <gsm_send_json+0x18c>)
 8005446:	4828      	ldr	r0, [pc, #160]	; (80054e8 <gsm_send_json+0x15c>)
 8005448:	2300      	movs	r3, #0
 800544a:	f7ff fb2d 	bl	8004aa8 <at_readbytes>
 800544e:	0003      	movs	r3, r0
 8005450:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 8005452:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <gsm_send_json+0x15c>)
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <gsm_send_json+0x190>)
 8005456:	0011      	movs	r1, r2
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f889 	bl	8005570 <logbytes>

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPACTION=1\r\n");
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <gsm_send_json+0x158>)
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <gsm_send_json+0x194>)
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <gsm_send_json+0x15c>)
 8005466:	0018      	movs	r0, r3
 8005468:	f7ff fc10 	bl	8004c8c <at_recv_after_send>
	// wait for the \r\n+HTTPACTION: 1, 400,157\r\n
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <gsm_send_json+0x158>)
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	4a29      	ldr	r2, [pc, #164]	; (8005518 <gsm_send_json+0x18c>)
 8005472:	481d      	ldr	r0, [pc, #116]	; (80054e8 <gsm_send_json+0x15c>)
 8005474:	2300      	movs	r3, #0
 8005476:	f7ff fb17 	bl	8004aa8 <at_readbytes>
 800547a:	0003      	movs	r3, r0
 800547c:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 800547e:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <gsm_send_json+0x15c>)
 8005480:	4b26      	ldr	r3, [pc, #152]	; (800551c <gsm_send_json+0x190>)
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f873 	bl	8005570 <logbytes>
	if (strstr(rbuf,"204") != NULL)
 800548a:	4a26      	ldr	r2, [pc, #152]	; (8005524 <gsm_send_json+0x198>)
 800548c:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <gsm_send_json+0x15c>)
 800548e:	0011      	movs	r1, r2
 8005490:	0018      	movs	r0, r3
 8005492:	f002 fddc 	bl	800804e <strstr>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d001      	beq.n	800549e <gsm_send_json+0x112>
		result = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPREAD\r\n");
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <gsm_send_json+0x158>)
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	4a21      	ldr	r2, [pc, #132]	; (8005528 <gsm_send_json+0x19c>)
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <gsm_send_json+0x15c>)
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7ff fbf0 	bl	8004c8c <at_recv_after_send>
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <gsm_send_json+0x158>)
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <gsm_send_json+0x18c>)
 80054b2:	480d      	ldr	r0, [pc, #52]	; (80054e8 <gsm_send_json+0x15c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	f7ff faf7 	bl	8004aa8 <at_readbytes>
 80054ba:	0003      	movs	r3, r0
 80054bc:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <gsm_send_json+0x15c>)
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <gsm_send_json+0x190>)
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f853 	bl	8005570 <logbytes>

//	at_recv_after_send(rbuf, sz_rbuf, "AT+CEER\r\n");
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPTERM\n");
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <gsm_send_json+0x158>)
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <gsm_send_json+0x164>)
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <gsm_send_json+0x15c>)
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7ff fbda 	bl	8004c8c <at_recv_after_send>
	return result;
 80054d8:	697b      	ldr	r3, [r7, #20]
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b007      	add	sp, #28
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	2000008c 	.word	0x2000008c
 80054e8:	200038f0 	.word	0x200038f0
 80054ec:	08009af4 	.word	0x08009af4
 80054f0:	08009b04 	.word	0x08009b04
 80054f4:	08009b14 	.word	0x08009b14
 80054f8:	08009b24 	.word	0x08009b24
 80054fc:	08009b34 	.word	0x08009b34
 8005500:	08009b40 	.word	0x08009b40
 8005504:	08009b58 	.word	0x08009b58
 8005508:	08009b70 	.word	0x08009b70
 800550c:	08009b9c 	.word	0x08009b9c
 8005510:	08009bc8 	.word	0x08009bc8
 8005514:	08009be0 	.word	0x08009be0
 8005518:	00004e20 	.word	0x00004e20
 800551c:	08009be4 	.word	0x08009be4
 8005520:	08009bec 	.word	0x08009bec
 8005524:	08009c00 	.word	0x08009c00
 8005528:	08009c04 	.word	0x08009c04

0800552c <logmsg>:

	at_recv_after_send(rbuf, sz_rbuf, "AT+CIPSHUT\n");
}
#endif

void logmsg (char const *fmt, ...) {
 800552c:	b40f      	push	{r0, r1, r2, r3}
 800552e:	b580      	push	{r7, lr}
 8005530:	b0a2      	sub	sp, #136	; 0x88
 8005532:	af00      	add	r7, sp, #0
	char txt[kMAX_LOGMSG];
	va_list vl;

	va_start(vl, fmt);
 8005534:	2394      	movs	r3, #148	; 0x94
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	607b      	str	r3, [r7, #4]
	vsnprintf(txt, sizeof(txt), fmt, vl);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2290      	movs	r2, #144	; 0x90
 800553e:	18ba      	adds	r2, r7, r2
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	2108      	movs	r1, #8
 8005544:	1878      	adds	r0, r7, r1
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	f003 f8a6 	bl	8008698 <vsniprintf>
	va_end(vl);
	txt[sizeof(txt) - 1] = 0;		// MSFT is buggy and won't zero terminate
 800554c:	2308      	movs	r3, #8
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	227f      	movs	r2, #127	; 0x7f
 8005552:	2100      	movs	r1, #0
 8005554:	5499      	strb	r1, [r3, r2]

	DEBUG_PUTS(txt);
 8005556:	2308      	movs	r3, #8
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	0018      	movs	r0, r3
 800555c:	f001 fdec 	bl	8007138 <uart1_Puts>
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b022      	add	sp, #136	; 0x88
 8005566:	bc80      	pop	{r7}
 8005568:	bc08      	pop	{r3}
 800556a:	b004      	add	sp, #16
 800556c:	4718      	bx	r3
	...

08005570 <logbytes>:

void logbytes (char const *prefix, void const *bytes) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	char const *str = (char const *)bytes;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	61bb      	str	r3, [r7, #24]
	int i;

	if (prefix)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <logbytes+0x1c>
		DEBUG_PUTS(prefix);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0018      	movs	r0, r3
 8005588:	f001 fdd6 	bl	8007138 <uart1_Puts>
	for (i = 0; str[i]; i++) {
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e05d      	b.n	800564e <logbytes+0xde>
		unsigned char ch = (unsigned char)str[i];
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	18d2      	adds	r2, r2, r3
 8005598:	2317      	movs	r3, #23
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	701a      	strb	r2, [r3, #0]
		switch (ch) {
 80055a0:	2317      	movs	r3, #23
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b0d      	cmp	r3, #13
 80055a8:	d016      	beq.n	80055d8 <logbytes+0x68>
 80055aa:	dc04      	bgt.n	80055b6 <logbytes+0x46>
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	d018      	beq.n	80055e2 <logbytes+0x72>
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	d00c      	beq.n	80055ce <logbytes+0x5e>
 80055b4:	e024      	b.n	8005600 <logbytes+0x90>
 80055b6:	2b27      	cmp	r3, #39	; 0x27
 80055b8:	d01d      	beq.n	80055f6 <logbytes+0x86>
 80055ba:	2b5c      	cmp	r3, #92	; 0x5c
 80055bc:	d002      	beq.n	80055c4 <logbytes+0x54>
 80055be:	2b22      	cmp	r3, #34	; 0x22
 80055c0:	d014      	beq.n	80055ec <logbytes+0x7c>
 80055c2:	e01d      	b.n	8005600 <logbytes+0x90>
			case '\\': DEBUG_PUTS("\\\\"); break;
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <logbytes+0xfc>)
 80055c6:	0018      	movs	r0, r3
 80055c8:	f001 fdb6 	bl	8007138 <uart1_Puts>
 80055cc:	e03c      	b.n	8005648 <logbytes+0xd8>
			case '\n': DEBUG_PUTS("\\n"); break;
 80055ce:	4b28      	ldr	r3, [pc, #160]	; (8005670 <logbytes+0x100>)
 80055d0:	0018      	movs	r0, r3
 80055d2:	f001 fdb1 	bl	8007138 <uart1_Puts>
 80055d6:	e037      	b.n	8005648 <logbytes+0xd8>
			case '\r': DEBUG_PUTS("\\r"); break;
 80055d8:	4b26      	ldr	r3, [pc, #152]	; (8005674 <logbytes+0x104>)
 80055da:	0018      	movs	r0, r3
 80055dc:	f001 fdac 	bl	8007138 <uart1_Puts>
 80055e0:	e032      	b.n	8005648 <logbytes+0xd8>
			case '\t': DEBUG_PUTS("\\t"); break;
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <logbytes+0x108>)
 80055e4:	0018      	movs	r0, r3
 80055e6:	f001 fda7 	bl	8007138 <uart1_Puts>
 80055ea:	e02d      	b.n	8005648 <logbytes+0xd8>
			case '"': DEBUG_PUTS("\\\""); break;
 80055ec:	4b23      	ldr	r3, [pc, #140]	; (800567c <logbytes+0x10c>)
 80055ee:	0018      	movs	r0, r3
 80055f0:	f001 fda2 	bl	8007138 <uart1_Puts>
 80055f4:	e028      	b.n	8005648 <logbytes+0xd8>
			case '\'': DEBUG_PUTS("\\'"); break;
 80055f6:	4b22      	ldr	r3, [pc, #136]	; (8005680 <logbytes+0x110>)
 80055f8:	0018      	movs	r0, r3
 80055fa:	f001 fd9d 	bl	8007138 <uart1_Puts>
 80055fe:	e023      	b.n	8005648 <logbytes+0xd8>
			default:
				if (ch < ' ') {
 8005600:	2317      	movs	r3, #23
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b1f      	cmp	r3, #31
 8005608:	d80e      	bhi.n	8005628 <logbytes+0xb8>
					char hex[8];
					sprintf(hex, "\\x%02x", ch);
 800560a:	2317      	movs	r3, #23
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	491c      	ldr	r1, [pc, #112]	; (8005684 <logbytes+0x114>)
 8005612:	230c      	movs	r3, #12
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	0018      	movs	r0, r3
 8005618:	f002 fcae 	bl	8007f78 <siprintf>
					DEBUG_PUTS(hex);
 800561c:	230c      	movs	r3, #12
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	0018      	movs	r0, r3
 8005622:	f001 fd89 	bl	8007138 <uart1_Puts>
					// everything else, including UTF-8 multibyte, put down literally
					chstr[0] = ch;
					chstr[1] = 0;
					DEBUG_PUTS(chstr);
				}
				break;
 8005626:	e00e      	b.n	8005646 <logbytes+0xd6>
					chstr[0] = ch;
 8005628:	2308      	movs	r3, #8
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	2217      	movs	r2, #23
 800562e:	18ba      	adds	r2, r7, r2
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	701a      	strb	r2, [r3, #0]
					chstr[1] = 0;
 8005634:	2308      	movs	r3, #8
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	2200      	movs	r2, #0
 800563a:	705a      	strb	r2, [r3, #1]
					DEBUG_PUTS(chstr);
 800563c:	2308      	movs	r3, #8
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	0018      	movs	r0, r3
 8005642:	f001 fd79 	bl	8007138 <uart1_Puts>
				break;
 8005646:	46c0      	nop			; (mov r8, r8)
	for (i = 0; str[i]; i++) {
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19b      	bne.n	8005592 <logbytes+0x22>
		}
	}
	DEBUG_PUTS("\n");
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <logbytes+0x118>)
 800565c:	0018      	movs	r0, r3
 800565e:	f001 fd6b 	bl	8007138 <uart1_Puts>
}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b008      	add	sp, #32
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	08009c14 	.word	0x08009c14
 8005670:	08009c18 	.word	0x08009c18
 8005674:	08009c1c 	.word	0x08009c1c
 8005678:	08009c20 	.word	0x08009c20
 800567c:	08009c24 	.word	0x08009c24
 8005680:	08009c28 	.word	0x08009c28
 8005684:	08009c2c 	.word	0x08009c2c
 8005688:	08009c34 	.word	0x08009c34

0800568c <flush>:
		]
	}]

 */

static int flush (char *json) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	int retries = 3;
 8005694:	2303      	movs	r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
	int result;

	// !! modifies json!
	if (json[0]) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d021      	beq.n	80056e4 <flush+0x58>
		strcat(json, "]}]");
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f7fa fd38 	bl	8000118 <strlen>
 80056a8:	0003      	movs	r3, r0
 80056aa:	001a      	movs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	189a      	adds	r2, r3, r2
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <flush+0x64>)
 80056b2:	0010      	movs	r0, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	2304      	movs	r3, #4
 80056b8:	001a      	movs	r2, r3
 80056ba:	f002 f90a 	bl	80078d2 <memcpy>

		while(retries--) {
 80056be:	e00c      	b.n	80056da <flush+0x4e>
			result = gsm_send_json(g_url, g_auth, json);
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	490c      	ldr	r1, [pc, #48]	; (80056f4 <flush+0x68>)
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <flush+0x6c>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7ff fe60 	bl	800538c <gsm_send_json>
 80056cc:	0003      	movs	r3, r0
 80056ce:	60bb      	str	r3, [r7, #8]
			if (result)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <flush+0x4e>
				return 1;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e005      	b.n	80056e6 <flush+0x5a>
		while(retries--) {
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	60fa      	str	r2, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ed      	bne.n	80056c0 <flush+0x34>
		}

	}
	return 0;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	08009c38 	.word	0x08009c38
 80056f4:	08009fd0 	.word	0x08009fd0
 80056f8:	0800a080 	.word	0x0800a080

080056fc <add_record>:

static int add_record(char *records, int sz_records, Event_t *pev, char const *long_lat, char const *imsi) {
 80056fc:	b5b0      	push	{r4, r5, r7, lr}
 80056fe:	b0aa      	sub	sp, #168	; 0xa8
 8005700:	af04      	add	r7, sp, #16
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
	char single_rec[128];
	int i;
	int result = 1;	// expect OK to add to buffer
 800570a:	2301      	movs	r3, #1
 800570c:	2290      	movs	r2, #144	; 0x90
 800570e:	18ba      	adds	r2, r7, r2
 8005710:	6013      	str	r3, [r2, #0]

	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
			(unsigned long)pev->TimeStamp,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6819      	ldr	r1, [r3, #0]
			pev->mVolts,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	889b      	ldrh	r3, [r3, #4]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 800571a:	001c      	movs	r4, r3
			pev->dTemp,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	88db      	ldrh	r3, [r3, #6]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 8005720:	001d      	movs	r5, r3
			pev->flags);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	891b      	ldrh	r3, [r3, #8]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 8005726:	4a32      	ldr	r2, [pc, #200]	; (80057f0 <add_record+0xf4>)
 8005728:	2010      	movs	r0, #16
 800572a:	1838      	adds	r0, r7, r0
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	9501      	str	r5, [sp, #4]
 8005730:	9400      	str	r4, [sp, #0]
 8005732:	000b      	movs	r3, r1
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	f002 fbed 	bl	8007f14 <sniprintf>

	i = strlen(records);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	0018      	movs	r0, r3
 800573e:	f7fa fceb 	bl	8000118 <strlen>
 8005742:	0003      	movs	r3, r0
 8005744:	2294      	movs	r2, #148	; 0x94
 8005746:	18ba      	adds	r2, r7, r2
 8005748:	6013      	str	r3, [r2, #0]

	// flush ?
	if (pev == NULL || i + 1 + strlen(single_rec) + 1 + 1 >= sz_records - 5) {	// 5 for slop
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <add_record+0x72>
 8005750:	2310      	movs	r3, #16
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	0018      	movs	r0, r3
 8005756:	f7fa fcdf 	bl	8000118 <strlen>
 800575a:	0002      	movs	r2, r0
 800575c:	2394      	movs	r3, #148	; 0x94
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	18d3      	adds	r3, r2, r3
 8005764:	3303      	adds	r3, #3
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	3a05      	subs	r2, #5
 800576a:	4293      	cmp	r3, r2
 800576c:	d315      	bcc.n	800579a <add_record+0x9e>
		if (!flush(records)) {
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff ff8b 	bl	800568c <flush>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d104      	bne.n	8005784 <add_record+0x88>
			result = 0; 	// result FAILED, bail
 800577a:	2300      	movs	r3, #0
 800577c:	2290      	movs	r2, #144	; 0x90
 800577e:	18ba      	adds	r2, r7, r2
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e003      	b.n	800578c <add_record+0x90>
		} else {
			result = 2; 	// indicated sent successfully
 8005784:	2302      	movs	r3, #2
 8005786:	2290      	movs	r2, #144	; 0x90
 8005788:	18ba      	adds	r2, r7, r2
 800578a:	6013      	str	r3, [r2, #0]
		}

		// restart
		records[0] = 0;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
		i = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	2294      	movs	r2, #148	; 0x94
 8005796:	18ba      	adds	r2, r7, r2
 8005798:	6013      	str	r3, [r2, #0]
	}

	if (i == 0) {
 800579a:	2394      	movs	r3, #148	; 0x94
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d108      	bne.n	80057b6 <add_record+0xba>
		sprintf(records, "[{\"IMSI\":%s,\"gps\":\"%s\",\"records\": [",
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	22a8      	movs	r2, #168	; 0xa8
 80057a8:	18ba      	adds	r2, r7, r2
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4911      	ldr	r1, [pc, #68]	; (80057f4 <add_record+0xf8>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f002 fbe2 	bl	8007f78 <siprintf>
 80057b4:	e00e      	b.n	80057d4 <add_record+0xd8>
				imsi,
				long_lat);

	} else {
		strcat(records, ",");	// more in list
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fa fcad 	bl	8000118 <strlen>
 80057be:	0003      	movs	r3, r0
 80057c0:	001a      	movs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	189a      	adds	r2, r3, r2
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <add_record+0xfc>)
 80057c8:	0010      	movs	r0, r2
 80057ca:	0019      	movs	r1, r3
 80057cc:	2302      	movs	r3, #2
 80057ce:	001a      	movs	r2, r3
 80057d0:	f002 f87f 	bl	80078d2 <memcpy>
	}
	strcat(records, single_rec);
 80057d4:	2310      	movs	r3, #16
 80057d6:	18fa      	adds	r2, r7, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	0011      	movs	r1, r2
 80057dc:	0018      	movs	r0, r3
 80057de:	f002 fbed 	bl	8007fbc <strcat>
	return (result);
 80057e2:	2390      	movs	r3, #144	; 0x90
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b026      	add	sp, #152	; 0x98
 80057ee:	bdb0      	pop	{r4, r5, r7, pc}
 80057f0:	08009c3c 	.word	0x08009c3c
 80057f4:	08009c64 	.word	0x08009c64
 80057f8:	08009c88 	.word	0x08009c88

080057fc <prvCellTask>:
	strcat(records, single_rec);
}
#endif

void prvCellTask( void *pvParameters )
{
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
	Event_t ev;
	static char long_lat[128];
	static char IMSI[32];
	static char temp_long_lat[128];
	uint32 t=0;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
	uint32 temp_t=0;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
	int send_result=0;
 800580c:	2300      	movs	r3, #0
 800580e:	627b      	str	r3, [r7, #36]	; 0x24

	debug_Printf("gsmtask.c configuring for \"%s\", APN \"%s\"\n", g_name, g_apn);
 8005810:	4a8e      	ldr	r2, [pc, #568]	; (8005a4c <prvCellTask+0x250>)
 8005812:	498f      	ldr	r1, [pc, #572]	; (8005a50 <prvCellTask+0x254>)
 8005814:	4b8f      	ldr	r3, [pc, #572]	; (8005a54 <prvCellTask+0x258>)
 8005816:	0018      	movs	r0, r3
 8005818:	f001 fce0 	bl	80071dc <uart1_Printf>
	gsm_set_apn(g_apn);
 800581c:	4b8b      	ldr	r3, [pc, #556]	; (8005a4c <prvCellTask+0x250>)
 800581e:	0018      	movs	r0, r3
 8005820:	f7ff fd76 	bl	8005310 <gsm_set_apn>

	// AT init and get time
	do{
		at_wake();
 8005824:	f7ff fa84 	bl	8004d30 <at_wake>
		LED_OFF(GREEN_LED);
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	0018      	movs	r0, r3
 800582e:	f7fe fb99 	bl	8003f64 <LED_OFF>
		LED_ON(RED_LED);
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	01db      	lsls	r3, r3, #7
 8005836:	0018      	movs	r0, r3
 8005838:	f7fe fb82 	bl	8003f40 <LED_ON>
		vTaskDelay(MS_TO_TICKS(500));
 800583c:	23fa      	movs	r3, #250	; 0xfa
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	0018      	movs	r0, r3
 8005842:	f7fb fd2f 	bl	80012a4 <vTaskDelay>
		gsm_get_location_and_time (long_lat, sizeof(long_lat), &t);
 8005846:	230c      	movs	r3, #12
 8005848:	18fa      	adds	r2, r7, r3
 800584a:	4b83      	ldr	r3, [pc, #524]	; (8005a58 <prvCellTask+0x25c>)
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff fd72 	bl	8005338 <gsm_get_location_and_time>
		LED_ON(GREEN_LED);
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	0018      	movs	r0, r3
 800585a:	f7fe fb71 	bl	8003f40 <LED_ON>
		LED_OFF(RED_LED);
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	0018      	movs	r0, r3
 8005864:	f7fe fb7e 	bl	8003f64 <LED_OFF>
		vTaskDelay(MS_TO_TICKS(500));
 8005868:	23fa      	movs	r3, #250	; 0xfa
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	0018      	movs	r0, r3
 800586e:	f7fb fd19 	bl	80012a4 <vTaskDelay>
	}while(t==0);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0d5      	beq.n	8005824 <prvCellTask+0x28>

	LED_OFF(RED_LED);		// red off if talking to modem
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	01db      	lsls	r3, r3, #7
 800587c:	0018      	movs	r0, r3
 800587e:	f7fe fb71 	bl	8003f64 <LED_OFF>
	LED_ON(GREEN_LED);		// solid on after connect
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	0018      	movs	r0, r3
 8005888:	f7fe fb5a 	bl	8003f40 <LED_ON>
	Time_Callback(t);		// set the time for the flash logger
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0018      	movs	r0, r3
 8005890:	f001 f9ba 	bl	8006c08 <Time_Callback>
	//gsm_get_IMEI (IMSI, sizeof(IMSI));
	gsm_get_IMSI (IMSI, sizeof(IMSI));
 8005894:	4b71      	ldr	r3, [pc, #452]	; (8005a5c <prvCellTask+0x260>)
 8005896:	2120      	movs	r1, #32
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff fd15 	bl	80052c8 <gsm_get_IMSI>

	at_sleep();
 800589e:	f7ff fa1f 	bl	8004ce0 <at_sleep>

	for( ;; )
	{
		// wait for the semaphore from the main task
		if ( xSemaphoreTake(connect_Semaphore,10000+MS_TO_TICKS(Config.Report_Rate * 100)) == pdTRUE )
 80058a2:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <prvCellTask+0x264>)
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <prvCellTask+0x268>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2264      	movs	r2, #100	; 0x64
 80058ac:	4353      	muls	r3, r2
 80058ae:	4a6e      	ldr	r2, [pc, #440]	; (8005a68 <prvCellTask+0x26c>)
 80058b0:	189a      	adds	r2, r3, r2
 80058b2:	2300      	movs	r3, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	f7fb fa46 	bl	8000d46 <xQueueGenericReceive>
 80058ba:	0003      	movs	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d1f0      	bne.n	80058a2 <prvCellTask+0xa6>
		{
			at_wake();
 80058c0:	f7ff fa36 	bl	8004d30 <at_wake>

			//debug_Printf("gsmtask.c: ccipgsmloc \"%s\"\n", gsm_get_cipgsmloc());
			//snprintf(json, sizeof(json), "[{\"cipgsmloc\":\"%s\"}]", gsm_get_cipgsmloc());
			//gsm_send_json(g_url, g_auth, json);
#else
			int sz_records = 1024;
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	623b      	str	r3, [r7, #32]
			char *records = malloc(sz_records);
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f001 ffcb 	bl	8007868 <malloc>
 80058d2:	0003      	movs	r3, r0
 80058d4:	61fb      	str	r3, [r7, #28]

			if (!records) {
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <prvCellTask+0xea>
				debug_Puts("gsmtask.c malloc() failed\n");
 80058dc:	4b63      	ldr	r3, [pc, #396]	; (8005a6c <prvCellTask+0x270>)
 80058de:	0018      	movs	r0, r3
 80058e0:	f7fd fa0b 	bl	8002cfa <debug_Puts>
 80058e4:	e7dd      	b.n	80058a2 <prvCellTask+0xa6>
			} else {
				records[0] = 0;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

				LED_OFF(GREEN_LED);
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7fe fb37 	bl	8003f64 <LED_OFF>
				LED_ON(BLUE_LED);
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	015b      	lsls	r3, r3, #5
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7fe fb20 	bl	8003f40 <LED_ON>
				debug_Puts("--- Sending ---");
 8005900:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <prvCellTask+0x274>)
 8005902:	0018      	movs	r0, r3
 8005904:	f7fd f9f9 	bl	8002cfa <debug_Puts>

				// AT init and get time - force to be active again
				do{
					vTaskDelay(MS_TO_TICKS(500));
 8005908:	23fa      	movs	r3, #250	; 0xfa
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	0018      	movs	r0, r3
 800590e:	f7fb fcc9 	bl	80012a4 <vTaskDelay>
					gsm_get_location_and_time (long_lat, sizeof(long_lat), &t);
 8005912:	230c      	movs	r3, #12
 8005914:	18fa      	adds	r2, r7, r3
 8005916:	4b50      	ldr	r3, [pc, #320]	; (8005a58 <prvCellTask+0x25c>)
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff fd0c 	bl	8005338 <gsm_get_location_and_time>
				}while(t==0);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <prvCellTask+0x10c>

				// saw condition where it failed so check return first and use temporary vars
				if (gsm_get_location_and_time (temp_long_lat, sizeof(temp_long_lat), &temp_t) != -1)
 8005926:	2308      	movs	r3, #8
 8005928:	18fa      	adds	r2, r7, r3
 800592a:	4b52      	ldr	r3, [pc, #328]	; (8005a74 <prvCellTask+0x278>)
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	0018      	movs	r0, r3
 8005930:	f7ff fd02 	bl	8005338 <gsm_get_location_and_time>
 8005934:	0003      	movs	r3, r0
 8005936:	3301      	adds	r3, #1
 8005938:	d00b      	beq.n	8005952 <prvCellTask+0x156>
				{
					strcpy(long_lat,temp_long_lat);
 800593a:	4a4e      	ldr	r2, [pc, #312]	; (8005a74 <prvCellTask+0x278>)
 800593c:	4b46      	ldr	r3, [pc, #280]	; (8005a58 <prvCellTask+0x25c>)
 800593e:	0011      	movs	r1, r2
 8005940:	0018      	movs	r0, r3
 8005942:	f002 fb56 	bl	8007ff2 <strcpy>
					t = temp_t;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	60fb      	str	r3, [r7, #12]
					Time_Callback(t);		// always sync time
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0018      	movs	r0, r3
 800594e:	f001 f95b 	bl	8006c08 <Time_Callback>
				}

				debug_Printf("gsmtask.c long_lat: '%s'\n", long_lat);
 8005952:	4a41      	ldr	r2, [pc, #260]	; (8005a58 <prvCellTask+0x25c>)
 8005954:	4b48      	ldr	r3, [pc, #288]	; (8005a78 <prvCellTask+0x27c>)
 8005956:	0011      	movs	r1, r2
 8005958:	0018      	movs	r0, r3
 800595a:	f001 fc3f 	bl	80071dc <uart1_Printf>
				debug_Printf("gsmtask.c time: '%u'\n", t);
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <prvCellTask+0x280>)
 8005962:	0011      	movs	r1, r2
 8005964:	0018      	movs	r0, r3
 8005966:	f001 fc39 	bl	80071dc <uart1_Printf>

				// do the work to upload
	//			gsm_GetConfig();				// not needed right now

				send_result = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
				Begin_Report();					// have flash prepare the reports
 800596e:	f7fe f86b 	bl	8003a48 <Begin_Report>

				while (Report_Callback(&ev) != -1)
 8005972:	e033      	b.n	80059dc <prvCellTask+0x1e0>
					uint16	mVolts;				//	0.001 V
					uint16	dTemp;				//	0.1 C
					uint16	flags;
					uint16	filler;
					 */
					debug_Printf("ts:%d, v:%d, t:%d, f:%04x gps:%s\r\n", ev.TimeStamp,
 8005974:	2310      	movs	r3, #16
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	6819      	ldr	r1, [r3, #0]
																  ev.mVolts,
 800597a:	2310      	movs	r3, #16
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	889b      	ldrh	r3, [r3, #4]
					debug_Printf("ts:%d, v:%d, t:%d, f:%04x gps:%s\r\n", ev.TimeStamp,
 8005980:	001c      	movs	r4, r3
																  ev.dTemp,
 8005982:	2310      	movs	r3, #16
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	88db      	ldrh	r3, [r3, #6]
					debug_Printf("ts:%d, v:%d, t:%d, f:%04x gps:%s\r\n", ev.TimeStamp,
 8005988:	001d      	movs	r5, r3
																  ev.flags,
 800598a:	2310      	movs	r3, #16
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	891b      	ldrh	r3, [r3, #8]
					debug_Printf("ts:%d, v:%d, t:%d, f:%04x gps:%s\r\n", ev.TimeStamp,
 8005990:	001a      	movs	r2, r3
 8005992:	483b      	ldr	r0, [pc, #236]	; (8005a80 <prvCellTask+0x284>)
 8005994:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <prvCellTask+0x25c>)
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	9200      	str	r2, [sp, #0]
 800599a:	002b      	movs	r3, r5
 800599c:	0022      	movs	r2, r4
 800599e:	f001 fc1d 	bl	80071dc <uart1_Printf>
																  long_lat);

					send_result = add_record(records, sz_records, &ev, long_lat, IMSI);
 80059a2:	4c2d      	ldr	r4, [pc, #180]	; (8005a58 <prvCellTask+0x25c>)
 80059a4:	2310      	movs	r3, #16
 80059a6:	18fa      	adds	r2, r7, r3
 80059a8:	6a39      	ldr	r1, [r7, #32]
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <prvCellTask+0x260>)
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	0023      	movs	r3, r4
 80059b2:	f7ff fea3 	bl	80056fc <add_record>
 80059b6:	0003      	movs	r3, r0
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
					if (send_result == 2) {				// sent OK
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d105      	bne.n	80059cc <prvCellTask+0x1d0>
						Successful_Xfer_Callback();		// tell flash
 80059c0:	f7fe f95c 	bl	8003c7c <Successful_Xfer_Callback>
						debug_Printf("** POST successful **\n");
 80059c4:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <prvCellTask+0x288>)
 80059c6:	0018      	movs	r0, r3
 80059c8:	f001 fc08 	bl	80071dc <uart1_Printf>
					}
					if (send_result == 0) {
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <prvCellTask+0x1e0>
						debug_Printf("** POST failed **\n");
 80059d2:	4b2d      	ldr	r3, [pc, #180]	; (8005a88 <prvCellTask+0x28c>)
 80059d4:	0018      	movs	r0, r3
 80059d6:	f001 fc01 	bl	80071dc <uart1_Printf>
						break;							// bail
 80059da:	e007      	b.n	80059ec <prvCellTask+0x1f0>
				while (Report_Callback(&ev) != -1)
 80059dc:	2310      	movs	r3, #16
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7fe f899 	bl	8003b18 <Report_Callback>
 80059e6:	0003      	movs	r3, r0
 80059e8:	3301      	adds	r3, #1
 80059ea:	d1c3      	bne.n	8005974 <prvCellTask+0x178>
					}
				}

				if (send_result != 0) {
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <prvCellTask+0x218>
					if (flush(records)) {					// sent OK
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff fe49 	bl	800568c <flush>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d006      	beq.n	8005a0c <prvCellTask+0x210>
						Successful_Xfer_Callback();			// tell flash
 80059fe:	f7fe f93d 	bl	8003c7c <Successful_Xfer_Callback>
						debug_Printf("** POST successful **\n");
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <prvCellTask+0x288>)
 8005a04:	0018      	movs	r0, r3
 8005a06:	f001 fbe9 	bl	80071dc <uart1_Printf>
 8005a0a:	e003      	b.n	8005a14 <prvCellTask+0x218>
					} else {
						debug_Printf("** POST failed **\n");
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <prvCellTask+0x28c>)
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f001 fbe4 	bl	80071dc <uart1_Printf>
					}
				}

				debug_Puts("--- Done! ---");
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <prvCellTask+0x290>)
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fd f96f 	bl	8002cfa <debug_Puts>
				LED_ON(GREEN_LED);
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7fe fa8d 	bl	8003f40 <LED_ON>
				LED_OFF(BLUE_LED);
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	015b      	lsls	r3, r3, #5
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7fe fa9a 	bl	8003f64 <LED_OFF>

				free(records);	// oops
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f001 ff22 	bl	800787c <free>

				at_sleep();
 8005a38:	f7ff f952 	bl	8004ce0 <at_sleep>

				// clear hold (only after a delay to let modem quiet down
				vTaskDelay(MS_TO_TICKS(5000));
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <prvCellTask+0x294>)
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7fb fc30 	bl	80012a4 <vTaskDelay>
				gHoldSamplesDuringModemActivity = false;
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <prvCellTask+0x298>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
		if ( xSemaphoreTake(connect_Semaphore,10000+MS_TO_TICKS(Config.Report_Rate * 100)) == pdTRUE )
 8005a4a:	e72a      	b.n	80058a2 <prvCellTask+0xa6>
 8005a4c:	0800a064 	.word	0x0800a064
 8005a50:	0800a074 	.word	0x0800a074
 8005a54:	08009c8c 	.word	0x08009c8c
 8005a58:	20003eb8 	.word	0x20003eb8
 8005a5c:	20003f38 	.word	0x20003f38
 8005a60:	200050dc 	.word	0x200050dc
 8005a64:	20005118 	.word	0x20005118
 8005a68:	00002710 	.word	0x00002710
 8005a6c:	08009cb8 	.word	0x08009cb8
 8005a70:	08009cd4 	.word	0x08009cd4
 8005a74:	20003f58 	.word	0x20003f58
 8005a78:	08009ce4 	.word	0x08009ce4
 8005a7c:	08009d00 	.word	0x08009d00
 8005a80:	08009d18 	.word	0x08009d18
 8005a84:	08009d3c 	.word	0x08009d3c
 8005a88:	08009d54 	.word	0x08009d54
 8005a8c:	08009d68 	.word	0x08009d68
 8005a90:	00001388 	.word	0x00001388
 8005a94:	20003eb5 	.word	0x20003eb5

08005a98 <Clocks_Init>:
};

// ------------------------------------------------------------------------------------------

void Clocks_Init()								//	Enable clocks to the various sub-systems
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);	//	Enable GPIO clock
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7fc fee2 	bl	800286c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);	//	Enable GPIO clock
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	02db      	lsls	r3, r3, #11
 8005aac:	2101      	movs	r1, #1
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7fc fedc 	bl	800286c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOC, ENABLE);	//	Enable GPIO clock
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	031b      	lsls	r3, r3, #12
 8005ab8:	2101      	movs	r1, #1
 8005aba:	0018      	movs	r0, r3
 8005abc:	f7fc fed6 	bl	800286c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_DMA1,	ENABLE);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f7fc fed2 	bl	800286c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_CRC,	ENABLE);
 8005ac8:	2101      	movs	r1, #1
 8005aca:	2040      	movs	r0, #64	; 0x40
 8005acc:	f7fc fece 	bl	800286c <RCC_AHBPeriphClockCmd>

//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM3,   ENABLE);		///	TODO: delete what's not needed...
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM6,   ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM14,  ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_WWDG,   ENABLE);
	RCC_APB1PeriphClockCmd (RCC_APB1Periph_USART2, ENABLE);
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7fc ff08 	bl	80028ec <RCC_APB1PeriphClockCmd>
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_I2C1,   ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_I2C2,   ENABLE);
	RCC_APB1PeriphClockCmd (RCC_APB1Periph_PWR,	   ENABLE);
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	055b      	lsls	r3, r3, #21
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fc ff02 	bl	80028ec <RCC_APB1PeriphClockCmd>

	RCC_APB2PeriphClockCmd (RCC_APB2Periph_SYSCFG, ENABLE);		///	TODO: delete what's not needed...
 8005ae8:	2101      	movs	r1, #1
 8005aea:	2001      	movs	r0, #1
 8005aec:	f7fc fede 	bl	80028ac <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM1,   ENABLE);
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	2101      	movs	r1, #1
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7fc fed8 	bl	80028ac <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_SPI1,   ENABLE);
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	015b      	lsls	r3, r3, #5
 8005b00:	2101      	movs	r1, #1
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fc fed2 	bl	80028ac <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1, ENABLE);
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	01db      	lsls	r3, r3, #7
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7fc fecc 	bl	80028ac <RCC_APB2PeriphClockCmd>
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM15,  ENABLE);
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM16,  ENABLE);
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM17,  ENABLE);
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_DBGMCU, ENABLE);
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	03db      	lsls	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7fc fec6 	bl	80028ac <RCC_APB2PeriphClockCmd>
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <Hardware_Init>:
  * @brief	Initialize the I/O ports and internal peripherals.
  * @param	None
  * @retval None
  */
void Hardware_Init()
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
	int  i, pin;
	GPIO_InitTypeDef GPIO_InitStructure;

	Clocks_Init();					//	Enable clocks to the various sub-systems
 8005b2e:	f7ff ffb3 	bl	8005a98 <Clocks_Init>
									//	Init output pins as low-level
	GPIO_Write (GPIOA, SS_pin);		//	Port A = all low except -SS pin
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	021a      	lsls	r2, r3, #8
 8005b36:	2390      	movs	r3, #144	; 0x90
 8005b38:	05db      	lsls	r3, r3, #23
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fc fc6b 	bl	8002418 <GPIO_Write>
	GPIO_Write (GPIOB, 0);			//	Port B = all low   (ALL LEDs ON)
 8005b42:	4b3a      	ldr	r3, [pc, #232]	; (8005c2c <Hardware_Init+0x104>)
 8005b44:	2100      	movs	r1, #0
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fc fc66 	bl	8002418 <GPIO_Write>
	GPIO_Write (GPIOC, 0);			//	Port C = all low
 8005b4c:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <Hardware_Init+0x108>)
 8005b4e:	2100      	movs	r1, #0
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7fc fc61 	bl	8002418 <GPIO_Write>

	for (i=0; i<GPIO_COUNT; i++)
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e04a      	b.n	8005bf2 <Hardware_Init+0xca>
	{
		pin = 1 << Pin_Defns[i].Pin;
 8005b5c:	4935      	ldr	r1, [pc, #212]	; (8005c34 <Hardware_Init+0x10c>)
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	0013      	movs	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18cb      	adds	r3, r1, r3
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	409a      	lsls	r2, r3
 8005b72:	0013      	movs	r3, r2
 8005b74:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Pin	  = pin;
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	003b      	movs	r3, r7
 8005b7a:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Mode  = Pin_Defns[i].Mode;
 8005b7c:	492d      	ldr	r1, [pc, #180]	; (8005c34 <Hardware_Init+0x10c>)
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	0013      	movs	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	189b      	adds	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	18cb      	adds	r3, r1, r3
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	003b      	movs	r3, r7
 8005b90:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_Speed = Pin_Defns[i].Speed;
 8005b92:	4928      	ldr	r1, [pc, #160]	; (8005c34 <Hardware_Init+0x10c>)
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	0013      	movs	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	18cb      	adds	r3, r1, r3
 8005ba0:	3309      	adds	r3, #9
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	003b      	movs	r3, r7
 8005ba6:	715a      	strb	r2, [r3, #5]
		GPIO_InitStructure.GPIO_OType = Pin_Defns[i].PP_OD;
 8005ba8:	4922      	ldr	r1, [pc, #136]	; (8005c34 <Hardware_Init+0x10c>)
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	0013      	movs	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	189b      	adds	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	18cb      	adds	r3, r1, r3
 8005bb6:	330a      	adds	r3, #10
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	003b      	movs	r3, r7
 8005bbc:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_PuPd  = Pin_Defns[i].PU_PD;
 8005bbe:	491d      	ldr	r1, [pc, #116]	; (8005c34 <Hardware_Init+0x10c>)
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	18cb      	adds	r3, r1, r3
 8005bcc:	330b      	adds	r3, #11
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	003b      	movs	r3, r7
 8005bd2:	71da      	strb	r2, [r3, #7]
		GPIO_Init (Pin_Defns[i].Port, &GPIO_InitStructure);
 8005bd4:	4917      	ldr	r1, [pc, #92]	; (8005c34 <Hardware_Init+0x10c>)
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	0013      	movs	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	189b      	adds	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	585b      	ldr	r3, [r3, r1]
 8005be2:	003a      	movs	r2, r7
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7fc fb66 	bl	80022b8 <GPIO_Init>
	for (i=0; i<GPIO_COUNT; i++)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	ddb1      	ble.n	8005b5c <Hardware_Init+0x34>
	}

	Flash_Disable();				//	This pin normally HI
 8005bf8:	f7fd f9cb 	bl	8002f92 <Flash_Disable>
	uS_Delay (500000);				//	1/2 second delay with all LEDs on
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <Hardware_Init+0x110>)
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 fa74 	bl	80060ec <uS_Delay>
	LED_OFF (GREEN_LED);			//	Initial state: disconnected from cell
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fe f9ab 	bl	8003f64 <LED_OFF>
	LED_OFF (RED_LED);				//		(Red LED off)
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	01db      	lsls	r3, r3, #7
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fe f9a6 	bl	8003f64 <LED_OFF>
	LED_OFF (BLUE_LED);				//		(Blue LED off)
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	015b      	lsls	r3, r3, #5
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fe f9a1 	bl	8003f64 <LED_OFF>
}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b004      	add	sp, #16
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	48000400 	.word	0x48000400
 8005c30:	48000800 	.word	0x48000800
 8005c34:	0800a0e0 	.word	0x0800a0e0
 8005c38:	0007a120 	.word	0x0007a120

08005c3c <MODEM_PWRKEY>:


void MODEM_PWRKEY (int x)			//	Set or Clear the Modem PowerKey pin
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <MODEM_PWRKEY+0x18>
 8005c4a:	2390      	movs	r3, #144	; 0x90
 8005c4c:	05db      	lsls	r3, r3, #23
 8005c4e:	2202      	movs	r2, #2
 8005c50:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<1);
}
 8005c52:	e003      	b.n	8005c5c <MODEM_PWRKEY+0x20>
	else	GPIOA->BRR = (1<<1);
 8005c54:	2390      	movs	r3, #144	; 0x90
 8005c56:	05db      	lsls	r3, r3, #23
 8005c58:	2202      	movs	r2, #2
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <TEMP_SCL>:
	else	GPIOA->BRR = (1<<15);
}


void TEMP_SCL (int x)				//	Set or Clear the A/D's I2C SCL pin
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<9);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <TEMP_SCL+0x1a>
 8005c72:	2390      	movs	r3, #144	; 0x90
 8005c74:	05db      	lsls	r3, r3, #23
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	0092      	lsls	r2, r2, #2
 8005c7a:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<9);
}
 8005c7c:	e004      	b.n	8005c88 <TEMP_SCL+0x24>
	else	GPIOA->BRR = (1<<9);
 8005c7e:	2390      	movs	r3, #144	; 0x90
 8005c80:	05db      	lsls	r3, r3, #23
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	0092      	lsls	r2, r2, #2
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <TEMP_SDA>:


void TEMP_SDA (int x)				//	Set or Clear the A/D's I2C SDA pin
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<10);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <TEMP_SDA+0x1a>
 8005c9e:	2390      	movs	r3, #144	; 0x90
 8005ca0:	05db      	lsls	r3, r3, #23
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	00d2      	lsls	r2, r2, #3
 8005ca6:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<10);
}
 8005ca8:	e004      	b.n	8005cb4 <TEMP_SDA+0x24>
	else	GPIOA->BRR = (1<<10);
 8005caa:	2390      	movs	r3, #144	; 0x90
 8005cac:	05db      	lsls	r3, r3, #23
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	00d2      	lsls	r2, r2, #3
 8005cb2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <VOLT_SCL>:


void VOLT_SCL (int x)				//	Set or Clear the A/D's I2C SCL pin
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<11);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <VOLT_SCL+0x1a>
 8005cca:	2390      	movs	r3, #144	; 0x90
 8005ccc:	05db      	lsls	r3, r3, #23
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	0112      	lsls	r2, r2, #4
 8005cd2:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<11);
}
 8005cd4:	e004      	b.n	8005ce0 <VOLT_SCL+0x24>
	else	GPIOA->BRR = (1<<11);
 8005cd6:	2390      	movs	r3, #144	; 0x90
 8005cd8:	05db      	lsls	r3, r3, #23
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	0112      	lsls	r2, r2, #4
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <VOLT_SDA>:


void VOLT_SDA (int x)				//	Set or Clear the A/D's I2C SDA pin
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<12);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <VOLT_SDA+0x1a>
 8005cf6:	2390      	movs	r3, #144	; 0x90
 8005cf8:	05db      	lsls	r3, r3, #23
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	0152      	lsls	r2, r2, #5
 8005cfe:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<12);
}
 8005d00:	e004      	b.n	8005d0c <VOLT_SDA+0x24>
	else	GPIOA->BRR = (1<<12);
 8005d02:	2390      	movs	r3, #144	; 0x90
 8005d04:	05db      	lsls	r3, r3, #23
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	0152      	lsls	r2, r2, #5
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <MODEM_PWR_EN>:


void MODEM_PWR_EN (int x)			//	Set or Clear the Modem Power-Enable pin
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	if (x)	GPIOB->BSRR = (1<<8);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <MODEM_PWR_EN+0x18>
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <MODEM_PWR_EN+0x28>)
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	0052      	lsls	r2, r2, #1
 8005d28:	619a      	str	r2, [r3, #24]
	else	GPIOB->BRR = (1<<8);
}
 8005d2a:	e003      	b.n	8005d34 <MODEM_PWR_EN+0x20>
	else	GPIOB->BRR = (1<<8);
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <MODEM_PWR_EN+0x28>)
 8005d2e:	2280      	movs	r2, #128	; 0x80
 8005d30:	0052      	lsls	r2, r2, #1
 8005d32:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	48000400 	.word	0x48000400

08005d40 <main>:
static volatile uint32_t ulCountOfTimerCallbackExecutions = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af04      	add	r7, sp, #16
	xTimerHandle xExampleSoftwareTimer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8005d4a:	f000 f9ca 	bl	80060e2 <prvSetupHardware>
	Hardware_Init();
 8005d4e:	f7ff feeb 	bl	8005b28 <Hardware_Init>
	Vars_Init();
 8005d52:	f000 fa3d 	bl	80061d0 <Vars_Init>
	uS_Delay (500000);			//	1/2 second delay before accessing FLASH
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <main+0xd8>)
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 f9c7 	bl	80060ec <uS_Delay>
	Temperature_Init();
 8005d5e:	f7fe faff 	bl	8004360 <Temperature_Init>
	Voltage_Init();
 8005d62:	f7fe fd03 	bl	800476c <Voltage_Init>
	debug_Init();
 8005d66:	f7fc ffc1 	bl	8002cec <debug_Init>
	Modem_Init();		///	TODO: ADD MODEM TEST FOR BOARD-FAILS
 8005d6a:	f7fe f90d 	bl	8003f88 <Modem_Init>
	uS_Delay (500000);			//	1/2 second delay before accessing FLASH
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <main+0xd8>)
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 f9bb 	bl	80060ec <uS_Delay>
	Flash_Init();
 8005d76:	f7fe f8b1 	bl	8003edc <Flash_Init>

	vSemaphoreCreateBinary(connect_Semaphore);
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7fa fe77 	bl	8000a72 <xQueueGenericCreate>
 8005d84:	0002      	movs	r2, r0
 8005d86:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <main+0xdc>)
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <main+0xdc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d006      	beq.n	8005da0 <main+0x60>
 8005d92:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <main+0xdc>)
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f7fa feee 	bl	8000b7c <xQueueGenericSend>
	epoch_Mutex = xSemaphoreCreateMutex(); // initialize the mutex for access to epoch
 8005da0:	2001      	movs	r0, #1
 8005da2:	f7fa fea6 	bl	8000af2 <xQueueCreateMutex>
 8005da6:	0002      	movs	r2, r0
 8005da8:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <main+0xe0>)
 8005daa:	601a      	str	r2, [r3, #0]

	/* Create the main task */
	xTaskCreate( 	prvMainTask,					/* The function that implements the task. */
 8005dac:	2396      	movs	r3, #150	; 0x96
 8005dae:	005a      	lsls	r2, r3, #1
 8005db0:	491c      	ldr	r1, [pc, #112]	; (8005e24 <main+0xe4>)
 8005db2:	481d      	ldr	r0, [pc, #116]	; (8005e28 <main+0xe8>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f7fb f9a3 	bl	8001110 <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvCellTask,
 8005dca:	23fa      	movs	r3, #250	; 0xfa
 8005dcc:	005a      	lsls	r2, r3, #1
 8005dce:	4917      	ldr	r1, [pc, #92]	; (8005e2c <main+0xec>)
 8005dd0:	4817      	ldr	r0, [pc, #92]	; (8005e30 <main+0xf0>)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9303      	str	r3, [sp, #12]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	2301      	movs	r3, #1
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fb f994 	bl	8001110 <xTaskGenericCreate>
					NULL );


	/* Create the software timer as described in the comments at the top of
	this file.  http://www.freertos.org/FreeRTOS-timers-xTimerCreate.html. */
	xExampleSoftwareTimer = xTimerCreate( 	( const signed char * ) "LEDTimer", /* A text name, purely to help debugging. */
 8005de8:	23fa      	movs	r3, #250	; 0xfa
 8005dea:	0099      	lsls	r1, r3, #2
 8005dec:	4811      	ldr	r0, [pc, #68]	; (8005e34 <main+0xf4>)
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <main+0xf8>)
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2300      	movs	r3, #0
 8005df4:	2201      	movs	r2, #1
 8005df6:	f7fb ffcd 	bl	8001d94 <xTimerCreate>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	607b      	str	r3, [r7, #4]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
 8005dfe:	f7fb fb41 	bl	8001484 <xTaskGetTickCount>
 8005e02:	0002      	movs	r2, r0
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	f7fb fff5 	bl	8001dfc <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8005e12:	f7fb fa73 	bl	80012fc <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 8005e16:	e7fe      	b.n	8005e16 <main+0xd6>
 8005e18:	0007a120 	.word	0x0007a120
 8005e1c:	200050dc 	.word	0x200050dc
 8005e20:	200050cc 	.word	0x200050cc
 8005e24:	08009d78 	.word	0x08009d78
 8005e28:	08005f01 	.word	0x08005f01
 8005e2c:	08009d80 	.word	0x08009d80
 8005e30:	080057fd 	.word	0x080057fd
 8005e34:	08009d88 	.word	0x08009d88
 8005e38:	08005e3d 	.word	0x08005e3d

08005e3c <vExampleTimerCallback>:
}

/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	if (++ulCountOfTimerCallbackExecutions & 0x01)
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <vExampleTimerCallback+0x1c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <vExampleTimerCallback+0x1c>)
 8005e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
//		LED_ON(RED_LED);
	}
}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b002      	add	sp, #8
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	20003fd8 	.word	0x20003fd8

08005e5c <Show_Board_Failure>:

/*-----------------------------------------------------------*/

static void Show_Board_Failure()		//	Does not return!
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
	debug_PutLine("\r\nBoard Fail: ");
 8005e60:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <Show_Board_Failure+0x88>)
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7fc ff55 	bl	8002d12 <debug_PutLine>
	if (Board_Fails & TEMP_FAIL)	debug_PutLine("\tTemp Module");
 8005e68:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <Show_Board_Failure+0x8c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d003      	beq.n	8005e7a <Show_Board_Failure+0x1e>
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <Show_Board_Failure+0x90>)
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fc ff4c 	bl	8002d12 <debug_PutLine>
	if (Board_Fails & VOLT_FAIL)	debug_PutLine("\tVolt Module");
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <Show_Board_Failure+0x8c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	4013      	ands	r3, r2
 8005e82:	d003      	beq.n	8005e8c <Show_Board_Failure+0x30>
 8005e84:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <Show_Board_Failure+0x94>)
 8005e86:	0018      	movs	r0, r3
 8005e88:	f7fc ff43 	bl	8002d12 <debug_PutLine>
	if (Board_Fails & FLASH_FAIL)	debug_PutLine("\tFlash Module");
 8005e8c:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <Show_Board_Failure+0x8c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2204      	movs	r2, #4
 8005e92:	4013      	ands	r3, r2
 8005e94:	d003      	beq.n	8005e9e <Show_Board_Failure+0x42>
 8005e96:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <Show_Board_Failure+0x98>)
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fc ff3a 	bl	8002d12 <debug_PutLine>
	if (Board_Fails & DEBUG_FAIL)	debug_PutLine("\tDebug Module");
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <Show_Board_Failure+0x8c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <Show_Board_Failure+0x54>
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <Show_Board_Failure+0x9c>)
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7fc ff31 	bl	8002d12 <debug_PutLine>
	if (Board_Fails & CELL_FAIL)	debug_PutLine("\tCell Module");
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <Show_Board_Failure+0x8c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <Show_Board_Failure+0x66>
 8005eba:	4b10      	ldr	r3, [pc, #64]	; (8005efc <Show_Board_Failure+0xa0>)
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fc ff28 	bl	8002d12 <debug_PutLine>
	LED_OFF (BLUE_LED);
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	015b      	lsls	r3, r3, #5
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7fe f84c 	bl	8003f64 <LED_OFF>
	LED_OFF (GREEN_LED);
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fe f847 	bl	8003f64 <LED_OFF>
	LED_ON  (RED_LED);
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7fe f830 	bl	8003f40 <LED_ON>
	while (1) ;				//	Wait till watchdog timer resets us, and try again
 8005ee0:	e7fe      	b.n	8005ee0 <Show_Board_Failure+0x84>
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	08009d94 	.word	0x08009d94
 8005ee8:	200050c4 	.word	0x200050c4
 8005eec:	08009da4 	.word	0x08009da4
 8005ef0:	08009db4 	.word	0x08009db4
 8005ef4:	08009dc4 	.word	0x08009dc4
 8005ef8:	08009dd4 	.word	0x08009dd4
 8005efc:	08009de4 	.word	0x08009de4

08005f00 <prvMainTask>:
}

/*-----------------------------------------------------------*/
static void prvMainTask( void *pvParameters )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	portTickType xDelayTime = 1000 / portTICK_RATE_MS;
 8005f08:	23fa      	movs	r3, #250	; 0xfa
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	60fb      	str	r3, [r7, #12]
	portTickType now = xTaskGetTickCount();
 8005f0e:	f7fb fab9 	bl	8001484 <xTaskGetTickCount>
 8005f12:	0003      	movs	r3, r0
 8005f14:	60bb      	str	r3, [r7, #8]
	portTickType lastTick = now;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	617b      	str	r3, [r7, #20]
	portTickType compareTo = MS_TO_TICKS(120 * 1000);	// first post at 2 minutes
 8005f1a:	4b3c      	ldr	r3, [pc, #240]	; (800600c <prvMainTask+0x10c>)
 8005f1c:	613b      	str	r3, [r7, #16]

	xSemaphoreTake(connect_Semaphore,MS_TO_TICKS(1));
 8005f1e:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <prvMainTask+0x110>)
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2201      	movs	r2, #1
 8005f26:	2100      	movs	r1, #0
 8005f28:	f7fa ff0d 	bl	8000d46 <xQueueGenericReceive>
	debug_Printf("EAI WatchDog - Version: %s\r\n",VERSION);
 8005f2c:	4a39      	ldr	r2, [pc, #228]	; (8006014 <prvMainTask+0x114>)
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <prvMainTask+0x118>)
 8005f30:	0011      	movs	r1, r2
 8005f32:	0018      	movs	r0, r3
 8005f34:	f001 f952 	bl	80071dc <uart1_Printf>
	MODEM_PWRKEY(0);		// modem on button (HIGH)
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7ff fe7f 	bl	8005c3c <MODEM_PWRKEY>
	if (Board_Fails)
 8005f3e:	4b37      	ldr	r3, [pc, #220]	; (800601c <prvMainTask+0x11c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <prvMainTask+0x4a>
		Show_Board_Failure();		//	Does not return!
 8005f46:	f7ff ff89 	bl	8005e5c <Show_Board_Failure>

	debug_PutLine("Locating latest record...");
 8005f4a:	4b35      	ldr	r3, [pc, #212]	; (8006020 <prvMainTask+0x120>)
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7fc fee0 	bl	8002d12 <debug_PutLine>
	Flash_Locate_Latest_Record();
 8005f52:	f7fd fba3 	bl	800369c <Flash_Locate_Latest_Record>

	// start up the modem the way it wants to
	debug_PutLine("Powering up Modem...");
 8005f56:	4b33      	ldr	r3, [pc, #204]	; (8006024 <prvMainTask+0x124>)
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f7fc feda 	bl	8002d12 <debug_PutLine>
	MODEM_PWR_EN(1);				// power on Modem
 8005f5e:	2001      	movs	r0, #1
 8005f60:	f7ff fed8 	bl	8005d14 <MODEM_PWR_EN>
	vTaskDelay(xDelayTime);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7fb f99c 	bl	80012a4 <vTaskDelay>
	debug_PutLine("Button press");
 8005f6c:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <prvMainTask+0x128>)
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7fc fecf 	bl	8002d12 <debug_PutLine>
	MODEM_PWRKEY(1);				// modem on button (LOW) - minimum 1 second
 8005f74:	2001      	movs	r0, #1
 8005f76:	f7ff fe61 	bl	8005c3c <MODEM_PWRKEY>
	vTaskDelay(xDelayTime);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fb f991 	bl	80012a4 <vTaskDelay>
	debug_PutLine("Button release");
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <prvMainTask+0x12c>)
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7fc fec4 	bl	8002d12 <debug_PutLine>
	MODEM_PWRKEY(0);				// modem on button (HIGH)
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f7ff fe56 	bl	8005c3c <MODEM_PWRKEY>
	if (Board_Fails)				// Check for late-arriving failures
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <prvMainTask+0x11c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <prvMainTask+0x9c>
		Show_Board_Failure();		// Does not return!
 8005f98:	f7ff ff60 	bl	8005e5c <Show_Board_Failure>

	for (;;)
	{
		vTaskDelay(1);
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	f7fb f981 	bl	80012a4 <vTaskDelay>
		Do_Time();
 8005fa2:	f000 f8b7 	bl	8006114 <Do_Time>

		if (!gHoldSamplesDuringModemActivity)
 8005fa6:	4b22      	ldr	r3, [pc, #136]	; (8006030 <prvMainTask+0x130>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d111      	bne.n	8005fd2 <prvMainTask+0xd2>
		{
			if (Check_VT)
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <prvMainTask+0x134>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <prvMainTask+0xba>
				{
				Handle_VT();			//	Check V & T values once per second
 8005fb6:	f000 fd61 	bl	8006a7c <Handle_VT>
															  Current_Volts,
															  Current_Temp);
#endif
				}

			if (Need_Volts)
 8005fba:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <prvMainTask+0x138>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <prvMainTask+0xc6>
				Handle_Volts();
 8005fc2:	f7fe fba3 	bl	800470c <Handle_Volts>

			if (Need_Temp)
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <prvMainTask+0x13c>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <prvMainTask+0xd2>
				Handle_Temp();
 8005fce:	f7fe f9a3 	bl	8004318 <Handle_Temp>
		}

		now = xTaskGetTickCount();
 8005fd2:	f7fb fa57 	bl	8001484 <xTaskGetTickCount>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	60bb      	str	r3, [r7, #8]
		if (now - lastTick > compareTo)
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d9da      	bls.n	8005f9c <prvMainTask+0x9c>
		{
			compareTo = MS_TO_TICKS(Config.Report_Rate * 1000);
 8005fe6:	4b16      	ldr	r3, [pc, #88]	; (8006040 <prvMainTask+0x140>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	22fa      	movs	r2, #250	; 0xfa
 8005fec:	0092      	lsls	r2, r2, #2
 8005fee:	4353      	muls	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
			lastTick = now;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	617b      	str	r3, [r7, #20]

			// hold off samples
			gHoldSamplesDuringModemActivity = true;
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <prvMainTask+0x130>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]

			xSemaphoreGive(connect_Semaphore);
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <prvMainTask+0x110>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	f7fa fdb9 	bl	8000b7c <xQueueGenericSend>
		vTaskDelay(1);
 800600a:	e7c7      	b.n	8005f9c <prvMainTask+0x9c>
 800600c:	0001d4c0 	.word	0x0001d4c0
 8006010:	200050dc 	.word	0x200050dc
 8006014:	08009df4 	.word	0x08009df4
 8006018:	08009dfc 	.word	0x08009dfc
 800601c:	200050c4 	.word	0x200050c4
 8006020:	08009e1c 	.word	0x08009e1c
 8006024:	08009e38 	.word	0x08009e38
 8006028:	08009e50 	.word	0x08009e50
 800602c:	08009e60 	.word	0x08009e60
 8006030:	20003eb5 	.word	0x20003eb5
 8006034:	200050b0 	.word	0x200050b0
 8006038:	200050ca 	.word	0x200050ca
 800603c:	200050e4 	.word	0x200050e4
 8006040:	20005118 	.word	0x20005118

08006044 <vApplicationTickHook>:
}

/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
	static int	Last_Tamper=0;

	if (NewSecond) {
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <vApplicationTickHook+0x5c>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <vApplicationTickHook+0x22>
		NewSecond = false;
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <vApplicationTickHook+0x5c>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
		TheTime.Ticks -= 999;			//	Count real-time, and subtract 1000mS
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <vApplicationTickHook+0x60>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <vApplicationTickHook+0x64>)
 800605e:	189a      	adds	r2, r3, r2
 8006060:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <vApplicationTickHook+0x60>)
 8006062:	605a      	str	r2, [r3, #4]
 8006064:	e004      	b.n	8006070 <vApplicationTickHook+0x2c>
	}
	else
		TheTime.Ticks++;				//	Count real-time
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <vApplicationTickHook+0x60>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <vApplicationTickHook+0x60>)
 800606e:	605a      	str	r2, [r3, #4]

	int Tamper = (TAMPER_IN);			//	Tamper = 0 or (1<<13), depending on input state
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <vApplicationTickHook+0x68>)
 8006072:	8a1b      	ldrh	r3, [r3, #16]
 8006074:	b29b      	uxth	r3, r3
 8006076:	001a      	movs	r2, r3
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	019b      	lsls	r3, r3, #6
 800607c:	4013      	ands	r3, r2
 800607e:	607b      	str	r3, [r7, #4]
	if (Last_Tamper != Tamper)
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <vApplicationTickHook+0x6c>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d005      	beq.n	8006096 <vApplicationTickHook+0x52>
	{
		Tampered = true;				//	Set flag if Tamper changed
 800608a:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <vApplicationTickHook+0x70>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
		Last_Tamper = Tamper;
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vApplicationTickHook+0x6c>)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	}
}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	46bd      	mov	sp, r7
 800609a:	b002      	add	sp, #8
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	200050c0 	.word	0x200050c0
 80060a4:	200050d0 	.word	0x200050d0
 80060a8:	fffffc19 	.word	0xfffffc19
 80060ac:	48000800 	.word	0x48000800
 80060b0:	20003fdc 	.word	0x20003fdc
 80060b4:	200050c9 	.word	0x200050c9

080060b8 <vApplicationMallocFailedHook>:

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80060bc:	e7fe      	b.n	80060bc <vApplicationMallocFailedHook+0x4>

080060be <vApplicationStackOverflowHook>:
}

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80060c8:	e7fe      	b.n	80060c8 <vApplicationStackOverflowHook+0xa>

080060ca <vApplicationIdleHook>:
}

/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80060d0:	f7fa fc70 	bl	80009b4 <xPortGetFreeHeapSize>
 80060d4:	0003      	movs	r3, r0
 80060d6:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80060d8:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	46bd      	mov	sp, r7
 80060de:	b002      	add	sp, #8
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <prvSetupHardware>:

/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	af00      	add	r7, sp, #0
	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <uS_Delay>:
	* @brief	Inserts a delay time.
	* @param	t: specifies the delay time length, in uS.
	* @retval	None
	*/
int uS_Delay (int32 t)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	int	i=0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
	while (i < t)
 80060f8:	e002      	b.n	8006100 <uS_Delay+0x14>
		i++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
	while (i < t)
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	dbf8      	blt.n	80060fa <uS_Delay+0xe>
	return	i;
 8006108:	68fb      	ldr	r3, [r7, #12]
}
 800610a:	0018      	movs	r0, r3
 800610c:	46bd      	mov	sp, r7
 800610e:	b004      	add	sp, #16
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <Do_Time>:
	* @brief	Accumulates Ticks (1 mS each) into Time-Of-Day
	* @param	None
	* @retval	None
	*/
void Do_Time()
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	uint32 n = TheTime.Ticks;
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <Do_Time+0x94>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	607b      	str	r3, [r7, #4]
	portTickType xDelayTime = 10 / portTICK_RATE_MS;
 8006120:	230a      	movs	r3, #10
 8006122:	603b      	str	r3, [r7, #0]

	if (NewSecond)
 8006124:	4b21      	ldr	r3, [pc, #132]	; (80061ac <Do_Time+0x98>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d137      	bne.n	800619c <Do_Time+0x88>
		return;							//	Do not check Ticks if ISR has not handled previous overflow yet

	if (n & 1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	d003      	beq.n	800613c <Do_Time+0x28>
		Need_Temp  = true;				//	Poll Temperature A/D every odd mS
 8006134:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <Do_Time+0x9c>)
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e002      	b.n	8006142 <Do_Time+0x2e>
	else
		Need_Volts = true;				//	Poll Voltage A/D every even mS
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <Do_Time+0xa0>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]

	if (n < 1000)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <Do_Time+0xa4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d92a      	bls.n	80061a0 <Do_Time+0x8c>
		return;							//	Not a full second yet

	xSemaphoreTake(epoch_Mutex,xDelayTime);	//  lock it
 800614a:	4b1c      	ldr	r3, [pc, #112]	; (80061bc <Do_Time+0xa8>)
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	2100      	movs	r1, #0
 8006154:	f7fa fdf7 	bl	8000d46 <xQueueGenericReceive>
	++TheTime.Epoch;					//	Count another second
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <Do_Time+0x94>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <Do_Time+0x94>)
 8006160:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(epoch_Mutex);
 8006162:	4b16      	ldr	r3, [pc, #88]	; (80061bc <Do_Time+0xa8>)
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	2200      	movs	r2, #0
 800616a:	2100      	movs	r1, #0
 800616c:	f7fa fd06 	bl	8000b7c <xQueueGenericSend>
	NewSecond = true;					//	Inform ISR of Ticks overflow
 8006170:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <Do_Time+0x98>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]

	if (n < 2000)						//	If many seconds have built up, only set flag for final second.
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <Do_Time+0xac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d802      	bhi.n	8006184 <Do_Time+0x70>
		Check_VT = true;				//	Check on Voltage and Temperature averages once per second.
 800617e:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <Do_Time+0xb0>)
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]

	if ((TheTime.Epoch & 31) == 0)
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <Do_Time+0x94>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	221f      	movs	r2, #31
 800618a:	4013      	ands	r3, r2
 800618c:	d109      	bne.n	80061a2 <Do_Time+0x8e>
	{
		Set_Volt_Update_Rate = true;
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <Do_Time+0xb4>)
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
		Set_Temp_Update_Rate = true;	//	re-establish the A/D conversion periods every 32 seconds
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <Do_Time+0xb8>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <Do_Time+0x8e>
		return;							//	Do not check Ticks if ISR has not handled previous overflow yet
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	e000      	b.n	80061a2 <Do_Time+0x8e>
		return;							//	Not a full second yet
 80061a0:	46c0      	nop			; (mov r8, r8)
	}
}
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200050d0 	.word	0x200050d0
 80061ac:	200050c0 	.word	0x200050c0
 80061b0:	200050e4 	.word	0x200050e4
 80061b4:	200050ca 	.word	0x200050ca
 80061b8:	000003e7 	.word	0x000003e7
 80061bc:	200050cc 	.word	0x200050cc
 80061c0:	000007cf 	.word	0x000007cf
 80061c4:	200050b0 	.word	0x200050b0
 80061c8:	200050c8 	.word	0x200050c8
 80061cc:	200050b8 	.word	0x200050b8

080061d0 <Vars_Init>:
	xSemaphoreGive(epoch_Mutex);
	return t;
}

void Vars_Init()
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	gPOR = POR_SECONDS;					//	In a state of POR for first X seconds after power-on
 80061d4:	4b17      	ldr	r3, [pc, #92]	; (8006234 <Vars_Init+0x64>)
 80061d6:	221e      	movs	r2, #30
 80061d8:	601a      	str	r2, [r3, #0]
	Set_Volt_Update_Rate = true;		//	  until the Vz history is filled in.
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <Vars_Init+0x68>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
	Set_Temp_Update_Rate = true;
 80061e0:	4b16      	ldr	r3, [pc, #88]	; (800623c <Vars_Init+0x6c>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
	Need_Volts = false;
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <Vars_Init+0x70>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
	Need_Temp = false;
 80061ec:	4b15      	ldr	r3, [pc, #84]	; (8006244 <Vars_Init+0x74>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
	NewSecond = false;
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <Vars_Init+0x78>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
	Tampered  = false;
 80061f8:	4b14      	ldr	r3, [pc, #80]	; (800624c <Vars_Init+0x7c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
	Check_VT  = false;
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <Vars_Init+0x80>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]

	Board_Fails = 0;
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <Vars_Init+0x84>)
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
	Current_Mode = 0x00;
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <Vars_Init+0x88>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
	TheTime.Epoch = 0;					//	Set default time to  1970/1/1
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <Vars_Init+0x8c>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	TheTime.Ticks = 0;
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <Vars_Init+0x8c>)
 8006218:	2200      	movs	r2, #0
 800621a:	605a      	str	r2, [r3, #4]

	Config.Periodic_Event_Rate = 300;	//  5 minutes = max time between log points
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <Vars_Init+0x90>)
 800621e:	2296      	movs	r2, #150	; 0x96
 8006220:	0052      	lsls	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
	Config.Report_Rate = 30*60;			//	30 minutes
 8006224:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <Vars_Init+0x90>)
 8006226:	22e1      	movs	r2, #225	; 0xe1
 8006228:	00d2      	lsls	r2, r2, #3
 800622a:	605a      	str	r2, [r3, #4]
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	200050e0 	.word	0x200050e0
 8006238:	200050c8 	.word	0x200050c8
 800623c:	200050b8 	.word	0x200050b8
 8006240:	200050ca 	.word	0x200050ca
 8006244:	200050e4 	.word	0x200050e4
 8006248:	200050c0 	.word	0x200050c0
 800624c:	200050c9 	.word	0x200050c9
 8006250:	200050b0 	.word	0x200050b0
 8006254:	200050c4 	.word	0x200050c4
 8006258:	200050bc 	.word	0x200050bc
 800625c:	200050d0 	.word	0x200050d0
 8006260:	20005118 	.word	0x20005118

08006264 <micro_vprintf>:

int micro_vprintf(	  void (*outc)(int ch, void *context)
					, void *context
					, char const *fmt
					, va_list valist )
{
 8006264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006266:	b0b1      	sub	sp, #196	; 0xc4
 8006268:	af00      	add	r7, sp, #0
 800626a:	6678      	str	r0, [r7, #100]	; 0x64
 800626c:	6639      	str	r1, [r7, #96]	; 0x60
 800626e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006270:	65bb      	str	r3, [r7, #88]	; 0x58
	int n = 0;          // number of characters written via 'outc'
 8006272:	2300      	movs	r3, #0
 8006274:	22bc      	movs	r2, #188	; 0xbc
 8006276:	18ba      	adds	r2, r7, r2
 8006278:	6013      	str	r3, [r2, #0]
	static char const *const hexchar = "0123456789ABCDEF";

    while (*fmt)
 800627a:	f000 fbef 	bl	8006a5c <micro_vprintf+0x7f8>
    {
    	char const *start_fmt = fmt;	        // where we started for this specifier
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	22b8      	movs	r2, #184	; 0xb8
 8006282:	18ba      	adds	r2, r7, r2
 8006284:	6013      	str	r3, [r2, #0]
    	bool isneg = false;
 8006286:	235f      	movs	r3, #95	; 0x5f
 8006288:	2258      	movs	r2, #88	; 0x58
 800628a:	18ba      	adds	r2, r7, r2
 800628c:	18d2      	adds	r2, r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	7013      	strb	r3, [r2, #0]
    	bool width_isneg = false;
 8006292:	235e      	movs	r3, #94	; 0x5e
 8006294:	2258      	movs	r2, #88	; 0x58
 8006296:	18ba      	adds	r2, r7, r2
 8006298:	18d2      	adds	r2, r2, r3
 800629a:	2300      	movs	r3, #0
 800629c:	7013      	strb	r3, [r2, #0]
    	int width = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	22b0      	movs	r2, #176	; 0xb0
 80062a2:	18ba      	adds	r2, r7, r2
 80062a4:	6013      	str	r3, [r2, #0]
    	char buffer[24];	                    // big enough for all decimal digits in a 64-bit long
    	int len;
    	uint64_t val;			               // numeric value to convert
    	char modifier = '\0';                   // 'h' or 'l' modifier
 80062a6:	234f      	movs	r3, #79	; 0x4f
 80062a8:	2258      	movs	r2, #88	; 0x58
 80062aa:	18ba      	adds	r2, r7, r2
 80062ac:	18d2      	adds	r2, r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	7013      	strb	r3, [r2, #0]
    	bool zeropad = false;
 80062b2:	234e      	movs	r3, #78	; 0x4e
 80062b4:	2258      	movs	r2, #88	; 0x58
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	18d2      	adds	r2, r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	7013      	strb	r3, [r2, #0]
    	char *p = &buffer[sizeof(buffer)-1];    // write backwards into the buffer to simplify conversions below
 80062be:	2314      	movs	r3, #20
 80062c0:	2258      	movs	r2, #88	; 0x58
 80062c2:	4694      	mov	ip, r2
 80062c4:	44bc      	add	ip, r7
 80062c6:	4463      	add	r3, ip
 80062c8:	3317      	adds	r3, #23
 80062ca:	22a0      	movs	r2, #160	; 0xa0
 80062cc:	18ba      	adds	r2, r7, r2
 80062ce:	6013      	str	r3, [r2, #0]
    	*p = '\0';                              // default is an empty string
 80062d0:	23a0      	movs	r3, #160	; 0xa0
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	7013      	strb	r3, [r2, #0]


    	// handle literal characters quickly
        if (*fmt != '%')
 80062da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b25      	cmp	r3, #37	; 0x25
 80062e0:	d011      	beq.n	8006306 <micro_vprintf+0xa2>
        	{
			outc(*fmt++,context);
 80062e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062e4:	1c53      	adds	r3, r2, #1
 80062e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e8:	7813      	ldrb	r3, [r2, #0]
 80062ea:	0018      	movs	r0, r3
 80062ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f0:	0011      	movs	r1, r2
 80062f2:	4798      	blx	r3
			n++;
 80062f4:	23bc      	movs	r3, #188	; 0xbc
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	22bc      	movs	r2, #188	; 0xbc
 80062fe:	18ba      	adds	r2, r7, r2
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	f000 fbab 	bl	8006a5c <micro_vprintf+0x7f8>
            continue;
        	}

        fmt++;      // skip '%' char
 8006306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006308:	3301      	adds	r3, #1
 800630a:	65fb      	str	r3, [r7, #92]	; 0x5c

        // Get optional zero-pad flag
        if (*fmt == '0')
 800630c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d108      	bne.n	8006326 <micro_vprintf+0xc2>
        	{
        	zeropad = true;
 8006314:	234e      	movs	r3, #78	; 0x4e
 8006316:	2258      	movs	r2, #88	; 0x58
 8006318:	18ba      	adds	r2, r7, r2
 800631a:	18d2      	adds	r2, r2, r3
 800631c:	2301      	movs	r3, #1
 800631e:	7013      	strb	r3, [r2, #0]
        	fmt++;
 8006320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006322:	3301      	adds	r3, #1
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
        	}

        // Get optional width specifier
		if (*fmt == '-')		// right-aligned?
 8006326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b2d      	cmp	r3, #45	; 0x2d
 800632c:	d11b      	bne.n	8006366 <micro_vprintf+0x102>
			{
			width_isneg = true;
 800632e:	235e      	movs	r3, #94	; 0x5e
 8006330:	2258      	movs	r2, #88	; 0x58
 8006332:	18ba      	adds	r2, r7, r2
 8006334:	18d2      	adds	r2, r2, r3
 8006336:	2301      	movs	r3, #1
 8006338:	7013      	strb	r3, [r2, #0]
			fmt++;
 800633a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800633c:	3301      	adds	r3, #1
 800633e:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
		while (*fmt >= '0' && *fmt <= '9')
 8006340:	e011      	b.n	8006366 <micro_vprintf+0x102>
			{
			width = width * 10 + (*fmt - '0');
 8006342:	23b0      	movs	r3, #176	; 0xb0
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	0013      	movs	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	189b      	adds	r3, r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	001a      	movs	r2, r3
 8006352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	3b30      	subs	r3, #48	; 0x30
 8006358:	18d3      	adds	r3, r2, r3
 800635a:	22b0      	movs	r2, #176	; 0xb0
 800635c:	18ba      	adds	r2, r7, r2
 800635e:	6013      	str	r3, [r2, #0]
			fmt++;
 8006360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006362:	3301      	adds	r3, #1
 8006364:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (*fmt >= '0' && *fmt <= '9')
 8006366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b2f      	cmp	r3, #47	; 0x2f
 800636c:	d903      	bls.n	8006376 <micro_vprintf+0x112>
 800636e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b39      	cmp	r3, #57	; 0x39
 8006374:	d9e5      	bls.n	8006342 <micro_vprintf+0xde>
			}

		// get optional modifier
		switch (*fmt)
 8006376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b68      	cmp	r3, #104	; 0x68
 800637c:	d002      	beq.n	8006384 <micro_vprintf+0x120>
 800637e:	2b6c      	cmp	r3, #108	; 0x6c
 8006380:	d00a      	beq.n	8006398 <micro_vprintf+0x134>
 8006382:	e020      	b.n	80063c6 <micro_vprintf+0x162>
			{
			case 'h':
				modifier = *fmt++;
 8006384:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006386:	1c4b      	adds	r3, r1, #1
 8006388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638a:	234f      	movs	r3, #79	; 0x4f
 800638c:	2258      	movs	r2, #88	; 0x58
 800638e:	18ba      	adds	r2, r7, r2
 8006390:	18d2      	adds	r2, r2, r3
 8006392:	780b      	ldrb	r3, [r1, #0]
 8006394:	7013      	strb	r3, [r2, #0]
				break;
 8006396:	e016      	b.n	80063c6 <micro_vprintf+0x162>
			case 'l':
				modifier = *fmt++;
 8006398:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800639a:	1c4b      	adds	r3, r1, #1
 800639c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639e:	234f      	movs	r3, #79	; 0x4f
 80063a0:	2258      	movs	r2, #88	; 0x58
 80063a2:	18ba      	adds	r2, r7, r2
 80063a4:	18d2      	adds	r2, r2, r3
 80063a6:	780b      	ldrb	r3, [r1, #0]
 80063a8:	7013      	strb	r3, [r2, #0]
				if (*fmt == 'l')
 80063aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b6c      	cmp	r3, #108	; 0x6c
 80063b0:	d108      	bne.n	80063c4 <micro_vprintf+0x160>
					{
					modifier = 'L';
 80063b2:	234f      	movs	r3, #79	; 0x4f
 80063b4:	2258      	movs	r2, #88	; 0x58
 80063b6:	18ba      	adds	r2, r7, r2
 80063b8:	18d2      	adds	r2, r2, r3
 80063ba:	234c      	movs	r3, #76	; 0x4c
 80063bc:	7013      	strb	r3, [r2, #0]
					fmt++;
 80063be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c0:	3301      	adds	r3, #1
 80063c2:	65fb      	str	r3, [r7, #92]	; 0x5c
					}
				break;
 80063c4:	46c0      	nop			; (mov r8, r8)

			}

		// Now handle it;
		switch (*fmt)
 80063c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b64      	cmp	r3, #100	; 0x64
 80063cc:	d100      	bne.n	80063d0 <micro_vprintf+0x16c>
 80063ce:	e0c5      	b.n	800655c <micro_vprintf+0x2f8>
 80063d0:	dc0b      	bgt.n	80063ea <micro_vprintf+0x186>
 80063d2:	2b25      	cmp	r3, #37	; 0x25
 80063d4:	d01a      	beq.n	800640c <micro_vprintf+0x1a8>
 80063d6:	dc02      	bgt.n	80063de <micro_vprintf+0x17a>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <micro_vprintf+0x1a0>
 80063dc:	e251      	b.n	8006882 <micro_vprintf+0x61e>
 80063de:	2b58      	cmp	r3, #88	; 0x58
 80063e0:	d100      	bne.n	80063e4 <micro_vprintf+0x180>
 80063e2:	e18e      	b.n	8006702 <micro_vprintf+0x49e>
 80063e4:	2b63      	cmp	r3, #99	; 0x63
 80063e6:	d01e      	beq.n	8006426 <micro_vprintf+0x1c2>
 80063e8:	e24b      	b.n	8006882 <micro_vprintf+0x61e>
 80063ea:	2b73      	cmp	r3, #115	; 0x73
 80063ec:	d032      	beq.n	8006454 <micro_vprintf+0x1f0>
 80063ee:	dc03      	bgt.n	80063f8 <micro_vprintf+0x194>
 80063f0:	2b70      	cmp	r3, #112	; 0x70
 80063f2:	d100      	bne.n	80063f6 <micro_vprintf+0x192>
 80063f4:	e179      	b.n	80066ea <micro_vprintf+0x486>
 80063f6:	e244      	b.n	8006882 <micro_vprintf+0x61e>
 80063f8:	2b75      	cmp	r3, #117	; 0x75
 80063fa:	d043      	beq.n	8006484 <micro_vprintf+0x220>
 80063fc:	2b78      	cmp	r3, #120	; 0x78
 80063fe:	d100      	bne.n	8006402 <micro_vprintf+0x19e>
 8006400:	e17f      	b.n	8006702 <micro_vprintf+0x49e>
 8006402:	e23e      	b.n	8006882 <micro_vprintf+0x61e>
			{
			case '\0':	// end of format string (ill-formed), just quit
				return n;
 8006404:	23bc      	movs	r3, #188	; 0xbc
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	e330      	b.n	8006a6e <micro_vprintf+0x80a>

			case '%':   // '%' literal
				*--p = '%';
 800640c:	23a0      	movs	r3, #160	; 0xa0
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	22a0      	movs	r2, #160	; 0xa0
 8006416:	18ba      	adds	r2, r7, r2
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	23a0      	movs	r3, #160	; 0xa0
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2325      	movs	r3, #37	; 0x25
 8006422:	7013      	strb	r3, [r2, #0]
				break;
 8006424:	e255      	b.n	80068d2 <micro_vprintf+0x66e>

			case 'c':   // character
				zeropad = false;
 8006426:	234e      	movs	r3, #78	; 0x4e
 8006428:	2258      	movs	r2, #88	; 0x58
 800642a:	18ba      	adds	r2, r7, r2
 800642c:	18d2      	adds	r2, r2, r3
 800642e:	2300      	movs	r3, #0
 8006430:	7013      	strb	r3, [r2, #0]
				*--p = (char) va_arg(valist,int);	// promoted to int
 8006432:	23a0      	movs	r3, #160	; 0xa0
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3b01      	subs	r3, #1
 800643a:	22a0      	movs	r2, #160	; 0xa0
 800643c:	18ba      	adds	r2, r7, r2
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006442:	1d13      	adds	r3, r2, #4
 8006444:	65bb      	str	r3, [r7, #88]	; 0x58
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	22a0      	movs	r2, #160	; 0xa0
 800644c:	18ba      	adds	r2, r7, r2
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	7013      	strb	r3, [r2, #0]
				break;
 8006452:	e23e      	b.n	80068d2 <micro_vprintf+0x66e>

			case 's':   // string
				zeropad = false;
 8006454:	234e      	movs	r3, #78	; 0x4e
 8006456:	2258      	movs	r2, #88	; 0x58
 8006458:	18ba      	adds	r2, r7, r2
 800645a:	18d2      	adds	r2, r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	7013      	strb	r3, [r2, #0]
				p = va_arg(valist,char *);	// use string as source buffer
 8006460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006462:	1d13      	adds	r3, r2, #4
 8006464:	65bb      	str	r3, [r7, #88]	; 0x58
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	22a0      	movs	r2, #160	; 0xa0
 800646a:	18ba      	adds	r2, r7, r2
 800646c:	6013      	str	r3, [r2, #0]
				if (!p)
 800646e:	23a0      	movs	r3, #160	; 0xa0
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d000      	beq.n	800647a <micro_vprintf+0x216>
 8006478:	e226      	b.n	80068c8 <micro_vprintf+0x664>
					p = "(null)";
 800647a:	4bd2      	ldr	r3, [pc, #840]	; (80067c4 <micro_vprintf+0x560>)
 800647c:	22a0      	movs	r2, #160	; 0xa0
 800647e:	18ba      	adds	r2, r7, r2
 8006480:	6013      	str	r3, [r2, #0]
				break;
 8006482:	e221      	b.n	80068c8 <micro_vprintf+0x664>

			case 'u':   // unsigned
				if (modifier == 'l')
 8006484:	234f      	movs	r3, #79	; 0x4f
 8006486:	2258      	movs	r2, #88	; 0x58
 8006488:	4694      	mov	ip, r2
 800648a:	44bc      	add	ip, r7
 800648c:	4463      	add	r3, ip
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b6c      	cmp	r3, #108	; 0x6c
 8006492:	d10b      	bne.n	80064ac <micro_vprintf+0x248>
					val = va_arg(valist,unsigned long);
 8006494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006496:	1d13      	adds	r3, r2, #4
 8006498:	65bb      	str	r3, [r7, #88]	; 0x58
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	22a8      	movs	r2, #168	; 0xa8
 800649e:	18ba      	adds	r2, r7, r2
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	2300      	movs	r3, #0
 80064a4:	22ac      	movs	r2, #172	; 0xac
 80064a6:	18ba      	adds	r2, r7, r2
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e0da      	b.n	8006662 <micro_vprintf+0x3fe>
                else if (modifier == 'h')
 80064ac:	234f      	movs	r3, #79	; 0x4f
 80064ae:	2258      	movs	r2, #88	; 0x58
 80064b0:	4694      	mov	ip, r2
 80064b2:	44bc      	add	ip, r7
 80064b4:	4463      	add	r3, ip
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b68      	cmp	r3, #104	; 0x68
 80064ba:	d10c      	bne.n	80064d6 <micro_vprintf+0x272>
                    val = (unsigned short) va_arg(valist,unsigned);   // passed in as an unsigned!
 80064bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064be:	1d13      	adds	r3, r2, #4
 80064c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064c2:	6813      	ldr	r3, [r2, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	22a8      	movs	r2, #168	; 0xa8
 80064c8:	18ba      	adds	r2, r7, r2
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	2300      	movs	r3, #0
 80064ce:	22ac      	movs	r2, #172	; 0xac
 80064d0:	18ba      	adds	r2, r7, r2
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e0c5      	b.n	8006662 <micro_vprintf+0x3fe>
                else if (modifier == 'L')
 80064d6:	234f      	movs	r3, #79	; 0x4f
 80064d8:	2258      	movs	r2, #88	; 0x58
 80064da:	4694      	mov	ip, r2
 80064dc:	44bc      	add	ip, r7
 80064de:	4463      	add	r3, ip
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b4c      	cmp	r3, #76	; 0x4c
 80064e4:	d12e      	bne.n	8006544 <micro_vprintf+0x2e0>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 80064e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e8:	1d13      	adds	r3, r2, #4
 80064ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	229c      	movs	r2, #156	; 0x9c
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 80064f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064f6:	1d13      	adds	r3, r2, #4
 80064f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	2298      	movs	r2, #152	; 0x98
 80064fe:	18ba      	adds	r2, r7, r2
 8006500:	6013      	str	r3, [r2, #0]
                    val = ((uint64_t) msw << 32) | lsw;					
 8006502:	2398      	movs	r3, #152	; 0x98
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
 800650a:	2300      	movs	r3, #0
 800650c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006510:	001b      	movs	r3, r3
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	2300      	movs	r3, #0
 8006516:	643b      	str	r3, [r7, #64]	; 0x40
 8006518:	239c      	movs	r3, #156	; 0x9c
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006524:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8006526:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8006528:	0023      	movs	r3, r4
 800652a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800652c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800652e:	0008      	movs	r0, r1
 8006530:	4303      	orrs	r3, r0
 8006532:	20a8      	movs	r0, #168	; 0xa8
 8006534:	1838      	adds	r0, r7, r0
 8006536:	6003      	str	r3, [r0, #0]
 8006538:	002b      	movs	r3, r5
 800653a:	4313      	orrs	r3, r2
 800653c:	22ac      	movs	r2, #172	; 0xac
 800653e:	18ba      	adds	r2, r7, r2
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e08e      	b.n	8006662 <micro_vprintf+0x3fe>
					}
				else
					val = va_arg(valist,unsigned);
 8006544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006546:	1d13      	adds	r3, r2, #4
 8006548:	65bb      	str	r3, [r7, #88]	; 0x58
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	22a8      	movs	r2, #168	; 0xa8
 800654e:	18ba      	adds	r2, r7, r2
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	22ac      	movs	r2, #172	; 0xac
 8006556:	18ba      	adds	r2, r7, r2
 8006558:	6013      	str	r3, [r2, #0]
				goto dumpdecimal;
 800655a:	e082      	b.n	8006662 <micro_vprintf+0x3fe>

			case 'd':   // decimal
				if (modifier == 'l')
 800655c:	234f      	movs	r3, #79	; 0x4f
 800655e:	2258      	movs	r2, #88	; 0x58
 8006560:	4694      	mov	ip, r2
 8006562:	44bc      	add	ip, r7
 8006564:	4463      	add	r3, ip
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b6c      	cmp	r3, #108	; 0x6c
 800656a:	d10b      	bne.n	8006584 <micro_vprintf+0x320>
					val = va_arg(valist,long);
 800656c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800656e:	1d13      	adds	r3, r2, #4
 8006570:	65bb      	str	r3, [r7, #88]	; 0x58
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	22a8      	movs	r2, #168	; 0xa8
 8006576:	18ba      	adds	r2, r7, r2
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	17db      	asrs	r3, r3, #31
 800657c:	22ac      	movs	r2, #172	; 0xac
 800657e:	18ba      	adds	r2, r7, r2
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e058      	b.n	8006636 <micro_vprintf+0x3d2>
				else if (modifier == 'h')
 8006584:	234f      	movs	r3, #79	; 0x4f
 8006586:	2258      	movs	r2, #88	; 0x58
 8006588:	4694      	mov	ip, r2
 800658a:	44bc      	add	ip, r7
 800658c:	4463      	add	r3, ip
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b68      	cmp	r3, #104	; 0x68
 8006592:	d10c      	bne.n	80065ae <micro_vprintf+0x34a>
				    val = (short) va_arg(valist,int);   // passed in as an int!
 8006594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006596:	1d13      	adds	r3, r2, #4
 8006598:	65bb      	str	r3, [r7, #88]	; 0x58
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	b21b      	sxth	r3, r3
 800659e:	22a8      	movs	r2, #168	; 0xa8
 80065a0:	18ba      	adds	r2, r7, r2
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	17db      	asrs	r3, r3, #31
 80065a6:	22ac      	movs	r2, #172	; 0xac
 80065a8:	18ba      	adds	r2, r7, r2
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e043      	b.n	8006636 <micro_vprintf+0x3d2>
                else if (modifier == 'L')
 80065ae:	234f      	movs	r3, #79	; 0x4f
 80065b0:	2258      	movs	r2, #88	; 0x58
 80065b2:	4694      	mov	ip, r2
 80065b4:	44bc      	add	ip, r7
 80065b6:	4463      	add	r3, ip
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b4c      	cmp	r3, #76	; 0x4c
 80065bc:	d130      	bne.n	8006620 <micro_vprintf+0x3bc>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 80065be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065c0:	1d13      	adds	r3, r2, #4
 80065c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	2294      	movs	r2, #148	; 0x94
 80065c8:	18ba      	adds	r2, r7, r2
 80065ca:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 80065cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065ce:	1d13      	adds	r3, r2, #4
 80065d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	2290      	movs	r2, #144	; 0x90
 80065d6:	18ba      	adds	r2, r7, r2
 80065d8:	6013      	str	r3, [r2, #0]
                    val = ((int64_t) msw << 32) | lsw;
 80065da:	2390      	movs	r3, #144	; 0x90
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30
 80065e2:	2300      	movs	r3, #0
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	001b      	movs	r3, r3
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ec:	2300      	movs	r3, #0
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f0:	2394      	movs	r3, #148	; 0x94
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006600:	0008      	movs	r0, r1
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006606:	001d      	movs	r5, r3
 8006608:	4328      	orrs	r0, r5
 800660a:	61b8      	str	r0, [r7, #24]
 800660c:	0023      	movs	r3, r4
 800660e:	431a      	orrs	r2, r3
 8006610:	61fa      	str	r2, [r7, #28]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	69fc      	ldr	r4, [r7, #28]
 8006616:	22a8      	movs	r2, #168	; 0xa8
 8006618:	18ba      	adds	r2, r7, r2
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	6054      	str	r4, [r2, #4]
 800661e:	e00a      	b.n	8006636 <micro_vprintf+0x3d2>
					}
				else
					val = (long) va_arg(valist,int);
 8006620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006622:	1d13      	adds	r3, r2, #4
 8006624:	65bb      	str	r3, [r7, #88]	; 0x58
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	22a8      	movs	r2, #168	; 0xa8
 800662a:	18ba      	adds	r2, r7, r2
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	17db      	asrs	r3, r3, #31
 8006630:	22ac      	movs	r2, #172	; 0xac
 8006632:	18ba      	adds	r2, r7, r2
 8006634:	6013      	str	r3, [r2, #0]
				if ((long)val < 0)
 8006636:	23a8      	movs	r3, #168	; 0xa8
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	da10      	bge.n	8006662 <micro_vprintf+0x3fe>
					{
					isneg = true;
 8006640:	235f      	movs	r3, #95	; 0x5f
 8006642:	2258      	movs	r2, #88	; 0x58
 8006644:	18ba      	adds	r2, r7, r2
 8006646:	18d2      	adds	r2, r2, r3
 8006648:	2301      	movs	r3, #1
 800664a:	7013      	strb	r3, [r2, #0]
					val = - (long) val;
 800664c:	23a8      	movs	r3, #168	; 0xa8
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	425b      	negs	r3, r3
 8006654:	22a8      	movs	r2, #168	; 0xa8
 8006656:	18ba      	adds	r2, r7, r2
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	17db      	asrs	r3, r3, #31
 800665c:	22ac      	movs	r2, #172	; 0xac
 800665e:	18ba      	adds	r2, r7, r2
 8006660:	6013      	str	r3, [r2, #0]
					}
dumpdecimal:
                // Convert the number in 'val' to a decimal string
	            do
	            	{
	                *--p = (val % 10) + '0';
 8006662:	23a0      	movs	r3, #160	; 0xa0
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	22a0      	movs	r2, #160	; 0xa0
 800666c:	18ba      	adds	r2, r7, r2
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	23a8      	movs	r3, #168	; 0xa8
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	220a      	movs	r2, #10
 800667a:	2300      	movs	r3, #0
 800667c:	f7f9 feca 	bl	8000414 <__aeabi_uldivmod>
 8006680:	001c      	movs	r4, r3
 8006682:	0013      	movs	r3, r2
 8006684:	b2db      	uxtb	r3, r3
 8006686:	3330      	adds	r3, #48	; 0x30
 8006688:	b2db      	uxtb	r3, r3
 800668a:	22a0      	movs	r2, #160	; 0xa0
 800668c:	18ba      	adds	r2, r7, r2
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	7013      	strb	r3, [r2, #0]
	                val /= 10;
 8006692:	23a8      	movs	r3, #168	; 0xa8
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	220a      	movs	r2, #10
 800669c:	2300      	movs	r3, #0
 800669e:	f7f9 feb9 	bl	8000414 <__aeabi_uldivmod>
 80066a2:	0003      	movs	r3, r0
 80066a4:	000c      	movs	r4, r1
 80066a6:	22a8      	movs	r2, #168	; 0xa8
 80066a8:	18ba      	adds	r2, r7, r2
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	6054      	str	r4, [r2, #4]
	            	} while ( (val != 0) && (p > buffer));
 80066ae:	23a8      	movs	r3, #168	; 0xa8
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	23ac      	movs	r3, #172	; 0xac
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	d100      	bne.n	80066c0 <micro_vprintf+0x45c>
 80066be:	e105      	b.n	80068cc <micro_vprintf+0x668>
 80066c0:	235f      	movs	r3, #95	; 0x5f
 80066c2:	2258      	movs	r2, #88	; 0x58
 80066c4:	18ba      	adds	r2, r7, r2
 80066c6:	18d2      	adds	r2, r2, r3
 80066c8:	235f      	movs	r3, #95	; 0x5f
 80066ca:	2158      	movs	r1, #88	; 0x58
 80066cc:	468c      	mov	ip, r1
 80066ce:	44bc      	add	ip, r7
 80066d0:	4463      	add	r3, ip
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	7013      	strb	r3, [r2, #0]
 80066d6:	2314      	movs	r3, #20
 80066d8:	2258      	movs	r2, #88	; 0x58
 80066da:	18ba      	adds	r2, r7, r2
 80066dc:	18d2      	adds	r2, r2, r3
 80066de:	23a0      	movs	r3, #160	; 0xa0
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d8bc      	bhi.n	8006662 <micro_vprintf+0x3fe>
				break;
 80066e8:	e0f0      	b.n	80068cc <micro_vprintf+0x668>

			case 'p':   // pointer (hex)
				val = (unsigned long) va_arg(valist,void *);
 80066ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ec:	1d13      	adds	r3, r2, #4
 80066ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80066f0:	6813      	ldr	r3, [r2, #0]
 80066f2:	22a8      	movs	r2, #168	; 0xa8
 80066f4:	18ba      	adds	r2, r7, r2
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	2300      	movs	r3, #0
 80066fa:	22ac      	movs	r2, #172	; 0xac
 80066fc:	18ba      	adds	r2, r7, r2
 80066fe:	6013      	str	r3, [r2, #0]
				goto dumphex;
 8006700:	e06d      	b.n	80067de <micro_vprintf+0x57a>

			case 'x':   // hex (lowercase)
			case 'X':   // hex (uppercase)
				if (modifier == 'l')
 8006702:	234f      	movs	r3, #79	; 0x4f
 8006704:	2258      	movs	r2, #88	; 0x58
 8006706:	4694      	mov	ip, r2
 8006708:	44bc      	add	ip, r7
 800670a:	4463      	add	r3, ip
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b6c      	cmp	r3, #108	; 0x6c
 8006710:	d10b      	bne.n	800672a <micro_vprintf+0x4c6>
					val = va_arg(valist,unsigned long);
 8006712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006714:	1d13      	adds	r3, r2, #4
 8006716:	65bb      	str	r3, [r7, #88]	; 0x58
 8006718:	6813      	ldr	r3, [r2, #0]
 800671a:	22a8      	movs	r2, #168	; 0xa8
 800671c:	18ba      	adds	r2, r7, r2
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	22ac      	movs	r2, #172	; 0xac
 8006724:	18ba      	adds	r2, r7, r2
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e059      	b.n	80067de <micro_vprintf+0x57a>
                else if (modifier == 'h')
 800672a:	234f      	movs	r3, #79	; 0x4f
 800672c:	2258      	movs	r2, #88	; 0x58
 800672e:	4694      	mov	ip, r2
 8006730:	44bc      	add	ip, r7
 8006732:	4463      	add	r3, ip
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b68      	cmp	r3, #104	; 0x68
 8006738:	d10c      	bne.n	8006754 <micro_vprintf+0x4f0>
                    val = (unsigned short) va_arg(valist,unsigned);   // passed in as an unsigned!
 800673a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800673c:	1d13      	adds	r3, r2, #4
 800673e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006740:	6813      	ldr	r3, [r2, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	22a8      	movs	r2, #168	; 0xa8
 8006746:	18ba      	adds	r2, r7, r2
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	22ac      	movs	r2, #172	; 0xac
 800674e:	18ba      	adds	r2, r7, r2
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e044      	b.n	80067de <micro_vprintf+0x57a>
                else if (modifier == 'L')
 8006754:	234f      	movs	r3, #79	; 0x4f
 8006756:	2258      	movs	r2, #88	; 0x58
 8006758:	4694      	mov	ip, r2
 800675a:	44bc      	add	ip, r7
 800675c:	4463      	add	r3, ip
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b4c      	cmp	r3, #76	; 0x4c
 8006762:	d131      	bne.n	80067c8 <micro_vprintf+0x564>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 8006764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006766:	1d13      	adds	r3, r2, #4
 8006768:	65bb      	str	r3, [r7, #88]	; 0x58
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	228c      	movs	r2, #140	; 0x8c
 800676e:	18ba      	adds	r2, r7, r2
 8006770:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 8006772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006774:	1d13      	adds	r3, r2, #4
 8006776:	65bb      	str	r3, [r7, #88]	; 0x58
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	2288      	movs	r2, #136	; 0x88
 800677c:	18ba      	adds	r2, r7, r2
 800677e:	6013      	str	r3, [r2, #0]
                    val = ((uint64_t) msw << 32) | lsw;
 8006780:	2388      	movs	r3, #136	; 0x88
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	001b      	movs	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	238c      	movs	r3, #140	; 0x8c
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	68bc      	ldr	r4, [r7, #8]
 80067a4:	68fd      	ldr	r5, [r7, #12]
 80067a6:	0023      	movs	r3, r4
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	0008      	movs	r0, r1
 80067ae:	4303      	orrs	r3, r0
 80067b0:	20a8      	movs	r0, #168	; 0xa8
 80067b2:	1838      	adds	r0, r7, r0
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	002b      	movs	r3, r5
 80067b8:	4313      	orrs	r3, r2
 80067ba:	22ac      	movs	r2, #172	; 0xac
 80067bc:	18ba      	adds	r2, r7, r2
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e00d      	b.n	80067de <micro_vprintf+0x57a>
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	08009e70 	.word	0x08009e70
					}
				else
					val = va_arg(valist,unsigned);
 80067c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067ca:	1d13      	adds	r3, r2, #4
 80067cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	22a8      	movs	r2, #168	; 0xa8
 80067d2:	18ba      	adds	r2, r7, r2
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	22ac      	movs	r2, #172	; 0xac
 80067da:	18ba      	adds	r2, r7, r2
 80067dc:	6013      	str	r3, [r2, #0]
dumphex:
                // Convert the number in 'val' to a hex string
				do
					{
					*--p = hexchar[val % 16];
 80067de:	23a0      	movs	r3, #160	; 0xa0
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	22a0      	movs	r2, #160	; 0xa0
 80067e8:	18ba      	adds	r2, r7, r2
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4ba2      	ldr	r3, [pc, #648]	; (8006a78 <micro_vprintf+0x814>)
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	23a8      	movs	r3, #168	; 0xa8
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	230f      	movs	r3, #15
 80067f8:	4013      	ands	r3, r2
 80067fa:	18cb      	adds	r3, r1, r3
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	22a0      	movs	r2, #160	; 0xa0
 8006800:	18ba      	adds	r2, r7, r2
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	7013      	strb	r3, [r2, #0]
					if (*fmt == 'x' && *p >= 'A' && *p <= 'F')
 8006806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b78      	cmp	r3, #120	; 0x78
 800680c:	d115      	bne.n	800683a <micro_vprintf+0x5d6>
 800680e:	23a0      	movs	r3, #160	; 0xa0
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d90f      	bls.n	800683a <micro_vprintf+0x5d6>
 800681a:	23a0      	movs	r3, #160	; 0xa0
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b46      	cmp	r3, #70	; 0x46
 8006824:	d809      	bhi.n	800683a <micro_vprintf+0x5d6>
						*p += 'a' - 'A';	// convert to lowercase
 8006826:	23a0      	movs	r3, #160	; 0xa0
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	3320      	adds	r3, #32
 8006830:	b2db      	uxtb	r3, r3
 8006832:	22a0      	movs	r2, #160	; 0xa0
 8006834:	18ba      	adds	r2, r7, r2
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	7013      	strb	r3, [r2, #0]
					val /= 16;
 800683a:	23a8      	movs	r3, #168	; 0xa8
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	685c      	ldr	r4, [r3, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	0722      	lsls	r2, r4, #28
 8006844:	0919      	lsrs	r1, r3, #4
 8006846:	6539      	str	r1, [r7, #80]	; 0x50
 8006848:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800684a:	4311      	orrs	r1, r2
 800684c:	6539      	str	r1, [r7, #80]	; 0x50
 800684e:	0923      	lsrs	r3, r4, #4
 8006850:	657b      	str	r3, [r7, #84]	; 0x54
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8006856:	22a8      	movs	r2, #168	; 0xa8
 8006858:	18ba      	adds	r2, r7, r2
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	6054      	str	r4, [r2, #4]
					} while ( (val != 0) && (p > buffer));
 800685e:	23a8      	movs	r3, #168	; 0xa8
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	23ac      	movs	r3, #172	; 0xac
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	431a      	orrs	r2, r3
 800686c:	d030      	beq.n	80068d0 <micro_vprintf+0x66c>
 800686e:	2314      	movs	r3, #20
 8006870:	2258      	movs	r2, #88	; 0x58
 8006872:	18ba      	adds	r2, r7, r2
 8006874:	18d2      	adds	r2, r2, r3
 8006876:	23a0      	movs	r3, #160	; 0xa0
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4293      	cmp	r3, r2
 800687e:	d8ae      	bhi.n	80067de <micro_vprintf+0x57a>
				break;
 8006880:	e026      	b.n	80068d0 <micro_vprintf+0x66c>

			default:
				// unsupported specifier, just print it as a literal to aid debugging
				while (start_fmt <= fmt)
 8006882:	e01a      	b.n	80068ba <micro_vprintf+0x656>
					{
					outc(*start_fmt++,context);
 8006884:	23b8      	movs	r3, #184	; 0xb8
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	1c53      	adds	r3, r2, #1
 800688c:	21b8      	movs	r1, #184	; 0xb8
 800688e:	1879      	adds	r1, r7, r1
 8006890:	600b      	str	r3, [r1, #0]
 8006892:	7813      	ldrb	r3, [r2, #0]
 8006894:	0018      	movs	r0, r3
 8006896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689a:	0011      	movs	r1, r2
 800689c:	4798      	blx	r3
					n++;
 800689e:	23bc      	movs	r3, #188	; 0xbc
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	22bc      	movs	r2, #188	; 0xbc
 80068a8:	18ba      	adds	r2, r7, r2
 80068aa:	6013      	str	r3, [r2, #0]
					width--;
 80068ac:	23b0      	movs	r3, #176	; 0xb0
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	22b0      	movs	r2, #176	; 0xb0
 80068b6:	18ba      	adds	r2, r7, r2
 80068b8:	6013      	str	r3, [r2, #0]
				while (start_fmt <= fmt)
 80068ba:	23b8      	movs	r3, #184	; 0xb8
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d9de      	bls.n	8006884 <micro_vprintf+0x620>
 80068c6:	e004      	b.n	80068d2 <micro_vprintf+0x66e>
				break;
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	e002      	b.n	80068d2 <micro_vprintf+0x66e>
				break;
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	e000      	b.n	80068d2 <micro_vprintf+0x66e>
				break;
 80068d0:	46c0      	nop			; (mov r8, r8)
					}
			}

		len = strlen(p);
 80068d2:	23a0      	movs	r3, #160	; 0xa0
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7f9 fc1d 	bl	8000118 <strlen>
 80068de:	0003      	movs	r3, r0
 80068e0:	2284      	movs	r2, #132	; 0x84
 80068e2:	18ba      	adds	r2, r7, r2
 80068e4:	6013      	str	r3, [r2, #0]

		// Leading pad
		if (!width_isneg)
 80068e6:	235e      	movs	r3, #94	; 0x5e
 80068e8:	2258      	movs	r2, #88	; 0x58
 80068ea:	4694      	mov	ip, r2
 80068ec:	44bc      	add	ip, r7
 80068ee:	4463      	add	r3, ip
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	2301      	movs	r3, #1
 80068f4:	4053      	eors	r3, r2
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d056      	beq.n	80069aa <micro_vprintf+0x746>
			{
			if (zeropad && isneg)
 80068fc:	234e      	movs	r3, #78	; 0x4e
 80068fe:	2258      	movs	r2, #88	; 0x58
 8006900:	4694      	mov	ip, r2
 8006902:	44bc      	add	ip, r7
 8006904:	4463      	add	r3, ip
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d03e      	beq.n	800698a <micro_vprintf+0x726>
 800690c:	235f      	movs	r3, #95	; 0x5f
 800690e:	2258      	movs	r2, #88	; 0x58
 8006910:	4694      	mov	ip, r2
 8006912:	44bc      	add	ip, r7
 8006914:	4463      	add	r3, ip
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d036      	beq.n	800698a <micro_vprintf+0x726>
				{
				outc('-', context);
 800691c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800691e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006920:	0011      	movs	r1, r2
 8006922:	202d      	movs	r0, #45	; 0x2d
 8006924:	4798      	blx	r3
				n++;
 8006926:	23bc      	movs	r3, #188	; 0xbc
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	22bc      	movs	r2, #188	; 0xbc
 8006930:	18ba      	adds	r2, r7, r2
 8006932:	6013      	str	r3, [r2, #0]
				width--;
 8006934:	23b0      	movs	r3, #176	; 0xb0
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	22b0      	movs	r2, #176	; 0xb0
 800693e:	18ba      	adds	r2, r7, r2
 8006940:	6013      	str	r3, [r2, #0]
				isneg = false;	// we already handled it
 8006942:	235f      	movs	r3, #95	; 0x5f
 8006944:	2258      	movs	r2, #88	; 0x58
 8006946:	18ba      	adds	r2, r7, r2
 8006948:	18d2      	adds	r2, r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	7013      	strb	r3, [r2, #0]
				}

			while (len + (isneg ? 1 : 0) < width)
 800694e:	e01c      	b.n	800698a <micro_vprintf+0x726>
				{
				outc(zeropad ? '0' : ' ', context);
 8006950:	234e      	movs	r3, #78	; 0x4e
 8006952:	2258      	movs	r2, #88	; 0x58
 8006954:	4694      	mov	ip, r2
 8006956:	44bc      	add	ip, r7
 8006958:	4463      	add	r3, ip
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <micro_vprintf+0x700>
 8006960:	2030      	movs	r0, #48	; 0x30
 8006962:	e000      	b.n	8006966 <micro_vprintf+0x702>
 8006964:	2020      	movs	r0, #32
 8006966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696a:	0011      	movs	r1, r2
 800696c:	4798      	blx	r3
				n++;
 800696e:	23bc      	movs	r3, #188	; 0xbc
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	22bc      	movs	r2, #188	; 0xbc
 8006978:	18ba      	adds	r2, r7, r2
 800697a:	6013      	str	r3, [r2, #0]
				width--;
 800697c:	23b0      	movs	r3, #176	; 0xb0
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3b01      	subs	r3, #1
 8006984:	22b0      	movs	r2, #176	; 0xb0
 8006986:	18ba      	adds	r2, r7, r2
 8006988:	6013      	str	r3, [r2, #0]
			while (len + (isneg ? 1 : 0) < width)
 800698a:	235f      	movs	r3, #95	; 0x5f
 800698c:	2258      	movs	r2, #88	; 0x58
 800698e:	4694      	mov	ip, r2
 8006990:	44bc      	add	ip, r7
 8006992:	4463      	add	r3, ip
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	001a      	movs	r2, r3
 8006998:	2384      	movs	r3, #132	; 0x84
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	18d2      	adds	r2, r2, r3
 80069a0:	23b0      	movs	r3, #176	; 0xb0
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	dbd2      	blt.n	8006950 <micro_vprintf+0x6ec>
				}
			}

		if (isneg)
 80069aa:	235f      	movs	r3, #95	; 0x5f
 80069ac:	2258      	movs	r2, #88	; 0x58
 80069ae:	4694      	mov	ip, r2
 80069b0:	44bc      	add	ip, r7
 80069b2:	4463      	add	r3, ip
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02e      	beq.n	8006a18 <micro_vprintf+0x7b4>
			{
			outc('-', context);
 80069ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	0011      	movs	r1, r2
 80069c0:	202d      	movs	r0, #45	; 0x2d
 80069c2:	4798      	blx	r3
			n++;
 80069c4:	23bc      	movs	r3, #188	; 0xbc
 80069c6:	18fb      	adds	r3, r7, r3
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	22bc      	movs	r2, #188	; 0xbc
 80069ce:	18ba      	adds	r2, r7, r2
 80069d0:	6013      	str	r3, [r2, #0]
			width--;
 80069d2:	23b0      	movs	r3, #176	; 0xb0
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3b01      	subs	r3, #1
 80069da:	22b0      	movs	r2, #176	; 0xb0
 80069dc:	18ba      	adds	r2, r7, r2
 80069de:	6013      	str	r3, [r2, #0]
			}

		// print the buffer
		while (*p)
 80069e0:	e01a      	b.n	8006a18 <micro_vprintf+0x7b4>
			{
			outc(*p++, context);
 80069e2:	23a0      	movs	r3, #160	; 0xa0
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	1c53      	adds	r3, r2, #1
 80069ea:	21a0      	movs	r1, #160	; 0xa0
 80069ec:	1879      	adds	r1, r7, r1
 80069ee:	600b      	str	r3, [r1, #0]
 80069f0:	7813      	ldrb	r3, [r2, #0]
 80069f2:	0018      	movs	r0, r3
 80069f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f8:	0011      	movs	r1, r2
 80069fa:	4798      	blx	r3
			n++;
 80069fc:	23bc      	movs	r3, #188	; 0xbc
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	22bc      	movs	r2, #188	; 0xbc
 8006a06:	18ba      	adds	r2, r7, r2
 8006a08:	6013      	str	r3, [r2, #0]
			width--;
 8006a0a:	23b0      	movs	r3, #176	; 0xb0
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	22b0      	movs	r2, #176	; 0xb0
 8006a14:	18ba      	adds	r2, r7, r2
 8006a16:	6013      	str	r3, [r2, #0]
		while (*p)
 8006a18:	23a0      	movs	r3, #160	; 0xa0
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1de      	bne.n	80069e2 <micro_vprintf+0x77e>
			}

		// trailing pad
		while (width > 0)
 8006a24:	e012      	b.n	8006a4c <micro_vprintf+0x7e8>
			{
			outc(' ',context);
 8006a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	2020      	movs	r0, #32
 8006a2e:	4798      	blx	r3
			n++;
 8006a30:	23bc      	movs	r3, #188	; 0xbc
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	22bc      	movs	r2, #188	; 0xbc
 8006a3a:	18ba      	adds	r2, r7, r2
 8006a3c:	6013      	str	r3, [r2, #0]
			width--;
 8006a3e:	23b0      	movs	r3, #176	; 0xb0
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	22b0      	movs	r2, #176	; 0xb0
 8006a48:	18ba      	adds	r2, r7, r2
 8006a4a:	6013      	str	r3, [r2, #0]
		while (width > 0)
 8006a4c:	23b0      	movs	r3, #176	; 0xb0
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dce7      	bgt.n	8006a26 <micro_vprintf+0x7c2>
			}

		fmt++;	// skip over the current char in the format string
 8006a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a58:	3301      	adds	r3, #1
 8006a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (*fmt)
 8006a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <micro_vprintf+0x804>
 8006a64:	f7ff fc0b 	bl	800627e <micro_vprintf+0x1a>
    	}
	
	return n;
 8006a68:	23bc      	movs	r3, #188	; 0xbc
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	681b      	ldr	r3, [r3, #0]
}	
 8006a6e:	0018      	movs	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b031      	add	sp, #196	; 0xc4
 8006a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	0800a26c 	.word	0x0800a26c

08006a7c <Handle_VT>:
int  T_delx;

// -------------------------------------------------------------------------------

void Handle_VT()					//	Check on Voltage and Temperature averages once per second
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
	int32  dV;
	int32  dVx;						//	One-second voltage delta
	int32  dT_Slope;
	int32  dT;						//  One-second temp change

	Reason = 0;						//	A reason for logging
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
	Check_VT = false;
 8006a86:	4b52      	ldr	r3, [pc, #328]	; (8006bd0 <Handle_VT+0x154>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]

	v = Get_Volts();				//	Get average voltage and restart the averaging for next second
 8006a8c:	f7fd fe0e 	bl	80046ac <Get_Volts>
 8006a90:	0003      	movs	r3, r0
 8006a92:	61bb      	str	r3, [r7, #24]
	t = Get_Temperature();			//	Get average temperature and restart the averaging for next second
 8006a94:	f7fd fbca 	bl	800422c <Get_Temperature>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	617b      	str	r3, [r7, #20]

	dVx = v - Last_Volts;			//	Change in btty voltage over the last second
 8006a9c:	4b4d      	ldr	r3, [pc, #308]	; (8006bd4 <Handle_VT+0x158>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	613b      	str	r3, [r7, #16]
	dV = v - Last_Logged_Volts;		//	Change in btty voltage since last logged record
 8006aa6:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <Handle_VT+0x15c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	60fb      	str	r3, [r7, #12]
	Last_Volts = Current_Volts = v;
 8006ab0:	4b4a      	ldr	r3, [pc, #296]	; (8006bdc <Handle_VT+0x160>)
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	4b49      	ldr	r3, [pc, #292]	; (8006bdc <Handle_VT+0x160>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <Handle_VT+0x158>)
 8006abc:	601a      	str	r2, [r3, #0]

	dT_Slope = t - Last_Temp;
 8006abe:	4b48      	ldr	r3, [pc, #288]	; (8006be0 <Handle_VT+0x164>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	60bb      	str	r3, [r7, #8]
	dT = t - Last_Logged_Temp;
 8006ac8:	4b46      	ldr	r3, [pc, #280]	; (8006be4 <Handle_VT+0x168>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	607b      	str	r3, [r7, #4]
	Last_Temp = Current_Temp  = t;
 8006ad2:	4b45      	ldr	r3, [pc, #276]	; (8006be8 <Handle_VT+0x16c>)
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	4b43      	ldr	r3, [pc, #268]	; (8006be8 <Handle_VT+0x16c>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b40      	ldr	r3, [pc, #256]	; (8006be0 <Handle_VT+0x164>)
 8006ade:	601a      	str	r2, [r3, #0]

	while (1)							//	Allow BREAKs to act as "goto Exit"
	{
		if (gPOR > 0)					//	Wait for Power On Cycle
 8006ae0:	4b42      	ldr	r3, [pc, #264]	; (8006bec <Handle_VT+0x170>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dd14      	ble.n	8006b12 <Handle_VT+0x96>
		{
			if (--gPOR > 0)
 8006ae8:	4b40      	ldr	r3, [pc, #256]	; (8006bec <Handle_VT+0x170>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	1e5a      	subs	r2, r3, #1
 8006aee:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <Handle_VT+0x170>)
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <Handle_VT+0x170>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd02      	ble.n	8006b00 <Handle_VT+0x84>
			{
				Tampered = false;		//	POR still active:  Keep tamper flag off
 8006afa:	4b3d      	ldr	r3, [pc, #244]	; (8006bf0 <Handle_VT+0x174>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
			}

			if (gPOR == 0)					//  POR done?
 8006b00:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <Handle_VT+0x170>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d155      	bne.n	8006bb4 <Handle_VT+0x138>
			{
				Reason = FLAG_STARTUP;		//	POR just ended:  Generate first log since power-on
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	61fb      	str	r3, [r7, #28]
				process_Init();				//	First time in
 8006b0c:	f000 f89a 	bl	8006c44 <process_Init>
			}
			break;
 8006b10:	e050      	b.n	8006bb4 <Handle_VT+0x138>
		}

		if (dV > V_del  ||  dV < -V_del)
 8006b12:	4b38      	ldr	r3, [pc, #224]	; (8006bf4 <Handle_VT+0x178>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	dc05      	bgt.n	8006b28 <Handle_VT+0xac>
 8006b1c:	4b35      	ldr	r3, [pc, #212]	; (8006bf4 <Handle_VT+0x178>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	425a      	negs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	dd01      	ble.n	8006b2c <Handle_VT+0xb0>
		{
			Reason = FLAG_DV_SLOPE;
 8006b28:	2308      	movs	r3, #8
 8006b2a:	61fb      	str	r3, [r7, #28]
		}

		if (dVx > V_delx  ||  dVx < -V_delx)
 8006b2c:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <Handle_VT+0x17c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	dc05      	bgt.n	8006b42 <Handle_VT+0xc6>
 8006b36:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <Handle_VT+0x17c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	425a      	negs	r2, r3
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	dd03      	ble.n	8006b4a <Handle_VT+0xce>
		{
			Reason |= FLAG_DVX;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2210      	movs	r2, #16
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61fb      	str	r3, [r7, #28]
		}

		if (dT_Slope > T_del  ||  dT_Slope < -T_del)
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <Handle_VT+0x180>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	dc05      	bgt.n	8006b60 <Handle_VT+0xe4>
 8006b54:	4b29      	ldr	r3, [pc, #164]	; (8006bfc <Handle_VT+0x180>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	425a      	negs	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	dd03      	ble.n	8006b68 <Handle_VT+0xec>
		{
			Reason |= FLAG_DT_SLOPE;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2202      	movs	r2, #2
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61fb      	str	r3, [r7, #28]
		}

		if (dT > T_delx  ||  dT < -T_delx)
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <Handle_VT+0x184>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	dc05      	bgt.n	8006b7e <Handle_VT+0x102>
 8006b72:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <Handle_VT+0x184>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	425a      	negs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	dd04      	ble.n	8006b88 <Handle_VT+0x10c>
		{
			Reason |= FLAG_DT;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2204      	movs	r2, #4
 8006b82:	4313      	orrs	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]
			break;
 8006b86:	e018      	b.n	8006bba <Handle_VT+0x13e>
		}

		if (--Periodic == 0)
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <Handle_VT+0x188>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <Handle_VT+0x188>)
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <Handle_VT+0x188>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <Handle_VT+0x124>
		{								//	Generate a log once an hour if all is quiet
			Reason = FLAG_PERIODIC;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
			break;
 8006b9e:	e00c      	b.n	8006bba <Handle_VT+0x13e>
		}

		if (Tampered)
 8006ba0:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <Handle_VT+0x174>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <Handle_VT+0x13c>
		{								//	Generate a log if Tamper input changed
			Tampered = false;
 8006ba8:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <Handle_VT+0x174>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
			Reason = FLAG_TAMPERED;
 8006bae:	2320      	movs	r3, #32
 8006bb0:	61fb      	str	r3, [r7, #28]
			break;
 8006bb2:	e002      	b.n	8006bba <Handle_VT+0x13e>
			break;
 8006bb4:	46c0      	nop			; (mov r8, r8)
 8006bb6:	e000      	b.n	8006bba <Handle_VT+0x13e>
		}
		break;							//	Exit now if NOT generating a log point
 8006bb8:	46c0      	nop			; (mov r8, r8)
	}

	if (Reason > 0)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd03      	ble.n	8006bc8 <Handle_VT+0x14c>
		flash_Log (Reason);				//	Generate a log point, and show why
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fd f8a4 	bl	8003d10 <flash_Log>
}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b008      	add	sp, #32
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200050b0 	.word	0x200050b0
 8006bd4:	200050f0 	.word	0x200050f0
 8006bd8:	20005110 	.word	0x20005110
 8006bdc:	200050ec 	.word	0x200050ec
 8006be0:	20005108 	.word	0x20005108
 8006be4:	200050f4 	.word	0x200050f4
 8006be8:	200050fc 	.word	0x200050fc
 8006bec:	200050e0 	.word	0x200050e0
 8006bf0:	200050c9 	.word	0x200050c9
 8006bf4:	200050e8 	.word	0x200050e8
 8006bf8:	2000510c 	.word	0x2000510c
 8006bfc:	20005104 	.word	0x20005104
 8006c00:	200050f8 	.word	0x200050f8
 8006c04:	200050b4 	.word	0x200050b4

08006c08 <Time_Callback>:
	Config.Periodic_Event_Rate = NewConfig->Periodic_Event_Rate;
}


void Time_Callback (uint32 CurrentEpoch)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	if (gPOR > 0)
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <Time_Callback+0x34>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd02      	ble.n	8006c1e <Time_Callback+0x16>
		flash_Log (FLAG_PERIODIC);				//	Generate a log, just to show time
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f7fd f879 	bl	8003d10 <flash_Log>
	TheTime.Epoch = CurrentEpoch;
 8006c1e:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <Time_Callback+0x38>)
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
	if (gPOR > 0)
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <Time_Callback+0x34>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dd02      	ble.n	8006c32 <Time_Callback+0x2a>
		flash_Log (FLAG_RESYNC);				//	Generate a log, showing true time
 8006c2c:	2080      	movs	r0, #128	; 0x80
 8006c2e:	f7fd f86f 	bl	8003d10 <flash_Log>
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b002      	add	sp, #8
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	200050e0 	.word	0x200050e0
 8006c40:	200050d0 	.word	0x200050d0

08006c44 <process_Init>:
	return Get_time();						// has mutex
}


void process_Init()
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
	V_lwr = MODE_MIN_V * Battery_Size;		//	Set voltage trip points, based on nominal btty voltage
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <process_Init+0x5c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <process_Init+0x60>)
 8006c4e:	435a      	muls	r2, r3
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <process_Init+0x64>)
 8006c52:	601a      	str	r2, [r3, #0]
	V_upr = MODE_MAX_V * Battery_Size;
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <process_Init+0x5c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <process_Init+0x68>)
 8006c5a:	435a      	muls	r2, r3
 8006c5c:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <process_Init+0x6c>)
 8006c5e:	601a      	str	r2, [r3, #0]
	V_del = MODE_dV * Battery_Size;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <process_Init+0x5c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	22c8      	movs	r2, #200	; 0xc8
 8006c66:	435a      	muls	r2, r3
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <process_Init+0x70>)
 8006c6a:	601a      	str	r2, [r3, #0]
	V_delx = MODE_dVx * Battery_Size;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <process_Init+0x5c>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	0013      	movs	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	001a      	movs	r2, r3
 8006c7a:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <process_Init+0x74>)
 8006c7c:	601a      	str	r2, [r3, #0]
	T_del = MODE_dT;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <process_Init+0x78>)
 8006c80:	2205      	movs	r2, #5
 8006c82:	601a      	str	r2, [r3, #0]
	T_delx = MODE_dTx;
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <process_Init+0x7c>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
	Last_Volts = Current_Volts;
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <process_Init+0x80>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <process_Init+0x84>)
 8006c90:	601a      	str	r2, [r3, #0]
	Last_Temp = Current_Temp;
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <process_Init+0x88>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <process_Init+0x8c>)
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200050d8 	.word	0x200050d8
 8006ca4:	00002c88 	.word	0x00002c88
 8006ca8:	20005100 	.word	0x20005100
 8006cac:	00003458 	.word	0x00003458
 8006cb0:	20005114 	.word	0x20005114
 8006cb4:	200050e8 	.word	0x200050e8
 8006cb8:	2000510c 	.word	0x2000510c
 8006cbc:	20005104 	.word	0x20005104
 8006cc0:	200050f8 	.word	0x200050f8
 8006cc4:	200050ec 	.word	0x200050ec
 8006cc8:	200050f0 	.word	0x200050f0
 8006ccc:	200050fc 	.word	0x200050fc
 8006cd0:	20005108 	.word	0x20005108

08006cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006cd4:	4813      	ldr	r0, [pc, #76]	; (8006d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006cd6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8006cd8:	2004      	movs	r0, #4
    LDR R1, [R0]
 8006cda:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8006cdc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8006cde:	221f      	movs	r2, #31
    CMP R1, R2
 8006ce0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8006ce2:	d105      	bne.n	8006cf0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8006ce4:	4810      	ldr	r0, [pc, #64]	; (8006d28 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8006ce6:	2101      	movs	r1, #1
    STR R1, [R0]
 8006ce8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8006cea:	4810      	ldr	r0, [pc, #64]	; (8006d2c <LoopForever+0xa>)
    LDR R1,=0x00000000
 8006cec:	2100      	movs	r1, #0
    STR R1, [R0]
 8006cee:	6001      	str	r1, [r0, #0]

08006cf0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006cf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006cf2:	e003      	b.n	8006cfc <LoopCopyDataInit>

08006cf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 8006cf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006cf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006cfa:	3104      	adds	r1, #4

08006cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006cfc:	480d      	ldr	r0, [pc, #52]	; (8006d34 <LoopForever+0x12>)
  ldr r3, =_edata
 8006cfe:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <LoopForever+0x16>)
  adds r2, r0, r1
 8006d00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006d02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006d04:	d3f6      	bcc.n	8006cf4 <CopyDataInit>
  ldr r2, =_sbss
 8006d06:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <LoopForever+0x1a>)
  b LoopFillZerobss
 8006d08:	e002      	b.n	8006d10 <LoopFillZerobss>

08006d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006d0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8006d0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d0e:	3204      	adds	r2, #4

08006d10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <LoopForever+0x1e>)
  cmp r2, r3
 8006d12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006d14:	d3f9      	bcc.n	8006d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006d16:	f000 f81f 	bl	8006d58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006d1a:	f000 fd6f 	bl	80077fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d1e:	f7ff f80f 	bl	8005d40 <main>

08006d22 <LoopForever>:

LoopForever:
    b LoopForever
 8006d22:	e7fe      	b.n	8006d22 <LoopForever>
  ldr   r0, =_estack
 8006d24:	20008000 	.word	0x20008000
    LDR R0,=0x40021018
 8006d28:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8006d2c:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 8006d30:	0800a53c 	.word	0x0800a53c
  ldr r0, =_sdata
 8006d34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006d38:	200002ac 	.word	0x200002ac
  ldr r2, =_sbss
 8006d3c:	200002b0 	.word	0x200002b0
  ldr r3, = _ebss
 8006d40:	2000536c 	.word	0x2000536c

08006d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d44:	e7fe      	b.n	8006d44 <ADC1_IRQHandler>

08006d46 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	af00      	add	r7, sp, #0
}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006d54:	e7fe      	b.n	8006d54 <HardFault_Handler+0x4>
	...

08006d58 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <SystemInit+0x74>)
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <SystemInit+0x74>)
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	2101      	movs	r1, #1
 8006d64:	430a      	orrs	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8006d68:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <SystemInit+0x74>)
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <SystemInit+0x74>)
 8006d6c:	6852      	ldr	r2, [r2, #4]
 8006d6e:	4918      	ldr	r1, [pc, #96]	; (8006dd0 <SystemInit+0x78>)
 8006d70:	400a      	ands	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <SystemInit+0x74>)
 8006d76:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <SystemInit+0x74>)
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <SystemInit+0x7c>)
 8006d7c:	400a      	ands	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006d80:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <SystemInit+0x74>)
 8006d82:	4a12      	ldr	r2, [pc, #72]	; (8006dcc <SystemInit+0x74>)
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	4914      	ldr	r1, [pc, #80]	; (8006dd8 <SystemInit+0x80>)
 8006d88:	400a      	ands	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <SystemInit+0x74>)
 8006d8e:	4a0f      	ldr	r2, [pc, #60]	; (8006dcc <SystemInit+0x74>)
 8006d90:	6852      	ldr	r2, [r2, #4]
 8006d92:	4912      	ldr	r1, [pc, #72]	; (8006ddc <SystemInit+0x84>)
 8006d94:	400a      	ands	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <SystemInit+0x74>)
 8006d9a:	4a0c      	ldr	r2, [pc, #48]	; (8006dcc <SystemInit+0x74>)
 8006d9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d9e:	210f      	movs	r1, #15
 8006da0:	438a      	bics	r2, r1
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8006da4:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <SystemInit+0x74>)
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <SystemInit+0x74>)
 8006da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006daa:	490d      	ldr	r1, [pc, #52]	; (8006de0 <SystemInit+0x88>)
 8006dac:	400a      	ands	r2, r1
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <SystemInit+0x74>)
 8006db2:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <SystemInit+0x74>)
 8006db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006db6:	2101      	movs	r1, #1
 8006db8:	438a      	bics	r2, r1
 8006dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <SystemInit+0x74>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8006dc2:	f000 f80f 	bl	8006de4 <SetSysClock>
}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	f8ffb80c 	.word	0xf8ffb80c
 8006dd4:	fef6ffff 	.word	0xfef6ffff
 8006dd8:	fffbffff 	.word	0xfffbffff
 8006ddc:	ffc0ffff 	.word	0xffc0ffff
 8006de0:	fffffeac 	.word	0xfffffeac

08006de4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8006df2:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <SetSysClock+0xd4>)
 8006df4:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <SetSysClock+0xd4>)
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	0249      	lsls	r1, r1, #9
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006e00:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <SetSysClock+0xd4>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	4013      	ands	r3, r2
 8006e0a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <SetSysClock+0x3e>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	23a0      	movs	r3, #160	; 0xa0
 8006e1c:	01db      	lsls	r3, r3, #7
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d1ee      	bne.n	8006e00 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006e22:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <SetSysClock+0xd4>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d002      	beq.n	8006e34 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	e001      	b.n	8006e38 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d138      	bne.n	8006eb0 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8006e3e:	4b1f      	ldr	r3, [pc, #124]	; (8006ebc <SetSysClock+0xd8>)
 8006e40:	2211      	movs	r2, #17
 8006e42:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8006e44:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <SetSysClock+0xd4>)
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <SetSysClock+0xd4>)
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <SetSysClock+0xd4>)
 8006e4e:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <SetSysClock+0xd4>)
 8006e50:	6852      	ldr	r2, [r2, #4]
 8006e52:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 2 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8006e54:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <SetSysClock+0xd4>)
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <SetSysClock+0xd4>)
 8006e58:	6852      	ldr	r2, [r2, #4]
 8006e5a:	4919      	ldr	r1, [pc, #100]	; (8006ec0 <SetSysClock+0xdc>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <SetSysClock+0xd4>)
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <SetSysClock+0xd4>)
 8006e64:	6852      	ldr	r2, [r2, #4]
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	0249      	lsls	r1, r1, #9
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <SetSysClock+0xd4>)
 8006e70:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <SetSysClock+0xd4>)
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	0449      	lsls	r1, r1, #17
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006e7c:	46c0      	nop			; (mov r8, r8)
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <SetSysClock+0xd4>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	049b      	lsls	r3, r3, #18
 8006e86:	4013      	ands	r3, r2
 8006e88:	d0f9      	beq.n	8006e7e <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <SetSysClock+0xd4>)
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <SetSysClock+0xd4>)
 8006e8e:	6852      	ldr	r2, [r2, #4]
 8006e90:	2103      	movs	r1, #3
 8006e92:	438a      	bics	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <SetSysClock+0xd4>)
 8006e98:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <SetSysClock+0xd4>)
 8006e9a:	6852      	ldr	r2, [r2, #4]
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <SetSysClock+0xd4>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	220c      	movs	r2, #12
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d1f9      	bne.n	8006ea4 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40022000 	.word	0x40022000
 8006ec0:	ffc07fff 	.word	0xffc07fff

08006ec4 <uart1_Init>:
xSemaphoreHandle	uart1_TxMutex;
xSemaphoreHandle	uart1_RxMutex;


void uart1_Init()
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
	// USART peripheral initialization settings
	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uart1_RxBufHead = 0;
 8006eca:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <uart1_Init+0x180>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
	uart1_RxBufTail = 0;
 8006ed0:	4b5d      	ldr	r3, [pc, #372]	; (8007048 <uart1_Init+0x184>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
	uart1_TxBufHead = 0;
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	; (800704c <uart1_Init+0x188>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
	uart1_TxBufTail = 0;
 8006edc:	4b5c      	ldr	r3, [pc, #368]	; (8007050 <uart1_Init+0x18c>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
	uart1_RxFlags = 0;
 8006ee2:	4b5c      	ldr	r3, [pc, #368]	; (8007054 <uart1_Init+0x190>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(uart1_RxAvailableSemaphore);
 8006ee8:	2203      	movs	r2, #3
 8006eea:	2100      	movs	r1, #0
 8006eec:	2001      	movs	r0, #1
 8006eee:	f7f9 fdc0 	bl	8000a72 <xQueueGenericCreate>
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	4b58      	ldr	r3, [pc, #352]	; (8007058 <uart1_Init+0x194>)
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	4b57      	ldr	r3, [pc, #348]	; (8007058 <uart1_Init+0x194>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d006      	beq.n	8006f0e <uart1_Init+0x4a>
 8006f00:	4b55      	ldr	r3, [pc, #340]	; (8007058 <uart1_Init+0x194>)
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f7f9 fe37 	bl	8000b7c <xQueueGenericSend>

	vSemaphoreCreateBinary(uart1_TxDrainedSemaphore);
 8006f0e:	2203      	movs	r2, #3
 8006f10:	2100      	movs	r1, #0
 8006f12:	2001      	movs	r0, #1
 8006f14:	f7f9 fdad 	bl	8000a72 <xQueueGenericCreate>
 8006f18:	0002      	movs	r2, r0
 8006f1a:	4b50      	ldr	r3, [pc, #320]	; (800705c <uart1_Init+0x198>)
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	; (800705c <uart1_Init+0x198>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <uart1_Init+0x70>
 8006f26:	4b4d      	ldr	r3, [pc, #308]	; (800705c <uart1_Init+0x198>)
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2100      	movs	r1, #0
 8006f30:	f7f9 fe24 	bl	8000b7c <xQueueGenericSend>
	xSemaphoreGive(uart1_TxDrainedSemaphore);	// initially drained
 8006f34:	4b49      	ldr	r3, [pc, #292]	; (800705c <uart1_Init+0x198>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f7f9 fe1d 	bl	8000b7c <xQueueGenericSend>

	uart1_RxMutex = xSemaphoreCreateMutex();
 8006f42:	2001      	movs	r0, #1
 8006f44:	f7f9 fdd5 	bl	8000af2 <xQueueCreateMutex>
 8006f48:	0002      	movs	r2, r0
 8006f4a:	4b45      	ldr	r3, [pc, #276]	; (8007060 <uart1_Init+0x19c>)
 8006f4c:	601a      	str	r2, [r3, #0]
	uart1_TxMutex = xSemaphoreCreateMutex();
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f7f9 fdcf 	bl	8000af2 <xQueueCreateMutex>
 8006f54:	0002      	movs	r2, r0
 8006f56:	4b43      	ldr	r3, [pc, #268]	; (8007064 <uart1_Init+0x1a0>)
 8006f58:	601a      	str	r2, [r3, #0]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	01db      	lsls	r3, r3, #7
 8006f5e:	2101      	movs	r1, #1
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7fb fca3 	bl	80028ac <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8006f66:	2380      	movs	r3, #128	; 0x80
 8006f68:	02db      	lsls	r3, r3, #11
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f7fb fc7d 	bl	800286c <RCC_AHBPeriphClockCmd>

	//Configure USART1 pins: Tx (PB6) and Rx (PB7)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8006f72:	2308      	movs	r3, #8
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	22c0      	movs	r2, #192	; 0xc0
 8006f78:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	2203      	movs	r2, #3
 8006f80:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006f82:	2308      	movs	r3, #8
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2202      	movs	r2, #2
 8006f88:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	2200      	movs	r2, #0
 8006f90:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8006f92:	2308      	movs	r3, #8
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	2201      	movs	r2, #1
 8006f98:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	4a32      	ldr	r2, [pc, #200]	; (8007068 <uart1_Init+0x1a4>)
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	0010      	movs	r0, r2
 8006fa4:	f7fb f988 	bl	80022b8 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_0);	// Alternate Function 0 == USART1_TX
 8006fa8:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <uart1_Init+0x1a4>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	2106      	movs	r1, #6
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fb fa41 	bl	8002436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_0);	// Alternate Function 0 == USART1_RX
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <uart1_Init+0x1a4>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2107      	movs	r1, #7
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7fb fa3b 	bl	8002436 <GPIO_PinAFConfig>
	//Configure USART1 setting: ----------------------------
	USART_InitStructure.USART_BaudRate = UART1_BAUDRATE;
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	22e1      	movs	r2, #225	; 0xe1
 8006fc6:	0252      	lsls	r2, r2, #9
 8006fc8:	601a      	str	r2, [r3, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8006fca:	2310      	movs	r3, #16
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	605a      	str	r2, [r3, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8006fda:	2310      	movs	r3, #16
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	2200      	movs	r2, #0
 8006fe0:	60da      	str	r2, [r3, #12]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	615a      	str	r2, [r3, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006fea:	2310      	movs	r3, #16
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	220c      	movs	r2, #12
 8006ff0:	611a      	str	r2, [r3, #16]
	USART_Init(USART1, &USART_InitStructure);
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	4a1d      	ldr	r2, [pc, #116]	; (800706c <uart1_Init+0x1a8>)
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	0010      	movs	r0, r2
 8006ffc:	f7fb fcbe 	bl	800297c <USART_Init>

	/* Here the USART1 transmit interrupt is disabled. This is generated when the
	 * transmit data register is empty
	 */
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE); 			// disable the USART1 receive interrupt
 8007000:	491b      	ldr	r1, [pc, #108]	; (8007070 <uart1_Init+0x1ac>)
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <uart1_Init+0x1a8>)
 8007004:	2200      	movs	r2, #0
 8007006:	0018      	movs	r0, r3
 8007008:	f7fb fdad 	bl	8002b66 <USART_ITConfig>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); 			// enable the USART1 receive interrupt
 800700c:	4919      	ldr	r1, [pc, #100]	; (8007074 <uart1_Init+0x1b0>)
 800700e:	4b17      	ldr	r3, [pc, #92]	; (800706c <uart1_Init+0x1a8>)
 8007010:	2201      	movs	r2, #1
 8007012:	0018      	movs	r0, r3
 8007014:	f7fb fda7 	bl	8002b66 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 8007018:	1d3b      	adds	r3, r7, #4
 800701a:	221b      	movs	r2, #27
 800701c:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;			 // this sets the priority group of the USART1 interrupts
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	2200      	movs	r2, #0
 8007022:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8007024:	1d3b      	adds	r3, r7, #4
 8007026:	2201      	movs	r2, #1
 8007028:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	0018      	movs	r0, r3
 800702e:	f7fb fa55 	bl	80024dc <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8007032:	4b0e      	ldr	r3, [pc, #56]	; (800706c <uart1_Init+0x1a8>)
 8007034:	2101      	movs	r1, #1
 8007036:	0018      	movs	r0, r3
 8007038:	f7fb fd66 	bl	8002b08 <USART_Cmd>
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b00a      	add	sp, #40	; 0x28
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200051b0 	.word	0x200051b0
 8007048:	200051bc 	.word	0x200051bc
 800704c:	200051b4 	.word	0x200051b4
 8007050:	200051ac 	.word	0x200051ac
 8007054:	20005124 	.word	0x20005124
 8007058:	200051b8 	.word	0x200051b8
 800705c:	200051c0 	.word	0x200051c0
 8007060:	20005120 	.word	0x20005120
 8007064:	20005128 	.word	0x20005128
 8007068:	48000400 	.word	0x48000400
 800706c:	40013800 	.word	0x40013800
 8007070:	00070107 	.word	0x00070107
 8007074:	00050105 	.word	0x00050105

08007078 <uart1_Putc>:

void uart1_Putc(char c)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	0002      	movs	r2, r0
 8007080:	1dfb      	adds	r3, r7, #7
 8007082:	701a      	strb	r2, [r3, #0]
	// wait until data register is empty
	while( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
 8007084:	46c0      	nop			; (mov r8, r8)
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <uart1_Putc+0x34>)
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	0018      	movs	r0, r3
 800708c:	f7fb fdad 	bl	8002bea <USART_GetFlagStatus>
 8007090:	1e03      	subs	r3, r0, #0
 8007092:	d0f8      	beq.n	8007086 <uart1_Putc+0xe>
		;
	USART_SendData(USART1,c);
 8007094:	1dfb      	adds	r3, r7, #7
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <uart1_Putc+0x34>)
 800709c:	0019      	movs	r1, r3
 800709e:	0010      	movs	r0, r2
 80070a0:	f7fb fd4f 	bl	8002b42 <USART_SendData>
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b002      	add	sp, #8
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40013800 	.word	0x40013800

080070b0 <uart1_PutByteNoLock>:

int uart1_PutByteNoLock(int ch)
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	unsigned newtail;

	newtail = uart1_TxBufTail + 1;
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <uart1_PutByteNoLock+0x70>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
	if (newtail >= TX_BUFSIZE)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b7f      	cmp	r3, #127	; 0x7f
 80070c4:	d913      	bls.n	80070ee <uart1_PutByteNoLock+0x3e>
		newtail = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
	while (newtail == uart1_TxBufHead)
 80070ca:	e010      	b.n	80070ee <uart1_PutByteNoLock+0x3e>
		{
		// no more space in the buffer
		// Make sure the TX interrupt is enabled so the buffer will drain
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE); 			// enable the USART1 receive interrupt
 80070cc:	4915      	ldr	r1, [pc, #84]	; (8007124 <uart1_PutByteNoLock+0x74>)
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <uart1_PutByteNoLock+0x78>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7fb fd47 	bl	8002b66 <USART_ITConfig>
		if (!xSemaphoreTake(uart1_TxDrainedSemaphore,MS_TO_TICKS(100)))
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <uart1_PutByteNoLock+0x7c>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	2264      	movs	r2, #100	; 0x64
 80070e0:	2100      	movs	r1, #0
 80070e2:	f7f9 fe30 	bl	8000d46 <xQueueGenericReceive>
 80070e6:	1e03      	subs	r3, r0, #0
 80070e8:	d101      	bne.n	80070ee <uart1_PutByteNoLock+0x3e>
			return 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e014      	b.n	8007118 <uart1_PutByteNoLock+0x68>
	while (newtail == uart1_TxBufHead)
 80070ee:	4b10      	ldr	r3, [pc, #64]	; (8007130 <uart1_PutByteNoLock+0x80>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d0e9      	beq.n	80070cc <uart1_PutByteNoLock+0x1c>
		}
	uart1_TxBuf[uart1_TxBufTail] = ch;
 80070f8:	4b09      	ldr	r3, [pc, #36]	; (8007120 <uart1_PutByteNoLock+0x70>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	b2d1      	uxtb	r1, r2
 8007100:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <uart1_PutByteNoLock+0x84>)
 8007102:	54d1      	strb	r1, [r2, r3]
	uart1_TxBufTail = newtail;
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <uart1_PutByteNoLock+0x70>)
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	601a      	str	r2, [r3, #0]
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE); 			// enable the USART1 receive interrupt
 800710a:	4906      	ldr	r1, [pc, #24]	; (8007124 <uart1_PutByteNoLock+0x74>)
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <uart1_PutByteNoLock+0x78>)
 800710e:	2201      	movs	r2, #1
 8007110:	0018      	movs	r0, r3
 8007112:	f7fb fd28 	bl	8002b66 <USART_ITConfig>
	return 1;
 8007116:	2301      	movs	r3, #1
	}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	b004      	add	sp, #16
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200051ac 	.word	0x200051ac
 8007124:	00070107 	.word	0x00070107
 8007128:	40013800 	.word	0x40013800
 800712c:	200051c0 	.word	0x200051c0
 8007130:	200051b4 	.word	0x200051b4
 8007134:	2000512c 	.word	0x2000512c

08007138 <uart1_Puts>:
	xSemaphoreGive(uart1_TxMutex);
	return nwritten;
	}

void uart1_Puts(char const *s)
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uart1_TxMutex,portMAX_DELAY);
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <uart1_Puts+0x48>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	2301      	movs	r3, #1
 8007146:	425a      	negs	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	2100      	movs	r1, #0
 800714c:	f7f9 fdfb 	bl	8000d46 <xQueueGenericReceive>
	while (*s)
 8007150:	e006      	b.n	8007160 <uart1_Puts+0x28>
		uart1_PutByteNoLock(*s++);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	0018      	movs	r0, r3
 800715c:	f7ff ffa8 	bl	80070b0 <uart1_PutByteNoLock>
	while (*s)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f4      	bne.n	8007152 <uart1_Puts+0x1a>
	//uart1_PutByteNoLock('\r');		// for Windows compatibility
	//uart1_PutByteNoLock('\n');
	xSemaphoreGive(uart1_TxMutex);
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <uart1_Puts+0x48>)
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	2200      	movs	r2, #0
 8007170:	2100      	movs	r1, #0
 8007172:	f7f9 fd03 	bl	8000b7c <xQueueGenericSend>
	}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b002      	add	sp, #8
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	20005128 	.word	0x20005128

08007184 <uart1_PutLine>:

void uart1_PutLine(char const *s)
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uart1_TxMutex,portMAX_DELAY);
 800718c:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <uart1_PutLine+0x54>)
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	2301      	movs	r3, #1
 8007192:	425a      	negs	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	2100      	movs	r1, #0
 8007198:	f7f9 fdd5 	bl	8000d46 <xQueueGenericReceive>
	while (*s)
 800719c:	e006      	b.n	80071ac <uart1_PutLine+0x28>
		uart1_PutByteNoLock(*s++);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7ff ff82 	bl	80070b0 <uart1_PutByteNoLock>
	while (*s)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f4      	bne.n	800719e <uart1_PutLine+0x1a>
	uart1_PutByteNoLock('\r');		// for Windows compatibility
 80071b4:	200d      	movs	r0, #13
 80071b6:	f7ff ff7b 	bl	80070b0 <uart1_PutByteNoLock>
	uart1_PutByteNoLock('\n');
 80071ba:	200a      	movs	r0, #10
 80071bc:	f7ff ff78 	bl	80070b0 <uart1_PutByteNoLock>
	xSemaphoreGive(uart1_TxMutex);
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <uart1_PutLine+0x54>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	2200      	movs	r2, #0
 80071c8:	2100      	movs	r1, #0
 80071ca:	f7f9 fcd7 	bl	8000b7c <xQueueGenericSend>
	}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b002      	add	sp, #8
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	20005128 	.word	0x20005128

080071dc <uart1_Printf>:
	return nread;
	}


int uart1_Printf(char const *fmt, ... )
	{
 80071dc:	b40f      	push	{r0, r1, r2, r3}
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
	va_list arg;
	int n;

	va_start(arg,fmt);
 80071e4:	2314      	movs	r3, #20
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	603b      	str	r3, [r7, #0]
	n = micro_vprintf(uart1_Putc,NULL,fmt,arg);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4807      	ldr	r0, [pc, #28]	; (800720c <uart1_Printf+0x30>)
 80071f0:	2100      	movs	r1, #0
 80071f2:	f7ff f837 	bl	8006264 <micro_vprintf>
 80071f6:	0003      	movs	r3, r0
 80071f8:	607b      	str	r3, [r7, #4]
	va_end(arg);

	return n;
 80071fa:	687b      	ldr	r3, [r7, #4]
	}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b002      	add	sp, #8
 8007202:	bc80      	pop	{r7}
 8007204:	bc08      	pop	{r3}
 8007206:	b004      	add	sp, #16
 8007208:	4718      	bx	r3
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	08007079 	.word	0x08007079

08007210 <USART1_IRQHandler>:



// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
	signed portBASE_TYPE	should_yield = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	603b      	str	r3, [r7, #0]
	FlagStatus status;

	// Is this an RX interrupt?
	if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 800721a:	4a4d      	ldr	r2, [pc, #308]	; (8007350 <USART1_IRQHandler+0x140>)
 800721c:	4b4d      	ldr	r3, [pc, #308]	; (8007354 <USART1_IRQHandler+0x144>)
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f7fb fd0c 	bl	8002c3e <USART_GetITStatus>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d04a      	beq.n	80072c0 <USART1_IRQHandler+0xb0>
		{
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_RXNE)) )
 800722a:	e01f      	b.n	800726c <USART1_IRQHandler+0x5c>
			{
			uart1_RxBuf[uart1_RxBufTail] = USART1->RDR; // read character, resets flag
 800722c:	4b4a      	ldr	r3, [pc, #296]	; (8007358 <USART1_IRQHandler+0x148>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a48      	ldr	r2, [pc, #288]	; (8007354 <USART1_IRQHandler+0x144>)
 8007232:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007234:	b292      	uxth	r2, r2
 8007236:	b2d1      	uxtb	r1, r2
 8007238:	4a48      	ldr	r2, [pc, #288]	; (800735c <USART1_IRQHandler+0x14c>)
 800723a:	54d1      	strb	r1, [r2, r3]
			if (++uart1_RxBufTail >= RX_BUFSIZE)
 800723c:	4b46      	ldr	r3, [pc, #280]	; (8007358 <USART1_IRQHandler+0x148>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	4b45      	ldr	r3, [pc, #276]	; (8007358 <USART1_IRQHandler+0x148>)
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	4b44      	ldr	r3, [pc, #272]	; (8007358 <USART1_IRQHandler+0x148>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b7f      	cmp	r3, #127	; 0x7f
 800724c:	d902      	bls.n	8007254 <USART1_IRQHandler+0x44>
				uart1_RxBufTail = 0;
 800724e:	4b42      	ldr	r3, [pc, #264]	; (8007358 <USART1_IRQHandler+0x148>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
			if (uart1_RxBufTail == uart1_RxBufHead)
 8007254:	4b40      	ldr	r3, [pc, #256]	; (8007358 <USART1_IRQHandler+0x148>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4b41      	ldr	r3, [pc, #260]	; (8007360 <USART1_IRQHandler+0x150>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d105      	bne.n	800726c <USART1_IRQHandler+0x5c>
				uart1_RxFlags |= RX_FLAG_BUFFER_OVERFLOW;
 8007260:	4b40      	ldr	r3, [pc, #256]	; (8007364 <USART1_IRQHandler+0x154>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2208      	movs	r2, #8
 8007266:	431a      	orrs	r2, r3
 8007268:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <USART1_IRQHandler+0x154>)
 800726a:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_RXNE)) )
 800726c:	1dfc      	adds	r4, r7, #7
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <USART1_IRQHandler+0x144>)
 8007270:	2120      	movs	r1, #32
 8007272:	0018      	movs	r0, r3
 8007274:	f7fb fcb9 	bl	8002bea <USART_GetFlagStatus>
 8007278:	0003      	movs	r3, r0
 800727a:	7023      	strb	r3, [r4, #0]
 800727c:	1dfb      	adds	r3, r7, #7
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1d3      	bne.n	800722c <USART1_IRQHandler+0x1c>
//			if (status & UART_PARITY_ERROR)
//				uart1_RxFlags |= RX_FLAG_PARITY_ERROR;
//			if (status & UART_FRAMING_ERROR)
//				uart1_RxFlags |= RX_FLAG_FRAMING_ERROR;
			}
		status=USART_GetFlagStatus(USART1, USART_FLAG_ORE);
 8007284:	1dfc      	adds	r4, r7, #7
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <USART1_IRQHandler+0x144>)
 8007288:	2108      	movs	r1, #8
 800728a:	0018      	movs	r0, r3
 800728c:	f7fb fcad 	bl	8002bea <USART_GetFlagStatus>
 8007290:	0003      	movs	r3, r0
 8007292:	7023      	strb	r3, [r4, #0]
		if (status)
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <USART1_IRQHandler+0xa2>
			{
			USART_ClearFlag(USART1, USART_FLAG_ORE);
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <USART1_IRQHandler+0x144>)
 800729e:	2108      	movs	r1, #8
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7fb fcc0 	bl	8002c26 <USART_ClearFlag>
			uart1_RxFlags |= RX_FLAG_OVERRUN_ERROR;
 80072a6:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <USART1_IRQHandler+0x154>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2204      	movs	r2, #4
 80072ac:	431a      	orrs	r2, r3
 80072ae:	4b2d      	ldr	r3, [pc, #180]	; (8007364 <USART1_IRQHandler+0x154>)
 80072b0:	601a      	str	r2, [r3, #0]
			}
		xSemaphoreGiveFromISR(uart1_RxAvailableSemaphore,&should_yield);	// new data is available
 80072b2:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <USART1_IRQHandler+0x158>)
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	003a      	movs	r2, r7
 80072b8:	2300      	movs	r3, #0
 80072ba:	2100      	movs	r1, #0
 80072bc:	f7f9 fcf4 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	// Is this a TX interrupt?
	if( USART_GetITStatus(USART1, USART_IT_TXE) )
 80072c0:	4a2a      	ldr	r2, [pc, #168]	; (800736c <USART1_IRQHandler+0x15c>)
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <USART1_IRQHandler+0x144>)
 80072c4:	0011      	movs	r1, r2
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7fb fcb9 	bl	8002c3e <USART_GetITStatus>
 80072cc:	1e03      	subs	r3, r0, #0
 80072ce:	d036      	beq.n	800733e <USART1_IRQHandler+0x12e>
		{
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_TXE)) )
 80072d0:	e022      	b.n	8007318 <USART1_IRQHandler+0x108>
			{
			if (uart1_TxBufHead == uart1_TxBufTail)
 80072d2:	4b27      	ldr	r3, [pc, #156]	; (8007370 <USART1_IRQHandler+0x160>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b27      	ldr	r3, [pc, #156]	; (8007374 <USART1_IRQHandler+0x164>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d106      	bne.n	80072ec <USART1_IRQHandler+0xdc>
				{
				// no more data pending, disable the TX interrupt
				USART_ITConfig(USART1, USART_IT_TXE, DISABLE); 			// disable the USART1 transmit interrupt
 80072de:	4923      	ldr	r1, [pc, #140]	; (800736c <USART1_IRQHandler+0x15c>)
 80072e0:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <USART1_IRQHandler+0x144>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7fb fc3e 	bl	8002b66 <USART_ITConfig>
				break;
 80072ea:	e021      	b.n	8007330 <USART1_IRQHandler+0x120>
				}
			else
				{
				USART_SendData(USART1,uart1_TxBuf[uart1_TxBufHead]);
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <USART1_IRQHandler+0x160>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a21      	ldr	r2, [pc, #132]	; (8007378 <USART1_IRQHandler+0x168>)
 80072f2:	5cd3      	ldrb	r3, [r2, r3]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <USART1_IRQHandler+0x144>)
 80072f8:	0019      	movs	r1, r3
 80072fa:	0010      	movs	r0, r2
 80072fc:	f7fb fc21 	bl	8002b42 <USART_SendData>
				if (++uart1_TxBufHead >= TX_BUFSIZE)
 8007300:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <USART1_IRQHandler+0x160>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <USART1_IRQHandler+0x160>)
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	4b19      	ldr	r3, [pc, #100]	; (8007370 <USART1_IRQHandler+0x160>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d902      	bls.n	8007318 <USART1_IRQHandler+0x108>
					uart1_TxBufHead = 0;
 8007312:	4b17      	ldr	r3, [pc, #92]	; (8007370 <USART1_IRQHandler+0x160>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_TXE)) )
 8007318:	1dfc      	adds	r4, r7, #7
 800731a:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <USART1_IRQHandler+0x144>)
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	0018      	movs	r0, r3
 8007320:	f7fb fc63 	bl	8002bea <USART_GetFlagStatus>
 8007324:	0003      	movs	r3, r0
 8007326:	7023      	strb	r3, [r4, #0]
 8007328:	1dfb      	adds	r3, r7, #7
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1d0      	bne.n	80072d2 <USART1_IRQHandler+0xc2>
				}
			}
		xSemaphoreGiveFromISR(uart1_TxDrainedSemaphore,&should_yield);	// now drained, at least partially
 8007330:	4b12      	ldr	r3, [pc, #72]	; (800737c <USART1_IRQHandler+0x16c>)
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	003a      	movs	r2, r7
 8007336:	2300      	movs	r3, #0
 8007338:	2100      	movs	r1, #0
 800733a:	f7f9 fcb5 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	if (should_yield != pdFALSE)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <USART1_IRQHandler+0x138>
		{
		taskYIELD();
 8007344:	f7f9 fa7a 	bl	800083c <vPortYieldFromISR>
		}

}
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	46bd      	mov	sp, r7
 800734c:	b003      	add	sp, #12
 800734e:	bd90      	pop	{r4, r7, pc}
 8007350:	00050105 	.word	0x00050105
 8007354:	40013800 	.word	0x40013800
 8007358:	200051bc 	.word	0x200051bc
 800735c:	200051c4 	.word	0x200051c4
 8007360:	200051b0 	.word	0x200051b0
 8007364:	20005124 	.word	0x20005124
 8007368:	200051b8 	.word	0x200051b8
 800736c:	00070107 	.word	0x00070107
 8007370:	200051b4 	.word	0x200051b4
 8007374:	200051ac 	.word	0x200051ac
 8007378:	2000512c 	.word	0x2000512c
 800737c:	200051c0 	.word	0x200051c0

08007380 <uart5_Init>:
xSemaphoreHandle	uart5_TxMutex;
xSemaphoreHandle	uart5_RxMutex;


void uart5_Init()
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
	// USART peripheral initialization settings
	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uart5_RxBufHead = 0;
 8007386:	4b5e      	ldr	r3, [pc, #376]	; (8007500 <uart5_Init+0x180>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
	uart5_RxBufTail = 0;
 800738c:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <uart5_Init+0x184>)
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
	uart5_TxBufHead = 0;
 8007392:	4b5d      	ldr	r3, [pc, #372]	; (8007508 <uart5_Init+0x188>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
	uart5_TxBufTail = 0;
 8007398:	4b5c      	ldr	r3, [pc, #368]	; (800750c <uart5_Init+0x18c>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
	uart5_RxFlags = 0;
 800739e:	4b5c      	ldr	r3, [pc, #368]	; (8007510 <uart5_Init+0x190>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(uart5_RxAvailableSemaphore);
 80073a4:	2203      	movs	r2, #3
 80073a6:	2100      	movs	r1, #0
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7f9 fb62 	bl	8000a72 <xQueueGenericCreate>
 80073ae:	0002      	movs	r2, r0
 80073b0:	4b58      	ldr	r3, [pc, #352]	; (8007514 <uart5_Init+0x194>)
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	4b57      	ldr	r3, [pc, #348]	; (8007514 <uart5_Init+0x194>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <uart5_Init+0x4a>
 80073bc:	4b55      	ldr	r3, [pc, #340]	; (8007514 <uart5_Init+0x194>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	2200      	movs	r2, #0
 80073c4:	2100      	movs	r1, #0
 80073c6:	f7f9 fbd9 	bl	8000b7c <xQueueGenericSend>

	vSemaphoreCreateBinary(uart5_TxDrainedSemaphore);
 80073ca:	2203      	movs	r2, #3
 80073cc:	2100      	movs	r1, #0
 80073ce:	2001      	movs	r0, #1
 80073d0:	f7f9 fb4f 	bl	8000a72 <xQueueGenericCreate>
 80073d4:	0002      	movs	r2, r0
 80073d6:	4b50      	ldr	r3, [pc, #320]	; (8007518 <uart5_Init+0x198>)
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	4b4f      	ldr	r3, [pc, #316]	; (8007518 <uart5_Init+0x198>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <uart5_Init+0x70>
 80073e2:	4b4d      	ldr	r3, [pc, #308]	; (8007518 <uart5_Init+0x198>)
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	f7f9 fbc6 	bl	8000b7c <xQueueGenericSend>
	xSemaphoreGive(uart5_TxDrainedSemaphore);	// initially drained
 80073f0:	4b49      	ldr	r3, [pc, #292]	; (8007518 <uart5_Init+0x198>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	f7f9 fbbf 	bl	8000b7c <xQueueGenericSend>

	uart5_RxMutex = xSemaphoreCreateMutex();
 80073fe:	2001      	movs	r0, #1
 8007400:	f7f9 fb77 	bl	8000af2 <xQueueCreateMutex>
 8007404:	0002      	movs	r2, r0
 8007406:	4b45      	ldr	r3, [pc, #276]	; (800751c <uart5_Init+0x19c>)
 8007408:	601a      	str	r2, [r3, #0]
	uart5_TxMutex = xSemaphoreCreateMutex();
 800740a:	2001      	movs	r0, #1
 800740c:	f7f9 fb71 	bl	8000af2 <xQueueCreateMutex>
 8007410:	0002      	movs	r2, r0
 8007412:	4b43      	ldr	r3, [pc, #268]	; (8007520 <uart5_Init+0x1a0>)
 8007414:	601a      	str	r2, [r3, #0]

	/* enable APB1 peripheral clock for USART5
	 * note that only USART5 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART5,ENABLE);
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	035b      	lsls	r3, r3, #13
 800741a:	2101      	movs	r1, #1
 800741c:	0018      	movs	r0, r3
 800741e:	f7fb fa65 	bl	80028ec <RCC_APB1PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART5, PB3 for TX and PB4 for RX
	 */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8007422:	2380      	movs	r3, #128	; 0x80
 8007424:	02db      	lsls	r3, r3, #11
 8007426:	2101      	movs	r1, #1
 8007428:	0018      	movs	r0, r3
 800742a:	f7fb fa1f 	bl	800286c <RCC_AHBPeriphClockCmd>

	//Configure USART5 pins: Tx (PB3) and Rx (PB4)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4;
 800742e:	2308      	movs	r3, #8
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	2218      	movs	r2, #24
 8007434:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007436:	2308      	movs	r3, #8
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	2203      	movs	r2, #3
 800743c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800743e:	2308      	movs	r3, #8
 8007440:	18fb      	adds	r3, r7, r3
 8007442:	2202      	movs	r2, #2
 8007444:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007446:	2308      	movs	r3, #8
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	2200      	movs	r2, #0
 800744c:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800744e:	2308      	movs	r3, #8
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	2201      	movs	r2, #1
 8007454:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007456:	2308      	movs	r3, #8
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	4a32      	ldr	r2, [pc, #200]	; (8007524 <uart5_Init+0x1a4>)
 800745c:	0019      	movs	r1, r3
 800745e:	0010      	movs	r0, r2
 8007460:	f7fa ff2a 	bl	80022b8 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART5 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_4);	// Alternate Function 4 == USART5_TX
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <uart5_Init+0x1a4>)
 8007466:	2204      	movs	r2, #4
 8007468:	2103      	movs	r1, #3
 800746a:	0018      	movs	r0, r3
 800746c:	f7fa ffe3 	bl	8002436 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_4);	// Alternate Function 4 == USART5_RX
 8007470:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <uart5_Init+0x1a4>)
 8007472:	2204      	movs	r2, #4
 8007474:	2104      	movs	r1, #4
 8007476:	0018      	movs	r0, r3
 8007478:	f7fa ffdd 	bl	8002436 <GPIO_PinAFConfig>
	//Configure USART5 setting: ----------------------------
	USART_InitStructure.USART_BaudRate = UART5_BAUDRATE;
 800747c:	2310      	movs	r3, #16
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	22e1      	movs	r2, #225	; 0xe1
 8007482:	0252      	lsls	r2, r2, #9
 8007484:	601a      	str	r2, [r3, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8007486:	2310      	movs	r3, #16
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	2200      	movs	r2, #0
 800748c:	605a      	str	r2, [r3, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800748e:	2310      	movs	r3, #16
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8007496:	2310      	movs	r3, #16
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	2200      	movs	r2, #0
 800749c:	60da      	str	r2, [r3, #12]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800749e:	2310      	movs	r3, #16
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	615a      	str	r2, [r3, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80074a6:	2310      	movs	r3, #16
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	220c      	movs	r2, #12
 80074ac:	611a      	str	r2, [r3, #16]
	USART_Init(USART5, &USART_InitStructure);
 80074ae:	2310      	movs	r3, #16
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <uart5_Init+0x1a8>)
 80074b4:	0019      	movs	r1, r3
 80074b6:	0010      	movs	r0, r2
 80074b8:	f7fb fa60 	bl	800297c <USART_Init>

	/* Here the USART5 transmit interrupt is disabled. This is generated when the
	 * transmit data register is empty
	 */
	USART_ITConfig(USART5, USART_IT_TXE, DISABLE); 			// disable the USART5 receive interrupt
 80074bc:	491b      	ldr	r1, [pc, #108]	; (800752c <uart5_Init+0x1ac>)
 80074be:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <uart5_Init+0x1a8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	0018      	movs	r0, r3
 80074c4:	f7fb fb4f 	bl	8002b66 <USART_ITConfig>
	/* Here the USART5 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART5_IRQHandler() function
	 * if the USART5 receive interrupt occurs
	 */
	USART_ITConfig(USART5, USART_IT_RXNE, ENABLE); // enable the USART5 receive interrupt
 80074c8:	4919      	ldr	r1, [pc, #100]	; (8007530 <uart5_Init+0x1b0>)
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <uart5_Init+0x1a8>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fb fb49 	bl	8002b66 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART3_6_IRQn;		 // we want to configure the USART5 interrupts
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	221d      	movs	r2, #29
 80074d8:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;			 // this sets the priority group of the USART5 interrupts
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	2200      	movs	r2, #0
 80074de:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART5 interrupts are globally enabled
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	2201      	movs	r2, #1
 80074e4:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7fa fff7 	bl	80024dc <NVIC_Init>

	// finally this enables the complete USART5 peripheral
	USART_Cmd(USART5, ENABLE);
 80074ee:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <uart5_Init+0x1a8>)
 80074f0:	2101      	movs	r1, #1
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7fb fb08 	bl	8002b08 <USART_Cmd>
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b00a      	add	sp, #40	; 0x28
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20005244 	.word	0x20005244
 8007504:	200052d4 	.word	0x200052d4
 8007508:	200052dc 	.word	0x200052dc
 800750c:	200052d8 	.word	0x200052d8
 8007510:	200052e0 	.word	0x200052e0
 8007514:	200052d0 	.word	0x200052d0
 8007518:	200052c8 	.word	0x200052c8
 800751c:	20005364 	.word	0x20005364
 8007520:	200052cc 	.word	0x200052cc
 8007524:	48000400 	.word	0x48000400
 8007528:	40005000 	.word	0x40005000
 800752c:	00070107 	.word	0x00070107
 8007530:	00050105 	.word	0x00050105

08007534 <uart5_PutByteNoLock>:
		;
	USART_SendData(USART5,c);
}

int uart5_PutByteNoLock(int ch)
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	unsigned newtail;

	newtail = uart5_TxBufTail + 1;
 800753c:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <uart5_PutByteNoLock+0x70>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
	if (newtail >= TX_BUFSIZE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b7f      	cmp	r3, #127	; 0x7f
 8007548:	d913      	bls.n	8007572 <uart5_PutByteNoLock+0x3e>
		newtail = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
	while (newtail == uart5_TxBufHead)
 800754e:	e010      	b.n	8007572 <uart5_PutByteNoLock+0x3e>
		{
		// no more space in the buffer
		// Make sure the TX interrupt is enabled so the buffer will drain
		USART_ITConfig(USART5, USART_IT_TXE, ENABLE); 			// enable the USART5 receive interrupt
 8007550:	4915      	ldr	r1, [pc, #84]	; (80075a8 <uart5_PutByteNoLock+0x74>)
 8007552:	4b16      	ldr	r3, [pc, #88]	; (80075ac <uart5_PutByteNoLock+0x78>)
 8007554:	2201      	movs	r2, #1
 8007556:	0018      	movs	r0, r3
 8007558:	f7fb fb05 	bl	8002b66 <USART_ITConfig>
		if (!xSemaphoreTake(uart5_TxDrainedSemaphore,MS_TO_TICKS(100)))
 800755c:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <uart5_PutByteNoLock+0x7c>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	2300      	movs	r3, #0
 8007562:	2264      	movs	r2, #100	; 0x64
 8007564:	2100      	movs	r1, #0
 8007566:	f7f9 fbee 	bl	8000d46 <xQueueGenericReceive>
 800756a:	1e03      	subs	r3, r0, #0
 800756c:	d101      	bne.n	8007572 <uart5_PutByteNoLock+0x3e>
			return 0;
 800756e:	2300      	movs	r3, #0
 8007570:	e014      	b.n	800759c <uart5_PutByteNoLock+0x68>
	while (newtail == uart5_TxBufHead)
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <uart5_PutByteNoLock+0x80>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	429a      	cmp	r2, r3
 800757a:	d0e9      	beq.n	8007550 <uart5_PutByteNoLock+0x1c>
		}
	uart5_TxBuf[uart5_TxBufTail] = ch;
 800757c:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <uart5_PutByteNoLock+0x70>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	b2d1      	uxtb	r1, r2
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <uart5_PutByteNoLock+0x84>)
 8007586:	54d1      	strb	r1, [r2, r3]
	uart5_TxBufTail = newtail;
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <uart5_PutByteNoLock+0x70>)
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]
	USART_ITConfig(USART5, USART_IT_TXE, ENABLE); 			// enable the USART5 receive interrupt
 800758e:	4906      	ldr	r1, [pc, #24]	; (80075a8 <uart5_PutByteNoLock+0x74>)
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <uart5_PutByteNoLock+0x78>)
 8007592:	2201      	movs	r2, #1
 8007594:	0018      	movs	r0, r3
 8007596:	f7fb fae6 	bl	8002b66 <USART_ITConfig>
	return 1;
 800759a:	2301      	movs	r3, #1
	}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b004      	add	sp, #16
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	200052d8 	.word	0x200052d8
 80075a8:	00070107 	.word	0x00070107
 80075ac:	40005000 	.word	0x40005000
 80075b0:	200052c8 	.word	0x200052c8
 80075b4:	200052dc 	.word	0x200052dc
 80075b8:	20005248 	.word	0x20005248

080075bc <uart5_PutByte>:

int uart5_PutByte(int ch)
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	int rval;
	xSemaphoreTake(uart5_TxMutex,portMAX_DELAY);
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <uart5_PutByte+0x3c>)
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	2301      	movs	r3, #1
 80075ca:	425a      	negs	r2, r3
 80075cc:	2300      	movs	r3, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	f7f9 fbb9 	bl	8000d46 <xQueueGenericReceive>
	rval = uart5_PutByteNoLock(ch);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7ff ffac 	bl	8007534 <uart5_PutByteNoLock>
 80075dc:	0003      	movs	r3, r0
 80075de:	60fb      	str	r3, [r7, #12]
	xSemaphoreGive(uart5_TxMutex);
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <uart5_PutByte+0x3c>)
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	f7f9 fac7 	bl	8000b7c <xQueueGenericSend>
	return rval;
 80075ee:	68fb      	ldr	r3, [r7, #12]
	}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b004      	add	sp, #16
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200052cc 	.word	0x200052cc

080075fc <uart5_WaitForByte>:
		}
	return ch;
	}

int uart5_WaitForByte(int timeout_ms)
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	int ch = -1;
 8007604:	2301      	movs	r3, #1
 8007606:	425b      	negs	r3, r3
 8007608:	60fb      	str	r3, [r7, #12]
	// Wait for at least one byte to arrive
	if (uart5_RxBufHead == uart5_RxBufTail && timeout_ms > 0)
 800760a:	4b1c      	ldr	r3, [pc, #112]	; (800767c <uart5_WaitForByte+0x80>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <uart5_WaitForByte+0x84>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d109      	bne.n	800762a <uart5_WaitForByte+0x2e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dd06      	ble.n	800762a <uart5_WaitForByte+0x2e>
		{
		// wait for at least one character
		xSemaphoreTake(uart5_RxAvailableSemaphore,MS_TO_TICKS(timeout_ms));
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <uart5_WaitForByte+0x88>)
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	2300      	movs	r3, #0
 8007624:	2100      	movs	r1, #0
 8007626:	f7f9 fb8e 	bl	8000d46 <xQueueGenericReceive>
		}
	if (uart5_RxBufHead != uart5_RxBufTail)
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <uart5_WaitForByte+0x80>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b14      	ldr	r3, [pc, #80]	; (8007680 <uart5_WaitForByte+0x84>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d01d      	beq.n	8007672 <uart5_WaitForByte+0x76>
		{
		unsigned newhead = uart5_RxBufHead + 1;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <uart5_WaitForByte+0x80>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	60bb      	str	r3, [r7, #8]
		if (newhead >= RX_BUFSIZE)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b7f      	cmp	r3, #127	; 0x7f
 8007642:	d901      	bls.n	8007648 <uart5_WaitForByte+0x4c>
			newhead = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	60bb      	str	r3, [r7, #8]
		ch = uart5_RxBuf[uart5_RxBufHead];
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <uart5_WaitForByte+0x80>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a0e      	ldr	r2, [pc, #56]	; (8007688 <uart5_WaitForByte+0x8c>)
 800764e:	5cd3      	ldrb	r3, [r2, r3]
 8007650:	60fb      	str	r3, [r7, #12]
		uart5_RxBufHead = newhead;
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <uart5_WaitForByte+0x80>)
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	601a      	str	r2, [r3, #0]
		if (uart5_RxBufHead == uart5_RxBufTail)
 8007658:	4b08      	ldr	r3, [pc, #32]	; (800767c <uart5_WaitForByte+0x80>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b08      	ldr	r3, [pc, #32]	; (8007680 <uart5_WaitForByte+0x84>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d106      	bne.n	8007672 <uart5_WaitForByte+0x76>
			xSemaphoreTake(uart5_RxAvailableSemaphore,MS_TO_TICKS(1));	// take it, we are done
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <uart5_WaitForByte+0x88>)
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	2201      	movs	r2, #1
 800766c:	2100      	movs	r1, #0
 800766e:	f7f9 fb6a 	bl	8000d46 <xQueueGenericReceive>
		}
	return ch;
 8007672:	68fb      	ldr	r3, [r7, #12]
	}
 8007674:	0018      	movs	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	b004      	add	sp, #16
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20005244 	.word	0x20005244
 8007680:	200052d4 	.word	0x200052d4
 8007684:	200052d0 	.word	0x200052d0
 8007688:	200052e4 	.word	0x200052e4

0800768c <USART3_6_IRQHandler>:



// this is the interrupt request handler (IRQ) for ALL USART5 interrupts
void USART3_6_IRQHandler(void)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	signed portBASE_TYPE	should_yield = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	603b      	str	r3, [r7, #0]
	FlagStatus status;

	// Is this an RX interrupt?
	if( USART_GetITStatus(USART5, USART_IT_RXNE) )
 8007696:	4a4d      	ldr	r2, [pc, #308]	; (80077cc <USART3_6_IRQHandler+0x140>)
 8007698:	4b4d      	ldr	r3, [pc, #308]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 800769a:	0011      	movs	r1, r2
 800769c:	0018      	movs	r0, r3
 800769e:	f7fb face 	bl	8002c3e <USART_GetITStatus>
 80076a2:	1e03      	subs	r3, r0, #0
 80076a4:	d04a      	beq.n	800773c <USART3_6_IRQHandler+0xb0>
		{
		while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_RXNE)) )
 80076a6:	e01f      	b.n	80076e8 <USART3_6_IRQHandler+0x5c>
			{
			uart5_RxBuf[uart5_RxBufTail] = USART5->RDR; // read character, resets flag
 80076a8:	4b4a      	ldr	r3, [pc, #296]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a48      	ldr	r2, [pc, #288]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 80076ae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80076b0:	b292      	uxth	r2, r2
 80076b2:	b2d1      	uxtb	r1, r2
 80076b4:	4a48      	ldr	r2, [pc, #288]	; (80077d8 <USART3_6_IRQHandler+0x14c>)
 80076b6:	54d1      	strb	r1, [r2, r3]
			if (++uart5_RxBufTail >= RX_BUFSIZE)
 80076b8:	4b46      	ldr	r3, [pc, #280]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	4b44      	ldr	r3, [pc, #272]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b7f      	cmp	r3, #127	; 0x7f
 80076c8:	d902      	bls.n	80076d0 <USART3_6_IRQHandler+0x44>
				uart5_RxBufTail = 0;
 80076ca:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
			if (uart5_RxBufTail == uart5_RxBufHead)
 80076d0:	4b40      	ldr	r3, [pc, #256]	; (80077d4 <USART3_6_IRQHandler+0x148>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	4b41      	ldr	r3, [pc, #260]	; (80077dc <USART3_6_IRQHandler+0x150>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d105      	bne.n	80076e8 <USART3_6_IRQHandler+0x5c>
				uart5_RxFlags |= RX_FLAG_BUFFER_OVERFLOW;
 80076dc:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <USART3_6_IRQHandler+0x154>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2208      	movs	r2, #8
 80076e2:	431a      	orrs	r2, r3
 80076e4:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <USART3_6_IRQHandler+0x154>)
 80076e6:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_RXNE)) )
 80076e8:	1dfc      	adds	r4, r7, #7
 80076ea:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 80076ec:	2120      	movs	r1, #32
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7fb fa7b 	bl	8002bea <USART_GetFlagStatus>
 80076f4:	0003      	movs	r3, r0
 80076f6:	7023      	strb	r3, [r4, #0]
 80076f8:	1dfb      	adds	r3, r7, #7
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1d3      	bne.n	80076a8 <USART3_6_IRQHandler+0x1c>
//			if (status & UART_PARITY_ERROR)
//				uart5_RxFlags |= RX_FLAG_PARITY_ERROR;
//			if (status & UART_FRAMING_ERROR)
//				uart5_RxFlags |= RX_FLAG_FRAMING_ERROR;
			}
		status=USART_GetFlagStatus(USART5, USART_FLAG_ORE);
 8007700:	1dfc      	adds	r4, r7, #7
 8007702:	4b33      	ldr	r3, [pc, #204]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 8007704:	2108      	movs	r1, #8
 8007706:	0018      	movs	r0, r3
 8007708:	f7fb fa6f 	bl	8002bea <USART_GetFlagStatus>
 800770c:	0003      	movs	r3, r0
 800770e:	7023      	strb	r3, [r4, #0]
		if (status)
 8007710:	1dfb      	adds	r3, r7, #7
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <USART3_6_IRQHandler+0xa2>
			{
			USART_ClearFlag(USART5, USART_FLAG_ORE);
 8007718:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 800771a:	2108      	movs	r1, #8
 800771c:	0018      	movs	r0, r3
 800771e:	f7fb fa82 	bl	8002c26 <USART_ClearFlag>
			uart5_RxFlags |= RX_FLAG_OVERRUN_ERROR;
 8007722:	4b2f      	ldr	r3, [pc, #188]	; (80077e0 <USART3_6_IRQHandler+0x154>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2204      	movs	r2, #4
 8007728:	431a      	orrs	r2, r3
 800772a:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <USART3_6_IRQHandler+0x154>)
 800772c:	601a      	str	r2, [r3, #0]
			}
		xSemaphoreGiveFromISR(uart5_RxAvailableSemaphore,&should_yield);	// new data is available
 800772e:	4b2d      	ldr	r3, [pc, #180]	; (80077e4 <USART3_6_IRQHandler+0x158>)
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	003a      	movs	r2, r7
 8007734:	2300      	movs	r3, #0
 8007736:	2100      	movs	r1, #0
 8007738:	f7f9 fab6 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	// Is this a TX interrupt?
	if( USART_GetITStatus(USART5, USART_IT_TXE) )
 800773c:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <USART3_6_IRQHandler+0x15c>)
 800773e:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 8007740:	0011      	movs	r1, r2
 8007742:	0018      	movs	r0, r3
 8007744:	f7fb fa7b 	bl	8002c3e <USART_GetITStatus>
 8007748:	1e03      	subs	r3, r0, #0
 800774a:	d036      	beq.n	80077ba <USART3_6_IRQHandler+0x12e>
		{
		while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_TXE)) )
 800774c:	e022      	b.n	8007794 <USART3_6_IRQHandler+0x108>
			{
			if (uart5_TxBufHead == uart5_TxBufTail)
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <USART3_6_IRQHandler+0x160>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b27      	ldr	r3, [pc, #156]	; (80077f0 <USART3_6_IRQHandler+0x164>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d106      	bne.n	8007768 <USART3_6_IRQHandler+0xdc>
				{
				// no more data pending, disable the TX interrupt
				USART_ITConfig(USART5, USART_IT_TXE, DISABLE); 			// disable the USART5 transmit interrupt
 800775a:	4923      	ldr	r1, [pc, #140]	; (80077e8 <USART3_6_IRQHandler+0x15c>)
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 800775e:	2200      	movs	r2, #0
 8007760:	0018      	movs	r0, r3
 8007762:	f7fb fa00 	bl	8002b66 <USART_ITConfig>
				break;
 8007766:	e021      	b.n	80077ac <USART3_6_IRQHandler+0x120>
				}
			else
				{
				USART_SendData(USART5,uart5_TxBuf[uart5_TxBufHead]);
 8007768:	4b20      	ldr	r3, [pc, #128]	; (80077ec <USART3_6_IRQHandler+0x160>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <USART3_6_IRQHandler+0x168>)
 800776e:	5cd3      	ldrb	r3, [r2, r3]
 8007770:	b29b      	uxth	r3, r3
 8007772:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 8007774:	0019      	movs	r1, r3
 8007776:	0010      	movs	r0, r2
 8007778:	f7fb f9e3 	bl	8002b42 <USART_SendData>
				if (++uart5_TxBufHead >= TX_BUFSIZE)
 800777c:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <USART3_6_IRQHandler+0x160>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <USART3_6_IRQHandler+0x160>)
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	4b19      	ldr	r3, [pc, #100]	; (80077ec <USART3_6_IRQHandler+0x160>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b7f      	cmp	r3, #127	; 0x7f
 800778c:	d902      	bls.n	8007794 <USART3_6_IRQHandler+0x108>
					uart5_TxBufHead = 0;
 800778e:	4b17      	ldr	r3, [pc, #92]	; (80077ec <USART3_6_IRQHandler+0x160>)
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_TXE)) )
 8007794:	1dfc      	adds	r4, r7, #7
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <USART3_6_IRQHandler+0x144>)
 8007798:	2180      	movs	r1, #128	; 0x80
 800779a:	0018      	movs	r0, r3
 800779c:	f7fb fa25 	bl	8002bea <USART_GetFlagStatus>
 80077a0:	0003      	movs	r3, r0
 80077a2:	7023      	strb	r3, [r4, #0]
 80077a4:	1dfb      	adds	r3, r7, #7
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1d0      	bne.n	800774e <USART3_6_IRQHandler+0xc2>
				}
			}
		xSemaphoreGiveFromISR(uart5_TxDrainedSemaphore,&should_yield);	// now drained, at least partially
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <USART3_6_IRQHandler+0x16c>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	003a      	movs	r2, r7
 80077b2:	2300      	movs	r3, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	f7f9 fa77 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	if (should_yield != pdFALSE)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <USART3_6_IRQHandler+0x138>
		{
		taskYIELD();
 80077c0:	f7f9 f83c 	bl	800083c <vPortYieldFromISR>
		}

}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b003      	add	sp, #12
 80077ca:	bd90      	pop	{r4, r7, pc}
 80077cc:	00050105 	.word	0x00050105
 80077d0:	40005000 	.word	0x40005000
 80077d4:	200052d4 	.word	0x200052d4
 80077d8:	200052e4 	.word	0x200052e4
 80077dc:	20005244 	.word	0x20005244
 80077e0:	200052e0 	.word	0x200052e0
 80077e4:	200052d0 	.word	0x200052d0
 80077e8:	00070107 	.word	0x00070107
 80077ec:	200052dc 	.word	0x200052dc
 80077f0:	200052d8 	.word	0x200052d8
 80077f4:	20005248 	.word	0x20005248
 80077f8:	200052c8 	.word	0x200052c8

080077fc <__libc_init_array>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	2600      	movs	r6, #0
 8007800:	4d0c      	ldr	r5, [pc, #48]	; (8007834 <__libc_init_array+0x38>)
 8007802:	4c0d      	ldr	r4, [pc, #52]	; (8007838 <__libc_init_array+0x3c>)
 8007804:	1b64      	subs	r4, r4, r5
 8007806:	10a4      	asrs	r4, r4, #2
 8007808:	42a6      	cmp	r6, r4
 800780a:	d109      	bne.n	8007820 <__libc_init_array+0x24>
 800780c:	2600      	movs	r6, #0
 800780e:	f001 ff95 	bl	800973c <_init>
 8007812:	4d0a      	ldr	r5, [pc, #40]	; (800783c <__libc_init_array+0x40>)
 8007814:	4c0a      	ldr	r4, [pc, #40]	; (8007840 <__libc_init_array+0x44>)
 8007816:	1b64      	subs	r4, r4, r5
 8007818:	10a4      	asrs	r4, r4, #2
 800781a:	42a6      	cmp	r6, r4
 800781c:	d105      	bne.n	800782a <__libc_init_array+0x2e>
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	00b3      	lsls	r3, r6, #2
 8007822:	58eb      	ldr	r3, [r5, r3]
 8007824:	4798      	blx	r3
 8007826:	3601      	adds	r6, #1
 8007828:	e7ee      	b.n	8007808 <__libc_init_array+0xc>
 800782a:	00b3      	lsls	r3, r6, #2
 800782c:	58eb      	ldr	r3, [r5, r3]
 800782e:	4798      	blx	r3
 8007830:	3601      	adds	r6, #1
 8007832:	e7f2      	b.n	800781a <__libc_init_array+0x1e>
 8007834:	0800a534 	.word	0x0800a534
 8007838:	0800a534 	.word	0x0800a534
 800783c:	0800a534 	.word	0x0800a534
 8007840:	0800a538 	.word	0x0800a538

08007844 <__locale_ctype_ptr_l>:
 8007844:	30ec      	adds	r0, #236	; 0xec
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	4770      	bx	lr
	...

0800784c <__locale_ctype_ptr>:
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <__locale_ctype_ptr+0x14>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d100      	bne.n	8007858 <__locale_ctype_ptr+0xc>
 8007856:	4b03      	ldr	r3, [pc, #12]	; (8007864 <__locale_ctype_ptr+0x18>)
 8007858:	33ec      	adds	r3, #236	; 0xec
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	20000244 	.word	0x20000244
 8007864:	20000090 	.word	0x20000090

08007868 <malloc>:
 8007868:	b510      	push	{r4, lr}
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <malloc+0x10>)
 800786c:	0001      	movs	r1, r0
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	f000 fae0 	bl	8007e34 <_malloc_r>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	20000244 	.word	0x20000244

0800787c <free>:
 800787c:	b510      	push	{r4, lr}
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <free+0x10>)
 8007880:	0001      	movs	r1, r0
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	f000 fa8c 	bl	8007da0 <_free_r>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	20000244 	.word	0x20000244

08007890 <__ascii_mbtowc>:
 8007890:	b082      	sub	sp, #8
 8007892:	2900      	cmp	r1, #0
 8007894:	d100      	bne.n	8007898 <__ascii_mbtowc+0x8>
 8007896:	a901      	add	r1, sp, #4
 8007898:	1e10      	subs	r0, r2, #0
 800789a:	d006      	beq.n	80078aa <__ascii_mbtowc+0x1a>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d006      	beq.n	80078ae <__ascii_mbtowc+0x1e>
 80078a0:	7813      	ldrb	r3, [r2, #0]
 80078a2:	600b      	str	r3, [r1, #0]
 80078a4:	7810      	ldrb	r0, [r2, #0]
 80078a6:	1e43      	subs	r3, r0, #1
 80078a8:	4198      	sbcs	r0, r3
 80078aa:	b002      	add	sp, #8
 80078ac:	4770      	bx	lr
 80078ae:	2002      	movs	r0, #2
 80078b0:	4240      	negs	r0, r0
 80078b2:	e7fa      	b.n	80078aa <__ascii_mbtowc+0x1a>

080078b4 <memcmp>:
 80078b4:	b530      	push	{r4, r5, lr}
 80078b6:	2400      	movs	r4, #0
 80078b8:	42a2      	cmp	r2, r4
 80078ba:	d101      	bne.n	80078c0 <memcmp+0xc>
 80078bc:	2000      	movs	r0, #0
 80078be:	e005      	b.n	80078cc <memcmp+0x18>
 80078c0:	5d03      	ldrb	r3, [r0, r4]
 80078c2:	1c65      	adds	r5, r4, #1
 80078c4:	5d0c      	ldrb	r4, [r1, r4]
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	d001      	beq.n	80078ce <memcmp+0x1a>
 80078ca:	1b18      	subs	r0, r3, r4
 80078cc:	bd30      	pop	{r4, r5, pc}
 80078ce:	002c      	movs	r4, r5
 80078d0:	e7f2      	b.n	80078b8 <memcmp+0x4>

080078d2 <memcpy>:
 80078d2:	2300      	movs	r3, #0
 80078d4:	b510      	push	{r4, lr}
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d100      	bne.n	80078dc <memcpy+0xa>
 80078da:	bd10      	pop	{r4, pc}
 80078dc:	5ccc      	ldrb	r4, [r1, r3]
 80078de:	54c4      	strb	r4, [r0, r3]
 80078e0:	3301      	adds	r3, #1
 80078e2:	e7f8      	b.n	80078d6 <memcpy+0x4>

080078e4 <memset>:
 80078e4:	0003      	movs	r3, r0
 80078e6:	1882      	adds	r2, r0, r2
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	7019      	strb	r1, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <validate_structure>:
 80078f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f6:	6801      	ldr	r1, [r0, #0]
 80078f8:	0004      	movs	r4, r0
 80078fa:	293b      	cmp	r1, #59	; 0x3b
 80078fc:	d90b      	bls.n	8007916 <validate_structure+0x22>
 80078fe:	223c      	movs	r2, #60	; 0x3c
 8007900:	4668      	mov	r0, sp
 8007902:	f000 fee1 	bl	80086c8 <div>
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	9900      	ldr	r1, [sp, #0]
 800790a:	9a01      	ldr	r2, [sp, #4]
 800790c:	185b      	adds	r3, r3, r1
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	2a00      	cmp	r2, #0
 8007912:	db6c      	blt.n	80079ee <validate_structure+0xfa>
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	6861      	ldr	r1, [r4, #4]
 8007918:	293b      	cmp	r1, #59	; 0x3b
 800791a:	d90b      	bls.n	8007934 <validate_structure+0x40>
 800791c:	223c      	movs	r2, #60	; 0x3c
 800791e:	4668      	mov	r0, sp
 8007920:	f000 fed2 	bl	80086c8 <div>
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	9900      	ldr	r1, [sp, #0]
 8007928:	9a01      	ldr	r2, [sp, #4]
 800792a:	185b      	adds	r3, r3, r1
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	2a00      	cmp	r2, #0
 8007930:	db62      	blt.n	80079f8 <validate_structure+0x104>
 8007932:	6062      	str	r2, [r4, #4]
 8007934:	68a1      	ldr	r1, [r4, #8]
 8007936:	2917      	cmp	r1, #23
 8007938:	d90b      	bls.n	8007952 <validate_structure+0x5e>
 800793a:	2218      	movs	r2, #24
 800793c:	4668      	mov	r0, sp
 800793e:	f000 fec3 	bl	80086c8 <div>
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	9900      	ldr	r1, [sp, #0]
 8007946:	9a01      	ldr	r2, [sp, #4]
 8007948:	185b      	adds	r3, r3, r1
 800794a:	60e3      	str	r3, [r4, #12]
 800794c:	2a00      	cmp	r2, #0
 800794e:	db58      	blt.n	8007a02 <validate_structure+0x10e>
 8007950:	60a2      	str	r2, [r4, #8]
 8007952:	6921      	ldr	r1, [r4, #16]
 8007954:	290b      	cmp	r1, #11
 8007956:	d90b      	bls.n	8007970 <validate_structure+0x7c>
 8007958:	220c      	movs	r2, #12
 800795a:	4668      	mov	r0, sp
 800795c:	f000 feb4 	bl	80086c8 <div>
 8007960:	6963      	ldr	r3, [r4, #20]
 8007962:	9900      	ldr	r1, [sp, #0]
 8007964:	9a01      	ldr	r2, [sp, #4]
 8007966:	185b      	adds	r3, r3, r1
 8007968:	6163      	str	r3, [r4, #20]
 800796a:	2a00      	cmp	r2, #0
 800796c:	db4e      	blt.n	8007a0c <validate_structure+0x118>
 800796e:	6122      	str	r2, [r4, #16]
 8007970:	6965      	ldr	r5, [r4, #20]
 8007972:	231c      	movs	r3, #28
 8007974:	07aa      	lsls	r2, r5, #30
 8007976:	d10f      	bne.n	8007998 <validate_structure+0xa4>
 8007978:	2164      	movs	r1, #100	; 0x64
 800797a:	0028      	movs	r0, r5
 800797c:	f7f8 fd44 	bl	8000408 <__aeabi_idivmod>
 8007980:	231d      	movs	r3, #29
 8007982:	2900      	cmp	r1, #0
 8007984:	d108      	bne.n	8007998 <validate_structure+0xa4>
 8007986:	4b3d      	ldr	r3, [pc, #244]	; (8007a7c <validate_structure+0x188>)
 8007988:	3191      	adds	r1, #145	; 0x91
 800798a:	18e8      	adds	r0, r5, r3
 800798c:	31ff      	adds	r1, #255	; 0xff
 800798e:	f7f8 fd3b 	bl	8000408 <__aeabi_idivmod>
 8007992:	424b      	negs	r3, r1
 8007994:	414b      	adcs	r3, r1
 8007996:	331c      	adds	r3, #28
 8007998:	68e2      	ldr	r2, [r4, #12]
 800799a:	2a00      	cmp	r2, #0
 800799c:	dd3b      	ble.n	8007a16 <validate_structure+0x122>
 800799e:	2602      	movs	r6, #2
 80079a0:	4f37      	ldr	r7, [pc, #220]	; (8007a80 <validate_structure+0x18c>)
 80079a2:	6921      	ldr	r1, [r4, #16]
 80079a4:	68e2      	ldr	r2, [r4, #12]
 80079a6:	2901      	cmp	r1, #1
 80079a8:	d061      	beq.n	8007a6e <validate_structure+0x17a>
 80079aa:	0088      	lsls	r0, r1, #2
 80079ac:	59c0      	ldr	r0, [r0, r7]
 80079ae:	4282      	cmp	r2, r0
 80079b0:	dd35      	ble.n	8007a1e <validate_structure+0x12a>
 80079b2:	1a12      	subs	r2, r2, r0
 80079b4:	3101      	adds	r1, #1
 80079b6:	60e2      	str	r2, [r4, #12]
 80079b8:	6121      	str	r1, [r4, #16]
 80079ba:	290c      	cmp	r1, #12
 80079bc:	d1f1      	bne.n	80079a2 <validate_structure+0xae>
 80079be:	2300      	movs	r3, #0
 80079c0:	6965      	ldr	r5, [r4, #20]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	1c68      	adds	r0, r5, #1
 80079c6:	6160      	str	r0, [r4, #20]
 80079c8:	331c      	adds	r3, #28
 80079ca:	0782      	lsls	r2, r0, #30
 80079cc:	d1e9      	bne.n	80079a2 <validate_structure+0xae>
 80079ce:	3158      	adds	r1, #88	; 0x58
 80079d0:	f7f8 fd1a 	bl	8000408 <__aeabi_idivmod>
 80079d4:	231d      	movs	r3, #29
 80079d6:	2900      	cmp	r1, #0
 80079d8:	d1e3      	bne.n	80079a2 <validate_structure+0xae>
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <validate_structure+0x190>)
 80079dc:	3191      	adds	r1, #145	; 0x91
 80079de:	18e8      	adds	r0, r5, r3
 80079e0:	31ff      	adds	r1, #255	; 0xff
 80079e2:	f7f8 fd11 	bl	8000408 <__aeabi_idivmod>
 80079e6:	424b      	negs	r3, r1
 80079e8:	414b      	adcs	r3, r1
 80079ea:	331c      	adds	r3, #28
 80079ec:	e7d9      	b.n	80079a2 <validate_structure+0xae>
 80079ee:	323c      	adds	r2, #60	; 0x3c
 80079f0:	3b01      	subs	r3, #1
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	e78e      	b.n	8007916 <validate_structure+0x22>
 80079f8:	323c      	adds	r2, #60	; 0x3c
 80079fa:	3b01      	subs	r3, #1
 80079fc:	6062      	str	r2, [r4, #4]
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	e798      	b.n	8007934 <validate_structure+0x40>
 8007a02:	3218      	adds	r2, #24
 8007a04:	3b01      	subs	r3, #1
 8007a06:	60a2      	str	r2, [r4, #8]
 8007a08:	60e3      	str	r3, [r4, #12]
 8007a0a:	e7a2      	b.n	8007952 <validate_structure+0x5e>
 8007a0c:	320c      	adds	r2, #12
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	6122      	str	r2, [r4, #16]
 8007a12:	6163      	str	r3, [r4, #20]
 8007a14:	e7ac      	b.n	8007970 <validate_structure+0x7c>
 8007a16:	271d      	movs	r7, #29
 8007a18:	68e6      	ldr	r6, [r4, #12]
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	dd00      	ble.n	8007a20 <validate_structure+0x12c>
 8007a1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	3a01      	subs	r2, #1
 8007a24:	6122      	str	r2, [r4, #16]
 8007a26:	3201      	adds	r2, #1
 8007a28:	d117      	bne.n	8007a5a <validate_structure+0x166>
 8007a2a:	230b      	movs	r3, #11
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	6965      	ldr	r5, [r4, #20]
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	1e68      	subs	r0, r5, #1
 8007a34:	6160      	str	r0, [r4, #20]
 8007a36:	3311      	adds	r3, #17
 8007a38:	4210      	tst	r0, r2
 8007a3a:	d10e      	bne.n	8007a5a <validate_structure+0x166>
 8007a3c:	2164      	movs	r1, #100	; 0x64
 8007a3e:	f7f8 fce3 	bl	8000408 <__aeabi_idivmod>
 8007a42:	003b      	movs	r3, r7
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d108      	bne.n	8007a5a <validate_structure+0x166>
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <validate_structure+0x194>)
 8007a4a:	3191      	adds	r1, #145	; 0x91
 8007a4c:	18e8      	adds	r0, r5, r3
 8007a4e:	31ff      	adds	r1, #255	; 0xff
 8007a50:	f7f8 fcda 	bl	8000408 <__aeabi_idivmod>
 8007a54:	424b      	negs	r3, r1
 8007a56:	414b      	adcs	r3, r1
 8007a58:	331c      	adds	r3, #28
 8007a5a:	6921      	ldr	r1, [r4, #16]
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	2901      	cmp	r1, #1
 8007a60:	d002      	beq.n	8007a68 <validate_structure+0x174>
 8007a62:	4a07      	ldr	r2, [pc, #28]	; (8007a80 <validate_structure+0x18c>)
 8007a64:	0089      	lsls	r1, r1, #2
 8007a66:	588a      	ldr	r2, [r1, r2]
 8007a68:	1996      	adds	r6, r2, r6
 8007a6a:	60e6      	str	r6, [r4, #12]
 8007a6c:	e7d4      	b.n	8007a18 <validate_structure+0x124>
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	dad5      	bge.n	8007a1e <validate_structure+0x12a>
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	60e2      	str	r2, [r4, #12]
 8007a76:	6126      	str	r6, [r4, #16]
 8007a78:	e793      	b.n	80079a2 <validate_structure+0xae>
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	0000076c 	.word	0x0000076c
 8007a80:	0800a27c 	.word	0x0800a27c
 8007a84:	0000076d 	.word	0x0000076d
 8007a88:	0000076b 	.word	0x0000076b

08007a8c <mktime>:
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	0004      	movs	r4, r0
 8007a92:	f000 fe77 	bl	8008784 <__gettzinfo>
 8007a96:	9004      	str	r0, [sp, #16]
 8007a98:	0020      	movs	r0, r4
 8007a9a:	f7ff ff2b 	bl	80078f4 <validate_structure>
 8007a9e:	233c      	movs	r3, #60	; 0x3c
 8007aa0:	6862      	ldr	r2, [r4, #4]
 8007aa2:	68a1      	ldr	r1, [r4, #8]
 8007aa4:	4353      	muls	r3, r2
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	6965      	ldr	r5, [r4, #20]
 8007aaa:	189b      	adds	r3, r3, r2
 8007aac:	22e1      	movs	r2, #225	; 0xe1
 8007aae:	0112      	lsls	r2, r2, #4
 8007ab0:	434a      	muls	r2, r1
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	68e2      	ldr	r2, [r4, #12]
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	1e50      	subs	r0, r2, #1
 8007abc:	4ab1      	ldr	r2, [pc, #708]	; (8007d84 <mktime+0x2f8>)
 8007abe:	0099      	lsls	r1, r3, #2
 8007ac0:	588a      	ldr	r2, [r1, r2]
 8007ac2:	1882      	adds	r2, r0, r2
 8007ac4:	9201      	str	r2, [sp, #4]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	dd12      	ble.n	8007af0 <mktime+0x64>
 8007aca:	07ab      	lsls	r3, r5, #30
 8007acc:	d110      	bne.n	8007af0 <mktime+0x64>
 8007ace:	2164      	movs	r1, #100	; 0x64
 8007ad0:	0028      	movs	r0, r5
 8007ad2:	f7f8 fc99 	bl	8000408 <__aeabi_idivmod>
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d107      	bne.n	8007aea <mktime+0x5e>
 8007ada:	4bab      	ldr	r3, [pc, #684]	; (8007d88 <mktime+0x2fc>)
 8007adc:	3191      	adds	r1, #145	; 0x91
 8007ade:	31ff      	adds	r1, #255	; 0xff
 8007ae0:	18e8      	adds	r0, r5, r3
 8007ae2:	f7f8 fc91 	bl	8000408 <__aeabi_idivmod>
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d102      	bne.n	8007af0 <mktime+0x64>
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	3301      	adds	r3, #1
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	4aa6      	ldr	r2, [pc, #664]	; (8007d8c <mktime+0x300>)
 8007af4:	61e3      	str	r3, [r4, #28]
 8007af6:	4ba6      	ldr	r3, [pc, #664]	; (8007d90 <mktime+0x304>)
 8007af8:	18eb      	adds	r3, r5, r3
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d900      	bls.n	8007b00 <mktime+0x74>
 8007afe:	e0f8      	b.n	8007cf2 <mktime+0x266>
 8007b00:	2346      	movs	r3, #70	; 0x46
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	2d46      	cmp	r5, #70	; 0x46
 8007b06:	dc00      	bgt.n	8007b0a <mktime+0x7e>
 8007b08:	e072      	b.n	8007bf0 <mktime+0x164>
 8007b0a:	27b7      	movs	r7, #183	; 0xb7
 8007b0c:	26c8      	movs	r6, #200	; 0xc8
 8007b0e:	007f      	lsls	r7, r7, #1
 8007b10:	0076      	lsls	r6, r6, #1
 8007b12:	2203      	movs	r2, #3
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	4213      	tst	r3, r2
 8007b18:	d168      	bne.n	8007bec <mktime+0x160>
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	2164      	movs	r1, #100	; 0x64
 8007b1e:	f7f8 fc73 	bl	8000408 <__aeabi_idivmod>
 8007b22:	003b      	movs	r3, r7
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d109      	bne.n	8007b3c <mktime+0xb0>
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	4a97      	ldr	r2, [pc, #604]	; (8007d88 <mktime+0x2fc>)
 8007b2c:	0031      	movs	r1, r6
 8007b2e:	1898      	adds	r0, r3, r2
 8007b30:	f7f8 fc6a 	bl	8000408 <__aeabi_idivmod>
 8007b34:	424b      	negs	r3, r1
 8007b36:	414b      	adcs	r3, r1
 8007b38:	336e      	adds	r3, #110	; 0x6e
 8007b3a:	33ff      	adds	r3, #255	; 0xff
 8007b3c:	9a01      	ldr	r2, [sp, #4]
 8007b3e:	18d3      	adds	r3, r2, r3
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	9b02      	ldr	r3, [sp, #8]
 8007b44:	3301      	adds	r3, #1
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	d1e2      	bne.n	8007b12 <mktime+0x86>
 8007b4c:	9a01      	ldr	r2, [sp, #4]
 8007b4e:	4b91      	ldr	r3, [pc, #580]	; (8007d94 <mktime+0x308>)
 8007b50:	4353      	muls	r3, r2
 8007b52:	9a03      	ldr	r2, [sp, #12]
 8007b54:	189b      	adds	r3, r3, r2
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	f000 fbea 	bl	8008330 <__tz_lock>
 8007b5c:	f000 fbea 	bl	8008334 <_tzset_unlocked>
 8007b60:	4b8d      	ldr	r3, [pc, #564]	; (8007d98 <mktime+0x30c>)
 8007b62:	681d      	ldr	r5, [r3, #0]
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	d100      	bne.n	8007b6a <mktime+0xde>
 8007b68:	e107      	b.n	8007d7a <mktime+0x2ee>
 8007b6a:	6963      	ldr	r3, [r4, #20]
 8007b6c:	4a86      	ldr	r2, [pc, #536]	; (8007d88 <mktime+0x2fc>)
 8007b6e:	6a26      	ldr	r6, [r4, #32]
 8007b70:	1898      	adds	r0, r3, r2
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	dd00      	ble.n	8007b78 <mktime+0xec>
 8007b76:	2601      	movs	r6, #1
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	d000      	beq.n	8007b84 <mktime+0xf8>
 8007b82:	e073      	b.n	8007c6c <mktime+0x1e0>
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	9d03      	ldr	r5, [sp, #12]
 8007b88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	1a1a      	subs	r2, r3, r0
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	1acf      	subs	r7, r1, r3
 8007b98:	42bd      	cmp	r5, r7
 8007b9a:	db00      	blt.n	8007b9e <mktime+0x112>
 8007b9c:	e06d      	b.n	8007c7a <mktime+0x1ee>
 8007b9e:	9904      	ldr	r1, [sp, #16]
 8007ba0:	6809      	ldr	r1, [r1, #0]
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	d100      	bne.n	8007ba8 <mktime+0x11c>
 8007ba6:	e06d      	b.n	8007c84 <mktime+0x1f8>
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	4291      	cmp	r1, r2
 8007bac:	da00      	bge.n	8007bb0 <mktime+0x124>
 8007bae:	e0e1      	b.n	8007d74 <mktime+0x2e8>
 8007bb0:	2501      	movs	r5, #1
 8007bb2:	42b9      	cmp	r1, r7
 8007bb4:	db00      	blt.n	8007bb8 <mktime+0x12c>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	db00      	blt.n	8007bbe <mktime+0x132>
 8007bbc:	e0a0      	b.n	8007d00 <mktime+0x274>
 8007bbe:	2d01      	cmp	r5, #1
 8007bc0:	d000      	beq.n	8007bc4 <mktime+0x138>
 8007bc2:	e0da      	b.n	8007d7a <mktime+0x2ee>
 8007bc4:	2501      	movs	r5, #1
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	199e      	adds	r6, r3, r6
 8007bce:	f000 fbb0 	bl	8008332 <__tz_unlock>
 8007bd2:	9801      	ldr	r0, [sp, #4]
 8007bd4:	6225      	str	r5, [r4, #32]
 8007bd6:	3004      	adds	r0, #4
 8007bd8:	2107      	movs	r1, #7
 8007bda:	f7f8 fc15 	bl	8000408 <__aeabi_idivmod>
 8007bde:	2900      	cmp	r1, #0
 8007be0:	da00      	bge.n	8007be4 <mktime+0x158>
 8007be2:	e084      	b.n	8007cee <mktime+0x262>
 8007be4:	61a1      	str	r1, [r4, #24]
 8007be6:	0030      	movs	r0, r6
 8007be8:	b007      	add	sp, #28
 8007bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bec:	236e      	movs	r3, #110	; 0x6e
 8007bee:	e7a4      	b.n	8007b3a <mktime+0xae>
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	d0ab      	beq.n	8007b4c <mktime+0xc0>
 8007bf4:	2645      	movs	r6, #69	; 0x45
 8007bf6:	2703      	movs	r7, #3
 8007bf8:	42ae      	cmp	r6, r5
 8007bfa:	dc17      	bgt.n	8007c2c <mktime+0x1a0>
 8007bfc:	423d      	tst	r5, r7
 8007bfe:	d130      	bne.n	8007c62 <mktime+0x1d6>
 8007c00:	2164      	movs	r1, #100	; 0x64
 8007c02:	0028      	movs	r0, r5
 8007c04:	f7f8 fc00 	bl	8000408 <__aeabi_idivmod>
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d12c      	bne.n	8007c66 <mktime+0x1da>
 8007c0c:	4b5e      	ldr	r3, [pc, #376]	; (8007d88 <mktime+0x2fc>)
 8007c0e:	3191      	adds	r1, #145	; 0x91
 8007c10:	18e8      	adds	r0, r5, r3
 8007c12:	31ff      	adds	r1, #255	; 0xff
 8007c14:	f7f8 fbf8 	bl	8000408 <__aeabi_idivmod>
 8007c18:	000b      	movs	r3, r1
 8007c1a:	4259      	negs	r1, r3
 8007c1c:	4159      	adcs	r1, r3
 8007c1e:	316e      	adds	r1, #110	; 0x6e
 8007c20:	31ff      	adds	r1, #255	; 0xff
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	9502      	str	r5, [sp, #8]
 8007c26:	1a5b      	subs	r3, r3, r1
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	e78f      	b.n	8007b4c <mktime+0xc0>
 8007c2c:	423e      	tst	r6, r7
 8007c2e:	d116      	bne.n	8007c5e <mktime+0x1d2>
 8007c30:	2164      	movs	r1, #100	; 0x64
 8007c32:	0030      	movs	r0, r6
 8007c34:	f7f8 fbe8 	bl	8000408 <__aeabi_idivmod>
 8007c38:	23b7      	movs	r3, #183	; 0xb7
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d109      	bne.n	8007c54 <mktime+0x1c8>
 8007c40:	4b51      	ldr	r3, [pc, #324]	; (8007d88 <mktime+0x2fc>)
 8007c42:	3191      	adds	r1, #145	; 0x91
 8007c44:	18f0      	adds	r0, r6, r3
 8007c46:	31ff      	adds	r1, #255	; 0xff
 8007c48:	f7f8 fbde 	bl	8000408 <__aeabi_idivmod>
 8007c4c:	424b      	negs	r3, r1
 8007c4e:	414b      	adcs	r3, r1
 8007c50:	336e      	adds	r3, #110	; 0x6e
 8007c52:	33ff      	adds	r3, #255	; 0xff
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	3e01      	subs	r6, #1
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	e7cc      	b.n	8007bf8 <mktime+0x16c>
 8007c5e:	236e      	movs	r3, #110	; 0x6e
 8007c60:	e7f7      	b.n	8007c52 <mktime+0x1c6>
 8007c62:	216e      	movs	r1, #110	; 0x6e
 8007c64:	e7dc      	b.n	8007c20 <mktime+0x194>
 8007c66:	21b7      	movs	r1, #183	; 0xb7
 8007c68:	0049      	lsls	r1, r1, #1
 8007c6a:	e7da      	b.n	8007c22 <mktime+0x196>
 8007c6c:	f000 fab2 	bl	80081d4 <__tzcalc_limits>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d000      	beq.n	8007c76 <mktime+0x1ea>
 8007c74:	e786      	b.n	8007b84 <mktime+0xf8>
 8007c76:	0035      	movs	r5, r6
 8007c78:	e7a1      	b.n	8007bbe <mktime+0x132>
 8007c7a:	9d03      	ldr	r5, [sp, #12]
 8007c7c:	1a09      	subs	r1, r1, r0
 8007c7e:	428d      	cmp	r5, r1
 8007c80:	dbf9      	blt.n	8007c76 <mktime+0x1ea>
 8007c82:	e78c      	b.n	8007b9e <mktime+0x112>
 8007c84:	9d03      	ldr	r5, [sp, #12]
 8007c86:	4295      	cmp	r5, r2
 8007c88:	da36      	bge.n	8007cf8 <mktime+0x26c>
 8007c8a:	9a03      	ldr	r2, [sp, #12]
 8007c8c:	2501      	movs	r5, #1
 8007c8e:	42ba      	cmp	r2, r7
 8007c90:	da00      	bge.n	8007c94 <mktime+0x208>
 8007c92:	e791      	b.n	8007bb8 <mktime+0x12c>
 8007c94:	000d      	movs	r5, r1
 8007c96:	e78f      	b.n	8007bb8 <mktime+0x12c>
 8007c98:	2701      	movs	r7, #1
 8007c9a:	427f      	negs	r7, r7
 8007c9c:	e04b      	b.n	8007d36 <mktime+0x2aa>
 8007c9e:	21b6      	movs	r1, #182	; 0xb6
 8007ca0:	0049      	lsls	r1, r1, #1
 8007ca2:	61e1      	str	r1, [r4, #28]
 8007ca4:	e78b      	b.n	8007bbe <mktime+0x132>
 8007ca6:	216e      	movs	r1, #110	; 0x6e
 8007ca8:	e062      	b.n	8007d70 <mktime+0x2e4>
 8007caa:	9a02      	ldr	r2, [sp, #8]
 8007cac:	421a      	tst	r2, r3
 8007cae:	d117      	bne.n	8007ce0 <mktime+0x254>
 8007cb0:	2164      	movs	r1, #100	; 0x64
 8007cb2:	0010      	movs	r0, r2
 8007cb4:	f7f8 fba8 	bl	8000408 <__aeabi_idivmod>
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	d113      	bne.n	8007ce4 <mktime+0x258>
 8007cbc:	4a32      	ldr	r2, [pc, #200]	; (8007d88 <mktime+0x2fc>)
 8007cbe:	9b02      	ldr	r3, [sp, #8]
 8007cc0:	4694      	mov	ip, r2
 8007cc2:	3191      	adds	r1, #145	; 0x91
 8007cc4:	4463      	add	r3, ip
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	31ff      	adds	r1, #255	; 0xff
 8007cca:	f7f8 fb9d 	bl	8000408 <__aeabi_idivmod>
 8007cce:	000b      	movs	r3, r1
 8007cd0:	4259      	negs	r1, r3
 8007cd2:	4159      	adcs	r1, r3
 8007cd4:	316e      	adds	r1, #110	; 0x6e
 8007cd6:	31ff      	adds	r1, #255	; 0xff
 8007cd8:	42b9      	cmp	r1, r7
 8007cda:	dd06      	ble.n	8007cea <mktime+0x25e>
 8007cdc:	61e7      	str	r7, [r4, #28]
 8007cde:	e76e      	b.n	8007bbe <mktime+0x132>
 8007ce0:	216e      	movs	r1, #110	; 0x6e
 8007ce2:	e7f8      	b.n	8007cd6 <mktime+0x24a>
 8007ce4:	21b7      	movs	r1, #183	; 0xb7
 8007ce6:	0049      	lsls	r1, r1, #1
 8007ce8:	e7f6      	b.n	8007cd8 <mktime+0x24c>
 8007cea:	1a7f      	subs	r7, r7, r1
 8007cec:	e7f6      	b.n	8007cdc <mktime+0x250>
 8007cee:	3107      	adds	r1, #7
 8007cf0:	e778      	b.n	8007be4 <mktime+0x158>
 8007cf2:	2601      	movs	r6, #1
 8007cf4:	4276      	negs	r6, r6
 8007cf6:	e776      	b.n	8007be6 <mktime+0x15a>
 8007cf8:	2501      	movs	r5, #1
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	da00      	bge.n	8007d00 <mktime+0x274>
 8007cfe:	e761      	b.n	8007bc4 <mktime+0x138>
 8007d00:	406e      	eors	r6, r5
 8007d02:	2e01      	cmp	r6, #1
 8007d04:	d000      	beq.n	8007d08 <mktime+0x27c>
 8007d06:	e75a      	b.n	8007bbe <mktime+0x132>
 8007d08:	1a1b      	subs	r3, r3, r0
 8007d0a:	2d00      	cmp	r5, #0
 8007d0c:	d100      	bne.n	8007d10 <mktime+0x284>
 8007d0e:	425b      	negs	r3, r3
 8007d10:	6822      	ldr	r2, [r4, #0]
 8007d12:	0020      	movs	r0, r4
 8007d14:	18d2      	adds	r2, r2, r3
 8007d16:	6022      	str	r2, [r4, #0]
 8007d18:	9a03      	ldr	r2, [sp, #12]
 8007d1a:	68e7      	ldr	r7, [r4, #12]
 8007d1c:	18d3      	adds	r3, r2, r3
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	f7ff fde8 	bl	80078f4 <validate_structure>
 8007d24:	68e3      	ldr	r3, [r4, #12]
 8007d26:	1bdf      	subs	r7, r3, r7
 8007d28:	d100      	bne.n	8007d2c <mktime+0x2a0>
 8007d2a:	e748      	b.n	8007bbe <mktime+0x132>
 8007d2c:	2f01      	cmp	r7, #1
 8007d2e:	dcb3      	bgt.n	8007c98 <mktime+0x20c>
 8007d30:	1c7b      	adds	r3, r7, #1
 8007d32:	da00      	bge.n	8007d36 <mktime+0x2aa>
 8007d34:	0037      	movs	r7, r6
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	69e2      	ldr	r2, [r4, #28]
 8007d3a:	19db      	adds	r3, r3, r7
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	2303      	movs	r3, #3
 8007d40:	18bf      	adds	r7, r7, r2
 8007d42:	d5b2      	bpl.n	8007caa <mktime+0x21e>
 8007d44:	9a02      	ldr	r2, [sp, #8]
 8007d46:	1e50      	subs	r0, r2, #1
 8007d48:	4218      	tst	r0, r3
 8007d4a:	d1a8      	bne.n	8007c9e <mktime+0x212>
 8007d4c:	2164      	movs	r1, #100	; 0x64
 8007d4e:	f7f8 fb5b 	bl	8000408 <__aeabi_idivmod>
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d1a7      	bne.n	8007ca6 <mktime+0x21a>
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <mktime+0x310>)
 8007d58:	9b02      	ldr	r3, [sp, #8]
 8007d5a:	4694      	mov	ip, r2
 8007d5c:	3191      	adds	r1, #145	; 0x91
 8007d5e:	4463      	add	r3, ip
 8007d60:	0018      	movs	r0, r3
 8007d62:	31ff      	adds	r1, #255	; 0xff
 8007d64:	f7f8 fb50 	bl	8000408 <__aeabi_idivmod>
 8007d68:	000b      	movs	r3, r1
 8007d6a:	4259      	negs	r1, r3
 8007d6c:	4159      	adcs	r1, r3
 8007d6e:	316d      	adds	r1, #109	; 0x6d
 8007d70:	31ff      	adds	r1, #255	; 0xff
 8007d72:	e796      	b.n	8007ca2 <mktime+0x216>
 8007d74:	2500      	movs	r5, #0
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	dac2      	bge.n	8007d00 <mktime+0x274>
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	6a1e      	ldr	r6, [r3, #32]
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	199e      	adds	r6, r3, r6
 8007d82:	e724      	b.n	8007bce <mktime+0x142>
 8007d84:	0800a2ac 	.word	0x0800a2ac
 8007d88:	0000076c 	.word	0x0000076c
 8007d8c:	00004e20 	.word	0x00004e20
 8007d90:	00002710 	.word	0x00002710
 8007d94:	00015180 	.word	0x00015180
 8007d98:	20004004 	.word	0x20004004
 8007d9c:	0000076b 	.word	0x0000076b

08007da0 <_free_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	0005      	movs	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d010      	beq.n	8007dca <_free_r+0x2a>
 8007da8:	1f0c      	subs	r4, r1, #4
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da00      	bge.n	8007db2 <_free_r+0x12>
 8007db0:	18e4      	adds	r4, r4, r3
 8007db2:	0028      	movs	r0, r5
 8007db4:	f000 fcea 	bl	800878c <__malloc_lock>
 8007db8:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <_free_r+0x90>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <_free_r+0x2c>
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	6014      	str	r4, [r2, #0]
 8007dc4:	0028      	movs	r0, r5
 8007dc6:	f000 fce2 	bl	800878e <__malloc_unlock>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d909      	bls.n	8007de4 <_free_r+0x44>
 8007dd0:	6821      	ldr	r1, [r4, #0]
 8007dd2:	1860      	adds	r0, r4, r1
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d1f3      	bne.n	8007dc0 <_free_r+0x20>
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	1841      	adds	r1, r0, r1
 8007dde:	6021      	str	r1, [r4, #0]
 8007de0:	e7ee      	b.n	8007dc0 <_free_r+0x20>
 8007de2:	0013      	movs	r3, r2
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d001      	beq.n	8007dee <_free_r+0x4e>
 8007dea:	42a2      	cmp	r2, r4
 8007dec:	d9f9      	bls.n	8007de2 <_free_r+0x42>
 8007dee:	6819      	ldr	r1, [r3, #0]
 8007df0:	1858      	adds	r0, r3, r1
 8007df2:	42a0      	cmp	r0, r4
 8007df4:	d10b      	bne.n	8007e0e <_free_r+0x6e>
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	1809      	adds	r1, r1, r0
 8007dfa:	1858      	adds	r0, r3, r1
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	4282      	cmp	r2, r0
 8007e00:	d1e0      	bne.n	8007dc4 <_free_r+0x24>
 8007e02:	6810      	ldr	r0, [r2, #0]
 8007e04:	6852      	ldr	r2, [r2, #4]
 8007e06:	1841      	adds	r1, r0, r1
 8007e08:	6019      	str	r1, [r3, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
 8007e0c:	e7da      	b.n	8007dc4 <_free_r+0x24>
 8007e0e:	42a0      	cmp	r0, r4
 8007e10:	d902      	bls.n	8007e18 <_free_r+0x78>
 8007e12:	230c      	movs	r3, #12
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	e7d5      	b.n	8007dc4 <_free_r+0x24>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	1860      	adds	r0, r4, r1
 8007e1c:	4282      	cmp	r2, r0
 8007e1e:	d103      	bne.n	8007e28 <_free_r+0x88>
 8007e20:	6810      	ldr	r0, [r2, #0]
 8007e22:	6852      	ldr	r2, [r2, #4]
 8007e24:	1841      	adds	r1, r0, r1
 8007e26:	6021      	str	r1, [r4, #0]
 8007e28:	6062      	str	r2, [r4, #4]
 8007e2a:	605c      	str	r4, [r3, #4]
 8007e2c:	e7ca      	b.n	8007dc4 <_free_r+0x24>
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	20003fe0 	.word	0x20003fe0

08007e34 <_malloc_r>:
 8007e34:	2303      	movs	r3, #3
 8007e36:	b570      	push	{r4, r5, r6, lr}
 8007e38:	1ccd      	adds	r5, r1, #3
 8007e3a:	439d      	bics	r5, r3
 8007e3c:	3508      	adds	r5, #8
 8007e3e:	0006      	movs	r6, r0
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	d21e      	bcs.n	8007e82 <_malloc_r+0x4e>
 8007e44:	250c      	movs	r5, #12
 8007e46:	42a9      	cmp	r1, r5
 8007e48:	d81d      	bhi.n	8007e86 <_malloc_r+0x52>
 8007e4a:	0030      	movs	r0, r6
 8007e4c:	f000 fc9e 	bl	800878c <__malloc_lock>
 8007e50:	4a25      	ldr	r2, [pc, #148]	; (8007ee8 <_malloc_r+0xb4>)
 8007e52:	6814      	ldr	r4, [r2, #0]
 8007e54:	0021      	movs	r1, r4
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d119      	bne.n	8007e8e <_malloc_r+0x5a>
 8007e5a:	4c24      	ldr	r4, [pc, #144]	; (8007eec <_malloc_r+0xb8>)
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d103      	bne.n	8007e6a <_malloc_r+0x36>
 8007e62:	0030      	movs	r0, r6
 8007e64:	f000 f844 	bl	8007ef0 <_sbrk_r>
 8007e68:	6020      	str	r0, [r4, #0]
 8007e6a:	0029      	movs	r1, r5
 8007e6c:	0030      	movs	r0, r6
 8007e6e:	f000 f83f 	bl	8007ef0 <_sbrk_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d12c      	bne.n	8007ed0 <_malloc_r+0x9c>
 8007e76:	230c      	movs	r3, #12
 8007e78:	0030      	movs	r0, r6
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f000 fc87 	bl	800878e <__malloc_unlock>
 8007e80:	e003      	b.n	8007e8a <_malloc_r+0x56>
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	dadf      	bge.n	8007e46 <_malloc_r+0x12>
 8007e86:	230c      	movs	r3, #12
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	680b      	ldr	r3, [r1, #0]
 8007e90:	1b5b      	subs	r3, r3, r5
 8007e92:	d41a      	bmi.n	8007eca <_malloc_r+0x96>
 8007e94:	2b0b      	cmp	r3, #11
 8007e96:	d903      	bls.n	8007ea0 <_malloc_r+0x6c>
 8007e98:	600b      	str	r3, [r1, #0]
 8007e9a:	18cc      	adds	r4, r1, r3
 8007e9c:	6025      	str	r5, [r4, #0]
 8007e9e:	e003      	b.n	8007ea8 <_malloc_r+0x74>
 8007ea0:	428c      	cmp	r4, r1
 8007ea2:	d10e      	bne.n	8007ec2 <_malloc_r+0x8e>
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	0030      	movs	r0, r6
 8007eaa:	f000 fc70 	bl	800878e <__malloc_unlock>
 8007eae:	0020      	movs	r0, r4
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	300b      	adds	r0, #11
 8007eb4:	1d23      	adds	r3, r4, #4
 8007eb6:	4390      	bics	r0, r2
 8007eb8:	1ac3      	subs	r3, r0, r3
 8007eba:	d0e7      	beq.n	8007e8c <_malloc_r+0x58>
 8007ebc:	425a      	negs	r2, r3
 8007ebe:	50e2      	str	r2, [r4, r3]
 8007ec0:	e7e4      	b.n	8007e8c <_malloc_r+0x58>
 8007ec2:	684b      	ldr	r3, [r1, #4]
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	000c      	movs	r4, r1
 8007ec8:	e7ee      	b.n	8007ea8 <_malloc_r+0x74>
 8007eca:	000c      	movs	r4, r1
 8007ecc:	6849      	ldr	r1, [r1, #4]
 8007ece:	e7c2      	b.n	8007e56 <_malloc_r+0x22>
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	439c      	bics	r4, r3
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	d0e0      	beq.n	8007e9c <_malloc_r+0x68>
 8007eda:	1a21      	subs	r1, r4, r0
 8007edc:	0030      	movs	r0, r6
 8007ede:	f000 f807 	bl	8007ef0 <_sbrk_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d1da      	bne.n	8007e9c <_malloc_r+0x68>
 8007ee6:	e7c6      	b.n	8007e76 <_malloc_r+0x42>
 8007ee8:	20003fe0 	.word	0x20003fe0
 8007eec:	20003fe4 	.word	0x20003fe4

08007ef0 <_sbrk_r>:
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	4c06      	ldr	r4, [pc, #24]	; (8007f10 <_sbrk_r+0x20>)
 8007ef6:	0005      	movs	r5, r0
 8007ef8:	0008      	movs	r0, r1
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	f001 fc0e 	bl	800971c <_sbrk>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d103      	bne.n	8007f0c <_sbrk_r+0x1c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d000      	beq.n	8007f0c <_sbrk_r+0x1c>
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	20005368 	.word	0x20005368

08007f14 <sniprintf>:
 8007f14:	b40c      	push	{r2, r3}
 8007f16:	b530      	push	{r4, r5, lr}
 8007f18:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <sniprintf+0x60>)
 8007f1a:	b09d      	sub	sp, #116	; 0x74
 8007f1c:	1e0c      	subs	r4, r1, #0
 8007f1e:	681d      	ldr	r5, [r3, #0]
 8007f20:	da08      	bge.n	8007f34 <sniprintf+0x20>
 8007f22:	238b      	movs	r3, #139	; 0x8b
 8007f24:	2001      	movs	r0, #1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	4240      	negs	r0, r0
 8007f2a:	b01d      	add	sp, #116	; 0x74
 8007f2c:	bc30      	pop	{r4, r5}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	b002      	add	sp, #8
 8007f32:	4718      	bx	r3
 8007f34:	2382      	movs	r3, #130	; 0x82
 8007f36:	a902      	add	r1, sp, #8
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	818b      	strh	r3, [r1, #12]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9002      	str	r0, [sp, #8]
 8007f40:	6108      	str	r0, [r1, #16]
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d000      	beq.n	8007f48 <sniprintf+0x34>
 8007f46:	1e63      	subs	r3, r4, #1
 8007f48:	608b      	str	r3, [r1, #8]
 8007f4a:	614b      	str	r3, [r1, #20]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	425b      	negs	r3, r3
 8007f50:	81cb      	strh	r3, [r1, #14]
 8007f52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f54:	ab21      	add	r3, sp, #132	; 0x84
 8007f56:	0028      	movs	r0, r5
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	f000 fc7b 	bl	8008854 <_svfiprintf_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	da01      	bge.n	8007f66 <sniprintf+0x52>
 8007f62:	238b      	movs	r3, #139	; 0x8b
 8007f64:	602b      	str	r3, [r5, #0]
 8007f66:	2c00      	cmp	r4, #0
 8007f68:	d0df      	beq.n	8007f2a <sniprintf+0x16>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9a02      	ldr	r2, [sp, #8]
 8007f6e:	7013      	strb	r3, [r2, #0]
 8007f70:	e7db      	b.n	8007f2a <sniprintf+0x16>
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	20000244 	.word	0x20000244

08007f78 <siprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	b09d      	sub	sp, #116	; 0x74
 8007f7e:	a902      	add	r1, sp, #8
 8007f80:	9002      	str	r0, [sp, #8]
 8007f82:	6108      	str	r0, [r1, #16]
 8007f84:	480b      	ldr	r0, [pc, #44]	; (8007fb4 <siprintf+0x3c>)
 8007f86:	2482      	movs	r4, #130	; 0x82
 8007f88:	6088      	str	r0, [r1, #8]
 8007f8a:	6148      	str	r0, [r1, #20]
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	4240      	negs	r0, r0
 8007f90:	ab1f      	add	r3, sp, #124	; 0x7c
 8007f92:	81c8      	strh	r0, [r1, #14]
 8007f94:	4808      	ldr	r0, [pc, #32]	; (8007fb8 <siprintf+0x40>)
 8007f96:	cb04      	ldmia	r3!, {r2}
 8007f98:	00a4      	lsls	r4, r4, #2
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	818c      	strh	r4, [r1, #12]
 8007fa0:	f000 fc58 	bl	8008854 <_svfiprintf_r>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9a02      	ldr	r2, [sp, #8]
 8007fa8:	7013      	strb	r3, [r2, #0]
 8007faa:	b01d      	add	sp, #116	; 0x74
 8007fac:	bc10      	pop	{r4}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	b003      	add	sp, #12
 8007fb2:	4718      	bx	r3
 8007fb4:	7fffffff 	.word	0x7fffffff
 8007fb8:	20000244 	.word	0x20000244

08007fbc <strcat>:
 8007fbc:	0002      	movs	r2, r0
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	7813      	ldrb	r3, [r2, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <strcat+0x16>
 8007fc6:	5ccc      	ldrb	r4, [r1, r3]
 8007fc8:	54d4      	strb	r4, [r2, r3]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	d1fa      	bne.n	8007fc6 <strcat+0xa>
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	3201      	adds	r2, #1
 8007fd4:	e7f4      	b.n	8007fc0 <strcat+0x4>

08007fd6 <strchr>:
 8007fd6:	b2c9      	uxtb	r1, r1
 8007fd8:	7803      	ldrb	r3, [r0, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <strchr+0x12>
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	d100      	bne.n	8007fe4 <strchr+0xe>
 8007fe2:	4770      	bx	lr
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	e7f7      	b.n	8007fd8 <strchr+0x2>
 8007fe8:	424b      	negs	r3, r1
 8007fea:	4159      	adcs	r1, r3
 8007fec:	4249      	negs	r1, r1
 8007fee:	4008      	ands	r0, r1
 8007ff0:	e7f7      	b.n	8007fe2 <strchr+0xc>

08007ff2 <strcpy>:
 8007ff2:	1c03      	adds	r3, r0, #0
 8007ff4:	780a      	ldrb	r2, [r1, #0]
 8007ff6:	3101      	adds	r1, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d1f9      	bne.n	8007ff4 <strcpy+0x2>
 8008000:	4770      	bx	lr

08008002 <strncmp>:
 8008002:	2300      	movs	r3, #0
 8008004:	b530      	push	{r4, r5, lr}
 8008006:	429a      	cmp	r2, r3
 8008008:	d00a      	beq.n	8008020 <strncmp+0x1e>
 800800a:	3a01      	subs	r2, #1
 800800c:	5cc4      	ldrb	r4, [r0, r3]
 800800e:	5ccd      	ldrb	r5, [r1, r3]
 8008010:	42ac      	cmp	r4, r5
 8008012:	d104      	bne.n	800801e <strncmp+0x1c>
 8008014:	429a      	cmp	r2, r3
 8008016:	d002      	beq.n	800801e <strncmp+0x1c>
 8008018:	3301      	adds	r3, #1
 800801a:	2c00      	cmp	r4, #0
 800801c:	d1f6      	bne.n	800800c <strncmp+0xa>
 800801e:	1b63      	subs	r3, r4, r5
 8008020:	0018      	movs	r0, r3
 8008022:	bd30      	pop	{r4, r5, pc}

08008024 <strncpy>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	0004      	movs	r4, r0
 8008028:	2a00      	cmp	r2, #0
 800802a:	d100      	bne.n	800802e <strncpy+0xa>
 800802c:	bd70      	pop	{r4, r5, r6, pc}
 800802e:	780d      	ldrb	r5, [r1, #0]
 8008030:	1e56      	subs	r6, r2, #1
 8008032:	1c63      	adds	r3, r4, #1
 8008034:	7025      	strb	r5, [r4, #0]
 8008036:	3101      	adds	r1, #1
 8008038:	2d00      	cmp	r5, #0
 800803a:	d105      	bne.n	8008048 <strncpy+0x24>
 800803c:	18a4      	adds	r4, r4, r2
 800803e:	429c      	cmp	r4, r3
 8008040:	d0f4      	beq.n	800802c <strncpy+0x8>
 8008042:	701d      	strb	r5, [r3, #0]
 8008044:	3301      	adds	r3, #1
 8008046:	e7fa      	b.n	800803e <strncpy+0x1a>
 8008048:	001c      	movs	r4, r3
 800804a:	0032      	movs	r2, r6
 800804c:	e7ec      	b.n	8008028 <strncpy+0x4>

0800804e <strstr>:
 800804e:	b510      	push	{r4, lr}
 8008050:	0002      	movs	r2, r0
 8008052:	7800      	ldrb	r0, [r0, #0]
 8008054:	2800      	cmp	r0, #0
 8008056:	d104      	bne.n	8008062 <strstr+0x14>
 8008058:	7809      	ldrb	r1, [r1, #0]
 800805a:	2900      	cmp	r1, #0
 800805c:	d00d      	beq.n	800807a <strstr+0x2c>
 800805e:	bd10      	pop	{r4, pc}
 8008060:	3201      	adds	r2, #1
 8008062:	7810      	ldrb	r0, [r2, #0]
 8008064:	2800      	cmp	r0, #0
 8008066:	d0fa      	beq.n	800805e <strstr+0x10>
 8008068:	2300      	movs	r3, #0
 800806a:	5cc8      	ldrb	r0, [r1, r3]
 800806c:	2800      	cmp	r0, #0
 800806e:	d004      	beq.n	800807a <strstr+0x2c>
 8008070:	5cd4      	ldrb	r4, [r2, r3]
 8008072:	4284      	cmp	r4, r0
 8008074:	d1f4      	bne.n	8008060 <strstr+0x12>
 8008076:	3301      	adds	r3, #1
 8008078:	e7f7      	b.n	800806a <strstr+0x1c>
 800807a:	0010      	movs	r0, r2
 800807c:	e7ef      	b.n	800805e <strstr+0x10>
	...

08008080 <_strtol_l.isra.0>:
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008082:	001f      	movs	r7, r3
 8008084:	000e      	movs	r6, r1
 8008086:	b087      	sub	sp, #28
 8008088:	9005      	str	r0, [sp, #20]
 800808a:	9103      	str	r1, [sp, #12]
 800808c:	9202      	str	r2, [sp, #8]
 800808e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008090:	7834      	ldrb	r4, [r6, #0]
 8008092:	f7ff fbd7 	bl	8007844 <__locale_ctype_ptr_l>
 8008096:	2208      	movs	r2, #8
 8008098:	1900      	adds	r0, r0, r4
 800809a:	7843      	ldrb	r3, [r0, #1]
 800809c:	1c75      	adds	r5, r6, #1
 800809e:	4013      	ands	r3, r2
 80080a0:	d10c      	bne.n	80080bc <_strtol_l.isra.0+0x3c>
 80080a2:	2c2d      	cmp	r4, #45	; 0x2d
 80080a4:	d10c      	bne.n	80080c0 <_strtol_l.isra.0+0x40>
 80080a6:	3301      	adds	r3, #1
 80080a8:	782c      	ldrb	r4, [r5, #0]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	1cb5      	adds	r5, r6, #2
 80080ae:	2f00      	cmp	r7, #0
 80080b0:	d00c      	beq.n	80080cc <_strtol_l.isra.0+0x4c>
 80080b2:	2f10      	cmp	r7, #16
 80080b4:	d114      	bne.n	80080e0 <_strtol_l.isra.0+0x60>
 80080b6:	2c30      	cmp	r4, #48	; 0x30
 80080b8:	d00a      	beq.n	80080d0 <_strtol_l.isra.0+0x50>
 80080ba:	e011      	b.n	80080e0 <_strtol_l.isra.0+0x60>
 80080bc:	002e      	movs	r6, r5
 80080be:	e7e6      	b.n	800808e <_strtol_l.isra.0+0xe>
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2c2b      	cmp	r4, #43	; 0x2b
 80080c4:	d1f3      	bne.n	80080ae <_strtol_l.isra.0+0x2e>
 80080c6:	782c      	ldrb	r4, [r5, #0]
 80080c8:	1cb5      	adds	r5, r6, #2
 80080ca:	e7f0      	b.n	80080ae <_strtol_l.isra.0+0x2e>
 80080cc:	2c30      	cmp	r4, #48	; 0x30
 80080ce:	d12f      	bne.n	8008130 <_strtol_l.isra.0+0xb0>
 80080d0:	2220      	movs	r2, #32
 80080d2:	782b      	ldrb	r3, [r5, #0]
 80080d4:	4393      	bics	r3, r2
 80080d6:	2b58      	cmp	r3, #88	; 0x58
 80080d8:	d151      	bne.n	800817e <_strtol_l.isra.0+0xfe>
 80080da:	2710      	movs	r7, #16
 80080dc:	786c      	ldrb	r4, [r5, #1]
 80080de:	3502      	adds	r5, #2
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	4a29      	ldr	r2, [pc, #164]	; (8008188 <_strtol_l.isra.0+0x108>)
 80080e4:	0039      	movs	r1, r7
 80080e6:	189e      	adds	r6, r3, r2
 80080e8:	0030      	movs	r0, r6
 80080ea:	f7f8 f8a3 	bl	8000234 <__aeabi_uidivmod>
 80080ee:	0030      	movs	r0, r6
 80080f0:	9104      	str	r1, [sp, #16]
 80080f2:	0039      	movs	r1, r7
 80080f4:	f7f8 f818 	bl	8000128 <__udivsi3>
 80080f8:	2101      	movs	r1, #1
 80080fa:	2300      	movs	r3, #0
 80080fc:	4249      	negs	r1, r1
 80080fe:	0002      	movs	r2, r0
 8008100:	468c      	mov	ip, r1
 8008102:	0018      	movs	r0, r3
 8008104:	0021      	movs	r1, r4
 8008106:	3930      	subs	r1, #48	; 0x30
 8008108:	2909      	cmp	r1, #9
 800810a:	d813      	bhi.n	8008134 <_strtol_l.isra.0+0xb4>
 800810c:	000c      	movs	r4, r1
 800810e:	42a7      	cmp	r7, r4
 8008110:	dd1c      	ble.n	800814c <_strtol_l.isra.0+0xcc>
 8008112:	1c59      	adds	r1, r3, #1
 8008114:	d009      	beq.n	800812a <_strtol_l.isra.0+0xaa>
 8008116:	4663      	mov	r3, ip
 8008118:	4282      	cmp	r2, r0
 800811a:	d306      	bcc.n	800812a <_strtol_l.isra.0+0xaa>
 800811c:	d102      	bne.n	8008124 <_strtol_l.isra.0+0xa4>
 800811e:	9904      	ldr	r1, [sp, #16]
 8008120:	42a1      	cmp	r1, r4
 8008122:	db02      	blt.n	800812a <_strtol_l.isra.0+0xaa>
 8008124:	2301      	movs	r3, #1
 8008126:	4378      	muls	r0, r7
 8008128:	1820      	adds	r0, r4, r0
 800812a:	782c      	ldrb	r4, [r5, #0]
 800812c:	3501      	adds	r5, #1
 800812e:	e7e9      	b.n	8008104 <_strtol_l.isra.0+0x84>
 8008130:	270a      	movs	r7, #10
 8008132:	e7d5      	b.n	80080e0 <_strtol_l.isra.0+0x60>
 8008134:	0021      	movs	r1, r4
 8008136:	3941      	subs	r1, #65	; 0x41
 8008138:	2919      	cmp	r1, #25
 800813a:	d801      	bhi.n	8008140 <_strtol_l.isra.0+0xc0>
 800813c:	3c37      	subs	r4, #55	; 0x37
 800813e:	e7e6      	b.n	800810e <_strtol_l.isra.0+0x8e>
 8008140:	0021      	movs	r1, r4
 8008142:	3961      	subs	r1, #97	; 0x61
 8008144:	2919      	cmp	r1, #25
 8008146:	d801      	bhi.n	800814c <_strtol_l.isra.0+0xcc>
 8008148:	3c57      	subs	r4, #87	; 0x57
 800814a:	e7e0      	b.n	800810e <_strtol_l.isra.0+0x8e>
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	d108      	bne.n	8008162 <_strtol_l.isra.0+0xe2>
 8008150:	9a05      	ldr	r2, [sp, #20]
 8008152:	3323      	adds	r3, #35	; 0x23
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	0030      	movs	r0, r6
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10b      	bne.n	8008176 <_strtol_l.isra.0+0xf6>
 800815e:	b007      	add	sp, #28
 8008160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	2a00      	cmp	r2, #0
 8008166:	d000      	beq.n	800816a <_strtol_l.isra.0+0xea>
 8008168:	4240      	negs	r0, r0
 800816a:	9a02      	ldr	r2, [sp, #8]
 800816c:	2a00      	cmp	r2, #0
 800816e:	d0f6      	beq.n	800815e <_strtol_l.isra.0+0xde>
 8008170:	9a03      	ldr	r2, [sp, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d000      	beq.n	8008178 <_strtol_l.isra.0+0xf8>
 8008176:	1e6a      	subs	r2, r5, #1
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	e7ef      	b.n	800815e <_strtol_l.isra.0+0xde>
 800817e:	2430      	movs	r4, #48	; 0x30
 8008180:	2f00      	cmp	r7, #0
 8008182:	d1ad      	bne.n	80080e0 <_strtol_l.isra.0+0x60>
 8008184:	3708      	adds	r7, #8
 8008186:	e7ab      	b.n	80080e0 <_strtol_l.isra.0+0x60>
 8008188:	7fffffff 	.word	0x7fffffff

0800818c <_strtol_r>:
 800818c:	b513      	push	{r0, r1, r4, lr}
 800818e:	4c05      	ldr	r4, [pc, #20]	; (80081a4 <_strtol_r+0x18>)
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	6a24      	ldr	r4, [r4, #32]
 8008194:	2c00      	cmp	r4, #0
 8008196:	d100      	bne.n	800819a <_strtol_r+0xe>
 8008198:	4c03      	ldr	r4, [pc, #12]	; (80081a8 <_strtol_r+0x1c>)
 800819a:	9400      	str	r4, [sp, #0]
 800819c:	f7ff ff70 	bl	8008080 <_strtol_l.isra.0>
 80081a0:	bd16      	pop	{r1, r2, r4, pc}
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	20000244 	.word	0x20000244
 80081a8:	20000090 	.word	0x20000090

080081ac <strtol>:
 80081ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ae:	0013      	movs	r3, r2
 80081b0:	4a06      	ldr	r2, [pc, #24]	; (80081cc <strtol+0x20>)
 80081b2:	0005      	movs	r5, r0
 80081b4:	6810      	ldr	r0, [r2, #0]
 80081b6:	6a04      	ldr	r4, [r0, #32]
 80081b8:	2c00      	cmp	r4, #0
 80081ba:	d100      	bne.n	80081be <strtol+0x12>
 80081bc:	4c04      	ldr	r4, [pc, #16]	; (80081d0 <strtol+0x24>)
 80081be:	000a      	movs	r2, r1
 80081c0:	9400      	str	r4, [sp, #0]
 80081c2:	0029      	movs	r1, r5
 80081c4:	f7ff ff5c 	bl	8008080 <_strtol_l.isra.0>
 80081c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	20000244 	.word	0x20000244
 80081d0:	20000090 	.word	0x20000090

080081d4 <__tzcalc_limits>:
 80081d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	0004      	movs	r4, r0
 80081da:	f000 fad3 	bl	8008784 <__gettzinfo>
 80081de:	4b4c      	ldr	r3, [pc, #304]	; (8008310 <__tzcalc_limits+0x13c>)
 80081e0:	0007      	movs	r7, r0
 80081e2:	2000      	movs	r0, #0
 80081e4:	429c      	cmp	r4, r3
 80081e6:	dd58      	ble.n	800829a <__tzcalc_limits+0xc6>
 80081e8:	256e      	movs	r5, #110	; 0x6e
 80081ea:	2164      	movs	r1, #100	; 0x64
 80081ec:	4b49      	ldr	r3, [pc, #292]	; (8008314 <__tzcalc_limits+0x140>)
 80081ee:	35ff      	adds	r5, #255	; 0xff
 80081f0:	18e0      	adds	r0, r4, r3
 80081f2:	4345      	muls	r5, r0
 80081f4:	4b48      	ldr	r3, [pc, #288]	; (8008318 <__tzcalc_limits+0x144>)
 80081f6:	607c      	str	r4, [r7, #4]
 80081f8:	18e0      	adds	r0, r4, r3
 80081fa:	4b48      	ldr	r3, [pc, #288]	; (800831c <__tzcalc_limits+0x148>)
 80081fc:	1080      	asrs	r0, r0, #2
 80081fe:	182d      	adds	r5, r5, r0
 8008200:	4249      	negs	r1, r1
 8008202:	18e0      	adds	r0, r4, r3
 8008204:	f7f8 f81a 	bl	800023c <__divsi3>
 8008208:	21c8      	movs	r1, #200	; 0xc8
 800820a:	4b45      	ldr	r3, [pc, #276]	; (8008320 <__tzcalc_limits+0x14c>)
 800820c:	182d      	adds	r5, r5, r0
 800820e:	0049      	lsls	r1, r1, #1
 8008210:	18e0      	adds	r0, r4, r3
 8008212:	f7f8 f813 	bl	800023c <__divsi3>
 8008216:	2164      	movs	r1, #100	; 0x64
 8008218:	182b      	adds	r3, r5, r0
 800821a:	0020      	movs	r0, r4
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	f7f8 f8f3 	bl	8000408 <__aeabi_idivmod>
 8008222:	9102      	str	r1, [sp, #8]
 8008224:	21c8      	movs	r1, #200	; 0xc8
 8008226:	0020      	movs	r0, r4
 8008228:	0049      	lsls	r1, r1, #1
 800822a:	f7f8 f8ed 	bl	8000408 <__aeabi_idivmod>
 800822e:	000a      	movs	r2, r1
 8008230:	4253      	negs	r3, r2
 8008232:	415a      	adcs	r2, r3
 8008234:	003b      	movs	r3, r7
 8008236:	3340      	adds	r3, #64	; 0x40
 8008238:	9307      	str	r3, [sp, #28]
 800823a:	2303      	movs	r3, #3
 800823c:	003d      	movs	r5, r7
 800823e:	401c      	ands	r4, r3
 8008240:	9103      	str	r1, [sp, #12]
 8008242:	9205      	str	r2, [sp, #20]
 8008244:	3508      	adds	r5, #8
 8008246:	9406      	str	r4, [sp, #24]
 8008248:	782b      	ldrb	r3, [r5, #0]
 800824a:	2b4a      	cmp	r3, #74	; 0x4a
 800824c:	d127      	bne.n	800829e <__tzcalc_limits+0xca>
 800824e:	9a01      	ldr	r2, [sp, #4]
 8008250:	68eb      	ldr	r3, [r5, #12]
 8008252:	18d1      	adds	r1, r2, r3
 8008254:	9a06      	ldr	r2, [sp, #24]
 8008256:	2a00      	cmp	r2, #0
 8008258:	d102      	bne.n	8008260 <__tzcalc_limits+0x8c>
 800825a:	9a02      	ldr	r2, [sp, #8]
 800825c:	2a00      	cmp	r2, #0
 800825e:	d103      	bne.n	8008268 <__tzcalc_limits+0x94>
 8008260:	2400      	movs	r4, #0
 8008262:	9a03      	ldr	r2, [sp, #12]
 8008264:	42a2      	cmp	r2, r4
 8008266:	d103      	bne.n	8008270 <__tzcalc_limits+0x9c>
 8008268:	2401      	movs	r4, #1
 800826a:	2b3b      	cmp	r3, #59	; 0x3b
 800826c:	dc00      	bgt.n	8008270 <__tzcalc_limits+0x9c>
 800826e:	2400      	movs	r4, #0
 8008270:	1864      	adds	r4, r4, r1
 8008272:	3c01      	subs	r4, #1
 8008274:	492b      	ldr	r1, [pc, #172]	; (8008324 <__tzcalc_limits+0x150>)
 8008276:	692b      	ldr	r3, [r5, #16]
 8008278:	434c      	muls	r4, r1
 800827a:	18e4      	adds	r4, r4, r3
 800827c:	69ab      	ldr	r3, [r5, #24]
 800827e:	18e4      	adds	r4, r4, r3
 8008280:	9b07      	ldr	r3, [sp, #28]
 8008282:	616c      	str	r4, [r5, #20]
 8008284:	351c      	adds	r5, #28
 8008286:	42ab      	cmp	r3, r5
 8008288:	d1de      	bne.n	8008248 <__tzcalc_limits+0x74>
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800828e:	2301      	movs	r3, #1
 8008290:	428a      	cmp	r2, r1
 8008292:	db00      	blt.n	8008296 <__tzcalc_limits+0xc2>
 8008294:	2300      	movs	r3, #0
 8008296:	2001      	movs	r0, #1
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	b009      	add	sp, #36	; 0x24
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829e:	2b44      	cmp	r3, #68	; 0x44
 80082a0:	d103      	bne.n	80082aa <__tzcalc_limits+0xd6>
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	68ea      	ldr	r2, [r5, #12]
 80082a6:	189c      	adds	r4, r3, r2
 80082a8:	e7e4      	b.n	8008274 <__tzcalc_limits+0xa0>
 80082aa:	9a06      	ldr	r2, [sp, #24]
 80082ac:	9b05      	ldr	r3, [sp, #20]
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	d103      	bne.n	80082ba <__tzcalc_limits+0xe6>
 80082b2:	9a02      	ldr	r2, [sp, #8]
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	d000      	beq.n	80082ba <__tzcalc_limits+0xe6>
 80082b8:	2301      	movs	r3, #1
 80082ba:	2230      	movs	r2, #48	; 0x30
 80082bc:	4353      	muls	r3, r2
 80082be:	4a1a      	ldr	r2, [pc, #104]	; (8008328 <__tzcalc_limits+0x154>)
 80082c0:	686e      	ldr	r6, [r5, #4]
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	001a      	movs	r2, r3
 80082c8:	2301      	movs	r3, #1
 80082ca:	9c01      	ldr	r4, [sp, #4]
 80082cc:	42b3      	cmp	r3, r6
 80082ce:	db18      	blt.n	8008302 <__tzcalc_limits+0x12e>
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	dc00      	bgt.n	80082d6 <__tzcalc_limits+0x102>
 80082d4:	2601      	movs	r6, #1
 80082d6:	1d20      	adds	r0, r4, #4
 80082d8:	2107      	movs	r1, #7
 80082da:	f7f8 f895 	bl	8000408 <__aeabi_idivmod>
 80082de:	68eb      	ldr	r3, [r5, #12]
 80082e0:	1a5b      	subs	r3, r3, r1
 80082e2:	d500      	bpl.n	80082e6 <__tzcalc_limits+0x112>
 80082e4:	3307      	adds	r3, #7
 80082e6:	2107      	movs	r1, #7
 80082e8:	68aa      	ldr	r2, [r5, #8]
 80082ea:	3a01      	subs	r2, #1
 80082ec:	4351      	muls	r1, r2
 80082ee:	18c9      	adds	r1, r1, r3
 80082f0:	4b0e      	ldr	r3, [pc, #56]	; (800832c <__tzcalc_limits+0x158>)
 80082f2:	18f6      	adds	r6, r6, r3
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	00b6      	lsls	r6, r6, #2
 80082f8:	58f3      	ldr	r3, [r6, r3]
 80082fa:	4299      	cmp	r1, r3
 80082fc:	da05      	bge.n	800830a <__tzcalc_limits+0x136>
 80082fe:	1864      	adds	r4, r4, r1
 8008300:	e7b8      	b.n	8008274 <__tzcalc_limits+0xa0>
 8008302:	ca02      	ldmia	r2!, {r1}
 8008304:	3301      	adds	r3, #1
 8008306:	1864      	adds	r4, r4, r1
 8008308:	e7e0      	b.n	80082cc <__tzcalc_limits+0xf8>
 800830a:	3907      	subs	r1, #7
 800830c:	e7f5      	b.n	80082fa <__tzcalc_limits+0x126>
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	000007b1 	.word	0x000007b1
 8008314:	fffff84e 	.word	0xfffff84e
 8008318:	fffff84f 	.word	0xfffff84f
 800831c:	fffff893 	.word	0xfffff893
 8008320:	fffff9bf 	.word	0xfffff9bf
 8008324:	00015180 	.word	0x00015180
 8008328:	0800a41c 	.word	0x0800a41c
 800832c:	3fffffff 	.word	0x3fffffff

08008330 <__tz_lock>:
 8008330:	4770      	bx	lr

08008332 <__tz_unlock>:
 8008332:	4770      	bx	lr

08008334 <_tzset_unlocked>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4b02      	ldr	r3, [pc, #8]	; (8008340 <_tzset_unlocked+0xc>)
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f000 f803 	bl	8008344 <_tzset_unlocked_r>
 800833e:	bd10      	pop	{r4, pc}
 8008340:	20000244 	.word	0x20000244

08008344 <_tzset_unlocked_r>:
 8008344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008346:	b08d      	sub	sp, #52	; 0x34
 8008348:	0007      	movs	r7, r0
 800834a:	f000 fa1b 	bl	8008784 <__gettzinfo>
 800834e:	49af      	ldr	r1, [pc, #700]	; (800860c <_tzset_unlocked_r+0x2c8>)
 8008350:	0006      	movs	r6, r0
 8008352:	0038      	movs	r0, r7
 8008354:	f000 fa10 	bl	8008778 <_getenv_r>
 8008358:	4dad      	ldr	r5, [pc, #692]	; (8008610 <_tzset_unlocked_r+0x2cc>)
 800835a:	1e04      	subs	r4, r0, #0
 800835c:	d10d      	bne.n	800837a <_tzset_unlocked_r+0x36>
 800835e:	4bad      	ldr	r3, [pc, #692]	; (8008614 <_tzset_unlocked_r+0x2d0>)
 8008360:	4aad      	ldr	r2, [pc, #692]	; (8008618 <_tzset_unlocked_r+0x2d4>)
 8008362:	6018      	str	r0, [r3, #0]
 8008364:	4bad      	ldr	r3, [pc, #692]	; (800861c <_tzset_unlocked_r+0x2d8>)
 8008366:	6018      	str	r0, [r3, #0]
 8008368:	4bad      	ldr	r3, [pc, #692]	; (8008620 <_tzset_unlocked_r+0x2dc>)
 800836a:	6828      	ldr	r0, [r5, #0]
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	f7ff fa84 	bl	800787c <free>
 8008374:	602c      	str	r4, [r5, #0]
 8008376:	b00d      	add	sp, #52	; 0x34
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	6829      	ldr	r1, [r5, #0]
 800837c:	2900      	cmp	r1, #0
 800837e:	d15a      	bne.n	8008436 <_tzset_unlocked_r+0xf2>
 8008380:	6828      	ldr	r0, [r5, #0]
 8008382:	f7ff fa7b 	bl	800787c <free>
 8008386:	0020      	movs	r0, r4
 8008388:	f7f7 fec6 	bl	8000118 <strlen>
 800838c:	1c41      	adds	r1, r0, #1
 800838e:	0038      	movs	r0, r7
 8008390:	f7ff fd50 	bl	8007e34 <_malloc_r>
 8008394:	6028      	str	r0, [r5, #0]
 8008396:	2800      	cmp	r0, #0
 8008398:	d152      	bne.n	8008440 <_tzset_unlocked_r+0xfc>
 800839a:	7823      	ldrb	r3, [r4, #0]
 800839c:	3b3a      	subs	r3, #58	; 0x3a
 800839e:	4259      	negs	r1, r3
 80083a0:	4159      	adcs	r1, r3
 80083a2:	1864      	adds	r4, r4, r1
 80083a4:	ab0a      	add	r3, sp, #40	; 0x28
 80083a6:	4a9f      	ldr	r2, [pc, #636]	; (8008624 <_tzset_unlocked_r+0x2e0>)
 80083a8:	499f      	ldr	r1, [pc, #636]	; (8008628 <_tzset_unlocked_r+0x2e4>)
 80083aa:	0020      	movs	r0, r4
 80083ac:	f000 fcde 	bl	8008d6c <siscanf>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dde0      	ble.n	8008376 <_tzset_unlocked_r+0x32>
 80083b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b6:	18e4      	adds	r4, r4, r3
 80083b8:	7823      	ldrb	r3, [r4, #0]
 80083ba:	2b2d      	cmp	r3, #45	; 0x2d
 80083bc:	d144      	bne.n	8008448 <_tzset_unlocked_r+0x104>
 80083be:	3b2e      	subs	r3, #46	; 0x2e
 80083c0:	3401      	adds	r4, #1
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	2716      	movs	r7, #22
 80083c6:	ab02      	add	r3, sp, #8
 80083c8:	18ff      	adds	r7, r7, r3
 80083ca:	2300      	movs	r3, #0
 80083cc:	803b      	strh	r3, [r7, #0]
 80083ce:	2300      	movs	r3, #0
 80083d0:	ad08      	add	r5, sp, #32
 80083d2:	802b      	strh	r3, [r5, #0]
 80083d4:	ab0a      	add	r3, sp, #40	; 0x28
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9502      	str	r5, [sp, #8]
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	9700      	str	r7, [sp, #0]
 80083de:	aa07      	add	r2, sp, #28
 80083e0:	4992      	ldr	r1, [pc, #584]	; (800862c <_tzset_unlocked_r+0x2e8>)
 80083e2:	0020      	movs	r0, r4
 80083e4:	f000 fcc2 	bl	8008d6c <siscanf>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	ddc4      	ble.n	8008376 <_tzset_unlocked_r+0x32>
 80083ec:	233c      	movs	r3, #60	; 0x3c
 80083ee:	883a      	ldrh	r2, [r7, #0]
 80083f0:	4f8f      	ldr	r7, [pc, #572]	; (8008630 <_tzset_unlocked_r+0x2ec>)
 80083f2:	4353      	muls	r3, r2
 80083f4:	882a      	ldrh	r2, [r5, #0]
 80083f6:	4d8a      	ldr	r5, [pc, #552]	; (8008620 <_tzset_unlocked_r+0x2dc>)
 80083f8:	189b      	adds	r3, r3, r2
 80083fa:	aa02      	add	r2, sp, #8
 80083fc:	8a91      	ldrh	r1, [r2, #20]
 80083fe:	22e1      	movs	r2, #225	; 0xe1
 8008400:	0112      	lsls	r2, r2, #4
 8008402:	434a      	muls	r2, r1
 8008404:	189b      	adds	r3, r3, r2
 8008406:	9a04      	ldr	r2, [sp, #16]
 8008408:	4987      	ldr	r1, [pc, #540]	; (8008628 <_tzset_unlocked_r+0x2e4>)
 800840a:	435a      	muls	r2, r3
 800840c:	4b85      	ldr	r3, [pc, #532]	; (8008624 <_tzset_unlocked_r+0x2e0>)
 800840e:	6232      	str	r2, [r6, #32]
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008414:	003a      	movs	r2, r7
 8008416:	18e4      	adds	r4, r4, r3
 8008418:	0020      	movs	r0, r4
 800841a:	ab0a      	add	r3, sp, #40	; 0x28
 800841c:	f000 fca6 	bl	8008d6c <siscanf>
 8008420:	2800      	cmp	r0, #0
 8008422:	dc18      	bgt.n	8008456 <_tzset_unlocked_r+0x112>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	6a32      	ldr	r2, [r6, #32]
 8008428:	606b      	str	r3, [r5, #4]
 800842a:	4b7a      	ldr	r3, [pc, #488]	; (8008614 <_tzset_unlocked_r+0x2d0>)
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	4b7a      	ldr	r3, [pc, #488]	; (800861c <_tzset_unlocked_r+0x2d8>)
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	e79f      	b.n	8008376 <_tzset_unlocked_r+0x32>
 8008436:	f7f7 fe65 	bl	8000104 <strcmp>
 800843a:	2800      	cmp	r0, #0
 800843c:	d09b      	beq.n	8008376 <_tzset_unlocked_r+0x32>
 800843e:	e79f      	b.n	8008380 <_tzset_unlocked_r+0x3c>
 8008440:	0021      	movs	r1, r4
 8008442:	f7ff fdd6 	bl	8007ff2 <strcpy>
 8008446:	e7a8      	b.n	800839a <_tzset_unlocked_r+0x56>
 8008448:	2201      	movs	r2, #1
 800844a:	3b2b      	subs	r3, #43	; 0x2b
 800844c:	9204      	str	r2, [sp, #16]
 800844e:	4259      	negs	r1, r3
 8008450:	4159      	adcs	r1, r3
 8008452:	1864      	adds	r4, r4, r1
 8008454:	e7b6      	b.n	80083c4 <_tzset_unlocked_r+0x80>
 8008456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008458:	606f      	str	r7, [r5, #4]
 800845a:	18e4      	adds	r4, r4, r3
 800845c:	7823      	ldrb	r3, [r4, #0]
 800845e:	2b2d      	cmp	r3, #45	; 0x2d
 8008460:	d000      	beq.n	8008464 <_tzset_unlocked_r+0x120>
 8008462:	e08f      	b.n	8008584 <_tzset_unlocked_r+0x240>
 8008464:	3b2e      	subs	r3, #46	; 0x2e
 8008466:	3401      	adds	r4, #1
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	2716      	movs	r7, #22
 800846c:	2300      	movs	r3, #0
 800846e:	aa02      	add	r2, sp, #8
 8008470:	18bf      	adds	r7, r7, r2
 8008472:	ad07      	add	r5, sp, #28
 8008474:	8313      	strh	r3, [r2, #24]
 8008476:	802b      	strh	r3, [r5, #0]
 8008478:	803b      	strh	r3, [r7, #0]
 800847a:	aa08      	add	r2, sp, #32
 800847c:	930a      	str	r3, [sp, #40]	; 0x28
 800847e:	ab0a      	add	r3, sp, #40	; 0x28
 8008480:	9202      	str	r2, [sp, #8]
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	9700      	str	r7, [sp, #0]
 8008488:	002a      	movs	r2, r5
 800848a:	4968      	ldr	r1, [pc, #416]	; (800862c <_tzset_unlocked_r+0x2e8>)
 800848c:	0020      	movs	r0, r4
 800848e:	f000 fc6d 	bl	8008d6c <siscanf>
 8008492:	2800      	cmp	r0, #0
 8008494:	dd00      	ble.n	8008498 <_tzset_unlocked_r+0x154>
 8008496:	e07c      	b.n	8008592 <_tzset_unlocked_r+0x24e>
 8008498:	6a33      	ldr	r3, [r6, #32]
 800849a:	4a66      	ldr	r2, [pc, #408]	; (8008634 <_tzset_unlocked_r+0x2f0>)
 800849c:	189b      	adds	r3, r3, r2
 800849e:	63f3      	str	r3, [r6, #60]	; 0x3c
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	0037      	movs	r7, r6
 80084a4:	18e4      	adds	r4, r4, r3
 80084a6:	2300      	movs	r3, #0
 80084a8:	3708      	adds	r7, #8
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	7823      	ldrb	r3, [r4, #0]
 80084ae:	3b2c      	subs	r3, #44	; 0x2c
 80084b0:	4259      	negs	r1, r3
 80084b2:	4159      	adcs	r1, r3
 80084b4:	1864      	adds	r4, r4, r1
 80084b6:	7825      	ldrb	r5, [r4, #0]
 80084b8:	2d4d      	cmp	r5, #77	; 0x4d
 80084ba:	d000      	beq.n	80084be <_tzset_unlocked_r+0x17a>
 80084bc:	e078      	b.n	80085b0 <_tzset_unlocked_r+0x26c>
 80084be:	221e      	movs	r2, #30
 80084c0:	a902      	add	r1, sp, #8
 80084c2:	1852      	adds	r2, r2, r1
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	aa09      	add	r2, sp, #36	; 0x24
 80084c8:	9200      	str	r2, [sp, #0]
 80084ca:	221a      	movs	r2, #26
 80084cc:	ab0a      	add	r3, sp, #40	; 0x28
 80084ce:	1852      	adds	r2, r2, r1
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	4958      	ldr	r1, [pc, #352]	; (8008638 <_tzset_unlocked_r+0x2f4>)
 80084d6:	0020      	movs	r0, r4
 80084d8:	f000 fc48 	bl	8008d6c <siscanf>
 80084dc:	2803      	cmp	r0, #3
 80084de:	d000      	beq.n	80084e2 <_tzset_unlocked_r+0x19e>
 80084e0:	e749      	b.n	8008376 <_tzset_unlocked_r+0x32>
 80084e2:	ab02      	add	r3, sp, #8
 80084e4:	8b59      	ldrh	r1, [r3, #26]
 80084e6:	1e4b      	subs	r3, r1, #1
 80084e8:	2b0b      	cmp	r3, #11
 80084ea:	d900      	bls.n	80084ee <_tzset_unlocked_r+0x1aa>
 80084ec:	e743      	b.n	8008376 <_tzset_unlocked_r+0x32>
 80084ee:	ab02      	add	r3, sp, #8
 80084f0:	8b9a      	ldrh	r2, [r3, #28]
 80084f2:	1e53      	subs	r3, r2, #1
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d900      	bls.n	80084fa <_tzset_unlocked_r+0x1b6>
 80084f8:	e73d      	b.n	8008376 <_tzset_unlocked_r+0x32>
 80084fa:	ab02      	add	r3, sp, #8
 80084fc:	8bdb      	ldrh	r3, [r3, #30]
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d900      	bls.n	8008504 <_tzset_unlocked_r+0x1c0>
 8008502:	e738      	b.n	8008376 <_tzset_unlocked_r+0x32>
 8008504:	703d      	strb	r5, [r7, #0]
 8008506:	6079      	str	r1, [r7, #4]
 8008508:	60ba      	str	r2, [r7, #8]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850e:	18e5      	adds	r5, r4, r3
 8008510:	2302      	movs	r3, #2
 8008512:	aa07      	add	r2, sp, #28
 8008514:	8013      	strh	r3, [r2, #0]
 8008516:	2300      	movs	r3, #0
 8008518:	a902      	add	r1, sp, #8
 800851a:	ac08      	add	r4, sp, #32
 800851c:	82cb      	strh	r3, [r1, #22]
 800851e:	8023      	strh	r3, [r4, #0]
 8008520:	930a      	str	r3, [sp, #40]	; 0x28
 8008522:	782b      	ldrb	r3, [r5, #0]
 8008524:	2b2f      	cmp	r3, #47	; 0x2f
 8008526:	d10b      	bne.n	8008540 <_tzset_unlocked_r+0x1fc>
 8008528:	2116      	movs	r1, #22
 800852a:	a802      	add	r0, sp, #8
 800852c:	1809      	adds	r1, r1, r0
 800852e:	ab0a      	add	r3, sp, #40	; 0x28
 8008530:	9100      	str	r1, [sp, #0]
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	9402      	str	r4, [sp, #8]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	4940      	ldr	r1, [pc, #256]	; (800863c <_tzset_unlocked_r+0x2f8>)
 800853a:	0028      	movs	r0, r5
 800853c:	f000 fc16 	bl	8008d6c <siscanf>
 8008540:	ab02      	add	r3, sp, #8
 8008542:	8ada      	ldrh	r2, [r3, #22]
 8008544:	233c      	movs	r3, #60	; 0x3c
 8008546:	4353      	muls	r3, r2
 8008548:	8822      	ldrh	r2, [r4, #0]
 800854a:	189b      	adds	r3, r3, r2
 800854c:	aa07      	add	r2, sp, #28
 800854e:	8811      	ldrh	r1, [r2, #0]
 8008550:	22e1      	movs	r2, #225	; 0xe1
 8008552:	0112      	lsls	r2, r2, #4
 8008554:	434a      	muls	r2, r1
 8008556:	189b      	adds	r3, r3, r2
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855c:	371c      	adds	r7, #28
 800855e:	18ec      	adds	r4, r5, r3
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	3301      	adds	r3, #1
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d1a0      	bne.n	80084ac <_tzset_unlocked_r+0x168>
 800856a:	6870      	ldr	r0, [r6, #4]
 800856c:	f7ff fe32 	bl	80081d4 <__tzcalc_limits>
 8008570:	6a32      	ldr	r2, [r6, #32]
 8008572:	4b28      	ldr	r3, [pc, #160]	; (8008614 <_tzset_unlocked_r+0x2d0>)
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	1e5a      	subs	r2, r3, #1
 800857c:	4193      	sbcs	r3, r2
 800857e:	4a27      	ldr	r2, [pc, #156]	; (800861c <_tzset_unlocked_r+0x2d8>)
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	e6f8      	b.n	8008376 <_tzset_unlocked_r+0x32>
 8008584:	2201      	movs	r2, #1
 8008586:	3b2b      	subs	r3, #43	; 0x2b
 8008588:	9204      	str	r2, [sp, #16]
 800858a:	4259      	negs	r1, r3
 800858c:	4159      	adcs	r1, r3
 800858e:	1864      	adds	r4, r4, r1
 8008590:	e76b      	b.n	800846a <_tzset_unlocked_r+0x126>
 8008592:	233c      	movs	r3, #60	; 0x3c
 8008594:	883a      	ldrh	r2, [r7, #0]
 8008596:	8829      	ldrh	r1, [r5, #0]
 8008598:	4353      	muls	r3, r2
 800859a:	aa02      	add	r2, sp, #8
 800859c:	8b12      	ldrh	r2, [r2, #24]
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	22e1      	movs	r2, #225	; 0xe1
 80085a2:	0112      	lsls	r2, r2, #4
 80085a4:	434a      	muls	r2, r1
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	435a      	muls	r2, r3
 80085ac:	0013      	movs	r3, r2
 80085ae:	e776      	b.n	800849e <_tzset_unlocked_r+0x15a>
 80085b0:	2344      	movs	r3, #68	; 0x44
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	2d4a      	cmp	r5, #74	; 0x4a
 80085b6:	d101      	bne.n	80085bc <_tzset_unlocked_r+0x278>
 80085b8:	3401      	adds	r4, #1
 80085ba:	9505      	str	r5, [sp, #20]
 80085bc:	220a      	movs	r2, #10
 80085be:	a90b      	add	r1, sp, #44	; 0x2c
 80085c0:	0020      	movs	r0, r4
 80085c2:	f000 fc95 	bl	8008ef0 <strtoul>
 80085c6:	231e      	movs	r3, #30
 80085c8:	aa02      	add	r2, sp, #8
 80085ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80085cc:	189b      	adds	r3, r3, r2
 80085ce:	8018      	strh	r0, [r3, #0]
 80085d0:	42ac      	cmp	r4, r5
 80085d2:	d115      	bne.n	8008600 <_tzset_unlocked_r+0x2bc>
 80085d4:	9b04      	ldr	r3, [sp, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <_tzset_unlocked_r+0x2a8>
 80085da:	334d      	adds	r3, #77	; 0x4d
 80085dc:	7233      	strb	r3, [r6, #8]
 80085de:	2303      	movs	r3, #3
 80085e0:	60f3      	str	r3, [r6, #12]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	6133      	str	r3, [r6, #16]
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	6173      	str	r3, [r6, #20]
 80085ea:	e791      	b.n	8008510 <_tzset_unlocked_r+0x1cc>
 80085ec:	224d      	movs	r2, #77	; 0x4d
 80085ee:	1d73      	adds	r3, r6, #5
 80085f0:	77da      	strb	r2, [r3, #31]
 80085f2:	230b      	movs	r3, #11
 80085f4:	62b3      	str	r3, [r6, #40]	; 0x28
 80085f6:	3b0a      	subs	r3, #10
 80085f8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80085fa:	2300      	movs	r3, #0
 80085fc:	6333      	str	r3, [r6, #48]	; 0x30
 80085fe:	e787      	b.n	8008510 <_tzset_unlocked_r+0x1cc>
 8008600:	466b      	mov	r3, sp
 8008602:	7d1b      	ldrb	r3, [r3, #20]
 8008604:	b280      	uxth	r0, r0
 8008606:	703b      	strb	r3, [r7, #0]
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	e781      	b.n	8008510 <_tzset_unlocked_r+0x1cc>
 800860c:	0800a2dc 	.word	0x0800a2dc
 8008610:	20004000 	.word	0x20004000
 8008614:	20004008 	.word	0x20004008
 8008618:	0800a2df 	.word	0x0800a2df
 800861c:	20004004 	.word	0x20004004
 8008620:	200001fc 	.word	0x200001fc
 8008624:	20003ff3 	.word	0x20003ff3
 8008628:	0800a2e3 	.word	0x0800a2e3
 800862c:	0800a306 	.word	0x0800a306
 8008630:	20003fe8 	.word	0x20003fe8
 8008634:	fffff1f0 	.word	0xfffff1f0
 8008638:	0800a2f2 	.word	0x0800a2f2
 800863c:	0800a305 	.word	0x0800a305

08008640 <_vsniprintf_r>:
 8008640:	b530      	push	{r4, r5, lr}
 8008642:	0014      	movs	r4, r2
 8008644:	b09b      	sub	sp, #108	; 0x6c
 8008646:	0005      	movs	r5, r0
 8008648:	001a      	movs	r2, r3
 800864a:	2c00      	cmp	r4, #0
 800864c:	da05      	bge.n	800865a <_vsniprintf_r+0x1a>
 800864e:	238b      	movs	r3, #139	; 0x8b
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	2001      	movs	r0, #1
 8008654:	4240      	negs	r0, r0
 8008656:	b01b      	add	sp, #108	; 0x6c
 8008658:	bd30      	pop	{r4, r5, pc}
 800865a:	2382      	movs	r3, #130	; 0x82
 800865c:	4668      	mov	r0, sp
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	8183      	strh	r3, [r0, #12]
 8008662:	2300      	movs	r3, #0
 8008664:	9100      	str	r1, [sp, #0]
 8008666:	9104      	str	r1, [sp, #16]
 8008668:	429c      	cmp	r4, r3
 800866a:	d000      	beq.n	800866e <_vsniprintf_r+0x2e>
 800866c:	1e63      	subs	r3, r4, #1
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	2301      	movs	r3, #1
 8008674:	4669      	mov	r1, sp
 8008676:	425b      	negs	r3, r3
 8008678:	81cb      	strh	r3, [r1, #14]
 800867a:	0028      	movs	r0, r5
 800867c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800867e:	f000 f8e9 	bl	8008854 <_svfiprintf_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	da01      	bge.n	800868a <_vsniprintf_r+0x4a>
 8008686:	238b      	movs	r3, #139	; 0x8b
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	2c00      	cmp	r4, #0
 800868c:	d0e3      	beq.n	8008656 <_vsniprintf_r+0x16>
 800868e:	2300      	movs	r3, #0
 8008690:	9a00      	ldr	r2, [sp, #0]
 8008692:	7013      	strb	r3, [r2, #0]
 8008694:	e7df      	b.n	8008656 <_vsniprintf_r+0x16>
	...

08008698 <vsniprintf>:
 8008698:	b507      	push	{r0, r1, r2, lr}
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	0013      	movs	r3, r2
 800869e:	000a      	movs	r2, r1
 80086a0:	0001      	movs	r1, r0
 80086a2:	4802      	ldr	r0, [pc, #8]	; (80086ac <vsniprintf+0x14>)
 80086a4:	6800      	ldr	r0, [r0, #0]
 80086a6:	f7ff ffcb 	bl	8008640 <_vsniprintf_r>
 80086aa:	bd0e      	pop	{r1, r2, r3, pc}
 80086ac:	20000244 	.word	0x20000244

080086b0 <__ascii_wctomb>:
 80086b0:	1e0b      	subs	r3, r1, #0
 80086b2:	d004      	beq.n	80086be <__ascii_wctomb+0xe>
 80086b4:	2aff      	cmp	r2, #255	; 0xff
 80086b6:	d904      	bls.n	80086c2 <__ascii_wctomb+0x12>
 80086b8:	238a      	movs	r3, #138	; 0x8a
 80086ba:	6003      	str	r3, [r0, #0]
 80086bc:	3b8b      	subs	r3, #139	; 0x8b
 80086be:	0018      	movs	r0, r3
 80086c0:	4770      	bx	lr
 80086c2:	700a      	strb	r2, [r1, #0]
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7fa      	b.n	80086be <__ascii_wctomb+0xe>

080086c8 <div>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	000f      	movs	r7, r1
 80086cc:	0006      	movs	r6, r0
 80086ce:	0011      	movs	r1, r2
 80086d0:	0038      	movs	r0, r7
 80086d2:	0015      	movs	r5, r2
 80086d4:	f7f7 fdb2 	bl	800023c <__divsi3>
 80086d8:	0029      	movs	r1, r5
 80086da:	0004      	movs	r4, r0
 80086dc:	0038      	movs	r0, r7
 80086de:	f7f7 fe93 	bl	8000408 <__aeabi_idivmod>
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	db07      	blt.n	80086f6 <div+0x2e>
 80086e6:	2900      	cmp	r1, #0
 80086e8:	da01      	bge.n	80086ee <div+0x26>
 80086ea:	3401      	adds	r4, #1
 80086ec:	1b49      	subs	r1, r1, r5
 80086ee:	0030      	movs	r0, r6
 80086f0:	6034      	str	r4, [r6, #0]
 80086f2:	6071      	str	r1, [r6, #4]
 80086f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f6:	2900      	cmp	r1, #0
 80086f8:	ddf9      	ble.n	80086ee <div+0x26>
 80086fa:	3c01      	subs	r4, #1
 80086fc:	1949      	adds	r1, r1, r5
 80086fe:	e7f6      	b.n	80086ee <div+0x26>

08008700 <_findenv_r>:
 8008700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008702:	000e      	movs	r6, r1
 8008704:	b085      	sub	sp, #20
 8008706:	0007      	movs	r7, r0
 8008708:	9203      	str	r2, [sp, #12]
 800870a:	f000 fc05 	bl	8008f18 <__env_lock>
 800870e:	4c19      	ldr	r4, [pc, #100]	; (8008774 <_findenv_r+0x74>)
 8008710:	0033      	movs	r3, r6
 8008712:	6825      	ldr	r5, [r4, #0]
 8008714:	2d00      	cmp	r5, #0
 8008716:	d106      	bne.n	8008726 <_findenv_r+0x26>
 8008718:	0038      	movs	r0, r7
 800871a:	f000 fbfe 	bl	8008f1a <__env_unlock>
 800871e:	2000      	movs	r0, #0
 8008720:	b005      	add	sp, #20
 8008722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008724:	3301      	adds	r3, #1
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	2a00      	cmp	r2, #0
 800872a:	d01f      	beq.n	800876c <_findenv_r+0x6c>
 800872c:	2a3d      	cmp	r2, #61	; 0x3d
 800872e:	d1f9      	bne.n	8008724 <_findenv_r+0x24>
 8008730:	e7f2      	b.n	8008718 <_findenv_r+0x18>
 8008732:	3504      	adds	r5, #4
 8008734:	6828      	ldr	r0, [r5, #0]
 8008736:	2800      	cmp	r0, #0
 8008738:	d0ee      	beq.n	8008718 <_findenv_r+0x18>
 800873a:	9a01      	ldr	r2, [sp, #4]
 800873c:	0031      	movs	r1, r6
 800873e:	f7ff fc60 	bl	8008002 <strncmp>
 8008742:	2800      	cmp	r0, #0
 8008744:	d1f5      	bne.n	8008732 <_findenv_r+0x32>
 8008746:	9a01      	ldr	r2, [sp, #4]
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	4694      	mov	ip, r2
 800874c:	4463      	add	r3, ip
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	2b3d      	cmp	r3, #61	; 0x3d
 8008754:	d1ed      	bne.n	8008732 <_findenv_r+0x32>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	0038      	movs	r0, r7
 800875a:	1aed      	subs	r5, r5, r3
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	10ad      	asrs	r5, r5, #2
 8008760:	601d      	str	r5, [r3, #0]
 8008762:	f000 fbda 	bl	8008f1a <__env_unlock>
 8008766:	9802      	ldr	r0, [sp, #8]
 8008768:	3001      	adds	r0, #1
 800876a:	e7d9      	b.n	8008720 <_findenv_r+0x20>
 800876c:	1b9b      	subs	r3, r3, r6
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	e7e0      	b.n	8008734 <_findenv_r+0x34>
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	200002a8 	.word	0x200002a8

08008778 <_getenv_r>:
 8008778:	b507      	push	{r0, r1, r2, lr}
 800877a:	aa01      	add	r2, sp, #4
 800877c:	f7ff ffc0 	bl	8008700 <_findenv_r>
 8008780:	bd0e      	pop	{r1, r2, r3, pc}
	...

08008784 <__gettzinfo>:
 8008784:	4800      	ldr	r0, [pc, #0]	; (8008788 <__gettzinfo+0x4>)
 8008786:	4770      	bx	lr
 8008788:	20000204 	.word	0x20000204

0800878c <__malloc_lock>:
 800878c:	4770      	bx	lr

0800878e <__malloc_unlock>:
 800878e:	4770      	bx	lr

08008790 <__ssputs_r>:
 8008790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008792:	688e      	ldr	r6, [r1, #8]
 8008794:	b085      	sub	sp, #20
 8008796:	0007      	movs	r7, r0
 8008798:	000c      	movs	r4, r1
 800879a:	9203      	str	r2, [sp, #12]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	429e      	cmp	r6, r3
 80087a0:	d839      	bhi.n	8008816 <__ssputs_r+0x86>
 80087a2:	2390      	movs	r3, #144	; 0x90
 80087a4:	898a      	ldrh	r2, [r1, #12]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	421a      	tst	r2, r3
 80087aa:	d034      	beq.n	8008816 <__ssputs_r+0x86>
 80087ac:	2503      	movs	r5, #3
 80087ae:	6909      	ldr	r1, [r1, #16]
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	6963      	ldr	r3, [r4, #20]
 80087b8:	9802      	ldr	r0, [sp, #8]
 80087ba:	435d      	muls	r5, r3
 80087bc:	0feb      	lsrs	r3, r5, #31
 80087be:	195d      	adds	r5, r3, r5
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	106d      	asrs	r5, r5, #1
 80087c4:	3301      	adds	r3, #1
 80087c6:	181b      	adds	r3, r3, r0
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x3e>
 80087cc:	001d      	movs	r5, r3
 80087ce:	0553      	lsls	r3, r2, #21
 80087d0:	d532      	bpl.n	8008838 <__ssputs_r+0xa8>
 80087d2:	0029      	movs	r1, r5
 80087d4:	0038      	movs	r0, r7
 80087d6:	f7ff fb2d 	bl	8007e34 <_malloc_r>
 80087da:	1e06      	subs	r6, r0, #0
 80087dc:	d109      	bne.n	80087f2 <__ssputs_r+0x62>
 80087de:	230c      	movs	r3, #12
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	2001      	movs	r0, #1
 80087e6:	89a2      	ldrh	r2, [r4, #12]
 80087e8:	4240      	negs	r0, r0
 80087ea:	4313      	orrs	r3, r2
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	b005      	add	sp, #20
 80087f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f2:	9a02      	ldr	r2, [sp, #8]
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	f7ff f86c 	bl	80078d2 <memcpy>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <__ssputs_r+0xc0>)
 80087fe:	401a      	ands	r2, r3
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	4313      	orrs	r3, r2
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	6126      	str	r6, [r4, #16]
 800880a:	18f6      	adds	r6, r6, r3
 800880c:	6026      	str	r6, [r4, #0]
 800880e:	6165      	str	r5, [r4, #20]
 8008810:	9e01      	ldr	r6, [sp, #4]
 8008812:	1aed      	subs	r5, r5, r3
 8008814:	60a5      	str	r5, [r4, #8]
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	42b3      	cmp	r3, r6
 800881a:	d200      	bcs.n	800881e <__ssputs_r+0x8e>
 800881c:	001e      	movs	r6, r3
 800881e:	0032      	movs	r2, r6
 8008820:	9903      	ldr	r1, [sp, #12]
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	f000 fb85 	bl	8008f32 <memmove>
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	2000      	movs	r0, #0
 800882c:	1b9b      	subs	r3, r3, r6
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	199e      	adds	r6, r3, r6
 8008834:	6026      	str	r6, [r4, #0]
 8008836:	e7da      	b.n	80087ee <__ssputs_r+0x5e>
 8008838:	002a      	movs	r2, r5
 800883a:	0038      	movs	r0, r7
 800883c:	f000 fb8b 	bl	8008f56 <_realloc_r>
 8008840:	1e06      	subs	r6, r0, #0
 8008842:	d1e0      	bne.n	8008806 <__ssputs_r+0x76>
 8008844:	6921      	ldr	r1, [r4, #16]
 8008846:	0038      	movs	r0, r7
 8008848:	f7ff faaa 	bl	8007da0 <_free_r>
 800884c:	e7c7      	b.n	80087de <__ssputs_r+0x4e>
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	fffffb7f 	.word	0xfffffb7f

08008854 <_svfiprintf_r>:
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	b09f      	sub	sp, #124	; 0x7c
 8008858:	9002      	str	r0, [sp, #8]
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	898b      	ldrh	r3, [r1, #12]
 800885e:	000f      	movs	r7, r1
 8008860:	0016      	movs	r6, r2
 8008862:	061b      	lsls	r3, r3, #24
 8008864:	d511      	bpl.n	800888a <_svfiprintf_r+0x36>
 8008866:	690b      	ldr	r3, [r1, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10e      	bne.n	800888a <_svfiprintf_r+0x36>
 800886c:	2140      	movs	r1, #64	; 0x40
 800886e:	f7ff fae1 	bl	8007e34 <_malloc_r>
 8008872:	6038      	str	r0, [r7, #0]
 8008874:	6138      	str	r0, [r7, #16]
 8008876:	2800      	cmp	r0, #0
 8008878:	d105      	bne.n	8008886 <_svfiprintf_r+0x32>
 800887a:	230c      	movs	r3, #12
 800887c:	9a02      	ldr	r2, [sp, #8]
 800887e:	3801      	subs	r0, #1
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	b01f      	add	sp, #124	; 0x7c
 8008884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	2300      	movs	r3, #0
 800888c:	ad06      	add	r5, sp, #24
 800888e:	616b      	str	r3, [r5, #20]
 8008890:	3320      	adds	r3, #32
 8008892:	766b      	strb	r3, [r5, #25]
 8008894:	3310      	adds	r3, #16
 8008896:	76ab      	strb	r3, [r5, #26]
 8008898:	0034      	movs	r4, r6
 800889a:	7823      	ldrb	r3, [r4, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d147      	bne.n	8008930 <_svfiprintf_r+0xdc>
 80088a0:	1ba3      	subs	r3, r4, r6
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	d00d      	beq.n	80088c2 <_svfiprintf_r+0x6e>
 80088a6:	1ba3      	subs	r3, r4, r6
 80088a8:	0032      	movs	r2, r6
 80088aa:	0039      	movs	r1, r7
 80088ac:	9802      	ldr	r0, [sp, #8]
 80088ae:	f7ff ff6f 	bl	8008790 <__ssputs_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d100      	bne.n	80088b8 <_svfiprintf_r+0x64>
 80088b6:	e0b5      	b.n	8008a24 <_svfiprintf_r+0x1d0>
 80088b8:	696a      	ldr	r2, [r5, #20]
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	4694      	mov	ip, r2
 80088be:	4463      	add	r3, ip
 80088c0:	616b      	str	r3, [r5, #20]
 80088c2:	7823      	ldrb	r3, [r4, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d100      	bne.n	80088ca <_svfiprintf_r+0x76>
 80088c8:	e0ac      	b.n	8008a24 <_svfiprintf_r+0x1d0>
 80088ca:	2201      	movs	r2, #1
 80088cc:	2300      	movs	r3, #0
 80088ce:	4252      	negs	r2, r2
 80088d0:	606a      	str	r2, [r5, #4]
 80088d2:	a902      	add	r1, sp, #8
 80088d4:	3254      	adds	r2, #84	; 0x54
 80088d6:	1852      	adds	r2, r2, r1
 80088d8:	3401      	adds	r4, #1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	60eb      	str	r3, [r5, #12]
 80088de:	60ab      	str	r3, [r5, #8]
 80088e0:	7013      	strb	r3, [r2, #0]
 80088e2:	65ab      	str	r3, [r5, #88]	; 0x58
 80088e4:	4e58      	ldr	r6, [pc, #352]	; (8008a48 <_svfiprintf_r+0x1f4>)
 80088e6:	2205      	movs	r2, #5
 80088e8:	7821      	ldrb	r1, [r4, #0]
 80088ea:	0030      	movs	r0, r6
 80088ec:	f000 fb16 	bl	8008f1c <memchr>
 80088f0:	1c62      	adds	r2, r4, #1
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d120      	bne.n	8008938 <_svfiprintf_r+0xe4>
 80088f6:	6829      	ldr	r1, [r5, #0]
 80088f8:	06cb      	lsls	r3, r1, #27
 80088fa:	d504      	bpl.n	8008906 <_svfiprintf_r+0xb2>
 80088fc:	2353      	movs	r3, #83	; 0x53
 80088fe:	ae02      	add	r6, sp, #8
 8008900:	3020      	adds	r0, #32
 8008902:	199b      	adds	r3, r3, r6
 8008904:	7018      	strb	r0, [r3, #0]
 8008906:	070b      	lsls	r3, r1, #28
 8008908:	d504      	bpl.n	8008914 <_svfiprintf_r+0xc0>
 800890a:	2353      	movs	r3, #83	; 0x53
 800890c:	202b      	movs	r0, #43	; 0x2b
 800890e:	ae02      	add	r6, sp, #8
 8008910:	199b      	adds	r3, r3, r6
 8008912:	7018      	strb	r0, [r3, #0]
 8008914:	7823      	ldrb	r3, [r4, #0]
 8008916:	2b2a      	cmp	r3, #42	; 0x2a
 8008918:	d016      	beq.n	8008948 <_svfiprintf_r+0xf4>
 800891a:	2000      	movs	r0, #0
 800891c:	210a      	movs	r1, #10
 800891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008920:	7822      	ldrb	r2, [r4, #0]
 8008922:	3a30      	subs	r2, #48	; 0x30
 8008924:	2a09      	cmp	r2, #9
 8008926:	d955      	bls.n	80089d4 <_svfiprintf_r+0x180>
 8008928:	2800      	cmp	r0, #0
 800892a:	d015      	beq.n	8008958 <_svfiprintf_r+0x104>
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	e013      	b.n	8008958 <_svfiprintf_r+0x104>
 8008930:	2b25      	cmp	r3, #37	; 0x25
 8008932:	d0b5      	beq.n	80088a0 <_svfiprintf_r+0x4c>
 8008934:	3401      	adds	r4, #1
 8008936:	e7b0      	b.n	800889a <_svfiprintf_r+0x46>
 8008938:	2301      	movs	r3, #1
 800893a:	1b80      	subs	r0, r0, r6
 800893c:	4083      	lsls	r3, r0
 800893e:	6829      	ldr	r1, [r5, #0]
 8008940:	0014      	movs	r4, r2
 8008942:	430b      	orrs	r3, r1
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	e7cd      	b.n	80088e4 <_svfiprintf_r+0x90>
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	1d18      	adds	r0, r3, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	9005      	str	r0, [sp, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	db39      	blt.n	80089c8 <_svfiprintf_r+0x174>
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	0014      	movs	r4, r2
 8008958:	7823      	ldrb	r3, [r4, #0]
 800895a:	2b2e      	cmp	r3, #46	; 0x2e
 800895c:	d10b      	bne.n	8008976 <_svfiprintf_r+0x122>
 800895e:	7863      	ldrb	r3, [r4, #1]
 8008960:	1c62      	adds	r2, r4, #1
 8008962:	2b2a      	cmp	r3, #42	; 0x2a
 8008964:	d13e      	bne.n	80089e4 <_svfiprintf_r+0x190>
 8008966:	9b05      	ldr	r3, [sp, #20]
 8008968:	3402      	adds	r4, #2
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9205      	str	r2, [sp, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	db34      	blt.n	80089de <_svfiprintf_r+0x18a>
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	4e35      	ldr	r6, [pc, #212]	; (8008a4c <_svfiprintf_r+0x1f8>)
 8008978:	7821      	ldrb	r1, [r4, #0]
 800897a:	2203      	movs	r2, #3
 800897c:	0030      	movs	r0, r6
 800897e:	f000 facd 	bl	8008f1c <memchr>
 8008982:	2800      	cmp	r0, #0
 8008984:	d006      	beq.n	8008994 <_svfiprintf_r+0x140>
 8008986:	2340      	movs	r3, #64	; 0x40
 8008988:	1b80      	subs	r0, r0, r6
 800898a:	4083      	lsls	r3, r0
 800898c:	682a      	ldr	r2, [r5, #0]
 800898e:	3401      	adds	r4, #1
 8008990:	4313      	orrs	r3, r2
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	7821      	ldrb	r1, [r4, #0]
 8008996:	2206      	movs	r2, #6
 8008998:	482d      	ldr	r0, [pc, #180]	; (8008a50 <_svfiprintf_r+0x1fc>)
 800899a:	1c66      	adds	r6, r4, #1
 800899c:	7629      	strb	r1, [r5, #24]
 800899e:	f000 fabd 	bl	8008f1c <memchr>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d046      	beq.n	8008a34 <_svfiprintf_r+0x1e0>
 80089a6:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <_svfiprintf_r+0x200>)
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d12f      	bne.n	8008a0c <_svfiprintf_r+0x1b8>
 80089ac:	6829      	ldr	r1, [r5, #0]
 80089ae:	9b05      	ldr	r3, [sp, #20]
 80089b0:	2207      	movs	r2, #7
 80089b2:	05c9      	lsls	r1, r1, #23
 80089b4:	d528      	bpl.n	8008a08 <_svfiprintf_r+0x1b4>
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	4393      	bics	r3, r2
 80089ba:	3308      	adds	r3, #8
 80089bc:	9305      	str	r3, [sp, #20]
 80089be:	696b      	ldr	r3, [r5, #20]
 80089c0:	9a03      	ldr	r2, [sp, #12]
 80089c2:	189b      	adds	r3, r3, r2
 80089c4:	616b      	str	r3, [r5, #20]
 80089c6:	e767      	b.n	8008898 <_svfiprintf_r+0x44>
 80089c8:	425b      	negs	r3, r3
 80089ca:	60eb      	str	r3, [r5, #12]
 80089cc:	2302      	movs	r3, #2
 80089ce:	430b      	orrs	r3, r1
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	e7c0      	b.n	8008956 <_svfiprintf_r+0x102>
 80089d4:	434b      	muls	r3, r1
 80089d6:	3401      	adds	r4, #1
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	2001      	movs	r0, #1
 80089dc:	e7a0      	b.n	8008920 <_svfiprintf_r+0xcc>
 80089de:	2301      	movs	r3, #1
 80089e0:	425b      	negs	r3, r3
 80089e2:	e7c7      	b.n	8008974 <_svfiprintf_r+0x120>
 80089e4:	2300      	movs	r3, #0
 80089e6:	0014      	movs	r4, r2
 80089e8:	200a      	movs	r0, #10
 80089ea:	001a      	movs	r2, r3
 80089ec:	606b      	str	r3, [r5, #4]
 80089ee:	7821      	ldrb	r1, [r4, #0]
 80089f0:	3930      	subs	r1, #48	; 0x30
 80089f2:	2909      	cmp	r1, #9
 80089f4:	d903      	bls.n	80089fe <_svfiprintf_r+0x1aa>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0bd      	beq.n	8008976 <_svfiprintf_r+0x122>
 80089fa:	9207      	str	r2, [sp, #28]
 80089fc:	e7bb      	b.n	8008976 <_svfiprintf_r+0x122>
 80089fe:	4342      	muls	r2, r0
 8008a00:	3401      	adds	r4, #1
 8008a02:	1852      	adds	r2, r2, r1
 8008a04:	2301      	movs	r3, #1
 8008a06:	e7f2      	b.n	80089ee <_svfiprintf_r+0x19a>
 8008a08:	3307      	adds	r3, #7
 8008a0a:	e7d5      	b.n	80089b8 <_svfiprintf_r+0x164>
 8008a0c:	ab05      	add	r3, sp, #20
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	003a      	movs	r2, r7
 8008a12:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <_svfiprintf_r+0x204>)
 8008a14:	0029      	movs	r1, r5
 8008a16:	9802      	ldr	r0, [sp, #8]
 8008a18:	e000      	b.n	8008a1c <_svfiprintf_r+0x1c8>
 8008a1a:	bf00      	nop
 8008a1c:	9003      	str	r0, [sp, #12]
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	d1cc      	bne.n	80089be <_svfiprintf_r+0x16a>
 8008a24:	89bb      	ldrh	r3, [r7, #12]
 8008a26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a28:	065b      	lsls	r3, r3, #25
 8008a2a:	d400      	bmi.n	8008a2e <_svfiprintf_r+0x1da>
 8008a2c:	e729      	b.n	8008882 <_svfiprintf_r+0x2e>
 8008a2e:	2001      	movs	r0, #1
 8008a30:	4240      	negs	r0, r0
 8008a32:	e726      	b.n	8008882 <_svfiprintf_r+0x2e>
 8008a34:	ab05      	add	r3, sp, #20
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	003a      	movs	r2, r7
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <_svfiprintf_r+0x204>)
 8008a3c:	0029      	movs	r1, r5
 8008a3e:	9802      	ldr	r0, [sp, #8]
 8008a40:	f000 f87a 	bl	8008b38 <_printf_i>
 8008a44:	e7ea      	b.n	8008a1c <_svfiprintf_r+0x1c8>
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	0800a47c 	.word	0x0800a47c
 8008a4c:	0800a482 	.word	0x0800a482
 8008a50:	0800a486 	.word	0x0800a486
 8008a54:	00000000 	.word	0x00000000
 8008a58:	08008791 	.word	0x08008791

08008a5c <_printf_common>:
 8008a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a5e:	0015      	movs	r5, r2
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	688a      	ldr	r2, [r1, #8]
 8008a64:	690b      	ldr	r3, [r1, #16]
 8008a66:	9000      	str	r0, [sp, #0]
 8008a68:	000c      	movs	r4, r1
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	da00      	bge.n	8008a70 <_printf_common+0x14>
 8008a6e:	0013      	movs	r3, r2
 8008a70:	0022      	movs	r2, r4
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	3243      	adds	r2, #67	; 0x43
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d001      	beq.n	8008a80 <_printf_common+0x24>
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	069b      	lsls	r3, r3, #26
 8008a84:	d502      	bpl.n	8008a8c <_printf_common+0x30>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	3302      	adds	r3, #2
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	2706      	movs	r7, #6
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	401f      	ands	r7, r3
 8008a92:	d027      	beq.n	8008ae4 <_printf_common+0x88>
 8008a94:	0023      	movs	r3, r4
 8008a96:	3343      	adds	r3, #67	; 0x43
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	4193      	sbcs	r3, r2
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	0692      	lsls	r2, r2, #26
 8008aa2:	d430      	bmi.n	8008b06 <_printf_common+0xaa>
 8008aa4:	0022      	movs	r2, r4
 8008aa6:	9901      	ldr	r1, [sp, #4]
 8008aa8:	3243      	adds	r2, #67	; 0x43
 8008aaa:	9800      	ldr	r0, [sp, #0]
 8008aac:	9e08      	ldr	r6, [sp, #32]
 8008aae:	47b0      	blx	r6
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d025      	beq.n	8008b00 <_printf_common+0xa4>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	682a      	ldr	r2, [r5, #0]
 8008aba:	68e1      	ldr	r1, [r4, #12]
 8008abc:	4003      	ands	r3, r0
 8008abe:	2500      	movs	r5, #0
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d103      	bne.n	8008acc <_printf_common+0x70>
 8008ac4:	1a8d      	subs	r5, r1, r2
 8008ac6:	43eb      	mvns	r3, r5
 8008ac8:	17db      	asrs	r3, r3, #31
 8008aca:	401d      	ands	r5, r3
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	dd01      	ble.n	8008ad8 <_printf_common+0x7c>
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	18ed      	adds	r5, r5, r3
 8008ad8:	2700      	movs	r7, #0
 8008ada:	42bd      	cmp	r5, r7
 8008adc:	d120      	bne.n	8008b20 <_printf_common+0xc4>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e010      	b.n	8008b04 <_printf_common+0xa8>
 8008ae2:	3701      	adds	r7, #1
 8008ae4:	68e3      	ldr	r3, [r4, #12]
 8008ae6:	682a      	ldr	r2, [r5, #0]
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	429f      	cmp	r7, r3
 8008aec:	dad2      	bge.n	8008a94 <_printf_common+0x38>
 8008aee:	0022      	movs	r2, r4
 8008af0:	2301      	movs	r3, #1
 8008af2:	3219      	adds	r2, #25
 8008af4:	9901      	ldr	r1, [sp, #4]
 8008af6:	9800      	ldr	r0, [sp, #0]
 8008af8:	9e08      	ldr	r6, [sp, #32]
 8008afa:	47b0      	blx	r6
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d1f0      	bne.n	8008ae2 <_printf_common+0x86>
 8008b00:	2001      	movs	r0, #1
 8008b02:	4240      	negs	r0, r0
 8008b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b06:	2030      	movs	r0, #48	; 0x30
 8008b08:	18e1      	adds	r1, r4, r3
 8008b0a:	3143      	adds	r1, #67	; 0x43
 8008b0c:	7008      	strb	r0, [r1, #0]
 8008b0e:	0021      	movs	r1, r4
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	3145      	adds	r1, #69	; 0x45
 8008b14:	7809      	ldrb	r1, [r1, #0]
 8008b16:	18a2      	adds	r2, r4, r2
 8008b18:	3243      	adds	r2, #67	; 0x43
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	7011      	strb	r1, [r2, #0]
 8008b1e:	e7c1      	b.n	8008aa4 <_printf_common+0x48>
 8008b20:	0022      	movs	r2, r4
 8008b22:	2301      	movs	r3, #1
 8008b24:	321a      	adds	r2, #26
 8008b26:	9901      	ldr	r1, [sp, #4]
 8008b28:	9800      	ldr	r0, [sp, #0]
 8008b2a:	9e08      	ldr	r6, [sp, #32]
 8008b2c:	47b0      	blx	r6
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d0e6      	beq.n	8008b00 <_printf_common+0xa4>
 8008b32:	3701      	adds	r7, #1
 8008b34:	e7d1      	b.n	8008ada <_printf_common+0x7e>
	...

08008b38 <_printf_i>:
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b08b      	sub	sp, #44	; 0x2c
 8008b3c:	9206      	str	r2, [sp, #24]
 8008b3e:	000a      	movs	r2, r1
 8008b40:	3243      	adds	r2, #67	; 0x43
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	9005      	str	r0, [sp, #20]
 8008b46:	9204      	str	r2, [sp, #16]
 8008b48:	7e0a      	ldrb	r2, [r1, #24]
 8008b4a:	000c      	movs	r4, r1
 8008b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b4e:	2a6e      	cmp	r2, #110	; 0x6e
 8008b50:	d100      	bne.n	8008b54 <_printf_i+0x1c>
 8008b52:	e08f      	b.n	8008c74 <_printf_i+0x13c>
 8008b54:	d817      	bhi.n	8008b86 <_printf_i+0x4e>
 8008b56:	2a63      	cmp	r2, #99	; 0x63
 8008b58:	d02c      	beq.n	8008bb4 <_printf_i+0x7c>
 8008b5a:	d808      	bhi.n	8008b6e <_printf_i+0x36>
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	d100      	bne.n	8008b62 <_printf_i+0x2a>
 8008b60:	e099      	b.n	8008c96 <_printf_i+0x15e>
 8008b62:	2a58      	cmp	r2, #88	; 0x58
 8008b64:	d054      	beq.n	8008c10 <_printf_i+0xd8>
 8008b66:	0026      	movs	r6, r4
 8008b68:	3642      	adds	r6, #66	; 0x42
 8008b6a:	7032      	strb	r2, [r6, #0]
 8008b6c:	e029      	b.n	8008bc2 <_printf_i+0x8a>
 8008b6e:	2a64      	cmp	r2, #100	; 0x64
 8008b70:	d001      	beq.n	8008b76 <_printf_i+0x3e>
 8008b72:	2a69      	cmp	r2, #105	; 0x69
 8008b74:	d1f7      	bne.n	8008b66 <_printf_i+0x2e>
 8008b76:	6821      	ldr	r1, [r4, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	0608      	lsls	r0, r1, #24
 8008b7c:	d523      	bpl.n	8008bc6 <_printf_i+0x8e>
 8008b7e:	1d11      	adds	r1, r2, #4
 8008b80:	6019      	str	r1, [r3, #0]
 8008b82:	6815      	ldr	r5, [r2, #0]
 8008b84:	e025      	b.n	8008bd2 <_printf_i+0x9a>
 8008b86:	2a73      	cmp	r2, #115	; 0x73
 8008b88:	d100      	bne.n	8008b8c <_printf_i+0x54>
 8008b8a:	e088      	b.n	8008c9e <_printf_i+0x166>
 8008b8c:	d808      	bhi.n	8008ba0 <_printf_i+0x68>
 8008b8e:	2a6f      	cmp	r2, #111	; 0x6f
 8008b90:	d029      	beq.n	8008be6 <_printf_i+0xae>
 8008b92:	2a70      	cmp	r2, #112	; 0x70
 8008b94:	d1e7      	bne.n	8008b66 <_printf_i+0x2e>
 8008b96:	2220      	movs	r2, #32
 8008b98:	6809      	ldr	r1, [r1, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	6022      	str	r2, [r4, #0]
 8008b9e:	e003      	b.n	8008ba8 <_printf_i+0x70>
 8008ba0:	2a75      	cmp	r2, #117	; 0x75
 8008ba2:	d020      	beq.n	8008be6 <_printf_i+0xae>
 8008ba4:	2a78      	cmp	r2, #120	; 0x78
 8008ba6:	d1de      	bne.n	8008b66 <_printf_i+0x2e>
 8008ba8:	0022      	movs	r2, r4
 8008baa:	2178      	movs	r1, #120	; 0x78
 8008bac:	3245      	adds	r2, #69	; 0x45
 8008bae:	7011      	strb	r1, [r2, #0]
 8008bb0:	4a6c      	ldr	r2, [pc, #432]	; (8008d64 <_printf_i+0x22c>)
 8008bb2:	e030      	b.n	8008c16 <_printf_i+0xde>
 8008bb4:	000e      	movs	r6, r1
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	3642      	adds	r6, #66	; 0x42
 8008bba:	1d11      	adds	r1, r2, #4
 8008bbc:	6019      	str	r1, [r3, #0]
 8008bbe:	6813      	ldr	r3, [r2, #0]
 8008bc0:	7033      	strb	r3, [r6, #0]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e079      	b.n	8008cba <_printf_i+0x182>
 8008bc6:	0649      	lsls	r1, r1, #25
 8008bc8:	d5d9      	bpl.n	8008b7e <_printf_i+0x46>
 8008bca:	1d11      	adds	r1, r2, #4
 8008bcc:	6019      	str	r1, [r3, #0]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	5ed5      	ldrsh	r5, [r2, r3]
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	da03      	bge.n	8008bde <_printf_i+0xa6>
 8008bd6:	232d      	movs	r3, #45	; 0x2d
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	426d      	negs	r5, r5
 8008bdc:	7013      	strb	r3, [r2, #0]
 8008bde:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <_printf_i+0x230>)
 8008be0:	270a      	movs	r7, #10
 8008be2:	9303      	str	r3, [sp, #12]
 8008be4:	e02f      	b.n	8008c46 <_printf_i+0x10e>
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	0605      	lsls	r5, r0, #24
 8008bec:	d503      	bpl.n	8008bf6 <_printf_i+0xbe>
 8008bee:	1d08      	adds	r0, r1, #4
 8008bf0:	6018      	str	r0, [r3, #0]
 8008bf2:	680d      	ldr	r5, [r1, #0]
 8008bf4:	e005      	b.n	8008c02 <_printf_i+0xca>
 8008bf6:	0640      	lsls	r0, r0, #25
 8008bf8:	d5f9      	bpl.n	8008bee <_printf_i+0xb6>
 8008bfa:	680d      	ldr	r5, [r1, #0]
 8008bfc:	1d08      	adds	r0, r1, #4
 8008bfe:	6018      	str	r0, [r3, #0]
 8008c00:	b2ad      	uxth	r5, r5
 8008c02:	4b59      	ldr	r3, [pc, #356]	; (8008d68 <_printf_i+0x230>)
 8008c04:	2708      	movs	r7, #8
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	2a6f      	cmp	r2, #111	; 0x6f
 8008c0a:	d018      	beq.n	8008c3e <_printf_i+0x106>
 8008c0c:	270a      	movs	r7, #10
 8008c0e:	e016      	b.n	8008c3e <_printf_i+0x106>
 8008c10:	3145      	adds	r1, #69	; 0x45
 8008c12:	700a      	strb	r2, [r1, #0]
 8008c14:	4a54      	ldr	r2, [pc, #336]	; (8008d68 <_printf_i+0x230>)
 8008c16:	9203      	str	r2, [sp, #12]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6821      	ldr	r1, [r4, #0]
 8008c1c:	1d10      	adds	r0, r2, #4
 8008c1e:	6018      	str	r0, [r3, #0]
 8008c20:	6815      	ldr	r5, [r2, #0]
 8008c22:	0608      	lsls	r0, r1, #24
 8008c24:	d522      	bpl.n	8008c6c <_printf_i+0x134>
 8008c26:	07cb      	lsls	r3, r1, #31
 8008c28:	d502      	bpl.n	8008c30 <_printf_i+0xf8>
 8008c2a:	2320      	movs	r3, #32
 8008c2c:	4319      	orrs	r1, r3
 8008c2e:	6021      	str	r1, [r4, #0]
 8008c30:	2710      	movs	r7, #16
 8008c32:	2d00      	cmp	r5, #0
 8008c34:	d103      	bne.n	8008c3e <_printf_i+0x106>
 8008c36:	2320      	movs	r3, #32
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	439a      	bics	r2, r3
 8008c3c:	6022      	str	r2, [r4, #0]
 8008c3e:	0023      	movs	r3, r4
 8008c40:	2200      	movs	r2, #0
 8008c42:	3343      	adds	r3, #67	; 0x43
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db5c      	blt.n	8008d08 <_printf_i+0x1d0>
 8008c4e:	2204      	movs	r2, #4
 8008c50:	6821      	ldr	r1, [r4, #0]
 8008c52:	4391      	bics	r1, r2
 8008c54:	6021      	str	r1, [r4, #0]
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	d158      	bne.n	8008d0c <_printf_i+0x1d4>
 8008c5a:	9e04      	ldr	r6, [sp, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d064      	beq.n	8008d2a <_printf_i+0x1f2>
 8008c60:	0026      	movs	r6, r4
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	3642      	adds	r6, #66	; 0x42
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	7033      	strb	r3, [r6, #0]
 8008c6a:	e05e      	b.n	8008d2a <_printf_i+0x1f2>
 8008c6c:	0648      	lsls	r0, r1, #25
 8008c6e:	d5da      	bpl.n	8008c26 <_printf_i+0xee>
 8008c70:	b2ad      	uxth	r5, r5
 8008c72:	e7d8      	b.n	8008c26 <_printf_i+0xee>
 8008c74:	6809      	ldr	r1, [r1, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	0608      	lsls	r0, r1, #24
 8008c7a:	d505      	bpl.n	8008c88 <_printf_i+0x150>
 8008c7c:	1d11      	adds	r1, r2, #4
 8008c7e:	6019      	str	r1, [r3, #0]
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	6962      	ldr	r2, [r4, #20]
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e006      	b.n	8008c96 <_printf_i+0x15e>
 8008c88:	0649      	lsls	r1, r1, #25
 8008c8a:	d5f7      	bpl.n	8008c7c <_printf_i+0x144>
 8008c8c:	1d11      	adds	r1, r2, #4
 8008c8e:	6019      	str	r1, [r3, #0]
 8008c90:	6813      	ldr	r3, [r2, #0]
 8008c92:	8aa2      	ldrh	r2, [r4, #20]
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9e04      	ldr	r6, [sp, #16]
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	e054      	b.n	8008d48 <_printf_i+0x210>
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	1d11      	adds	r1, r2, #4
 8008ca2:	6019      	str	r1, [r3, #0]
 8008ca4:	6816      	ldr	r6, [r2, #0]
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6862      	ldr	r2, [r4, #4]
 8008caa:	0030      	movs	r0, r6
 8008cac:	f000 f936 	bl	8008f1c <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d001      	beq.n	8008cb8 <_printf_i+0x180>
 8008cb4:	1b80      	subs	r0, r0, r6
 8008cb6:	6060      	str	r0, [r4, #4]
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	e041      	b.n	8008d48 <_printf_i+0x210>
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	0032      	movs	r2, r6
 8008cc8:	9906      	ldr	r1, [sp, #24]
 8008cca:	9805      	ldr	r0, [sp, #20]
 8008ccc:	9d07      	ldr	r5, [sp, #28]
 8008cce:	47a8      	blx	r5
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d043      	beq.n	8008d5c <_printf_i+0x224>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	079b      	lsls	r3, r3, #30
 8008cda:	d40f      	bmi.n	8008cfc <_printf_i+0x1c4>
 8008cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	4298      	cmp	r0, r3
 8008ce2:	da3d      	bge.n	8008d60 <_printf_i+0x228>
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	e03b      	b.n	8008d60 <_printf_i+0x228>
 8008ce8:	0022      	movs	r2, r4
 8008cea:	2301      	movs	r3, #1
 8008cec:	3219      	adds	r2, #25
 8008cee:	9906      	ldr	r1, [sp, #24]
 8008cf0:	9805      	ldr	r0, [sp, #20]
 8008cf2:	9e07      	ldr	r6, [sp, #28]
 8008cf4:	47b0      	blx	r6
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	d030      	beq.n	8008d5c <_printf_i+0x224>
 8008cfa:	3501      	adds	r5, #1
 8008cfc:	68e3      	ldr	r3, [r4, #12]
 8008cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	429d      	cmp	r5, r3
 8008d04:	dbf0      	blt.n	8008ce8 <_printf_i+0x1b0>
 8008d06:	e7e9      	b.n	8008cdc <_printf_i+0x1a4>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d0a9      	beq.n	8008c60 <_printf_i+0x128>
 8008d0c:	9e04      	ldr	r6, [sp, #16]
 8008d0e:	0028      	movs	r0, r5
 8008d10:	0039      	movs	r1, r7
 8008d12:	f7f7 fa8f 	bl	8000234 <__aeabi_uidivmod>
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	3e01      	subs	r6, #1
 8008d1a:	5c5b      	ldrb	r3, [r3, r1]
 8008d1c:	0028      	movs	r0, r5
 8008d1e:	7033      	strb	r3, [r6, #0]
 8008d20:	0039      	movs	r1, r7
 8008d22:	f7f7 fa01 	bl	8000128 <__udivsi3>
 8008d26:	1e05      	subs	r5, r0, #0
 8008d28:	d1f1      	bne.n	8008d0e <_printf_i+0x1d6>
 8008d2a:	2f08      	cmp	r7, #8
 8008d2c:	d109      	bne.n	8008d42 <_printf_i+0x20a>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	07db      	lsls	r3, r3, #31
 8008d32:	d506      	bpl.n	8008d42 <_printf_i+0x20a>
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	dc02      	bgt.n	8008d42 <_printf_i+0x20a>
 8008d3c:	2330      	movs	r3, #48	; 0x30
 8008d3e:	3e01      	subs	r6, #1
 8008d40:	7033      	strb	r3, [r6, #0]
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	1b9b      	subs	r3, r3, r6
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	aa09      	add	r2, sp, #36	; 0x24
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	0021      	movs	r1, r4
 8008d50:	9b06      	ldr	r3, [sp, #24]
 8008d52:	9805      	ldr	r0, [sp, #20]
 8008d54:	f7ff fe82 	bl	8008a5c <_printf_common>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d1b3      	bne.n	8008cc4 <_printf_i+0x18c>
 8008d5c:	2001      	movs	r0, #1
 8008d5e:	4240      	negs	r0, r0
 8008d60:	b00b      	add	sp, #44	; 0x2c
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	0800a49e 	.word	0x0800a49e
 8008d68:	0800a48d 	.word	0x0800a48d

08008d6c <siscanf>:
 8008d6c:	b40e      	push	{r1, r2, r3}
 8008d6e:	2381      	movs	r3, #129	; 0x81
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	b09d      	sub	sp, #116	; 0x74
 8008d74:	ac02      	add	r4, sp, #8
 8008d76:	ad21      	add	r5, sp, #132	; 0x84
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	cd40      	ldmia	r5!, {r6}
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	9002      	str	r0, [sp, #8]
 8008d80:	9006      	str	r0, [sp, #24]
 8008d82:	f7f7 f9c9 	bl	8000118 <strlen>
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <siscanf+0x48>)
 8008d88:	6060      	str	r0, [r4, #4]
 8008d8a:	6263      	str	r3, [r4, #36]	; 0x24
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6160      	str	r0, [r4, #20]
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <siscanf+0x4c>)
 8008d92:	6363      	str	r3, [r4, #52]	; 0x34
 8008d94:	64a3      	str	r3, [r4, #72]	; 0x48
 8008d96:	3b01      	subs	r3, #1
 8008d98:	81e3      	strh	r3, [r4, #14]
 8008d9a:	0032      	movs	r2, r6
 8008d9c:	002b      	movs	r3, r5
 8008d9e:	0021      	movs	r1, r4
 8008da0:	6800      	ldr	r0, [r0, #0]
 8008da2:	9501      	str	r5, [sp, #4]
 8008da4:	f000 f958 	bl	8009058 <__ssvfiscanf_r>
 8008da8:	b01d      	add	sp, #116	; 0x74
 8008daa:	bc70      	pop	{r4, r5, r6}
 8008dac:	bc08      	pop	{r3}
 8008dae:	b003      	add	sp, #12
 8008db0:	4718      	bx	r3
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	08008dbd 	.word	0x08008dbd
 8008db8:	20000244 	.word	0x20000244

08008dbc <__seofread>:
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	4770      	bx	lr

08008dc0 <_strtoul_l.isra.0>:
 8008dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc2:	001f      	movs	r7, r3
 8008dc4:	000e      	movs	r6, r1
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	9005      	str	r0, [sp, #20]
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	9201      	str	r2, [sp, #4]
 8008dce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008dd0:	7834      	ldrb	r4, [r6, #0]
 8008dd2:	f7fe fd37 	bl	8007844 <__locale_ctype_ptr_l>
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	1900      	adds	r0, r0, r4
 8008dda:	7843      	ldrb	r3, [r0, #1]
 8008ddc:	1c75      	adds	r5, r6, #1
 8008dde:	4013      	ands	r3, r2
 8008de0:	d10c      	bne.n	8008dfc <_strtoul_l.isra.0+0x3c>
 8008de2:	2c2d      	cmp	r4, #45	; 0x2d
 8008de4:	d10c      	bne.n	8008e00 <_strtoul_l.isra.0+0x40>
 8008de6:	3301      	adds	r3, #1
 8008de8:	782c      	ldrb	r4, [r5, #0]
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	1cb5      	adds	r5, r6, #2
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	d00c      	beq.n	8008e0c <_strtoul_l.isra.0+0x4c>
 8008df2:	2f10      	cmp	r7, #16
 8008df4:	d114      	bne.n	8008e20 <_strtoul_l.isra.0+0x60>
 8008df6:	2c30      	cmp	r4, #48	; 0x30
 8008df8:	d00a      	beq.n	8008e10 <_strtoul_l.isra.0+0x50>
 8008dfa:	e011      	b.n	8008e20 <_strtoul_l.isra.0+0x60>
 8008dfc:	002e      	movs	r6, r5
 8008dfe:	e7e6      	b.n	8008dce <_strtoul_l.isra.0+0xe>
 8008e00:	9302      	str	r3, [sp, #8]
 8008e02:	2c2b      	cmp	r4, #43	; 0x2b
 8008e04:	d1f3      	bne.n	8008dee <_strtoul_l.isra.0+0x2e>
 8008e06:	782c      	ldrb	r4, [r5, #0]
 8008e08:	1cb5      	adds	r5, r6, #2
 8008e0a:	e7f0      	b.n	8008dee <_strtoul_l.isra.0+0x2e>
 8008e0c:	2c30      	cmp	r4, #48	; 0x30
 8008e0e:	d12f      	bne.n	8008e70 <_strtoul_l.isra.0+0xb0>
 8008e10:	2220      	movs	r2, #32
 8008e12:	782b      	ldrb	r3, [r5, #0]
 8008e14:	4393      	bics	r3, r2
 8008e16:	2b58      	cmp	r3, #88	; 0x58
 8008e18:	d154      	bne.n	8008ec4 <_strtoul_l.isra.0+0x104>
 8008e1a:	2710      	movs	r7, #16
 8008e1c:	786c      	ldrb	r4, [r5, #1]
 8008e1e:	3502      	adds	r5, #2
 8008e20:	2001      	movs	r0, #1
 8008e22:	0039      	movs	r1, r7
 8008e24:	4240      	negs	r0, r0
 8008e26:	f7f7 f97f 	bl	8000128 <__udivsi3>
 8008e2a:	0006      	movs	r6, r0
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	0039      	movs	r1, r7
 8008e30:	4240      	negs	r0, r0
 8008e32:	f7f7 f9ff 	bl	8000234 <__aeabi_uidivmod>
 8008e36:	2300      	movs	r3, #0
 8008e38:	9104      	str	r1, [sp, #16]
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	0018      	movs	r0, r3
 8008e40:	468c      	mov	ip, r1
 8008e42:	4252      	negs	r2, r2
 8008e44:	0021      	movs	r1, r4
 8008e46:	3930      	subs	r1, #48	; 0x30
 8008e48:	2909      	cmp	r1, #9
 8008e4a:	d813      	bhi.n	8008e74 <_strtoul_l.isra.0+0xb4>
 8008e4c:	000c      	movs	r4, r1
 8008e4e:	42a7      	cmp	r7, r4
 8008e50:	dd1e      	ble.n	8008e90 <_strtoul_l.isra.0+0xd0>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	db1a      	blt.n	8008e8c <_strtoul_l.isra.0+0xcc>
 8008e56:	0013      	movs	r3, r2
 8008e58:	4286      	cmp	r6, r0
 8008e5a:	d306      	bcc.n	8008e6a <_strtoul_l.isra.0+0xaa>
 8008e5c:	d102      	bne.n	8008e64 <_strtoul_l.isra.0+0xa4>
 8008e5e:	9904      	ldr	r1, [sp, #16]
 8008e60:	42a1      	cmp	r1, r4
 8008e62:	db02      	blt.n	8008e6a <_strtoul_l.isra.0+0xaa>
 8008e64:	4663      	mov	r3, ip
 8008e66:	4378      	muls	r0, r7
 8008e68:	1820      	adds	r0, r4, r0
 8008e6a:	782c      	ldrb	r4, [r5, #0]
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	e7e9      	b.n	8008e44 <_strtoul_l.isra.0+0x84>
 8008e70:	270a      	movs	r7, #10
 8008e72:	e7d5      	b.n	8008e20 <_strtoul_l.isra.0+0x60>
 8008e74:	0021      	movs	r1, r4
 8008e76:	3941      	subs	r1, #65	; 0x41
 8008e78:	2919      	cmp	r1, #25
 8008e7a:	d801      	bhi.n	8008e80 <_strtoul_l.isra.0+0xc0>
 8008e7c:	3c37      	subs	r4, #55	; 0x37
 8008e7e:	e7e6      	b.n	8008e4e <_strtoul_l.isra.0+0x8e>
 8008e80:	0021      	movs	r1, r4
 8008e82:	3961      	subs	r1, #97	; 0x61
 8008e84:	2919      	cmp	r1, #25
 8008e86:	d803      	bhi.n	8008e90 <_strtoul_l.isra.0+0xd0>
 8008e88:	3c57      	subs	r4, #87	; 0x57
 8008e8a:	e7e0      	b.n	8008e4e <_strtoul_l.isra.0+0x8e>
 8008e8c:	0013      	movs	r3, r2
 8008e8e:	e7ec      	b.n	8008e6a <_strtoul_l.isra.0+0xaa>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da09      	bge.n	8008ea8 <_strtoul_l.isra.0+0xe8>
 8008e94:	2322      	movs	r3, #34	; 0x22
 8008e96:	2001      	movs	r0, #1
 8008e98:	9a05      	ldr	r2, [sp, #20]
 8008e9a:	4240      	negs	r0, r0
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <_strtoul_l.isra.0+0xfc>
 8008ea4:	b007      	add	sp, #28
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	9a02      	ldr	r2, [sp, #8]
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	d000      	beq.n	8008eb0 <_strtoul_l.isra.0+0xf0>
 8008eae:	4240      	negs	r0, r0
 8008eb0:	9a01      	ldr	r2, [sp, #4]
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	d0f6      	beq.n	8008ea4 <_strtoul_l.isra.0+0xe4>
 8008eb6:	9a03      	ldr	r2, [sp, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d000      	beq.n	8008ebe <_strtoul_l.isra.0+0xfe>
 8008ebc:	1e6a      	subs	r2, r5, #1
 8008ebe:	9b01      	ldr	r3, [sp, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	e7ef      	b.n	8008ea4 <_strtoul_l.isra.0+0xe4>
 8008ec4:	2430      	movs	r4, #48	; 0x30
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d1aa      	bne.n	8008e20 <_strtoul_l.isra.0+0x60>
 8008eca:	3708      	adds	r7, #8
 8008ecc:	e7a8      	b.n	8008e20 <_strtoul_l.isra.0+0x60>
	...

08008ed0 <_strtoul_r>:
 8008ed0:	b513      	push	{r0, r1, r4, lr}
 8008ed2:	4c05      	ldr	r4, [pc, #20]	; (8008ee8 <_strtoul_r+0x18>)
 8008ed4:	6824      	ldr	r4, [r4, #0]
 8008ed6:	6a24      	ldr	r4, [r4, #32]
 8008ed8:	2c00      	cmp	r4, #0
 8008eda:	d100      	bne.n	8008ede <_strtoul_r+0xe>
 8008edc:	4c03      	ldr	r4, [pc, #12]	; (8008eec <_strtoul_r+0x1c>)
 8008ede:	9400      	str	r4, [sp, #0]
 8008ee0:	f7ff ff6e 	bl	8008dc0 <_strtoul_l.isra.0>
 8008ee4:	bd16      	pop	{r1, r2, r4, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	20000244 	.word	0x20000244
 8008eec:	20000090 	.word	0x20000090

08008ef0 <strtoul>:
 8008ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef2:	0013      	movs	r3, r2
 8008ef4:	4a06      	ldr	r2, [pc, #24]	; (8008f10 <strtoul+0x20>)
 8008ef6:	0005      	movs	r5, r0
 8008ef8:	6810      	ldr	r0, [r2, #0]
 8008efa:	6a04      	ldr	r4, [r0, #32]
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	d100      	bne.n	8008f02 <strtoul+0x12>
 8008f00:	4c04      	ldr	r4, [pc, #16]	; (8008f14 <strtoul+0x24>)
 8008f02:	000a      	movs	r2, r1
 8008f04:	9400      	str	r4, [sp, #0]
 8008f06:	0029      	movs	r1, r5
 8008f08:	f7ff ff5a 	bl	8008dc0 <_strtoul_l.isra.0>
 8008f0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	20000244 	.word	0x20000244
 8008f14:	20000090 	.word	0x20000090

08008f18 <__env_lock>:
 8008f18:	4770      	bx	lr

08008f1a <__env_unlock>:
 8008f1a:	4770      	bx	lr

08008f1c <memchr>:
 8008f1c:	b2c9      	uxtb	r1, r1
 8008f1e:	1882      	adds	r2, r0, r2
 8008f20:	4290      	cmp	r0, r2
 8008f22:	d101      	bne.n	8008f28 <memchr+0xc>
 8008f24:	2000      	movs	r0, #0
 8008f26:	4770      	bx	lr
 8008f28:	7803      	ldrb	r3, [r0, #0]
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	d0fb      	beq.n	8008f26 <memchr+0xa>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	e7f6      	b.n	8008f20 <memchr+0x4>

08008f32 <memmove>:
 8008f32:	b510      	push	{r4, lr}
 8008f34:	4288      	cmp	r0, r1
 8008f36:	d902      	bls.n	8008f3e <memmove+0xc>
 8008f38:	188b      	adds	r3, r1, r2
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	d308      	bcc.n	8008f50 <memmove+0x1e>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d007      	beq.n	8008f54 <memmove+0x22>
 8008f44:	5ccc      	ldrb	r4, [r1, r3]
 8008f46:	54c4      	strb	r4, [r0, r3]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	e7f9      	b.n	8008f40 <memmove+0xe>
 8008f4c:	5c8b      	ldrb	r3, [r1, r2]
 8008f4e:	5483      	strb	r3, [r0, r2]
 8008f50:	3a01      	subs	r2, #1
 8008f52:	d2fb      	bcs.n	8008f4c <memmove+0x1a>
 8008f54:	bd10      	pop	{r4, pc}

08008f56 <_realloc_r>:
 8008f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f58:	0007      	movs	r7, r0
 8008f5a:	000d      	movs	r5, r1
 8008f5c:	0016      	movs	r6, r2
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d105      	bne.n	8008f6e <_realloc_r+0x18>
 8008f62:	0011      	movs	r1, r2
 8008f64:	f7fe ff66 	bl	8007e34 <_malloc_r>
 8008f68:	0004      	movs	r4, r0
 8008f6a:	0020      	movs	r0, r4
 8008f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	d103      	bne.n	8008f7a <_realloc_r+0x24>
 8008f72:	f7fe ff15 	bl	8007da0 <_free_r>
 8008f76:	0034      	movs	r4, r6
 8008f78:	e7f7      	b.n	8008f6a <_realloc_r+0x14>
 8008f7a:	f000 fbc7 	bl	800970c <_malloc_usable_size_r>
 8008f7e:	002c      	movs	r4, r5
 8008f80:	4286      	cmp	r6, r0
 8008f82:	d9f2      	bls.n	8008f6a <_realloc_r+0x14>
 8008f84:	0031      	movs	r1, r6
 8008f86:	0038      	movs	r0, r7
 8008f88:	f7fe ff54 	bl	8007e34 <_malloc_r>
 8008f8c:	1e04      	subs	r4, r0, #0
 8008f8e:	d0ec      	beq.n	8008f6a <_realloc_r+0x14>
 8008f90:	0029      	movs	r1, r5
 8008f92:	0032      	movs	r2, r6
 8008f94:	f7fe fc9d 	bl	80078d2 <memcpy>
 8008f98:	0029      	movs	r1, r5
 8008f9a:	0038      	movs	r0, r7
 8008f9c:	f7fe ff00 	bl	8007da0 <_free_r>
 8008fa0:	e7e3      	b.n	8008f6a <_realloc_r+0x14>

08008fa2 <_sungetc_r>:
 8008fa2:	b570      	push	{r4, r5, r6, lr}
 8008fa4:	0014      	movs	r4, r2
 8008fa6:	1c4b      	adds	r3, r1, #1
 8008fa8:	d103      	bne.n	8008fb2 <_sungetc_r+0x10>
 8008faa:	2501      	movs	r5, #1
 8008fac:	426d      	negs	r5, r5
 8008fae:	0028      	movs	r0, r5
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	8993      	ldrh	r3, [r2, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	4393      	bics	r3, r2
 8008fb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	b2ce      	uxtb	r6, r1
 8008fbe:	b2cd      	uxtb	r5, r1
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	d010      	beq.n	8008fe8 <_sungetc_r+0x46>
 8008fc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	da07      	bge.n	8008fdc <_sungetc_r+0x3a>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	701e      	strb	r6, [r3, #0]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	e7e8      	b.n	8008fae <_sungetc_r+0xc>
 8008fdc:	0021      	movs	r1, r4
 8008fde:	f000 fb57 	bl	8009690 <__submore>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0f2      	beq.n	8008fcc <_sungetc_r+0x2a>
 8008fe6:	e7e0      	b.n	8008faa <_sungetc_r+0x8>
 8008fe8:	6921      	ldr	r1, [r4, #16]
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d007      	beq.n	8009000 <_sungetc_r+0x5e>
 8008ff0:	4291      	cmp	r1, r2
 8008ff2:	d205      	bcs.n	8009000 <_sungetc_r+0x5e>
 8008ff4:	1e51      	subs	r1, r2, #1
 8008ff6:	7808      	ldrb	r0, [r1, #0]
 8008ff8:	4285      	cmp	r5, r0
 8008ffa:	d101      	bne.n	8009000 <_sungetc_r+0x5e>
 8008ffc:	6021      	str	r1, [r4, #0]
 8008ffe:	e7ea      	b.n	8008fd6 <_sungetc_r+0x34>
 8009000:	6423      	str	r3, [r4, #64]	; 0x40
 8009002:	0023      	movs	r3, r4
 8009004:	3344      	adds	r3, #68	; 0x44
 8009006:	6363      	str	r3, [r4, #52]	; 0x34
 8009008:	2303      	movs	r3, #3
 800900a:	63a3      	str	r3, [r4, #56]	; 0x38
 800900c:	0023      	movs	r3, r4
 800900e:	3346      	adds	r3, #70	; 0x46
 8009010:	63e2      	str	r2, [r4, #60]	; 0x3c
 8009012:	701e      	strb	r6, [r3, #0]
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2301      	movs	r3, #1
 8009018:	e7de      	b.n	8008fd8 <_sungetc_r+0x36>

0800901a <__ssrefill_r>:
 800901a:	b510      	push	{r4, lr}
 800901c:	000c      	movs	r4, r1
 800901e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009020:	2900      	cmp	r1, #0
 8009022:	d00e      	beq.n	8009042 <__ssrefill_r+0x28>
 8009024:	0023      	movs	r3, r4
 8009026:	3344      	adds	r3, #68	; 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d001      	beq.n	8009030 <__ssrefill_r+0x16>
 800902c:	f7fe feb8 	bl	8007da0 <_free_r>
 8009030:	2000      	movs	r0, #0
 8009032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009034:	6360      	str	r0, [r4, #52]	; 0x34
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	4283      	cmp	r3, r0
 800903a:	d002      	beq.n	8009042 <__ssrefill_r+0x28>
 800903c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd10      	pop	{r4, pc}
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	2001      	movs	r0, #1
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	2300      	movs	r3, #0
 800904a:	89a2      	ldrh	r2, [r4, #12]
 800904c:	6063      	str	r3, [r4, #4]
 800904e:	3320      	adds	r3, #32
 8009050:	4313      	orrs	r3, r2
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	4240      	negs	r0, r0
 8009056:	e7f3      	b.n	8009040 <__ssrefill_r+0x26>

08009058 <__ssvfiscanf_r>:
 8009058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905a:	4cbd      	ldr	r4, [pc, #756]	; (8009350 <__ssvfiscanf_r+0x2f8>)
 800905c:	2586      	movs	r5, #134	; 0x86
 800905e:	44a5      	add	sp, r4
 8009060:	9303      	str	r3, [sp, #12]
 8009062:	2300      	movs	r3, #0
 8009064:	9348      	str	r3, [sp, #288]	; 0x120
 8009066:	9349      	str	r3, [sp, #292]	; 0x124
 8009068:	ab05      	add	r3, sp, #20
 800906a:	934a      	str	r3, [sp, #296]	; 0x128
 800906c:	23be      	movs	r3, #190	; 0xbe
 800906e:	006d      	lsls	r5, r5, #1
 8009070:	9000      	str	r0, [sp, #0]
 8009072:	000c      	movs	r4, r1
 8009074:	a802      	add	r0, sp, #8
 8009076:	49b7      	ldr	r1, [pc, #732]	; (8009354 <__ssvfiscanf_r+0x2fc>)
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	1940      	adds	r0, r0, r5
 800907c:	27c0      	movs	r7, #192	; 0xc0
 800907e:	50c1      	str	r1, [r0, r3]
 8009080:	ab02      	add	r3, sp, #8
 8009082:	195b      	adds	r3, r3, r5
 8009084:	0015      	movs	r5, r2
 8009086:	49b4      	ldr	r1, [pc, #720]	; (8009358 <__ssvfiscanf_r+0x300>)
 8009088:	007f      	lsls	r7, r7, #1
 800908a:	51d9      	str	r1, [r3, r7]
 800908c:	782b      	ldrb	r3, [r5, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d100      	bne.n	8009094 <__ssvfiscanf_r+0x3c>
 8009092:	e15b      	b.n	800934c <__ssvfiscanf_r+0x2f4>
 8009094:	f7fe fbda 	bl	800784c <__locale_ctype_ptr>
 8009098:	2208      	movs	r2, #8
 800909a:	782b      	ldrb	r3, [r5, #0]
 800909c:	18c0      	adds	r0, r0, r3
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	7843      	ldrb	r3, [r0, #1]
 80090a2:	4013      	ands	r3, r2
 80090a4:	d141      	bne.n	800912a <__ssvfiscanf_r+0xd2>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	1c6e      	adds	r6, r5, #1
 80090aa:	2a25      	cmp	r2, #37	; 0x25
 80090ac:	d000      	beq.n	80090b0 <__ssvfiscanf_r+0x58>
 80090ae:	e0a8      	b.n	8009202 <__ssvfiscanf_r+0x1aa>
 80090b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80090b2:	9345      	str	r3, [sp, #276]	; 0x114
 80090b4:	786b      	ldrb	r3, [r5, #1]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d102      	bne.n	80090c0 <__ssvfiscanf_r+0x68>
 80090ba:	3b1a      	subs	r3, #26
 80090bc:	9345      	str	r3, [sp, #276]	; 0x114
 80090be:	1cae      	adds	r6, r5, #2
 80090c0:	0035      	movs	r5, r6
 80090c2:	220a      	movs	r2, #10
 80090c4:	7829      	ldrb	r1, [r5, #0]
 80090c6:	000b      	movs	r3, r1
 80090c8:	3b30      	subs	r3, #48	; 0x30
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d948      	bls.n	8009160 <__ssvfiscanf_r+0x108>
 80090ce:	4ea3      	ldr	r6, [pc, #652]	; (800935c <__ssvfiscanf_r+0x304>)
 80090d0:	2203      	movs	r2, #3
 80090d2:	0030      	movs	r0, r6
 80090d4:	f7ff ff22 	bl	8008f1c <memchr>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d007      	beq.n	80090ec <__ssvfiscanf_r+0x94>
 80090dc:	2301      	movs	r3, #1
 80090de:	1b80      	subs	r0, r0, r6
 80090e0:	4083      	lsls	r3, r0
 80090e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80090e4:	3501      	adds	r5, #1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	9345      	str	r3, [sp, #276]	; 0x114
 80090ec:	782b      	ldrb	r3, [r5, #0]
 80090ee:	1c6e      	adds	r6, r5, #1
 80090f0:	2b67      	cmp	r3, #103	; 0x67
 80090f2:	d858      	bhi.n	80091a6 <__ssvfiscanf_r+0x14e>
 80090f4:	2b65      	cmp	r3, #101	; 0x65
 80090f6:	d300      	bcc.n	80090fa <__ssvfiscanf_r+0xa2>
 80090f8:	e0dd      	b.n	80092b6 <__ssvfiscanf_r+0x25e>
 80090fa:	2b47      	cmp	r3, #71	; 0x47
 80090fc:	d838      	bhi.n	8009170 <__ssvfiscanf_r+0x118>
 80090fe:	2b45      	cmp	r3, #69	; 0x45
 8009100:	d300      	bcc.n	8009104 <__ssvfiscanf_r+0xac>
 8009102:	e0d8      	b.n	80092b6 <__ssvfiscanf_r+0x25e>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d100      	bne.n	800910a <__ssvfiscanf_r+0xb2>
 8009108:	e11d      	b.n	8009346 <__ssvfiscanf_r+0x2ee>
 800910a:	2b25      	cmp	r3, #37	; 0x25
 800910c:	d079      	beq.n	8009202 <__ssvfiscanf_r+0x1aa>
 800910e:	2303      	movs	r3, #3
 8009110:	934b      	str	r3, [sp, #300]	; 0x12c
 8009112:	3307      	adds	r3, #7
 8009114:	9346      	str	r3, [sp, #280]	; 0x118
 8009116:	e053      	b.n	80091c0 <__ssvfiscanf_r+0x168>
 8009118:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800911a:	3301      	adds	r3, #1
 800911c:	9201      	str	r2, [sp, #4]
 800911e:	3201      	adds	r2, #1
 8009120:	9249      	str	r2, [sp, #292]	; 0x124
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	3a01      	subs	r2, #1
 8009128:	6062      	str	r2, [r4, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd0b      	ble.n	8009148 <__ssvfiscanf_r+0xf0>
 8009130:	f7fe fb8c 	bl	800784c <__locale_ctype_ptr>
 8009134:	2108      	movs	r1, #8
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	1880      	adds	r0, r0, r2
 800913c:	7842      	ldrb	r2, [r0, #1]
 800913e:	420a      	tst	r2, r1
 8009140:	d1ea      	bne.n	8009118 <__ssvfiscanf_r+0xc0>
 8009142:	1c6e      	adds	r6, r5, #1
 8009144:	0035      	movs	r5, r6
 8009146:	e7a1      	b.n	800908c <__ssvfiscanf_r+0x34>
 8009148:	2286      	movs	r2, #134	; 0x86
 800914a:	ab02      	add	r3, sp, #8
 800914c:	0052      	lsls	r2, r2, #1
 800914e:	189b      	adds	r3, r3, r2
 8009150:	59db      	ldr	r3, [r3, r7]
 8009152:	0021      	movs	r1, r4
 8009154:	9800      	ldr	r0, [sp, #0]
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	4798      	blx	r3
 800915a:	2800      	cmp	r0, #0
 800915c:	d0e8      	beq.n	8009130 <__ssvfiscanf_r+0xd8>
 800915e:	e7f0      	b.n	8009142 <__ssvfiscanf_r+0xea>
 8009160:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009162:	3501      	adds	r5, #1
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	4353      	muls	r3, r2
 8009168:	3b30      	subs	r3, #48	; 0x30
 800916a:	1859      	adds	r1, r3, r1
 800916c:	9147      	str	r1, [sp, #284]	; 0x11c
 800916e:	e7a9      	b.n	80090c4 <__ssvfiscanf_r+0x6c>
 8009170:	2b5b      	cmp	r3, #91	; 0x5b
 8009172:	d100      	bne.n	8009176 <__ssvfiscanf_r+0x11e>
 8009174:	e077      	b.n	8009266 <__ssvfiscanf_r+0x20e>
 8009176:	d80f      	bhi.n	8009198 <__ssvfiscanf_r+0x140>
 8009178:	2b58      	cmp	r3, #88	; 0x58
 800917a:	d1c8      	bne.n	800910e <__ssvfiscanf_r+0xb6>
 800917c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	2280      	movs	r2, #128	; 0x80
 8009182:	9901      	ldr	r1, [sp, #4]
 8009184:	0092      	lsls	r2, r2, #2
 8009186:	430a      	orrs	r2, r1
 8009188:	9245      	str	r2, [sp, #276]	; 0x114
 800918a:	2210      	movs	r2, #16
 800918c:	9246      	str	r2, [sp, #280]	; 0x118
 800918e:	2203      	movs	r2, #3
 8009190:	2b6e      	cmp	r3, #110	; 0x6e
 8009192:	dd14      	ble.n	80091be <__ssvfiscanf_r+0x166>
 8009194:	3201      	adds	r2, #1
 8009196:	e012      	b.n	80091be <__ssvfiscanf_r+0x166>
 8009198:	2b63      	cmp	r3, #99	; 0x63
 800919a:	d100      	bne.n	800919e <__ssvfiscanf_r+0x146>
 800919c:	e071      	b.n	8009282 <__ssvfiscanf_r+0x22a>
 800919e:	2b64      	cmp	r3, #100	; 0x64
 80091a0:	d1b5      	bne.n	800910e <__ssvfiscanf_r+0xb6>
 80091a2:	220a      	movs	r2, #10
 80091a4:	e7f2      	b.n	800918c <__ssvfiscanf_r+0x134>
 80091a6:	2b70      	cmp	r3, #112	; 0x70
 80091a8:	d052      	beq.n	8009250 <__ssvfiscanf_r+0x1f8>
 80091aa:	d822      	bhi.n	80091f2 <__ssvfiscanf_r+0x19a>
 80091ac:	2b6e      	cmp	r3, #110	; 0x6e
 80091ae:	d100      	bne.n	80091b2 <__ssvfiscanf_r+0x15a>
 80091b0:	e06f      	b.n	8009292 <__ssvfiscanf_r+0x23a>
 80091b2:	d854      	bhi.n	800925e <__ssvfiscanf_r+0x206>
 80091b4:	2b69      	cmp	r3, #105	; 0x69
 80091b6:	d1aa      	bne.n	800910e <__ssvfiscanf_r+0xb6>
 80091b8:	2300      	movs	r3, #0
 80091ba:	2203      	movs	r2, #3
 80091bc:	9346      	str	r3, [sp, #280]	; 0x118
 80091be:	924b      	str	r2, [sp, #300]	; 0x12c
 80091c0:	6863      	ldr	r3, [r4, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc00      	bgt.n	80091c8 <__ssvfiscanf_r+0x170>
 80091c6:	e078      	b.n	80092ba <__ssvfiscanf_r+0x262>
 80091c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	065b      	lsls	r3, r3, #25
 80091ce:	d400      	bmi.n	80091d2 <__ssvfiscanf_r+0x17a>
 80091d0:	e08b      	b.n	80092ea <__ssvfiscanf_r+0x292>
 80091d2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	dd00      	ble.n	80091da <__ssvfiscanf_r+0x182>
 80091d8:	e09d      	b.n	8009316 <__ssvfiscanf_r+0x2be>
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	0022      	movs	r2, r4
 80091de:	a945      	add	r1, sp, #276	; 0x114
 80091e0:	9800      	ldr	r0, [sp, #0]
 80091e2:	f000 f8bf 	bl	8009364 <_scanf_chars>
 80091e6:	2801      	cmp	r0, #1
 80091e8:	d100      	bne.n	80091ec <__ssvfiscanf_r+0x194>
 80091ea:	e0af      	b.n	800934c <__ssvfiscanf_r+0x2f4>
 80091ec:	2802      	cmp	r0, #2
 80091ee:	d1a9      	bne.n	8009144 <__ssvfiscanf_r+0xec>
 80091f0:	e025      	b.n	800923e <__ssvfiscanf_r+0x1e6>
 80091f2:	2b75      	cmp	r3, #117	; 0x75
 80091f4:	d0d5      	beq.n	80091a2 <__ssvfiscanf_r+0x14a>
 80091f6:	2b78      	cmp	r3, #120	; 0x78
 80091f8:	d0c0      	beq.n	800917c <__ssvfiscanf_r+0x124>
 80091fa:	2b73      	cmp	r3, #115	; 0x73
 80091fc:	d187      	bne.n	800910e <__ssvfiscanf_r+0xb6>
 80091fe:	2302      	movs	r3, #2
 8009200:	e03d      	b.n	800927e <__ssvfiscanf_r+0x226>
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd0f      	ble.n	8009228 <__ssvfiscanf_r+0x1d0>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	9901      	ldr	r1, [sp, #4]
 800920c:	781a      	ldrb	r2, [r3, #0]
 800920e:	4291      	cmp	r1, r2
 8009210:	d000      	beq.n	8009214 <__ssvfiscanf_r+0x1bc>
 8009212:	e09b      	b.n	800934c <__ssvfiscanf_r+0x2f4>
 8009214:	3301      	adds	r3, #1
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800921c:	3a01      	subs	r2, #1
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	3301      	adds	r3, #1
 8009222:	6062      	str	r2, [r4, #4]
 8009224:	9349      	str	r3, [sp, #292]	; 0x124
 8009226:	e78d      	b.n	8009144 <__ssvfiscanf_r+0xec>
 8009228:	2286      	movs	r2, #134	; 0x86
 800922a:	ab02      	add	r3, sp, #8
 800922c:	0052      	lsls	r2, r2, #1
 800922e:	189b      	adds	r3, r3, r2
 8009230:	59db      	ldr	r3, [r3, r7]
 8009232:	0021      	movs	r1, r4
 8009234:	9800      	ldr	r0, [sp, #0]
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	4798      	blx	r3
 800923a:	2800      	cmp	r0, #0
 800923c:	d0e4      	beq.n	8009208 <__ssvfiscanf_r+0x1b0>
 800923e:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009240:	2800      	cmp	r0, #0
 8009242:	d000      	beq.n	8009246 <__ssvfiscanf_r+0x1ee>
 8009244:	e07b      	b.n	800933e <__ssvfiscanf_r+0x2e6>
 8009246:	3801      	subs	r0, #1
 8009248:	23a7      	movs	r3, #167	; 0xa7
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	449d      	add	sp, r3
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009252:	9201      	str	r2, [sp, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	9901      	ldr	r1, [sp, #4]
 8009258:	430a      	orrs	r2, r1
 800925a:	9245      	str	r2, [sp, #276]	; 0x114
 800925c:	e78e      	b.n	800917c <__ssvfiscanf_r+0x124>
 800925e:	2308      	movs	r3, #8
 8009260:	2204      	movs	r2, #4
 8009262:	9346      	str	r3, [sp, #280]	; 0x118
 8009264:	e7ab      	b.n	80091be <__ssvfiscanf_r+0x166>
 8009266:	0031      	movs	r1, r6
 8009268:	a805      	add	r0, sp, #20
 800926a:	f000 f9df 	bl	800962c <__sccl>
 800926e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009270:	0006      	movs	r6, r0
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	9a01      	ldr	r2, [sp, #4]
 8009278:	4313      	orrs	r3, r2
 800927a:	9345      	str	r3, [sp, #276]	; 0x114
 800927c:	2301      	movs	r3, #1
 800927e:	934b      	str	r3, [sp, #300]	; 0x12c
 8009280:	e79e      	b.n	80091c0 <__ssvfiscanf_r+0x168>
 8009282:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	4313      	orrs	r3, r2
 800928c:	9345      	str	r3, [sp, #276]	; 0x114
 800928e:	2300      	movs	r3, #0
 8009290:	e7f5      	b.n	800927e <__ssvfiscanf_r+0x226>
 8009292:	9945      	ldr	r1, [sp, #276]	; 0x114
 8009294:	06cb      	lsls	r3, r1, #27
 8009296:	d500      	bpl.n	800929a <__ssvfiscanf_r+0x242>
 8009298:	e754      	b.n	8009144 <__ssvfiscanf_r+0xec>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800929e:	07c8      	lsls	r0, r1, #31
 80092a0:	d504      	bpl.n	80092ac <__ssvfiscanf_r+0x254>
 80092a2:	1d19      	adds	r1, r3, #4
 80092a4:	9103      	str	r1, [sp, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	e74b      	b.n	8009144 <__ssvfiscanf_r+0xec>
 80092ac:	1d19      	adds	r1, r3, #4
 80092ae:	9103      	str	r1, [sp, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e746      	b.n	8009144 <__ssvfiscanf_r+0xec>
 80092b6:	2305      	movs	r3, #5
 80092b8:	e7e1      	b.n	800927e <__ssvfiscanf_r+0x226>
 80092ba:	2286      	movs	r2, #134	; 0x86
 80092bc:	ab02      	add	r3, sp, #8
 80092be:	0052      	lsls	r2, r2, #1
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	59db      	ldr	r3, [r3, r7]
 80092c4:	0021      	movs	r1, r4
 80092c6:	9800      	ldr	r0, [sp, #0]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	4798      	blx	r3
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d100      	bne.n	80092d2 <__ssvfiscanf_r+0x27a>
 80092d0:	e77a      	b.n	80091c8 <__ssvfiscanf_r+0x170>
 80092d2:	e7b4      	b.n	800923e <__ssvfiscanf_r+0x1e6>
 80092d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80092d6:	9201      	str	r2, [sp, #4]
 80092d8:	3201      	adds	r2, #1
 80092da:	9249      	str	r2, [sp, #292]	; 0x124
 80092dc:	6862      	ldr	r2, [r4, #4]
 80092de:	3a01      	subs	r2, #1
 80092e0:	6062      	str	r2, [r4, #4]
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	dd0b      	ble.n	80092fe <__ssvfiscanf_r+0x2a6>
 80092e6:	3301      	adds	r3, #1
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	f7fe faaf 	bl	800784c <__locale_ctype_ptr>
 80092ee:	2108      	movs	r1, #8
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	1880      	adds	r0, r0, r2
 80092f6:	7842      	ldrb	r2, [r0, #1]
 80092f8:	420a      	tst	r2, r1
 80092fa:	d1eb      	bne.n	80092d4 <__ssvfiscanf_r+0x27c>
 80092fc:	e769      	b.n	80091d2 <__ssvfiscanf_r+0x17a>
 80092fe:	2286      	movs	r2, #134	; 0x86
 8009300:	ab02      	add	r3, sp, #8
 8009302:	0052      	lsls	r2, r2, #1
 8009304:	189b      	adds	r3, r3, r2
 8009306:	59db      	ldr	r3, [r3, r7]
 8009308:	0021      	movs	r1, r4
 800930a:	9800      	ldr	r0, [sp, #0]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	4798      	blx	r3
 8009310:	2800      	cmp	r0, #0
 8009312:	d0ea      	beq.n	80092ea <__ssvfiscanf_r+0x292>
 8009314:	e793      	b.n	800923e <__ssvfiscanf_r+0x1e6>
 8009316:	2b04      	cmp	r3, #4
 8009318:	dc06      	bgt.n	8009328 <__ssvfiscanf_r+0x2d0>
 800931a:	ab03      	add	r3, sp, #12
 800931c:	0022      	movs	r2, r4
 800931e:	a945      	add	r1, sp, #276	; 0x114
 8009320:	9800      	ldr	r0, [sp, #0]
 8009322:	f000 f883 	bl	800942c <_scanf_i>
 8009326:	e75e      	b.n	80091e6 <__ssvfiscanf_r+0x18e>
 8009328:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <__ssvfiscanf_r+0x308>)
 800932a:	2b00      	cmp	r3, #0
 800932c:	d100      	bne.n	8009330 <__ssvfiscanf_r+0x2d8>
 800932e:	e709      	b.n	8009144 <__ssvfiscanf_r+0xec>
 8009330:	ab03      	add	r3, sp, #12
 8009332:	0022      	movs	r2, r4
 8009334:	a945      	add	r1, sp, #276	; 0x114
 8009336:	9800      	ldr	r0, [sp, #0]
 8009338:	e000      	b.n	800933c <__ssvfiscanf_r+0x2e4>
 800933a:	bf00      	nop
 800933c:	e753      	b.n	80091e6 <__ssvfiscanf_r+0x18e>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	065b      	lsls	r3, r3, #25
 8009342:	d400      	bmi.n	8009346 <__ssvfiscanf_r+0x2ee>
 8009344:	e780      	b.n	8009248 <__ssvfiscanf_r+0x1f0>
 8009346:	2001      	movs	r0, #1
 8009348:	4240      	negs	r0, r0
 800934a:	e77d      	b.n	8009248 <__ssvfiscanf_r+0x1f0>
 800934c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800934e:	e77b      	b.n	8009248 <__ssvfiscanf_r+0x1f0>
 8009350:	fffffd64 	.word	0xfffffd64
 8009354:	08008fa3 	.word	0x08008fa3
 8009358:	0800901b 	.word	0x0800901b
 800935c:	0800a482 	.word	0x0800a482
 8009360:	00000000 	.word	0x00000000

08009364 <_scanf_chars>:
 8009364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009366:	0015      	movs	r5, r2
 8009368:	688a      	ldr	r2, [r1, #8]
 800936a:	9001      	str	r0, [sp, #4]
 800936c:	000c      	movs	r4, r1
 800936e:	2a00      	cmp	r2, #0
 8009370:	d106      	bne.n	8009380 <_scanf_chars+0x1c>
 8009372:	698a      	ldr	r2, [r1, #24]
 8009374:	1e51      	subs	r1, r2, #1
 8009376:	418a      	sbcs	r2, r1
 8009378:	2101      	movs	r1, #1
 800937a:	4252      	negs	r2, r2
 800937c:	430a      	orrs	r2, r1
 800937e:	60a2      	str	r2, [r4, #8]
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	06d2      	lsls	r2, r2, #27
 8009384:	d403      	bmi.n	800938e <_scanf_chars+0x2a>
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	1d11      	adds	r1, r2, #4
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	6817      	ldr	r7, [r2, #0]
 800938e:	2600      	movs	r6, #0
 8009390:	69a3      	ldr	r3, [r4, #24]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01c      	beq.n	80093d0 <_scanf_chars+0x6c>
 8009396:	2b01      	cmp	r3, #1
 8009398:	d108      	bne.n	80093ac <_scanf_chars+0x48>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	6962      	ldr	r2, [r4, #20]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	5cd3      	ldrb	r3, [r2, r3]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d114      	bne.n	80093d0 <_scanf_chars+0x6c>
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	d130      	bne.n	800940c <_scanf_chars+0xa8>
 80093aa:	e006      	b.n	80093ba <_scanf_chars+0x56>
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d006      	beq.n	80093be <_scanf_chars+0x5a>
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	d12b      	bne.n	800940c <_scanf_chars+0xa8>
 80093b4:	69a3      	ldr	r3, [r4, #24]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d128      	bne.n	800940c <_scanf_chars+0xa8>
 80093ba:	2001      	movs	r0, #1
 80093bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093be:	f7fe fa45 	bl	800784c <__locale_ctype_ptr>
 80093c2:	2208      	movs	r2, #8
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	18c0      	adds	r0, r0, r3
 80093ca:	7843      	ldrb	r3, [r0, #1]
 80093cc:	4213      	tst	r3, r2
 80093ce:	d1ef      	bne.n	80093b0 <_scanf_chars+0x4c>
 80093d0:	2210      	movs	r2, #16
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	3601      	adds	r6, #1
 80093d6:	4213      	tst	r3, r2
 80093d8:	d103      	bne.n	80093e2 <_scanf_chars+0x7e>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	703b      	strb	r3, [r7, #0]
 80093e0:	3701      	adds	r7, #1
 80093e2:	682a      	ldr	r2, [r5, #0]
 80093e4:	686b      	ldr	r3, [r5, #4]
 80093e6:	3201      	adds	r2, #1
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	68a2      	ldr	r2, [r4, #8]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	3a01      	subs	r2, #1
 80093f0:	606b      	str	r3, [r5, #4]
 80093f2:	60a2      	str	r2, [r4, #8]
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	d009      	beq.n	800940c <_scanf_chars+0xa8>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	dcc9      	bgt.n	8009390 <_scanf_chars+0x2c>
 80093fc:	23c0      	movs	r3, #192	; 0xc0
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	58e3      	ldr	r3, [r4, r3]
 8009402:	0029      	movs	r1, r5
 8009404:	9801      	ldr	r0, [sp, #4]
 8009406:	4798      	blx	r3
 8009408:	2800      	cmp	r0, #0
 800940a:	d0c1      	beq.n	8009390 <_scanf_chars+0x2c>
 800940c:	2310      	movs	r3, #16
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	4013      	ands	r3, r2
 8009412:	d106      	bne.n	8009422 <_scanf_chars+0xbe>
 8009414:	68e2      	ldr	r2, [r4, #12]
 8009416:	3201      	adds	r2, #1
 8009418:	60e2      	str	r2, [r4, #12]
 800941a:	69a2      	ldr	r2, [r4, #24]
 800941c:	2a00      	cmp	r2, #0
 800941e:	d000      	beq.n	8009422 <_scanf_chars+0xbe>
 8009420:	703b      	strb	r3, [r7, #0]
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	2000      	movs	r0, #0
 8009426:	199e      	adds	r6, r3, r6
 8009428:	6126      	str	r6, [r4, #16]
 800942a:	e7c7      	b.n	80093bc <_scanf_chars+0x58>

0800942c <_scanf_i>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	000c      	movs	r4, r1
 8009430:	b08d      	sub	sp, #52	; 0x34
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	4b77      	ldr	r3, [pc, #476]	; (8009614 <_scanf_i+0x1e8>)
 8009436:	9005      	str	r0, [sp, #20]
 8009438:	0016      	movs	r6, r2
 800943a:	aa09      	add	r2, sp, #36	; 0x24
 800943c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800943e:	c223      	stmia	r2!, {r0, r1, r5}
 8009440:	4b75      	ldr	r3, [pc, #468]	; (8009618 <_scanf_i+0x1ec>)
 8009442:	9306      	str	r3, [sp, #24]
 8009444:	69a3      	ldr	r3, [r4, #24]
 8009446:	2b03      	cmp	r3, #3
 8009448:	d001      	beq.n	800944e <_scanf_i+0x22>
 800944a:	4b74      	ldr	r3, [pc, #464]	; (800961c <_scanf_i+0x1f0>)
 800944c:	9306      	str	r3, [sp, #24]
 800944e:	22ae      	movs	r2, #174	; 0xae
 8009450:	2000      	movs	r0, #0
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	0052      	lsls	r2, r2, #1
 8009456:	1e59      	subs	r1, r3, #1
 8009458:	9004      	str	r0, [sp, #16]
 800945a:	4291      	cmp	r1, r2
 800945c:	d905      	bls.n	800946a <_scanf_i+0x3e>
 800945e:	3b5e      	subs	r3, #94	; 0x5e
 8009460:	3bff      	subs	r3, #255	; 0xff
 8009462:	9304      	str	r3, [sp, #16]
 8009464:	235e      	movs	r3, #94	; 0x5e
 8009466:	33ff      	adds	r3, #255	; 0xff
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	0023      	movs	r3, r4
 800946c:	331c      	adds	r3, #28
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	23d0      	movs	r3, #208	; 0xd0
 8009472:	2700      	movs	r7, #0
 8009474:	6822      	ldr	r2, [r4, #0]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	4313      	orrs	r3, r2
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	9303      	str	r3, [sp, #12]
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	a809      	add	r0, sp, #36	; 0x24
 8009484:	7819      	ldrb	r1, [r3, #0]
 8009486:	00bb      	lsls	r3, r7, #2
 8009488:	2202      	movs	r2, #2
 800948a:	5818      	ldr	r0, [r3, r0]
 800948c:	f7ff fd46 	bl	8008f1c <memchr>
 8009490:	2800      	cmp	r0, #0
 8009492:	d02b      	beq.n	80094ec <_scanf_i+0xc0>
 8009494:	2f01      	cmp	r7, #1
 8009496:	d15f      	bne.n	8009558 <_scanf_i+0x12c>
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <_scanf_i+0x80>
 800949e:	3308      	adds	r3, #8
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	33f9      	adds	r3, #249	; 0xf9
 80094a6:	33ff      	adds	r3, #255	; 0xff
 80094a8:	4313      	orrs	r3, r2
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	4b5c      	ldr	r3, [pc, #368]	; (8009620 <_scanf_i+0x1f4>)
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	4013      	ands	r3, r2
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	1e5a      	subs	r2, r3, #1
 80094b8:	60a2      	str	r2, [r4, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d016      	beq.n	80094ec <_scanf_i+0xc0>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	1c5d      	adds	r5, r3, #1
 80094c2:	6833      	ldr	r3, [r6, #0]
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	6032      	str	r2, [r6, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	9a03      	ldr	r2, [sp, #12]
 80094cc:	9503      	str	r5, [sp, #12]
 80094ce:	7013      	strb	r3, [r2, #0]
 80094d0:	6873      	ldr	r3, [r6, #4]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	6073      	str	r3, [r6, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc08      	bgt.n	80094ec <_scanf_i+0xc0>
 80094da:	23c0      	movs	r3, #192	; 0xc0
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	58e3      	ldr	r3, [r4, r3]
 80094e0:	0031      	movs	r1, r6
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	9307      	str	r3, [sp, #28]
 80094e6:	4798      	blx	r3
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d17d      	bne.n	80095e8 <_scanf_i+0x1bc>
 80094ec:	3701      	adds	r7, #1
 80094ee:	2f03      	cmp	r7, #3
 80094f0:	d1c6      	bne.n	8009480 <_scanf_i+0x54>
 80094f2:	6863      	ldr	r3, [r4, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <_scanf_i+0xd0>
 80094f8:	330a      	adds	r3, #10
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	2110      	movs	r1, #16
 80094fe:	2700      	movs	r7, #0
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	6960      	ldr	r0, [r4, #20]
 8009504:	1ac9      	subs	r1, r1, r3
 8009506:	4b47      	ldr	r3, [pc, #284]	; (8009624 <_scanf_i+0x1f8>)
 8009508:	18c9      	adds	r1, r1, r3
 800950a:	f000 f88f 	bl	800962c <__sccl>
 800950e:	9d03      	ldr	r5, [sp, #12]
 8009510:	68a3      	ldr	r3, [r4, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d041      	beq.n	800959a <_scanf_i+0x16e>
 8009516:	6832      	ldr	r2, [r6, #0]
 8009518:	6960      	ldr	r0, [r4, #20]
 800951a:	7811      	ldrb	r1, [r2, #0]
 800951c:	5c40      	ldrb	r0, [r0, r1]
 800951e:	2800      	cmp	r0, #0
 8009520:	d03b      	beq.n	800959a <_scanf_i+0x16e>
 8009522:	2930      	cmp	r1, #48	; 0x30
 8009524:	d128      	bne.n	8009578 <_scanf_i+0x14c>
 8009526:	2080      	movs	r0, #128	; 0x80
 8009528:	6821      	ldr	r1, [r4, #0]
 800952a:	0100      	lsls	r0, r0, #4
 800952c:	4201      	tst	r1, r0
 800952e:	d023      	beq.n	8009578 <_scanf_i+0x14c>
 8009530:	9a04      	ldr	r2, [sp, #16]
 8009532:	3701      	adds	r7, #1
 8009534:	2a00      	cmp	r2, #0
 8009536:	d003      	beq.n	8009540 <_scanf_i+0x114>
 8009538:	3a01      	subs	r2, #1
 800953a:	3301      	adds	r3, #1
 800953c:	9204      	str	r2, [sp, #16]
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	6873      	ldr	r3, [r6, #4]
 8009542:	3b01      	subs	r3, #1
 8009544:	6073      	str	r3, [r6, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd1e      	ble.n	8009588 <_scanf_i+0x15c>
 800954a:	6833      	ldr	r3, [r6, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	e7db      	b.n	8009510 <_scanf_i+0xe4>
 8009558:	2f02      	cmp	r7, #2
 800955a:	d1ab      	bne.n	80094b4 <_scanf_i+0x88>
 800955c:	21c0      	movs	r1, #192	; 0xc0
 800955e:	2380      	movs	r3, #128	; 0x80
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	00c9      	lsls	r1, r1, #3
 8009564:	4011      	ands	r1, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4299      	cmp	r1, r3
 800956a:	d1c2      	bne.n	80094f2 <_scanf_i+0xc6>
 800956c:	3bf1      	subs	r3, #241	; 0xf1
 800956e:	3bff      	subs	r3, #255	; 0xff
 8009570:	6063      	str	r3, [r4, #4]
 8009572:	33f0      	adds	r3, #240	; 0xf0
 8009574:	4313      	orrs	r3, r2
 8009576:	e79c      	b.n	80094b2 <_scanf_i+0x86>
 8009578:	6821      	ldr	r1, [r4, #0]
 800957a:	4b2b      	ldr	r3, [pc, #172]	; (8009628 <_scanf_i+0x1fc>)
 800957c:	400b      	ands	r3, r1
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	7813      	ldrb	r3, [r2, #0]
 8009582:	702b      	strb	r3, [r5, #0]
 8009584:	3501      	adds	r5, #1
 8009586:	e7db      	b.n	8009540 <_scanf_i+0x114>
 8009588:	23c0      	movs	r3, #192	; 0xc0
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	58e3      	ldr	r3, [r4, r3]
 800958e:	0031      	movs	r1, r6
 8009590:	9805      	ldr	r0, [sp, #20]
 8009592:	9303      	str	r3, [sp, #12]
 8009594:	4798      	blx	r3
 8009596:	2800      	cmp	r0, #0
 8009598:	d0da      	beq.n	8009550 <_scanf_i+0x124>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	05db      	lsls	r3, r3, #23
 800959e:	d50e      	bpl.n	80095be <_scanf_i+0x192>
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	429d      	cmp	r5, r3
 80095a4:	d907      	bls.n	80095b6 <_scanf_i+0x18a>
 80095a6:	23be      	movs	r3, #190	; 0xbe
 80095a8:	3d01      	subs	r5, #1
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	7829      	ldrb	r1, [r5, #0]
 80095ae:	58e3      	ldr	r3, [r4, r3]
 80095b0:	0032      	movs	r2, r6
 80095b2:	9805      	ldr	r0, [sp, #20]
 80095b4:	4798      	blx	r3
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	2001      	movs	r0, #1
 80095ba:	429d      	cmp	r5, r3
 80095bc:	d027      	beq.n	800960e <_scanf_i+0x1e2>
 80095be:	2210      	movs	r2, #16
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	401a      	ands	r2, r3
 80095c4:	d11c      	bne.n	8009600 <_scanf_i+0x1d4>
 80095c6:	702a      	strb	r2, [r5, #0]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	9901      	ldr	r1, [sp, #4]
 80095cc:	9805      	ldr	r0, [sp, #20]
 80095ce:	9e06      	ldr	r6, [sp, #24]
 80095d0:	47b0      	blx	r6
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	6822      	ldr	r2, [r4, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	0691      	lsls	r1, r2, #26
 80095da:	d507      	bpl.n	80095ec <_scanf_i+0x1c0>
 80095dc:	9902      	ldr	r1, [sp, #8]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	600a      	str	r2, [r1, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6018      	str	r0, [r3, #0]
 80095e6:	e008      	b.n	80095fa <_scanf_i+0x1ce>
 80095e8:	2700      	movs	r7, #0
 80095ea:	e7d6      	b.n	800959a <_scanf_i+0x16e>
 80095ec:	07d1      	lsls	r1, r2, #31
 80095ee:	d5f5      	bpl.n	80095dc <_scanf_i+0x1b0>
 80095f0:	9902      	ldr	r1, [sp, #8]
 80095f2:	1d1a      	adds	r2, r3, #4
 80095f4:	600a      	str	r2, [r1, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	8018      	strh	r0, [r3, #0]
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	3301      	adds	r3, #1
 80095fe:	60e3      	str	r3, [r4, #12]
 8009600:	2000      	movs	r0, #0
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	1aed      	subs	r5, r5, r3
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	19ef      	adds	r7, r5, r7
 800960a:	19df      	adds	r7, r3, r7
 800960c:	6127      	str	r7, [r4, #16]
 800960e:	b00d      	add	sp, #52	; 0x34
 8009610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	08009e8c 	.word	0x08009e8c
 8009618:	0800818d 	.word	0x0800818d
 800961c:	08008ed1 	.word	0x08008ed1
 8009620:	fffffaff 	.word	0xfffffaff
 8009624:	0800a4af 	.word	0x0800a4af
 8009628:	fffff6ff 	.word	0xfffff6ff

0800962c <__sccl>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	780b      	ldrb	r3, [r1, #0]
 8009630:	2b5e      	cmp	r3, #94	; 0x5e
 8009632:	d00d      	beq.n	8009650 <__sccl+0x24>
 8009634:	1c4a      	adds	r2, r1, #1
 8009636:	2100      	movs	r1, #0
 8009638:	0004      	movs	r4, r0
 800963a:	1c45      	adds	r5, r0, #1
 800963c:	35ff      	adds	r5, #255	; 0xff
 800963e:	7021      	strb	r1, [r4, #0]
 8009640:	3401      	adds	r4, #1
 8009642:	42a5      	cmp	r5, r4
 8009644:	d1fb      	bne.n	800963e <__sccl+0x12>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <__sccl+0x2c>
 800964a:	3a01      	subs	r2, #1
 800964c:	0010      	movs	r0, r2
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	1c8a      	adds	r2, r1, #2
 8009652:	784b      	ldrb	r3, [r1, #1]
 8009654:	2101      	movs	r1, #1
 8009656:	e7ef      	b.n	8009638 <__sccl+0xc>
 8009658:	2401      	movs	r4, #1
 800965a:	404c      	eors	r4, r1
 800965c:	0011      	movs	r1, r2
 800965e:	54c4      	strb	r4, [r0, r3]
 8009660:	780d      	ldrb	r5, [r1, #0]
 8009662:	1c4a      	adds	r2, r1, #1
 8009664:	2d2d      	cmp	r5, #45	; 0x2d
 8009666:	d007      	beq.n	8009678 <__sccl+0x4c>
 8009668:	2d5d      	cmp	r5, #93	; 0x5d
 800966a:	d0ef      	beq.n	800964c <__sccl+0x20>
 800966c:	2d00      	cmp	r5, #0
 800966e:	d101      	bne.n	8009674 <__sccl+0x48>
 8009670:	000a      	movs	r2, r1
 8009672:	e7eb      	b.n	800964c <__sccl+0x20>
 8009674:	002b      	movs	r3, r5
 8009676:	e7f1      	b.n	800965c <__sccl+0x30>
 8009678:	784e      	ldrb	r6, [r1, #1]
 800967a:	2e5d      	cmp	r6, #93	; 0x5d
 800967c:	d0fa      	beq.n	8009674 <__sccl+0x48>
 800967e:	42b3      	cmp	r3, r6
 8009680:	dcf8      	bgt.n	8009674 <__sccl+0x48>
 8009682:	3102      	adds	r1, #2
 8009684:	3301      	adds	r3, #1
 8009686:	54c4      	strb	r4, [r0, r3]
 8009688:	429e      	cmp	r6, r3
 800968a:	dcfb      	bgt.n	8009684 <__sccl+0x58>
 800968c:	e7e8      	b.n	8009660 <__sccl+0x34>
	...

08009690 <__submore>:
 8009690:	000b      	movs	r3, r1
 8009692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009694:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8009696:	3344      	adds	r3, #68	; 0x44
 8009698:	000c      	movs	r4, r1
 800969a:	429d      	cmp	r5, r3
 800969c:	d11c      	bne.n	80096d8 <__submore+0x48>
 800969e:	2680      	movs	r6, #128	; 0x80
 80096a0:	00f6      	lsls	r6, r6, #3
 80096a2:	0031      	movs	r1, r6
 80096a4:	f7fe fbc6 	bl	8007e34 <_malloc_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d102      	bne.n	80096b2 <__submore+0x22>
 80096ac:	2001      	movs	r0, #1
 80096ae:	4240      	negs	r0, r0
 80096b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096b2:	0023      	movs	r3, r4
 80096b4:	6360      	str	r0, [r4, #52]	; 0x34
 80096b6:	63a6      	str	r6, [r4, #56]	; 0x38
 80096b8:	3346      	adds	r3, #70	; 0x46
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <__submore+0x70>)
 80096be:	54c2      	strb	r2, [r0, r3]
 80096c0:	0023      	movs	r3, r4
 80096c2:	3345      	adds	r3, #69	; 0x45
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <__submore+0x74>)
 80096c8:	54c2      	strb	r2, [r0, r3]
 80096ca:	782a      	ldrb	r2, [r5, #0]
 80096cc:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <__submore+0x78>)
 80096ce:	54c2      	strb	r2, [r0, r3]
 80096d0:	18c0      	adds	r0, r0, r3
 80096d2:	6020      	str	r0, [r4, #0]
 80096d4:	2000      	movs	r0, #0
 80096d6:	e7eb      	b.n	80096b0 <__submore+0x20>
 80096d8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80096da:	0029      	movs	r1, r5
 80096dc:	0073      	lsls	r3, r6, #1
 80096de:	001a      	movs	r2, r3
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f7ff fc38 	bl	8008f56 <_realloc_r>
 80096e6:	1e05      	subs	r5, r0, #0
 80096e8:	d0e0      	beq.n	80096ac <__submore+0x1c>
 80096ea:	1987      	adds	r7, r0, r6
 80096ec:	0001      	movs	r1, r0
 80096ee:	0032      	movs	r2, r6
 80096f0:	0038      	movs	r0, r7
 80096f2:	f7fe f8ee 	bl	80078d2 <memcpy>
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	6027      	str	r7, [r4, #0]
 80096fa:	6365      	str	r5, [r4, #52]	; 0x34
 80096fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80096fe:	e7e9      	b.n	80096d4 <__submore+0x44>
 8009700:	000003ff 	.word	0x000003ff
 8009704:	000003fe 	.word	0x000003fe
 8009708:	000003fd 	.word	0x000003fd

0800970c <_malloc_usable_size_r>:
 800970c:	1f0b      	subs	r3, r1, #4
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	1f18      	subs	r0, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	da01      	bge.n	800971a <_malloc_usable_size_r+0xe>
 8009716:	580b      	ldr	r3, [r1, r0]
 8009718:	18c0      	adds	r0, r0, r3
 800971a:	4770      	bx	lr

0800971c <_sbrk>:
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <_sbrk+0x18>)
 800971e:	0002      	movs	r2, r0
 8009720:	6819      	ldr	r1, [r3, #0]
 8009722:	2900      	cmp	r1, #0
 8009724:	d101      	bne.n	800972a <_sbrk+0xe>
 8009726:	4904      	ldr	r1, [pc, #16]	; (8009738 <_sbrk+0x1c>)
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	1882      	adds	r2, r0, r2
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	4770      	bx	lr
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	20004010 	.word	0x20004010
 8009738:	2000536c 	.word	0x2000536c

0800973c <_init>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr

08009748 <_fini>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr
