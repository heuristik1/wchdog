
WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000135c  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002b4  20000000  0800ae2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a04  200002b8  0800b0e0  000202b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  20005cbc  0800b0e0  00025cbc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013c70  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003696  00000000  00000000  00033f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000eb8  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d48  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00007209  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bbcd  00000000  00000000  000403f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00054c9c  00000000  00000000  0004bfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a0c5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e34  00000000  00000000  000a0cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000a4b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002b8 	.word	0x200002b8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009aa8 	.word	0x08009aa8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002bc 	.word	0x200002bc
 8000100:	08009aa8 	.word	0x08009aa8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	b083      	sub	sp, #12
 8000464:	000d      	movs	r5, r1
 8000466:	4692      	mov	sl, r2
 8000468:	4699      	mov	r9, r3
 800046a:	428b      	cmp	r3, r1
 800046c:	d82f      	bhi.n	80004ce <__udivmoddi4+0x7a>
 800046e:	d02c      	beq.n	80004ca <__udivmoddi4+0x76>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ae 	bl	80005d4 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8a9 	bl	80005d4 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d500      	bpl.n	800048e <__udivmoddi4+0x3a>
 800048c:	e074      	b.n	8000578 <__udivmoddi4+0x124>
 800048e:	4653      	mov	r3, sl
 8000490:	465a      	mov	r2, fp
 8000492:	4093      	lsls	r3, r2
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4642      	mov	r2, r8
 800049a:	4093      	lsls	r3, r2
 800049c:	001e      	movs	r6, r3
 800049e:	42af      	cmp	r7, r5
 80004a0:	d829      	bhi.n	80004f6 <__udivmoddi4+0xa2>
 80004a2:	d026      	beq.n	80004f2 <__udivmoddi4+0x9e>
 80004a4:	465b      	mov	r3, fp
 80004a6:	1ba4      	subs	r4, r4, r6
 80004a8:	41bd      	sbcs	r5, r7
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	da00      	bge.n	80004b0 <__udivmoddi4+0x5c>
 80004ae:	e079      	b.n	80005a4 <__udivmoddi4+0x150>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	2301      	movs	r3, #1
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2301      	movs	r3, #1
 80004c2:	4642      	mov	r2, r8
 80004c4:	4093      	lsls	r3, r2
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	e019      	b.n	80004fe <__udivmoddi4+0xaa>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d9d0      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <__udivmoddi4+0x8c>
 80004dc:	601c      	str	r4, [r3, #0]
 80004de:	605d      	str	r5, [r3, #4]
 80004e0:	9800      	ldr	r0, [sp, #0]
 80004e2:	9901      	ldr	r1, [sp, #4]
 80004e4:	b003      	add	sp, #12
 80004e6:	bc3c      	pop	{r2, r3, r4, r5}
 80004e8:	4690      	mov	r8, r2
 80004ea:	4699      	mov	r9, r3
 80004ec:	46a2      	mov	sl, r4
 80004ee:	46ab      	mov	fp, r5
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	42a3      	cmp	r3, r4
 80004f4:	d9d6      	bls.n	80004a4 <__udivmoddi4+0x50>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0e8      	beq.n	80004d6 <__udivmoddi4+0x82>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xda>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xc4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xde>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0xe8>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xbc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xda>
 800053c:	465b      	mov	r3, fp
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db22      	blt.n	8000590 <__udivmoddi4+0x13c>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	4644      	mov	r4, r8
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2c      	blt.n	80005ba <__udivmoddi4+0x166>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e7ae      	b.n	80004d6 <__udivmoddi4+0x82>
 8000578:	4642      	mov	r2, r8
 800057a:	2320      	movs	r3, #32
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	4652      	mov	r2, sl
 8000580:	40da      	lsrs	r2, r3
 8000582:	4641      	mov	r1, r8
 8000584:	0013      	movs	r3, r2
 8000586:	464a      	mov	r2, r9
 8000588:	408a      	lsls	r2, r1
 800058a:	0017      	movs	r7, r2
 800058c:	431f      	orrs	r7, r3
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x42>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4313      	orrs	r3, r2
 80005a2:	e7d5      	b.n	8000550 <__udivmoddi4+0xfc>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x6c>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	002f      	movs	r7, r5
 80005c6:	46b4      	mov	ip, r6
 80005c8:	4097      	lsls	r7, r2
 80005ca:	4666      	mov	r6, ip
 80005cc:	003b      	movs	r3, r7
 80005ce:	4333      	orrs	r3, r6
 80005d0:	e7c9      	b.n	8000566 <__udivmoddi4+0x112>
 80005d2:	46c0      	nop			; (mov r8, r8)

080005d4 <__clzdi2>:
 80005d4:	b510      	push	{r4, lr}
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d103      	bne.n	80005e2 <__clzdi2+0xe>
 80005da:	f000 f807 	bl	80005ec <__clzsi2>
 80005de:	3020      	adds	r0, #32
 80005e0:	e002      	b.n	80005e8 <__clzdi2+0x14>
 80005e2:	1c08      	adds	r0, r1, #0
 80005e4:	f000 f802 	bl	80005ec <__clzsi2>
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3308      	adds	r3, #8
 8000634:	001a      	movs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	4252      	negs	r2, r2
 8000640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3308      	adds	r3, #8
 8000646:	001a      	movs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3308      	adds	r3, #8
 8000650:	001a      	movs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}

08000664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}

0800067a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3301      	adds	r3, #1
 80006da:	d103      	bne.n	80006e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00c      	b.n	80006fe <vListInsert+0x38>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3308      	adds	r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e002      	b.n	80006f2 <vListInsert+0x2c>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d9f6      	bls.n	80006ec <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}

08000732 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6892      	ldr	r2, [r2, #8]
 8000742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6852      	ldr	r2, [r2, #4]
 800074c:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d103      	bne.n	8000766 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}

0800077e <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b04      	subs	r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0452      	lsls	r2, r2, #17
 8000796:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3b04      	subs	r3, #4
 800079c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3b18      	subs	r3, #24
 80007a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3b20      	subs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b004      	add	sp, #16
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <pxCurrentTCBConst2>)
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	3010      	adds	r0, #16
 80007c8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007ca:	46a0      	mov	r8, r4
 80007cc:	46a9      	mov	r9, r5
 80007ce:	46b2      	mov	sl, r6
 80007d0:	46bb      	mov	fp, r7
 80007d2:	f380 8809 	msr	PSP, r0
 80007d6:	3820      	subs	r0, #32
 80007d8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007da:	4671      	mov	r1, lr
 80007dc:	200d      	movs	r0, #13
 80007de:	4301      	orrs	r1, r0
 80007e0:	4708      	bx	r1
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <pxCurrentTCBConst2>:
 80007e4:	20001edc 	.word	0x20001edc
					"	bx r1							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB	\n"
				);
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)

080007ec <vPortStartFirstTask>:
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 80007ec:	2000      	movs	r0, #0
 80007ee:	6800      	ldr	r0, [r0, #0]
 80007f0:	f380 8808 	msr	MSP, r0
 80007f4:	b662      	cpsie	i
 80007f6:	df00      	svc	0
 80007f8:	46c0      	nop			; (mov r8, r8)
					" msr msp, r0		\n" /* Set the msp back to the start of the stack. */
					" cpsie i			\n" /* Globally enable interrupts. */
					" svc 0				\n" /* System call to start first task. */
					" nop				\n"
				);
}
 80007fa:	46c0      	nop			; (mov r8, r8)

080007fc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <xPortStartScheduler+0x38>)
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <xPortStartScheduler+0x38>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <xPortStartScheduler+0x38>)
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <xPortStartScheduler+0x38>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	0609      	lsls	r1, r1, #24
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800081c:	f000 f872 	bl	8000904 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <xPortStartScheduler+0x3c>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8000826:	f7ff ffe1 	bl	80007ec <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	e000ed20 	.word	0xe000ed20
 8000838:	20000000 	.word	0x20000000

0800083c <vPortYieldFromISR>:
    is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <vPortYieldFromISR+0x14>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0552      	lsls	r2, r2, #21
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	e000ed04 	.word	0xe000ed04

08000854 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8000858:	b672      	cpsid	i
    uxCriticalNesting++;
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <vPortEnterCritical+0x18>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <vPortEnterCritical+0x18>)
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000000 	.word	0x20000000

08000870 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    uxCriticalNesting--;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <vPortExitCritical+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <vPortExitCritical+0x20>)
 800087c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <vPortExitCritical+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 8000886:	b662      	cpsie	i
    }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000000 	.word	0x20000000

08000894 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000894:	f3ef 8009 	mrs	r0, PSP
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <pxCurrentTCBConst>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	3820      	subs	r0, #32
 800089e:	6010      	str	r0, [r2, #0]
 80008a0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80008a2:	4644      	mov	r4, r8
 80008a4:	464d      	mov	r5, r9
 80008a6:	4656      	mov	r6, sl
 80008a8:	465f      	mov	r7, fp
 80008aa:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80008ac:	b508      	push	{r3, lr}
 80008ae:	b672      	cpsid	i
 80008b0:	f000 fea0 	bl	80015f4 <vTaskSwitchContext>
 80008b4:	b662      	cpsie	i
 80008b6:	bc0c      	pop	{r2, r3}
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	6808      	ldr	r0, [r1, #0]
 80008bc:	3010      	adds	r0, #16
 80008be:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80008c0:	46a0      	mov	r8, r4
 80008c2:	46a9      	mov	r9, r5
 80008c4:	46b2      	mov	sl, r6
 80008c6:	46bb      	mov	fp, r7
 80008c8:	f380 8809 	msr	PSP, r0
 80008cc:	3820      	subs	r0, #32
 80008ce:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80008d0:	4718      	bx	r3
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <pxCurrentTCBConst>:
 80008d4:	20001edc 	.word	0x20001edc
	"	bx r3								\n"
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <SysTick_Handler+0x24>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0552      	lsls	r2, r2, #21
 80008e8:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	b672      	cpsid	i
	{
		vTaskIncrementTick();
 80008f0:	f000 fdda 	bl	80014a8 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80008f4:	b662      	cpsie	i
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	e000ed04 	.word	0xe000ed04

08000904 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <prvSetupTimerInterrupt+0x18>)
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <prvSetupTimerInterrupt+0x1c>)
 800090c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <prvSetupTimerInterrupt+0x20>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	e000e014 	.word	0xe000e014
 8000920:	00005dbf 	.word	0x00005dbf
 8000924:	e000e010 	.word	0xe000e010

08000928 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2207      	movs	r2, #7
 8000938:	4013      	ands	r3, r2
 800093a:	d004      	beq.n	8000946 <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2207      	movs	r2, #7
 8000940:	4393      	bics	r3, r2
 8000942:	3308      	adds	r3, #8
 8000944:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8000946:	f000 fd11 	bl	800136c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <pvPortMalloc+0x70>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <pvPortMalloc+0x74>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d812      	bhi.n	800097e <pvPortMalloc+0x56>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <pvPortMalloc+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <pvPortMalloc+0x70>)
 8000962:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8000964:	429a      	cmp	r2, r3
 8000966:	d90a      	bls.n	800097e <pvPortMalloc+0x56>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <pvPortMalloc+0x70>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <pvPortMalloc+0x78>)
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <pvPortMalloc+0x70>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	18d2      	adds	r2, r2, r3
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <pvPortMalloc+0x70>)
 800097c:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
 800097e:	f000 fd01 	bl	8001384 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <pvPortMalloc+0x64>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000988:	f005 fd58 	bl	800643c <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20001ed8 	.word	0x20001ed8
 800099c:	00001bff 	.word	0x00001bff
 80009a0:	200002d8 	.word	0x200002d8

080009a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <xPortGetFreeHeapSize+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	22e0      	movs	r2, #224	; 0xe0
 80009be:	0152      	lsls	r2, r2, #5
 80009c0:	1ad3      	subs	r3, r2, r3
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20001ed8 	.word	0x20001ed8

080009cc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <xQueueGenericReset+0x14>
 80009dc:	b672      	cpsid	i
 80009de:	e7fe      	b.n	80009de <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
 80009e0:	f7ff ff38 	bl	8000854 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	434b      	muls	r3, r1
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0e:	1e59      	subs	r1, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	434b      	muls	r3, r1
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4252      	negs	r2, r2
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4252      	negs	r2, r2
 8000a2a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10e      	bne.n	8000a50 <xQueueGenericReset+0x84>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d014      	beq.n	8000a64 <xQueueGenericReset+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3310      	adds	r3, #16
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 feae 	bl	80017a0 <xTaskRemoveFromEventList>
 8000a44:	0003      	movs	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10c      	bne.n	8000a64 <xQueueGenericReset+0x98>
				{
					portYIELD_WITHIN_API();
 8000a4a:	f7ff fef7 	bl	800083c <vPortYieldFromISR>
 8000a4e:	e009      	b.n	8000a64 <xQueueGenericReset+0x98>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3310      	adds	r3, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fde7 	bl	8000628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3324      	adds	r3, #36	; 0x24
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fde2 	bl	8000628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000a64:	f7ff ff04 	bl	8000870 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b088      	sub	sp, #32
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d029      	beq.n	8000ade <xQueueGenericCreate+0x6c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8000a8a:	204c      	movs	r0, #76	; 0x4c
 8000a8c:	f7ff ff4c 	bl	8000928 <pvPortMalloc>
 8000a90:	0003      	movs	r3, r0
 8000a92:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d021      	beq.n	8000ade <xQueueGenericCreate+0x6c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4353      	muls	r3, r2
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff ff3e 	bl	8000928 <pvPortMalloc>
 8000aac:	0002      	movs	r2, r0
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00d      	beq.n	8000ad6 <xQueueGenericCreate+0x64>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff7e 	bl	80009cc <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	e003      	b.n	8000ade <xQueueGenericCreate+0x6c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff63 	bl	80009a4 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <xQueueGenericCreate+0x76>
 8000ae4:	b672      	cpsid	i
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericCreate+0x74>

	return xReturn;
 8000ae8:	69fb      	ldr	r3, [r7, #28]
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b008      	add	sp, #32
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	0002      	movs	r2, r0
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8000afe:	204c      	movs	r0, #76	; 0x4c
 8000b00:	f7ff ff12 	bl	8000928 <pvPortMalloc>
 8000b04:	0003      	movs	r3, r0
 8000b06:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d02c      	beq.n	8000b68 <xQueueCreateMutex+0x76>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4252      	negs	r2, r2
 8000b46:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fd6b 	bl	8000628 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3324      	adds	r3, #36	; 0x24
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fd66 	bl	8000628 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	f000 f80a 	bl	8000b7c <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <xQueueCreateMutex+0x80>
 8000b6e:	b672      	cpsid	i
 8000b70:	e7fe      	b.n	8000b70 <xQueueCreateMutex+0x7e>
		return pxNewQueue;
 8000b72:	68fb      	ldr	r3, [r7, #12]
	}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b004      	add	sp, #16
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <xQueueGenericSend+0x1c>
 8000b94:	b672      	cpsid	i
 8000b96:	e7fe      	b.n	8000b96 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <xQueueGenericSend+0x2a>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <xQueueGenericSend+0x2e>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <xQueueGenericSend+0x30>
 8000baa:	2300      	movs	r3, #0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <xQueueGenericSend+0x38>
 8000bb0:	b672      	cpsid	i
 8000bb2:	e7fe      	b.n	8000bb2 <xQueueGenericSend+0x36>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000bb4:	f7ff fe4e 	bl	8000854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d217      	bcs.n	8000bf4 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f982 	bl	8000ed4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <xQueueGenericSend+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3324      	adds	r3, #36	; 0x24
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 fddf 	bl	80017a0 <xTaskRemoveFromEventList>
 8000be2:	0003      	movs	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <xQueueGenericSend+0x70>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8000be8:	f7ff fe28 	bl	800083c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8000bec:	f7ff fe40 	bl	8000870 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e055      	b.n	8000ca0 <xQueueGenericSend+0x124>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <xQueueGenericSend+0x86>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bfa:	f7ff fe39 	bl	8000870 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e04e      	b.n	8000ca0 <xQueueGenericSend+0x124>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d106      	bne.n	8000c16 <xQueueGenericSend+0x9a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000c08:	2314      	movs	r3, #20
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fe1f 	bl	8001850 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8000c16:	f7ff fe2b 	bl	8000870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000c1a:	f000 fba7 	bl	800136c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c1e:	f7ff fe19 	bl	8000854 <vPortEnterCritical>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	3301      	adds	r3, #1
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericSend+0xb4>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c34:	3301      	adds	r3, #1
 8000c36:	d102      	bne.n	8000c3e <xQueueGenericSend+0xc2>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	649a      	str	r2, [r3, #72]	; 0x48
 8000c3e:	f7ff fe17 	bl	8000870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	2314      	movs	r3, #20
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fe1a 	bl	8001884 <xTaskCheckForTimeOut>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d11e      	bne.n	8000c92 <xQueueGenericSend+0x116>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fa1a 	bl	8001090 <prvIsQueueFull>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d011      	beq.n	8000c84 <xQueueGenericSend+0x108>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3310      	adds	r3, #16
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fd37 	bl	80016dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 f9b0 	bl	8000fd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000c76:	f000 fb85 	bl	8001384 <xTaskResumeAll>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d19a      	bne.n	8000bb4 <xQueueGenericSend+0x38>
				{
					portYIELD_WITHIN_API();
 8000c7e:	f7ff fddd 	bl	800083c <vPortYieldFromISR>
 8000c82:	e797      	b.n	8000bb4 <xQueueGenericSend+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f9a5 	bl	8000fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c8c:	f000 fb7a 	bl	8001384 <xTaskResumeAll>
 8000c90:	e790      	b.n	8000bb4 <xQueueGenericSend+0x38>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 f99e 	bl	8000fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c9a:	f000 fb73 	bl	8001384 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000c9e:	2300      	movs	r3, #0
		}
	}
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b008      	add	sp, #32
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <xQueueGenericSendFromISR+0x18>
 8000cbc:	b672      	cpsid	i
 8000cbe:	e7fe      	b.n	8000cbe <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <xQueueGenericSendFromISR+0x26>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <xQueueGenericSendFromISR+0x2a>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <xQueueGenericSendFromISR+0x2c>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <xQueueGenericSendFromISR+0x34>
 8000cd8:	b672      	cpsid	i
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSendFromISR+0x32>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d223      	bcs.n	8000d36 <xQueueGenericSendFromISR+0x8e>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 f8ed 	bl	8000ed4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d111      	bne.n	8000d26 <xQueueGenericSendFromISR+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d012      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3324      	adds	r3, #36	; 0x24
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fd46 	bl	80017a0 <xTaskRemoveFromEventList>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d00b      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <xQueueGenericSendFromISR+0x88>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e004      	b.n	8000d30 <xQueueGenericSendFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8000d30:	2301      	movs	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e001      	b.n	8000d3a <xQueueGenericSendFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000d3a:	b662      	cpsie	i

	return xReturn;
 8000d3c:	697b      	ldr	r3, [r7, #20]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b006      	add	sp, #24
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b088      	sub	sp, #32
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <xQueueGenericReceive+0x1c>
 8000d5e:	b672      	cpsid	i
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <xQueueGenericReceive+0x2a>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <xQueueGenericReceive+0x2e>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <xQueueGenericReceive+0x30>
 8000d74:	2300      	movs	r3, #0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <xQueueGenericReceive+0x38>
 8000d7a:	b672      	cpsid	i
 8000d7c:	e7fe      	b.n	8000d7c <xQueueGenericReceive+0x36>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d7e:	f7ff fd69 	bl	8000854 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d03c      	beq.n	8000e04 <xQueueGenericReceive+0xbe>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f8f7 	bl	8000f8a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11c      	bne.n	8000ddc <xQueueGenericReceive+0x96>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <xQueueGenericReceive+0x78>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8000db4:	f000 ff02 	bl	8001bbc <xTaskGetCurrentTaskHandle>
 8000db8:	0002      	movs	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d01a      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3310      	adds	r3, #16
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fce8 	bl	80017a0 <xTaskRemoveFromEventList>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d112      	bne.n	8000dfc <xQueueGenericReceive+0xb6>
						{
							portYIELD_WITHIN_API();
 8000dd6:	f7ff fd31 	bl	800083c <vPortYieldFromISR>
 8000dda:	e00f      	b.n	8000dfc <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3324      	adds	r3, #36	; 0x24
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fcd6 	bl	80017a0 <xTaskRemoveFromEventList>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <xQueueGenericReceive+0xb6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8000df8:	f7ff fd20 	bl	800083c <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 8000dfc:	f7ff fd38 	bl	8000870 <vPortExitCritical>
				return pdPASS;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e063      	b.n	8000ecc <xQueueGenericReceive+0x186>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e0a:	f7ff fd31 	bl	8000870 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e05c      	b.n	8000ecc <xQueueGenericReceive+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <xQueueGenericReceive+0xe0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e18:	2310      	movs	r3, #16
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 fd17 	bl	8001850 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e26:	f7ff fd23 	bl	8000870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e2a:	f000 fa9f 	bl	800136c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e2e:	f7ff fd11 	bl	8000854 <vPortEnterCritical>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	3301      	adds	r3, #1
 8000e38:	d102      	bne.n	8000e40 <xQueueGenericReceive+0xfa>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e44:	3301      	adds	r3, #1
 8000e46:	d102      	bne.n	8000e4e <xQueueGenericReceive+0x108>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	649a      	str	r2, [r3, #72]	; 0x48
 8000e4e:	f7ff fd0f 	bl	8000870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	2310      	movs	r3, #16
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fd12 	bl	8001884 <xTaskCheckForTimeOut>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d12c      	bne.n	8000ebe <xQueueGenericReceive+0x178>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 f8ff 	bl	800106a <prvIsQueueEmpty>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d01f      	beq.n	8000eb0 <xQueueGenericReceive+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <xQueueGenericReceive+0x144>
					{
						portENTER_CRITICAL();
 8000e78:	f7ff fcec 	bl	8000854 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fec5 	bl	8001c10 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8000e86:	f7ff fcf3 	bl	8000870 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3324      	adds	r3, #36	; 0x24
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fc22 	bl	80016dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f89b 	bl	8000fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000ea0:	f000 fa70 	bl	8001384 <xTaskResumeAll>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d000      	beq.n	8000eaa <xQueueGenericReceive+0x164>
 8000ea8:	e769      	b.n	8000d7e <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
 8000eaa:	f7ff fcc7 	bl	800083c <vPortYieldFromISR>
 8000eae:	e766      	b.n	8000d7e <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f88f 	bl	8000fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eb8:	f000 fa64 	bl	8001384 <xTaskResumeAll>
 8000ebc:	e75f      	b.n	8000d7e <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 f888 	bl	8000fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ec6:	f000 fa5d 	bl	8001384 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000eca:	2300      	movs	r3, #0
		}
	}
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b008      	add	sp, #32
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10c      	bne.n	8000f02 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d143      	bne.n	8000f78 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fee3 	bl	8001cc0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	e03a      	b.n	8000f78 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d119      	bne.n	8000f3c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6898      	ldr	r0, [r3, #8]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	0019      	movs	r1, r3
 8000f14:	f006 fe89 	bl	8007c2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	18d2      	adds	r2, r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d322      	bcc.n	8000f78 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	e01d      	b.n	8000f78 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68d8      	ldr	r0, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	0019      	movs	r1, r3
 8000f48:	f006 fe6f 	bl	8007c2a <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	425b      	negs	r3, r3
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	425b      	negs	r3, r3
 8000f72:	18d2      	adds	r2, r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b004      	add	sp, #16
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d018      	beq.n	8000fce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	18d2      	adds	r2, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d303      	bcc.n	8000fbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f006 fe2e 	bl	8007c2a <memcpy>
	}
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000fde:	f7ff fc39 	bl	8000854 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fe2:	e011      	b.n	8001008 <prvUnlockQueue+0x32>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d012      	beq.n	8001012 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3324      	adds	r3, #36	; 0x24
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 fbd5 	bl	80017a0 <xTaskRemoveFromEventList>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8000ffa:	f000 fc91 	bl	8001920 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100c:	2b00      	cmp	r3, #0
 800100e:	dce9      	bgt.n	8000fe4 <prvUnlockQueue+0xe>
 8001010:	e000      	b.n	8001014 <prvUnlockQueue+0x3e>
			}
			else
			{
				break;
 8001012:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	4252      	negs	r2, r2
 800101a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800101c:	f7ff fc28 	bl	8000870 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001020:	f7ff fc18 	bl	8000854 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001024:	e011      	b.n	800104a <prvUnlockQueue+0x74>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d012      	beq.n	8001054 <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3310      	adds	r3, #16
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fbb4 	bl	80017a0 <xTaskRemoveFromEventList>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d001      	beq.n	8001040 <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
 800103c:	f000 fc70 	bl	8001920 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	2b00      	cmp	r3, #0
 8001050:	dce9      	bgt.n	8001026 <prvUnlockQueue+0x50>
 8001052:	e000      	b.n	8001056 <prvUnlockQueue+0x80>
			}
			else
			{
				break;
 8001054:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	4252      	negs	r2, r2
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800105e:	f7ff fc07 	bl	8000870 <vPortExitCritical>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001072:	f7ff fbef 	bl	8000854 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	425a      	negs	r2, r3
 800107c:	4153      	adcs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001082:	f7ff fbf5 	bl	8000870 <vPortExitCritical>

	return xReturn;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}

08001090 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001098:	f7ff fbdc 	bl	8000854 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	425a      	negs	r2, r3
 80010a8:	4153      	adcs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80010ae:	f7ff fbdf 	bl	8000870 <vPortExitCritical>

	return xReturn;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}

080010bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80010c6:	f7ff fbc5 	bl	8000854 <vPortEnterCritical>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	3301      	adds	r3, #1
 80010d0:	d102      	bne.n	80010d8 <vQueueWaitForMessageRestricted+0x1c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010dc:	3301      	adds	r3, #1
 80010de:	d102      	bne.n	80010e6 <vQueueWaitForMessageRestricted+0x2a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	649a      	str	r2, [r3, #72]	; 0x48
 80010e6:	f7ff fbc3 	bl	8000870 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fb26 	bl	800174c <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff ff67 	bl	8000fd6 <prvUnlockQueue>
	}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	801a      	strh	r2, [r3, #0]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <xTaskGenericCreate+0x1a>
 8001126:	b672      	cpsid	i
 8001128:	e7fe      	b.n	8001128 <xTaskGenericCreate+0x18>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 800112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112c:	2b04      	cmp	r3, #4
 800112e:	d901      	bls.n	8001134 <xTaskGenericCreate+0x24>
 8001130:	b672      	cpsid	i
 8001132:	e7fe      	b.n	8001132 <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8001134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001136:	1dbb      	adds	r3, r7, #6
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fcf5 	bl	8001b2c <prvAllocateTCBAndStack>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d100      	bne.n	800114e <xTaskGenericCreate+0x3e>
 800114c:	e082      	b.n	8001254 <xTaskGenericCreate+0x144>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <xTaskGenericCreate+0x174>)
 8001158:	468c      	mov	ip, r1
 800115a:	4463      	add	r3, ip
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2207      	movs	r2, #7
 8001166:	4393      	bics	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2207      	movs	r2, #7
 800116e:	4013      	ands	r3, r2
 8001170:	d001      	beq.n	8001176 <xTaskGenericCreate+0x66>
 8001172:	b672      	cpsid	i
 8001174:	e7fe      	b.n	8001174 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001176:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	69b8      	ldr	r0, [r7, #24]
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	0023      	movs	r3, r4
 8001186:	f000 fbe7 	bl	8001958 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	68f9      	ldr	r1, [r7, #12]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff faf4 	bl	800077e <pxPortInitialiseStack>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	2307      	movs	r3, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	d001      	beq.n	80011ac <xTaskGenericCreate+0x9c>
 80011a8:	b672      	cpsid	i
 80011aa:	e7fe      	b.n	80011aa <xTaskGenericCreate+0x9a>

		if( ( void * ) pxCreatedTask != NULL )
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80011b8:	f7ff fb4c 	bl	8000854 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <xTaskGenericCreate+0x178>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <xTaskGenericCreate+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <xTaskGenericCreate+0x17c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <xTaskGenericCreate+0xd2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <xTaskGenericCreate+0x17c>)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <xTaskGenericCreate+0x178>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10f      	bne.n	80011fc <xTaskGenericCreate+0xec>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80011dc:	f000 fbf2 	bl	80019c4 <prvInitialiseTaskLists>
 80011e0:	e00c      	b.n	80011fc <xTaskGenericCreate+0xec>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <xTaskGenericCreate+0x180>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d108      	bne.n	80011fc <xTaskGenericCreate+0xec>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <xTaskGenericCreate+0x17c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d802      	bhi.n	80011fc <xTaskGenericCreate+0xec>
					{
						pxCurrentTCB = pxNewTCB;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <xTaskGenericCreate+0x17c>)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <xTaskGenericCreate+0x184>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d903      	bls.n	8001210 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <xTaskGenericCreate+0x184>)
 800120e:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <xTaskGenericCreate+0x188>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <xTaskGenericCreate+0x188>)
 8001218:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <xTaskGenericCreate+0x18c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d903      	bls.n	800122e <xTaskGenericCreate+0x11e>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <xTaskGenericCreate+0x18c>)
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001232:	0013      	movs	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	189b      	adds	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <xTaskGenericCreate+0x190>)
 800123c:	189a      	adds	r2, r3, r2
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	3304      	adds	r3, #4
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f7ff fa18 	bl	800067a <vListInsertEnd>

			xReturn = pdPASS;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800124e:	f7ff fb0f 	bl	8000870 <vPortExitCritical>
 8001252:	e002      	b.n	800125a <xTaskGenericCreate+0x14a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <xTaskGenericCreate+0x168>
	{
		if( xSchedulerRunning != pdFALSE )
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <xTaskGenericCreate+0x180>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <xTaskGenericCreate+0x168>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <xTaskGenericCreate+0x17c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	429a      	cmp	r2, r3
 8001272:	d201      	bcs.n	8001278 <xTaskGenericCreate+0x168>
			{
				portYIELD_WITHIN_API();
 8001274:	f7ff fae2 	bl	800083c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8001278:	69fb      	ldr	r3, [r7, #28]
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b009      	add	sp, #36	; 0x24
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	3fffffff 	.word	0x3fffffff
 8001288:	20001fb4 	.word	0x20001fb4
 800128c:	20001edc 	.word	0x20001edc
 8001290:	20001fc4 	.word	0x20001fc4
 8001294:	20001fbc 	.word	0x20001fbc
 8001298:	20001fd8 	.word	0x20001fd8
 800129c:	20001fc0 	.word	0x20001fc0
 80012a0:	20001ee0 	.word	0x20001ee0

080012a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d014      	beq.n	80012e0 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
 80012b6:	f000 f859 	bl	800136c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <vTaskDelay+0x50>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <vTaskDelay+0x54>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff fa31 	bl	8000732 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fbf4 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80012d8:	f000 f854 	bl	8001384 <xTaskResumeAll>
 80012dc:	0003      	movs	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
 80012e6:	f7ff faa9 	bl	800083c <vPortYieldFromISR>
		}
	}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20001fb8 	.word	0x20001fb8
 80012f8:	20001edc 	.word	0x20001edc

080012fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8001302:	4916      	ldr	r1, [pc, #88]	; (800135c <vTaskStartScheduler+0x60>)
 8001304:	4816      	ldr	r0, [pc, #88]	; (8001360 <vTaskStartScheduler+0x64>)
 8001306:	2300      	movs	r3, #0
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	2246      	movs	r2, #70	; 0x46
 800131a:	f7ff fef9 	bl	8001110 <xTaskGenericCreate>
 800131e:	0003      	movs	r3, r0
 8001320:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d103      	bne.n	8001330 <vTaskStartScheduler+0x34>
		{
			xReturn = xTimerCreateTimerTask();
 8001328:	f000 fd08 	bl	8001d3c <xTimerCreateTimerTask>
 800132c:	0003      	movs	r3, r0
 800132e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <vTaskStartScheduler+0x4c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8001336:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <vTaskStartScheduler+0x68>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <vTaskStartScheduler+0x6c>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001344:	f7ff fa5a 	bl	80007fc <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <vTaskStartScheduler+0x56>
 800134e:	b672      	cpsid	i
 8001350:	e7fe      	b.n	8001350 <vTaskStartScheduler+0x54>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	08009ac0 	.word	0x08009ac0
 8001360:	08001935 	.word	0x08001935
 8001364:	20001fc4 	.word	0x20001fc4
 8001368:	20001fb8 	.word	0x20001fb8

0800136c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <vTaskSuspendAll+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <vTaskSuspendAll+0x14>)
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20001fc8 	.word	0x20001fc8

08001384 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <xTaskResumeAll+0xe0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <xTaskResumeAll+0x16>
 8001396:	b672      	cpsid	i
 8001398:	e7fe      	b.n	8001398 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800139a:	f7ff fa5b 	bl	8000854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <xTaskResumeAll+0xe0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <xTaskResumeAll+0xe0>)
 80013a6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <xTaskResumeAll+0xe0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d152      	bne.n	8001456 <xTaskResumeAll+0xd2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <xTaskResumeAll+0xe4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d04e      	beq.n	8001456 <xTaskResumeAll+0xd2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80013bc:	e027      	b.n	800140e <xTaskResumeAll+0x8a>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <xTaskResumeAll+0xe8>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 80013c4:	0023      	movs	r3, r4
 80013c6:	3318      	adds	r3, #24
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff f9b2 	bl	8000732 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 80013ce:	1d23      	adds	r3, r4, #4
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f9ae 	bl	8000732 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80013d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <xTaskResumeAll+0xec>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d902      	bls.n	80013e6 <xTaskResumeAll+0x62>
 80013e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <xTaskResumeAll+0xec>)
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013e8:	0013      	movs	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	189b      	adds	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <xTaskResumeAll+0xf0>)
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	1d22      	adds	r2, r4, #4
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff f93e 	bl	800067a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <xTaskResumeAll+0xf4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	429a      	cmp	r2, r3
 8001408:	d301      	bcc.n	800140e <xTaskResumeAll+0x8a>
					{
						xYieldRequired = pdTRUE;
 800140a:	2301      	movs	r3, #1
 800140c:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <xTaskResumeAll+0xe8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1d3      	bne.n	80013be <xTaskResumeAll+0x3a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <xTaskResumeAll+0xf8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00d      	beq.n	800143a <xTaskResumeAll+0xb6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800141e:	e006      	b.n	800142e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
 8001420:	f000 f842 	bl	80014a8 <vTaskIncrementTick>
						--uxMissedTicks;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <xTaskResumeAll+0xf8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <xTaskResumeAll+0xf8>)
 800142c:	601a      	str	r2, [r3, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <xTaskResumeAll+0xf8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f4      	bne.n	8001420 <xTaskResumeAll+0x9c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8001436:	2301      	movs	r3, #1
 8001438:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <xTaskResumeAll+0xc4>
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <xTaskResumeAll+0xfc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <xTaskResumeAll+0xd2>
				{
					xAlreadyYielded = pdTRUE;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <xTaskResumeAll+0xfc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001452:	f7ff f9f3 	bl	800083c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001456:	f7ff fa0b 	bl	8000870 <vPortExitCritical>

	return xAlreadyYielded;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	20001fc8 	.word	0x20001fc8
 8001468:	20001fb4 	.word	0x20001fb4
 800146c:	20001f74 	.word	0x20001f74
 8001470:	20001fc0 	.word	0x20001fc0
 8001474:	20001ee0 	.word	0x20001ee0
 8001478:	20001edc 	.word	0x20001edc
 800147c:	20001fcc 	.word	0x20001fcc
 8001480:	20001fd0 	.word	0x20001fd0

08001484 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800148a:	f7ff f9e3 	bl	8000854 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <xTaskGetTickCount+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001494:	f7ff f9ec 	bl	8000870 <vPortExitCritical>

	return xTicks;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20001fb8 	.word	0x20001fb8

080014a8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <vTaskIncrementTick+0x128>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d000      	beq.n	80014b8 <vTaskIncrementTick+0x10>
 80014b6:	e079      	b.n	80015ac <vTaskIncrementTick+0x104>
	{
		++xTickCount;
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014c0:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <vTaskIncrementTick+0x12c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d128      	bne.n	800151c <vTaskIncrementTick+0x74>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <vTaskIncrementTick+0x30>
 80014d4:	b672      	cpsid	i
 80014d6:	e7fe      	b.n	80014d6 <vTaskIncrementTick+0x2e>
			
			pxTemp = pxDelayedTaskList;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <vTaskIncrementTick+0x134>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014e4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <vTaskIncrementTick+0x134>)
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <vTaskIncrementTick+0x138>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <vTaskIncrementTick+0x138>)
 80014f4:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <vTaskIncrementTick+0x130>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d104      	bne.n	800150a <vTaskIncrementTick+0x62>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001502:	2201      	movs	r2, #1
 8001504:	4252      	negs	r2, r2
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e008      	b.n	800151c <vTaskIncrementTick+0x74>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <vTaskIncrementTick+0x130>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <vTaskIncrementTick+0x13c>)
 800151a:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <vTaskIncrementTick+0x12c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d348      	bcc.n	80015ba <vTaskIncrementTick+0x112>
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <vTaskIncrementTick+0x130>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <vTaskIncrementTick+0x94>
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001534:	2201      	movs	r2, #1
 8001536:	4252      	negs	r2, r2
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e03e      	b.n	80015ba <vTaskIncrementTick+0x112>
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <vTaskIncrementTick+0x130>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <vTaskIncrementTick+0x12c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d203      	bcs.n	800155e <vTaskIncrementTick+0xb6>
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <vTaskIncrementTick+0x13c>)
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e02d      	b.n	80015ba <vTaskIncrementTick+0x112>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3304      	adds	r3, #4
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff f8e5 	bl	8000732 <vListRemove>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <vTaskIncrementTick+0xd2>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3318      	adds	r3, #24
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff f8dc 	bl	8000732 <vListRemove>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <vTaskIncrementTick+0x140>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d903      	bls.n	800158e <vTaskIncrementTick+0xe6>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <vTaskIncrementTick+0x140>)
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	0013      	movs	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	189b      	adds	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <vTaskIncrementTick+0x144>)
 800159c:	189a      	adds	r2, r3, r2
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3304      	adds	r3, #4
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f7ff f868 	bl	800067a <vListInsertEnd>
 80015aa:	e7bd      	b.n	8001528 <vTaskIncrementTick+0x80>
	}
	else
	{
		++uxMissedTicks;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015b4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80015b6:	f004 ff07 	bl	80063c8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <vTaskIncrementTick+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <vTaskIncrementTick+0x11e>
		{
			vApplicationTickHook();
 80015c2:	f004 ff01 	bl	80063c8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20001fc8 	.word	0x20001fc8
 80015d4:	20001fb8 	.word	0x20001fb8
 80015d8:	20001f6c 	.word	0x20001f6c
 80015dc:	20001f70 	.word	0x20001f70
 80015e0:	20001fd4 	.word	0x20001fd4
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20001fc0 	.word	0x20001fc0
 80015ec:	20001ee0 	.word	0x20001ee0
 80015f0:	20001fcc 	.word	0x20001fcc

080015f4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <vTaskSwitchContext+0xd0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <vTaskSwitchContext+0xd4>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 8001608:	e057      	b.n	80016ba <vTaskSwitchContext+0xc6>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <vTaskSwitchContext+0xd8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	429a      	cmp	r2, r3
 8001618:	d808      	bhi.n	800162c <vTaskSwitchContext+0x38>
 800161a:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <vTaskSwitchContext+0xd8>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3334      	adds	r3, #52	; 0x34
 8001624:	0019      	movs	r1, r3
 8001626:	0010      	movs	r0, r2
 8001628:	f004 ff0b 	bl	8006442 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <vTaskSwitchContext+0xd8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <vTaskSwitchContext+0xdc>)
 8001634:	2214      	movs	r2, #20
 8001636:	0018      	movs	r0, r3
 8001638:	f006 fae8 	bl	8007c0c <memcmp>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d014      	beq.n	800166a <vTaskSwitchContext+0x76>
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <vTaskSwitchContext+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3334      	adds	r3, #52	; 0x34
 800164a:	0019      	movs	r1, r3
 800164c:	0010      	movs	r0, r2
 800164e:	f004 fef8 	bl	8006442 <vApplicationStackOverflowHook>
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001652:	e00a      	b.n	800166a <vTaskSwitchContext+0x76>
			configASSERT( uxTopReadyPriority );
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <vTaskSwitchContext+0x6c>
 800165c:	b672      	cpsid	i
 800165e:	e7fe      	b.n	800165e <vTaskSwitchContext+0x6a>
			--uxTopReadyPriority;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001668:	601a      	str	r2, [r3, #0]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <vTaskSwitchContext+0xe0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	491a      	ldr	r1, [pc, #104]	; (80016d8 <vTaskSwitchContext+0xe4>)
 8001670:	0013      	movs	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	189b      	adds	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	585b      	ldr	r3, [r3, r1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ea      	beq.n	8001654 <vTaskSwitchContext+0x60>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <vTaskSwitchContext+0xe0>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	0013      	movs	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <vTaskSwitchContext+0xe4>)
 800168c:	189b      	adds	r3, r3, r2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3308      	adds	r3, #8
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d104      	bne.n	80016b0 <vTaskSwitchContext+0xbc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <vTaskSwitchContext+0xd8>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20001fc8 	.word	0x20001fc8
 80016c8:	20001fd0 	.word	0x20001fd0
 80016cc:	20001edc 	.word	0x20001edc
 80016d0:	0800a794 	.word	0x0800a794
 80016d4:	20001fc0 	.word	0x20001fc0
 80016d8:	20001ee0 	.word	0x20001ee0

080016dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <vTaskPlaceOnEventList+0x14>
 80016ec:	b672      	cpsid	i
 80016ee:	e7fe      	b.n	80016ee <vTaskPlaceOnEventList+0x12>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3318      	adds	r3, #24
 80016f6:	001a      	movs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe ffe2 	bl	80006c6 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3304      	adds	r3, #4
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff f812 	bl	8000732 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	d108      	bne.n	8001726 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <vTaskPlaceOnEventList+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1d1a      	adds	r2, r3, #4
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <vTaskPlaceOnEventList+0x68>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe ffab 	bl	800067a <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001724:	e008      	b.n	8001738 <vTaskPlaceOnEventList+0x5c>
			xTimeToWake = xTickCount + xTicksToWait;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <vTaskPlaceOnEventList+0x6c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 f9c4 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b004      	add	sp, #16
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20001edc 	.word	0x20001edc
 8001744:	20001fa0 	.word	0x20001fa0
 8001748:	20001fb8 	.word	0x20001fb8

0800174c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <vTaskPlaceOnEventListRestricted+0x14>
 800175c:	b672      	cpsid	i
 800175e:	e7fe      	b.n	800175e <vTaskPlaceOnEventListRestricted+0x12>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3318      	adds	r3, #24
 8001766:	001a      	movs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe ff84 	bl	800067a <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe ffda 	bl	8000732 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <vTaskPlaceOnEventListRestricted+0x50>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f998 	bl	8001ac0 <prvAddCurrentTaskToDelayedList>
	}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20001edc 	.word	0x20001edc
 800179c:	20001fb8 	.word	0x20001fb8

080017a0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <xTaskRemoveFromEventList+0x1a>
 80017b6:	b672      	cpsid	i
 80017b8:	e7fe      	b.n	80017b8 <xTaskRemoveFromEventList+0x18>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3318      	adds	r3, #24
 80017be:	0018      	movs	r0, r3
 80017c0:	f7fe ffb7 	bl	8000732 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <xTaskRemoveFromEventList+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11d      	bne.n	8001808 <xTaskRemoveFromEventList+0x68>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3304      	adds	r3, #4
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe ffae 	bl	8000732 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <xTaskRemoveFromEventList+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d903      	bls.n	80017ea <xTaskRemoveFromEventList+0x4a>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <xTaskRemoveFromEventList+0xa0>)
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ee:	0013      	movs	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	189b      	adds	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <xTaskRemoveFromEventList+0xa4>)
 80017f8:	189a      	adds	r2, r3, r2
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3304      	adds	r3, #4
 80017fe:	0019      	movs	r1, r3
 8001800:	0010      	movs	r0, r2
 8001802:	f7fe ff3a 	bl	800067a <vListInsertEnd>
 8001806:	e007      	b.n	8001818 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3318      	adds	r3, #24
 800180c:	001a      	movs	r2, r3
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <xTaskRemoveFromEventList+0xa8>)
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f7fe ff31 	bl	800067a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <xTaskRemoveFromEventList+0xac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001826:	2301      	movs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e001      	b.n	8001830 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20001fc8 	.word	0x20001fc8
 8001840:	20001fc0 	.word	0x20001fc0
 8001844:	20001ee0 	.word	0x20001ee0
 8001848:	20001f74 	.word	0x20001f74
 800184c:	20001edc 	.word	0x20001edc

08001850 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <vTaskSetTimeOutState+0x12>
 800185e:	b672      	cpsid	i
 8001860:	e7fe      	b.n	8001860 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <vTaskSetTimeOutState+0x2c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <vTaskSetTimeOutState+0x30>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20001fd4 	.word	0x20001fd4
 8001880:	20001fb8 	.word	0x20001fb8

08001884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <xTaskCheckForTimeOut+0x14>
 8001894:	b672      	cpsid	i
 8001896:	e7fe      	b.n	8001896 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <xTaskCheckForTimeOut+0x1e>
 800189e:	b672      	cpsid	i
 80018a0:	e7fe      	b.n	80018a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80018a2:	f7fe ffd7 	bl	8000854 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	d102      	bne.n	80018b4 <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e02a      	b.n	800190a <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <xTaskCheckForTimeOut+0x94>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d008      	beq.n	80018d2 <xTaskCheckForTimeOut+0x4e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d802      	bhi.n	80018d2 <xTaskCheckForTimeOut+0x4e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e01b      	b.n	800190a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d210      	bcs.n	8001906 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <xTaskCheckForTimeOut+0x98>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1a9a      	subs	r2, r3, r2
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ffa8 	bl	8001850 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e001      	b.n	800190a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800190a:	f7fe ffb1 	bl	8000870 <vPortExitCritical>

	return xReturn;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20001fd4 	.word	0x20001fd4
 800191c:	20001fb8 	.word	0x20001fb8

08001920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <vTaskMissedYield+0x10>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20001fd0 	.word	0x20001fd0

08001934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800193c:	f000 f886 	bl	8001a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <prvIdleTask+0x20>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d901      	bls.n	800194c <prvIdleTask+0x18>
			{
				taskYIELD();
 8001948:	f7fe ff78 	bl	800083c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800194c:	f004 fd7f 	bl	800644e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001950:	e7f4      	b.n	800193c <prvIdleTask+0x8>
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	20001ee0 	.word	0x20001ee0

08001958 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3334      	adds	r3, #52	; 0x34
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	220a      	movs	r2, #10
 800196e:	0018      	movs	r0, r3
 8001970:	f006 fc42 	bl	80081f8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	223d      	movs	r2, #61	; 0x3d
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b04      	cmp	r3, #4
 8001980:	d901      	bls.n	8001986 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001982:	2304      	movs	r3, #4
 8001984:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3304      	adds	r3, #4
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe fe64 	bl	8000664 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3318      	adds	r3, #24
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7fe fe5f 	bl	8000664 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2205      	movs	r2, #5
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	e00c      	b.n	80019ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	0013      	movs	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	189b      	adds	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <prvInitialiseTaskLists+0x68>)
 80019dc:	189b      	adds	r3, r3, r2
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe fe22 	bl	8000628 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d9ef      	bls.n	80019d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <prvInitialiseTaskLists+0x6c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fe18 	bl	8000628 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <prvInitialiseTaskLists+0x70>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe fe14 	bl	8000628 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <prvInitialiseTaskLists+0x74>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7fe fe10 	bl	8000628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <prvInitialiseTaskLists+0x78>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fe0c 	bl	8000628 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <prvInitialiseTaskLists+0x7c>)
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7fe fe08 	bl	8000628 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <prvInitialiseTaskLists+0x80>)
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <prvInitialiseTaskLists+0x6c>)
 8001a1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <prvInitialiseTaskLists+0x84>)
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <prvInitialiseTaskLists+0x70>)
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20001ee0 	.word	0x20001ee0
 8001a30:	20001f44 	.word	0x20001f44
 8001a34:	20001f58 	.word	0x20001f58
 8001a38:	20001f74 	.word	0x20001f74
 8001a3c:	20001f88 	.word	0x20001f88
 8001a40:	20001fa0 	.word	0x20001fa0
 8001a44:	20001f6c 	.word	0x20001f6c
 8001a48:	20001f70 	.word	0x20001f70

08001a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d027      	beq.n	8001aaa <prvCheckTasksWaitingTermination+0x5e>
		{
			vTaskSuspendAll();
 8001a5a:	f7ff fc87 	bl	800136c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	425a      	negs	r2, r3
 8001a64:	4153      	adcs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8001a6a:	f7ff fc8b 	bl	8001384 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <prvCheckTasksWaitingTermination+0x5e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001a74:	f7fe feee 	bl	8000854 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3304      	adds	r3, #4
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fe54 	bl	8000732 <vListRemove>
					--uxCurrentNumberOfTasks;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <prvCheckTasksWaitingTermination+0x70>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <prvCheckTasksWaitingTermination+0x70>)
 8001a92:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <prvCheckTasksWaitingTermination+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001a9e:	f7fe fee7 	bl	8000870 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f877 	bl	8001b98 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20001f9c 	.word	0x20001f9c
 8001ab8:	20001f88 	.word	0x20001f88
 8001abc:	20001fb4 	.word	0x20001fb4

08001ac0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <prvAddCurrentTaskToDelayedList+0x5c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d209      	bcs.n	8001aee <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <prvAddCurrentTaskToDelayedList+0x60>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	0010      	movs	r0, r2
 8001ae8:	f7fe fded 	bl	80006c6 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8001aec:	e010      	b.n	8001b10 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x58>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3304      	adds	r3, #4
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f7fe fde3 	bl	80006c6 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d202      	bcs.n	8001b10 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <prvAddCurrentTaskToDelayedList+0x68>)
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001edc 	.word	0x20001edc
 8001b1c:	20001fb8 	.word	0x20001fb8
 8001b20:	20001f70 	.word	0x20001f70
 8001b24:	20001f6c 	.word	0x20001f6c
 8001b28:	20000004 	.word	0x20000004

08001b2c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	1dbb      	adds	r3, r7, #6
 8001b38:	801a      	strh	r2, [r3, #0]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001b3a:	2044      	movs	r0, #68	; 0x44
 8001b3c:	f7fe fef4 	bl	8000928 <pvPortMalloc>
 8001b40:	0003      	movs	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d021      	beq.n	8001b8e <prvAllocateTCBAndStack+0x62>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <prvAllocateTCBAndStack+0x34>
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe fee6 	bl	8000928 <pvPortMalloc>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	e000      	b.n	8001b62 <prvAllocateTCBAndStack+0x36>
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe ff17 	bl	80009a4 <vPortFree>
			pxNewTCB = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e008      	b.n	8001b8e <prvAllocateTCBAndStack+0x62>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b80:	1dbb      	adds	r3, r7, #6
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	001a      	movs	r2, r3
 8001b88:	21a5      	movs	r1, #165	; 0xa5
 8001b8a:	f006 f857 	bl	8007c3c <memset>
		}
	}

	return pxNewTCB;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe fefd 	bl	80009a4 <vPortFree>
		vPortFree( pxTCB );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fef9 	bl	80009a4 <vPortFree>
	}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <xTaskGetCurrentTaskHandle+0x18>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001bc8:	687b      	ldr	r3, [r7, #4]
	}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	20001edc 	.word	0x20001edc

08001bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <xTaskGetSchedulerState+0x30>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e008      	b.n	8001bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <xTaskGetSchedulerState+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001bfe:	687b      	ldr	r3, [r7, #4]
	}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20001fc4 	.word	0x20001fc4
 8001c0c:	20001fc8 	.word	0x20001fc8

08001c10 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <vTaskPriorityInherit+0x16>
 8001c22:	b672      	cpsid	i
 8001c24:	e7fe      	b.n	8001c24 <vTaskPriorityInherit+0x14>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d23a      	bcs.n	8001caa <vTaskPriorityInherit+0x9a>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <vTaskPriorityInherit+0xa8>)
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	4299      	cmp	r1, r3
 8001c58:	d122      	bne.n	8001ca0 <vTaskPriorityInherit+0x90>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7fe fd67 	bl	8000732 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <vTaskPriorityInherit+0xac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d903      	bls.n	8001c82 <vTaskPriorityInherit+0x72>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <vTaskPriorityInherit+0xac>)
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	0013      	movs	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <vTaskPriorityInherit+0xa8>)
 8001c90:	189a      	adds	r2, r3, r2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f7fe fcee 	bl	800067a <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001c9e:	e004      	b.n	8001caa <vTaskPriorityInherit+0x9a>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <vTaskPriorityInherit+0xa4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20001edc 	.word	0x20001edc
 8001cb8:	20001ee0 	.word	0x20001ee0
 8001cbc:	20001fc0 	.word	0x20001fc0

08001cc0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d026      	beq.n	8001d2c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7fe fd25 	bl	8000732 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <vTaskPriorityDisinherit+0x74>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d903      	bls.n	8001d10 <vTaskPriorityDisinherit+0x50>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <vTaskPriorityDisinherit+0x74>)
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	0013      	movs	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	189b      	adds	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <vTaskPriorityDisinherit+0x78>)
 8001d1e:	189a      	adds	r2, r3, r2
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3304      	adds	r3, #4
 8001d24:	0019      	movs	r1, r3
 8001d26:	0010      	movs	r0, r2
 8001d28:	f7fe fca7 	bl	800067a <vListInsertEnd>
			}
		}
	}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20001fc0 	.word	0x20001fc0
 8001d38:	20001ee0 	.word	0x20001ee0

08001d3c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001d46:	f000 fa55 	bl	80021f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <xTimerCreateTimerTask+0x4c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00f      	beq.n	8001d72 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <xTimerCreateTimerTask+0x50>)
 8001d54:	480e      	ldr	r0, [pc, #56]	; (8001d90 <xTimerCreateTimerTask+0x54>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	9303      	str	r3, [sp, #12]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2303      	movs	r3, #3
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2246      	movs	r2, #70	; 0x46
 8001d6a:	f7ff f9d1 	bl	8001110 <xTaskGenericCreate>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	607b      	str	r3, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <xTimerCreateTimerTask+0x40>
 8001d78:	b672      	cpsid	i
 8001d7a:	e7fe      	b.n	8001d7a <xTimerCreateTimerTask+0x3e>
	return xReturn;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	2000200c 	.word	0x2000200c
 8001d8c:	08009ac8 	.word	0x08009ac8
 8001d90:	08001e99 	.word	0x08001e99

08001d94 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <xTimerGenericCommand+0x8c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d033      	beq.n	8001e16 <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001dae:	2310      	movs	r3, #16
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	601a      	str	r2, [r3, #0]
		xMessage.xMessageValue = xOptionalValue;
 8001db6:	2310      	movs	r3, #16
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	609a      	str	r2, [r3, #8]

		if( pxHigherPriorityTaskWoken == NULL )
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11a      	bne.n	8001e02 <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001dcc:	f7ff ff04 	bl	8001bd8 <xTaskGetSchedulerState>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10a      	bne.n	8001dec <xTimerGenericCommand+0x58>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <xTimerGenericCommand+0x8c>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ddc:	2310      	movs	r3, #16
 8001dde:	18f9      	adds	r1, r7, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	f7fe fecb 	bl	8000b7c <xQueueGenericSend>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e014      	b.n	8001e16 <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <xTimerGenericCommand+0x8c>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	2310      	movs	r3, #16
 8001df2:	18f9      	adds	r1, r7, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	2200      	movs	r2, #0
 8001df8:	f7fe fec0 	bl	8000b7c <xQueueGenericSend>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	e009      	b.n	8001e16 <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <xTimerGenericCommand+0x8c>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	2310      	movs	r3, #16
 8001e0a:	18f9      	adds	r1, r7, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f7fe ff4b 	bl	8000ca8 <xQueueGenericSendFromISR>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61fb      	str	r3, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8001e16:	69fb      	ldr	r3, [r7, #28]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b008      	add	sp, #32
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000200c 	.word	0x2000200c

08001e24 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <prvProcessExpiredTimer+0x70>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe fc78 	bl	8000732 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11a      	bne.n	8001e80 <prvProcessExpiredTimer+0x5c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	18d1      	adds	r1, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f8ae 	bl	8001fb8 <prvInsertTimerInActiveList>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10e      	bne.n	8001e80 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f7ff ff91 	bl	8001d94 <xTimerGenericCommand>
 8001e72:	0003      	movs	r3, r0
 8001e74:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <prvProcessExpiredTimer+0x5c>
 8001e7c:	b672      	cpsid	i
 8001e7e:	e7fe      	b.n	8001e7e <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	0010      	movs	r0, r2
 8001e88:	4798      	blx	r3
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	20002004 	.word	0x20002004

08001e98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f843 	bl	8001f30 <prvGetNextExpireTime>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f803 	bl	8001ec0 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8001eba:	f000 f8bf 	bl	800203c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ebe:	e7ef      	b.n	8001ea0 <prvTimerTask+0x8>

08001ec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001eca:	f7ff fa4f 	bl	800136c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ece:	2308      	movs	r3, #8
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f84c 	bl	8001f70 <prvSampleTimeNow>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11e      	bne.n	8001f20 <prvProcessTimerOrBlockTask+0x60>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <prvProcessTimerOrBlockTask+0x42>
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d808      	bhi.n	8001f02 <prvProcessTimerOrBlockTask+0x42>
			{
				xTaskResumeAll();
 8001ef0:	f7ff fa48 	bl	8001384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff ff92 	bl	8001e24 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8001f00:	e010      	b.n	8001f24 <prvProcessTimerOrBlockTask+0x64>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <prvProcessTimerOrBlockTask+0x6c>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	f7ff f8d5 	bl	80010bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001f12:	f7ff fa37 	bl	8001384 <xTaskResumeAll>
 8001f16:	1e03      	subs	r3, r0, #0
 8001f18:	d104      	bne.n	8001f24 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 8001f1a:	f7fe fc8f 	bl	800083c <vPortYieldFromISR>
}
 8001f1e:	e001      	b.n	8001f24 <prvProcessTimerOrBlockTask+0x64>
			xTaskResumeAll();
 8001f20:	f7ff fa30 	bl	8001384 <xTaskResumeAll>
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000200c 	.word	0x2000200c

08001f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <prvGetNextExpireTime+0x3c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	425a      	negs	r2, r3
 8001f40:	4153      	adcs	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	001a      	movs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <prvGetNextExpireTime+0x3c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e001      	b.n	8001f62 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20002004 	.word	0x20002004

08001f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8001f78:	f7ff fa84 	bl	8001484 <xTaskGetTickCount>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <prvSampleTimeNow+0x44>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d208      	bcs.n	8001f9c <prvSampleTimeNow+0x2c>
	{
		prvSwitchTimerLists( xLastTime );
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <prvSampleTimeNow+0x44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f8d4 	bl	800213c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e002      	b.n	8001fa2 <prvSampleTimeNow+0x32>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <prvSampleTimeNow+0x44>)
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b004      	add	sp, #16
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20002010 	.word	0x20002010

08001fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d812      	bhi.n	8002004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	1ad2      	subs	r2, r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e01b      	b.n	800202a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <prvInsertTimerInActiveList+0x7c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f7fe fb62 	bl	80006c6 <vListInsert>
 8002002:	e012      	b.n	800202a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d206      	bcs.n	800201a <prvInsertTimerInActiveList+0x62>
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d302      	bcc.n	800201a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e007      	b.n	800202a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <prvInsertTimerInActiveList+0x80>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	0019      	movs	r1, r3
 8002024:	0010      	movs	r0, r2
 8002026:	f7fe fb4e 	bl	80006c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800202a:	697b      	ldr	r3, [r7, #20]
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b006      	add	sp, #24
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20002008 	.word	0x20002008
 8002038:	20002004 	.word	0x20002004

0800203c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff ff93 	bl	8001f70 <prvSampleTimeNow>
 800204a:	0003      	movs	r3, r0
 800204c:	61fb      	str	r3, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800204e:	e065      	b.n	800211c <prvProcessReceivedCommands+0xe0>
	{
		pxTimer = xMessage.pxTimer;
 8002050:	2308      	movs	r3, #8
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <prvProcessReceivedCommands+0x34>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <prvProcessReceivedCommands+0x34>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	3304      	adds	r3, #4
 800206a:	0018      	movs	r0, r3
 800206c:	f7fe fb61 	bl	8000732 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8002070:	2308      	movs	r3, #8
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d050      	beq.n	800211c <prvProcessReceivedCommands+0xe0>
 800207a:	dc02      	bgt.n	8002082 <prvProcessReceivedCommands+0x46>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <prvProcessReceivedCommands+0x50>
 8002080:	e04b      	b.n	800211a <prvProcessReceivedCommands+0xde>
 8002082:	2b02      	cmp	r3, #2
 8002084:	d02f      	beq.n	80020e6 <prvProcessReceivedCommands+0xaa>
 8002086:	2b03      	cmp	r3, #3
 8002088:	d042      	beq.n	8002110 <prvProcessReceivedCommands+0xd4>
 800208a:	e046      	b.n	800211a <prvProcessReceivedCommands+0xde>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 800208c:	2308      	movs	r3, #8
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	18d1      	adds	r1, r2, r3
 8002098:	2308      	movs	r3, #8
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	69b8      	ldr	r0, [r7, #24]
 80020a2:	f7ff ff89 	bl	8001fb8 <prvInsertTimerInActiveList>
 80020a6:	0003      	movs	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d137      	bne.n	800211c <prvProcessReceivedCommands+0xe0>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	0010      	movs	r0, r2
 80020b4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12e      	bne.n	800211c <prvProcessReceivedCommands+0xe0>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80020be:	2308      	movs	r3, #8
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	18d2      	adds	r2, r2, r3
 80020ca:	69b8      	ldr	r0, [r7, #24]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	f7ff fe5e 	bl	8001d94 <xTimerGenericCommand>
 80020d8:	0003      	movs	r3, r0
 80020da:	617b      	str	r3, [r7, #20]
						configASSERT( xResult );
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11c      	bne.n	800211c <prvProcessReceivedCommands+0xe0>
 80020e2:	b672      	cpsid	i
 80020e4:	e7fe      	b.n	80020e4 <prvProcessReceivedCommands+0xa8>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80020e6:	2308      	movs	r3, #8
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <prvProcessReceivedCommands+0xc0>
 80020f8:	b672      	cpsid	i
 80020fa:	e7fe      	b.n	80020fa <prvProcessReceivedCommands+0xbe>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	18d1      	adds	r1, r2, r3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	69b8      	ldr	r0, [r7, #24]
 800210a:	f7ff ff55 	bl	8001fb8 <prvInsertTimerInActiveList>
				break;
 800210e:	e005      	b.n	800211c <prvProcessReceivedCommands+0xe0>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	0018      	movs	r0, r3
 8002114:	f7fe fc46 	bl	80009a4 <vPortFree>
				break;
 8002118:	e000      	b.n	800211c <prvProcessReceivedCommands+0xe0>

			default	:			
				/* Don't expect to get here. */
				break;
 800211a:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <prvProcessReceivedCommands+0xfc>)
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	2308      	movs	r3, #8
 8002122:	18f9      	adds	r1, r7, r3
 8002124:	2300      	movs	r3, #0
 8002126:	2200      	movs	r2, #0
 8002128:	f7fe fe0d 	bl	8000d46 <xQueueGenericReceive>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d18f      	bne.n	8002050 <prvProcessReceivedCommands+0x14>
		}
	}
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b008      	add	sp, #32
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000200c 	.word	0x2000200c

0800213c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002144:	e03e      	b.n	80021c4 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <prvSwitchTimerLists+0xb0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <prvSwitchTimerLists+0xb0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3304      	adds	r3, #4
 800215e:	0018      	movs	r0, r3
 8002160:	f7fe fae7 	bl	8000732 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	0010      	movs	r0, r2
 800216c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d126      	bne.n	80021c4 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	429a      	cmp	r2, r3
 8002186:	d90e      	bls.n	80021a6 <prvSwitchTimerLists+0x6a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <prvSwitchTimerLists+0xb0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3304      	adds	r3, #4
 800219c:	0019      	movs	r1, r3
 800219e:	0010      	movs	r0, r2
 80021a0:	f7fe fa91 	bl	80006c6 <vListInsert>
 80021a4:	e00e      	b.n	80021c4 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	69b8      	ldr	r0, [r7, #24]
 80021aa:	2300      	movs	r3, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	f7ff fdef 	bl	8001d94 <xTimerGenericCommand>
 80021b6:	0003      	movs	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <prvSwitchTimerLists+0x88>
 80021c0:	b672      	cpsid	i
 80021c2:	e7fe      	b.n	80021c2 <prvSwitchTimerLists+0x86>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <prvSwitchTimerLists+0xb0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1bb      	bne.n	8002146 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <prvSwitchTimerLists+0xb0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <prvSwitchTimerLists+0xb4>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <prvSwitchTimerLists+0xb0>)
 80021da:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <prvSwitchTimerLists+0xb4>)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b008      	add	sp, #32
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	20002004 	.word	0x20002004
 80021f0:	20002008 	.word	0x20002008

080021f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80021f8:	f7fe fb2c 	bl	8000854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <prvCheckForValidListAndQueue+0x48>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d115      	bne.n	8002230 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <prvCheckForValidListAndQueue+0x4c>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7fe fa0e 	bl	8000628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <prvCheckForValidListAndQueue+0x50>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fa0a 	bl	8000628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <prvCheckForValidListAndQueue+0x54>)
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <prvCheckForValidListAndQueue+0x4c>)
 8002218:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <prvCheckForValidListAndQueue+0x58>)
 800221c:	4a09      	ldr	r2, [pc, #36]	; (8002244 <prvCheckForValidListAndQueue+0x50>)
 800221e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002220:	2200      	movs	r2, #0
 8002222:	210c      	movs	r1, #12
 8002224:	2005      	movs	r0, #5
 8002226:	f7fe fc24 	bl	8000a72 <xQueueGenericCreate>
 800222a:	0002      	movs	r2, r0
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <prvCheckForValidListAndQueue+0x48>)
 800222e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002230:	f7fe fb1e 	bl	8000870 <vPortExitCritical>
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	2000200c 	.word	0x2000200c
 8002240:	20001fdc 	.word	0x20001fdc
 8002244:	20001ff0 	.word	0x20001ff0
 8002248:	20002004 	.word	0x20002004
 800224c:	20002008 	.word	0x20002008

08002250 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e07c      	b.n	8002366 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800226c:	2201      	movs	r2, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d16b      	bne.n	8002360 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	791b      	ldrb	r3, [r3, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d003      	beq.n	8002298 <GPIO_Init+0x48>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d134      	bne.n	8002302 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	0052      	lsls	r2, r2, #1
 80022a0:	2103      	movs	r1, #3
 80022a2:	4091      	lsls	r1, r2
 80022a4:	000a      	movs	r2, r1
 80022a6:	43d2      	mvns	r2, r2
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	795b      	ldrb	r3, [r3, #5]
 80022b6:	0019      	movs	r1, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4099      	lsls	r1, r3
 80022be:	000b      	movs	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	889b      	ldrh	r3, [r3, #4]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	b292      	uxth	r2, r2
 80022d0:	0011      	movs	r1, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	408a      	lsls	r2, r1
 80022d6:	b292      	uxth	r2, r2
 80022d8:	43d2      	mvns	r2, r2
 80022da:	b292      	uxth	r2, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	889b      	ldrh	r3, [r3, #4]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	799b      	ldrb	r3, [r3, #6]
 80022ee:	0019      	movs	r1, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4099      	lsls	r1, r3
 80022f6:	000b      	movs	r3, r1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	0052      	lsls	r2, r2, #1
 800230a:	2103      	movs	r1, #3
 800230c:	4091      	lsls	r1, r2
 800230e:	000a      	movs	r2, r1
 8002310:	43d2      	mvns	r2, r2
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	0019      	movs	r1, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4099      	lsls	r1, r3
 8002328:	000b      	movs	r3, r1
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	b292      	uxth	r2, r2
 8002338:	0052      	lsls	r2, r2, #1
 800233a:	2103      	movs	r1, #3
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	43d2      	mvns	r2, r2
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	79db      	ldrb	r3, [r3, #7]
 8002350:	0019      	movs	r1, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4099      	lsls	r1, r3
 8002358:	000b      	movs	r3, r1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d800      	bhi.n	800236e <GPIO_Init+0x11e>
 800236c:	e77e      	b.n	800226c <GPIO_Init+0x1c>
    }
  }
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b006      	add	sp, #24
 8002374:	bd80      	pop	{r7, pc}

08002376 <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	0008      	movs	r0, r1
 8002380:	0011      	movs	r1, r2
 8002382:	1cbb      	adds	r3, r7, #2
 8002384:	1c02      	adds	r2, r0, #0
 8002386:	801a      	strh	r2, [r3, #0]
 8002388:	1c7b      	adds	r3, r7, #1
 800238a:	1c0a      	adds	r2, r1, #0
 800238c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800238e:	1c7b      	adds	r3, r7, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	1cbb      	adds	r3, r7, #2
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800239e:	e003      	b.n	80023a8 <GPIO_WriteBit+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1cba      	adds	r2, r7, #2
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <GPIO_Write>:
  * @note   GPIOD is not available for STM32F031.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	000a      	movs	r2, r1
 80023ba:	1cbb      	adds	r3, r7, #2
 80023bc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1cba      	adds	r2, r7, #2
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	829a      	strh	r2, [r3, #20]
}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}

080023ce <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	0008      	movs	r0, r1
 80023d8:	0011      	movs	r1, r2
 80023da:	1cbb      	adds	r3, r7, #2
 80023dc:	1c02      	adds	r2, r0, #0
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	1c7b      	adds	r3, r7, #1
 80023e2:	1c0a      	adds	r2, r1, #0
 80023e4:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80023ee:	1c7b      	adds	r3, r7, #1
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	1cbb      	adds	r3, r7, #2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	2107      	movs	r1, #7
 80023f8:	400b      	ands	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	409a      	lsls	r2, r3
 80023fe:	0013      	movs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	b29b      	uxth	r3, r3
 800240a:	0018      	movs	r0, r3
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	b29b      	uxth	r3, r3
 8002414:	001a      	movs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	1cba      	adds	r2, r7, #2
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	2107      	movs	r1, #7
 8002424:	400a      	ands	r2, r1
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	210f      	movs	r1, #15
 800242a:	4091      	lsls	r1, r2
 800242c:	000a      	movs	r2, r1
 800242e:	43d2      	mvns	r2, r2
 8002430:	401a      	ands	r2, r3
 8002432:	0011      	movs	r1, r2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0002      	movs	r2, r0
 8002438:	3208      	adds	r2, #8
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800243e:	1cbb      	adds	r3, r7, #2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	08db      	lsrs	r3, r3, #3
 8002444:	b29b      	uxth	r3, r3
 8002446:	001a      	movs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	58d2      	ldr	r2, [r2, r3]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002456:	1cbb      	adds	r3, r7, #2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	b29b      	uxth	r3, r3
 800245e:	001a      	movs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	50d1      	str	r1, [r2, r3]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	789b      	ldrb	r3, [r3, #2]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d039      	beq.n	80024fc <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <NVIC_Init+0xa8>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	33c0      	adds	r3, #192	; 0xc0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	589b      	ldr	r3, [r3, r2]
 8002498:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	001a      	movs	r2, r3
 80024a0:	2303      	movs	r3, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	43da      	mvns	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	0019      	movs	r1, r3
 80024c4:	2303      	movs	r3, #3
 80024c6:	400b      	ands	r3, r1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80024d4:	4911      	ldr	r1, [pc, #68]	; (800251c <NVIC_Init+0xa8>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	33c0      	adds	r3, #192	; 0xc0
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <NVIC_Init+0xa8>)
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	0011      	movs	r1, r2
 80024ee:	221f      	movs	r2, #31
 80024f0:	400a      	ands	r2, r1
 80024f2:	2101      	movs	r1, #1
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80024fa:	e00a      	b.n	8002512 <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <NVIC_Init+0xa8>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	231f      	movs	r3, #31
 8002506:	4013      	ands	r3, r2
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	508b      	str	r3, [r1, r2]
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	e000e100 	.word	0xe000e100

08002520 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002540:	4ba8      	ldr	r3, [pc, #672]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	220c      	movs	r2, #12
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d00c      	beq.n	800256a <RCC_GetClocksFreq+0x4a>
 8002550:	d802      	bhi.n	8002558 <RCC_GetClocksFreq+0x38>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <RCC_GetClocksFreq+0x42>
 8002556:	e03b      	b.n	80025d0 <RCC_GetClocksFreq+0xb0>
 8002558:	2b08      	cmp	r3, #8
 800255a:	d00a      	beq.n	8002572 <RCC_GetClocksFreq+0x52>
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d033      	beq.n	80025c8 <RCC_GetClocksFreq+0xa8>
 8002560:	e036      	b.n	80025d0 <RCC_GetClocksFreq+0xb0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4aa0      	ldr	r2, [pc, #640]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 8002566:	601a      	str	r2, [r3, #0]
      break;
 8002568:	e036      	b.n	80025d8 <RCC_GetClocksFreq+0xb8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a9f      	ldr	r2, [pc, #636]	; (80027ec <RCC_GetClocksFreq+0x2cc>)
 800256e:	601a      	str	r2, [r3, #0]
      break;
 8002570:	e032      	b.n	80025d8 <RCC_GetClocksFreq+0xb8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	23f0      	movs	r3, #240	; 0xf0
 8002578:	039b      	lsls	r3, r3, #14
 800257a:	4013      	ands	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800257e:	4b99      	ldr	r3, [pc, #612]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	025b      	lsls	r3, r3, #9
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	3302      	adds	r3, #2
 8002590:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <RCC_GetClocksFreq+0x82>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	4a95      	ldr	r2, [pc, #596]	; (80027f0 <RCC_GetClocksFreq+0x2d0>)
 800259c:	4353      	muls	r3, r2
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e00e      	b.n	80025c0 <RCC_GetClocksFreq+0xa0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80025a2:	4b90      	ldr	r3, [pc, #576]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	220f      	movs	r2, #15
 80025a8:	4013      	ands	r3, r2
 80025aa:	3301      	adds	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	488e      	ldr	r0, [pc, #568]	; (80027ec <RCC_GetClocksFreq+0x2cc>)
 80025b2:	f7fd fdb9 	bl	8000128 <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	001a      	movs	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	4353      	muls	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	601a      	str	r2, [r3, #0]
      break;
 80025c6:	e007      	b.n	80025d8 <RCC_GetClocksFreq+0xb8>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a8a      	ldr	r2, [pc, #552]	; (80027f4 <RCC_GetClocksFreq+0x2d4>)
 80025cc:	601a      	str	r2, [r3, #0]
      break;
 80025ce:	e003      	b.n	80025d8 <RCC_GetClocksFreq+0xb8>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a85      	ldr	r2, [pc, #532]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 80025d4:	601a      	str	r2, [r3, #0]
      break;
 80025d6:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80025d8:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	22f0      	movs	r2, #240	; 0xf0
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 80025e8:	4a83      	ldr	r2, [pc, #524]	; (80027f8 <RCC_GetClocksFreq+0x2d8>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	40da      	lsrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	23e0      	movs	r3, #224	; 0xe0
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002612:	4a79      	ldr	r2, [pc, #484]	; (80027f8 <RCC_GetClocksFreq+0x2d8>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	40da      	lsrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	401a      	ands	r2, r3
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d003      	beq.n	8002644 <RCC_GetClocksFreq+0x124>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a6f      	ldr	r2, [pc, #444]	; (80027fc <RCC_GetClocksFreq+0x2dc>)
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e013      	b.n	800266c <RCC_GetClocksFreq+0x14c>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	401a      	ands	r2, r3
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	429a      	cmp	r2, r3
 8002654:	d005      	beq.n	8002662 <RCC_GetClocksFreq+0x142>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	085a      	lsrs	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	e004      	b.n	800266c <RCC_GetClocksFreq+0x14c>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	089a      	lsrs	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800266c:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	4013      	ands	r3, r2
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d003      	beq.n	8002680 <RCC_GetClocksFreq+0x160>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a61      	ldr	r2, [pc, #388]	; (8002800 <RCC_GetClocksFreq+0x2e0>)
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e003      	b.n	8002688 <RCC_GetClocksFreq+0x168>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	0212      	lsls	r2, r2, #8
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8002688:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	2b10      	cmp	r3, #16
 8002692:	d003      	beq.n	800269c <RCC_GetClocksFreq+0x17c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	e003      	b.n	80026a4 <RCC_GetClocksFreq+0x184>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80026a4:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	2203      	movs	r2, #3
 80026aa:	4013      	ands	r3, r2
 80026ac:	d104      	bne.n	80026b8 <RCC_GetClocksFreq+0x198>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	e01e      	b.n	80026f6 <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	2203      	movs	r2, #3
 80026be:	4013      	ands	r3, r2
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d104      	bne.n	80026ce <RCC_GetClocksFreq+0x1ae>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	e013      	b.n	80026f6 <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80026ce:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	2203      	movs	r2, #3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d104      	bne.n	80026e4 <RCC_GetClocksFreq+0x1c4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	0212      	lsls	r2, r2, #8
 80026e0:	619a      	str	r2, [r3, #24]
 80026e2:	e008      	b.n	80026f6 <RCC_GetClocksFreq+0x1d6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d102      	bne.n	80026f6 <RCC_GetClocksFreq+0x1d6>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 80026f4:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d104      	bne.n	800270c <RCC_GetClocksFreq+0x1ec>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	61da      	str	r2, [r3, #28]
 800270a:	e027      	b.n	800275c <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800270e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002710:	23c0      	movs	r3, #192	; 0xc0
 8002712:	029b      	lsls	r3, r3, #10
 8002714:	401a      	ands	r2, r3
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	025b      	lsls	r3, r3, #9
 800271a:	429a      	cmp	r2, r3
 800271c:	d104      	bne.n	8002728 <RCC_GetClocksFreq+0x208>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	61da      	str	r2, [r3, #28]
 8002726:	e019      	b.n	800275c <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	23c0      	movs	r3, #192	; 0xc0
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	401a      	ands	r2, r3
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	429a      	cmp	r2, r3
 8002738:	d104      	bne.n	8002744 <RCC_GetClocksFreq+0x224>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0212      	lsls	r2, r2, #8
 8002740:	61da      	str	r2, [r3, #28]
 8002742:	e00b      	b.n	800275c <RCC_GetClocksFreq+0x23c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	401a      	ands	r2, r3
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	429a      	cmp	r2, r3
 8002754:	d102      	bne.n	800275c <RCC_GetClocksFreq+0x23c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 800275a:	61da      	str	r2, [r3, #28]
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 800275e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	031b      	lsls	r3, r3, #12
 8002764:	4013      	ands	r3, r2
 8002766:	d104      	bne.n	8002772 <RCC_GetClocksFreq+0x252>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	e027      	b.n	80027c2 <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	401a      	ands	r2, r3
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	02db      	lsls	r3, r3, #11
 8002780:	429a      	cmp	r2, r3
 8002782:	d104      	bne.n	800278e <RCC_GetClocksFreq+0x26e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	621a      	str	r2, [r3, #32]
 800278c:	e019      	b.n	80027c2 <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 8002790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	031b      	lsls	r3, r3, #12
 8002796:	401a      	ands	r2, r3
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	429a      	cmp	r2, r3
 800279e:	d104      	bne.n	80027aa <RCC_GetClocksFreq+0x28a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0212      	lsls	r2, r2, #8
 80027a6:	621a      	str	r2, [r3, #32]
 80027a8:	e00b      	b.n	80027c2 <RCC_GetClocksFreq+0x2a2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80027ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	401a      	ands	r2, r3
 80027b4:	23c0      	movs	r3, #192	; 0xc0
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d102      	bne.n	80027c2 <RCC_GetClocksFreq+0x2a2>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <RCC_GetClocksFreq+0x2c8>)
 80027c0:	621a      	str	r2, [r3, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <RCC_GetClocksFreq+0x2c4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d003      	beq.n	80027d6 <RCC_GetClocksFreq+0x2b6>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <RCC_GetClocksFreq+0x2d4>)
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 80027d4:	e002      	b.n	80027dc <RCC_GetClocksFreq+0x2bc>
    RCC_Clocks->USBCLK_Frequency = pllclk;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b008      	add	sp, #32
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	00b71b00 	.word	0x00b71b00
 80027f0:	003d0900 	.word	0x003d0900
 80027f4:	02dc6c00 	.word	0x02dc6c00
 80027f8:	20000008 	.word	0x20000008
 80027fc:	00d59f80 	.word	0x00d59f80
 8002800:	00008012 	.word	0x00008012

08002804 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	000a      	movs	r2, r1
 800280e:	1cfb      	adds	r3, r7, #3
 8002810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002812:	1cfb      	adds	r3, r7, #3
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <RCC_AHBPeriphClockCmd+0x3c>)
 800281c:	4a08      	ldr	r2, [pc, #32]	; (8002840 <RCC_AHBPeriphClockCmd+0x3c>)
 800281e:	6951      	ldr	r1, [r2, #20]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	430a      	orrs	r2, r1
 8002824:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8002826:	e006      	b.n	8002836 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <RCC_AHBPeriphClockCmd+0x3c>)
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <RCC_AHBPeriphClockCmd+0x3c>)
 800282c:	6952      	ldr	r2, [r2, #20]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	43c9      	mvns	r1, r1
 8002832:	400a      	ands	r2, r1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40021000 	.word	0x40021000

08002844 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	000a      	movs	r2, r1
 800284e:	1cfb      	adds	r3, r7, #3
 8002850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002852:	1cfb      	adds	r3, r7, #3
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <RCC_APB2PeriphClockCmd+0x3c>)
 800285c:	4a08      	ldr	r2, [pc, #32]	; (8002880 <RCC_APB2PeriphClockCmd+0x3c>)
 800285e:	6991      	ldr	r1, [r2, #24]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	430a      	orrs	r2, r1
 8002864:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002866:	e006      	b.n	8002876 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <RCC_APB2PeriphClockCmd+0x3c>)
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <RCC_APB2PeriphClockCmd+0x3c>)
 800286c:	6992      	ldr	r2, [r2, #24]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	43c9      	mvns	r1, r1
 8002872:	400a      	ands	r2, r1
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	40021000 	.word	0x40021000

08002884 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	000a      	movs	r2, r1
 800288e:	1cfb      	adds	r3, r7, #3
 8002890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002892:	1cfb      	adds	r3, r7, #3
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <RCC_APB1PeriphClockCmd+0x3c>)
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <RCC_APB1PeriphClockCmd+0x3c>)
 800289e:	69d1      	ldr	r1, [r2, #28]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80028a6:	e006      	b.n	80028b6 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028ac:	69d2      	ldr	r2, [r2, #28]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	43c9      	mvns	r1, r1
 80028b2:	400a      	ands	r2, r1
 80028b4:	61da      	str	r2, [r3, #28]
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000

080028c4 <SPI_SendData8>:
  * @note   SPI2 is not available for STM32F031 devices.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	000a      	movs	r2, r1
 80028ce:	1cfb      	adds	r3, r7, #3
 80028d0:	701a      	strb	r2, [r3, #0]
  uint32_t spixbase = 0x00;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	330c      	adds	r3, #12
 80028de:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1cfa      	adds	r2, r7, #3
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <SPI_ReceiveData8>:
  * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
  * @note   SPI2 is not available for STM32F031 devices.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  spixbase = (uint32_t)SPIx; 
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	330c      	adds	r3, #12
 8002904:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b2db      	uxtb	r3, r3
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}

08002914 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b090      	sub	sp, #64	; 0x40
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002922:	2300      	movs	r3, #0
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	4393      	bics	r3, r2
 8002932:	001a      	movs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <USART_Init+0x170>)
 8002942:	4013      	ands	r3, r2
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800294c:	4313      	orrs	r3, r2
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002954:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <USART_Init+0x174>)
 8002960:	4013      	ands	r3, r2
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002972:	4313      	orrs	r3, r2
 8002974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002976:	4313      	orrs	r3, r2
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297e:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <USART_Init+0x178>)
 800298a:	4013      	ands	r3, r2
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002994:	4313      	orrs	r3, r2
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800299c:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800299e:	230c      	movs	r3, #12
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff fdbc 	bl	8002520 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <USART_Init+0x17c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d104      	bne.n	80029ba <USART_Init+0xa6>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80029b0:	230c      	movs	r3, #12
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b8:	e015      	b.n	80029e6 <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a35      	ldr	r2, [pc, #212]	; (8002a94 <USART_Init+0x180>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d104      	bne.n	80029cc <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80029c2:	230c      	movs	r3, #12
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ca:	e00c      	b.n	80029e6 <USART_Init+0xd2>
  }
   else if (USARTx == USART3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <USART_Init+0x184>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d104      	bne.n	80029de <USART_Init+0xca>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80029d4:	230c      	movs	r3, #12
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
 80029dc:	e003      	b.n	80029e6 <USART_Init+0xd2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 80029de:	230c      	movs	r3, #12
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	d014      	beq.n	8002a1c <USART_Init+0x108>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	005a      	lsls	r2, r3, #1
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f7fd fb93 	bl	8000128 <__udivsi3>
 8002a02:	0003      	movs	r3, r0
 8002a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	005a      	lsls	r2, r3, #1
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f7fd fc0f 	bl	8000234 <__aeabi_uidivmod>
 8002a16:	000b      	movs	r3, r1
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1a:	e010      	b.n	8002a3e <USART_Init+0x12a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0019      	movs	r1, r3
 8002a22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a24:	f7fd fb80 	bl	8000128 <__udivsi3>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fd fbfd 	bl	8000234 <__aeabi_uidivmod>
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	085a      	lsrs	r2, r3, #1
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d802      	bhi.n	8002a50 <USART_Init+0x13c>
  {
    divider++;
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d00a      	beq.n	8002a72 <USART_Init+0x15e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	2207      	movs	r2, #7
 8002a62:	4013      	ands	r3, r2
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <USART_Init+0x188>)
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	819a      	strh	r2, [r3, #12]
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b010      	add	sp, #64	; 0x40
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	ffffcfff 	.word	0xffffcfff
 8002a88:	ffffe9f3 	.word	0xffffe9f3
 8002a8c:	fffffcff 	.word	0xfffffcff
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	0000fff0 	.word	0x0000fff0

08002aa0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	1cfb      	adds	r3, r7, #3
 8002aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002aae:	1cfb      	adds	r3, r7, #3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8002ac2:	e006      	b.n	8002ad2 <USART_Cmd+0x32>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4393      	bics	r3, r2
 8002acc:	001a      	movs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	000a      	movs	r2, r1
 8002ae4:	1cbb      	adds	r3, r7, #2
 8002ae6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8002ae8:	1cbb      	adds	r3, r7, #2
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	05db      	lsls	r3, r3, #23
 8002aee:	0ddb      	lsrs	r3, r3, #23
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}

08002afe <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b088      	sub	sp, #32
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	4013      	ands	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8002b32:	2201      	movs	r2, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d103      	bne.n	8002b4a <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	e005      	b.n	8002b56 <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d102      	bne.n	8002b56 <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3308      	adds	r3, #8
 8002b54:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	6811      	ldr	r1, [r2, #0]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002b6a:	e006      	b.n	8002b7a <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6939      	ldr	r1, [r7, #16]
 8002b74:	43c9      	mvns	r1, r1
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b008      	add	sp, #32
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e003      	b.n	8002bb0 <USART_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8002ba8:	230f      	movs	r3, #15
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <USART_ClearFlag>:
  * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *           (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002bec:	2313      	movs	r3, #19
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	22ff      	movs	r2, #255	; 0xff
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002c06:	2201      	movs	r2, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00d      	b.n	8002c3e <USART_GetITStatus+0x68>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d105      	bne.n	8002c34 <USART_GetITStatus+0x5e>
  {
    itmask &= USARTx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e004      	b.n	8002c3e <USART_GetITStatus+0x68>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002c44:	2201      	movs	r2, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <USART_GetITStatus+0x98>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <USART_GetITStatus+0x98>
  {
    bitstatus = SET;
 8002c64:	2313      	movs	r3, #19
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e003      	b.n	8002c76 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
 8002c76:	2313      	movs	r3, #19
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b006      	add	sp, #24
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <debug_Init>:
#include <string.h>
#include "Debug.h"


void debug_Init()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	uart1_Init();		//	Debug UART
 8002c88:	f004 fade 	bl	8007248 <uart1_Init>
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <debug_Puts>:


void debug_Puts (char const *s)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	uart1_Puts(s);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f004 fc0b 	bl	80074b8 <uart1_Puts>
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <debug_PutLine>:

void debug_PutLine (char const *s)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	uart1_PutLine(s);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f004 fc25 	bl	8007504 <uart1_PutLine>
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <SPI1_Init>:
xSemaphoreHandle	flash_Mutex;

//---------------------------------------

void SPI1_Init()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	GPIO_PinAFConfig (GPIOA, 5, 0);		//	Pin A5 = SPI fnc  (SCK)
 8002cc8:	2390      	movs	r3, #144	; 0x90
 8002cca:	05db      	lsls	r3, r3, #23
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2105      	movs	r1, #5
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff fb7c 	bl	80023ce <GPIO_PinAFConfig>
	GPIO_PinAFConfig (GPIOA, 6, 0);		//	Pin A6 = SPI fnc  (MOSI)
 8002cd6:	2390      	movs	r3, #144	; 0x90
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2106      	movs	r1, #6
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff fb75 	bl	80023ce <GPIO_PinAFConfig>
	GPIO_PinAFConfig (GPIOA, 7, 0);		//	Pin A7 = SPI fnc  (MISO)
 8002ce4:	2390      	movs	r3, #144	; 0x90
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2107      	movs	r1, #7
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7ff fb6e 	bl	80023ce <GPIO_PinAFConfig>
//	GPIO_PinAFConfig (GPIOA,15, 0);		//	Pin A15= SPI fnc  (-CS)

//	SPI_RxFIFOThresholdConfig (SPI1, SPI_RxFIFOThreshold_HF);

	SPI1->CR1 = 0x0304;					//	Master;  SS pin in software;  MSB first;  no CRC;  CLK = 24MHz/2
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <SPI1_Init+0x54>)
 8002cf4:	22c1      	movs	r2, #193	; 0xc1
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	801a      	strh	r2, [r3, #0]
	SPI1->CR2 = 0x1700;					//	8-bit data
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <SPI1_Init+0x54>)
 8002cfc:	22b8      	movs	r2, #184	; 0xb8
 8002cfe:	0152      	lsls	r2, r2, #5
 8002d00:	809a      	strh	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SPE;			//	Enable the SPI unit
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <SPI1_Init+0x54>)
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SPI1_Init+0x54>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40013000 	.word	0x40013000

08002d1c <SPI_Tx_Wait>:
	  ;
}


void SPI_Tx_Wait()				//	Polls the SPI unit for Tx FIFO Full
{								//	Returns when Tx not full - ready for another byte
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	while ((SPI1->SR & 0x1800) == 0x1800)
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <SPI_Tx_Wait+0x24>)
 8002d24:	891b      	ldrh	r3, [r3, #8]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	001a      	movs	r2, r3
 8002d2a:	23c0      	movs	r3, #192	; 0xc0
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	401a      	ands	r2, r3
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d0f4      	beq.n	8002d22 <SPI_Tx_Wait+0x6>
	  ;
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40013000 	.word	0x40013000

08002d44 <SPI_Rx_Wait>:


void SPI_Rx_Wait()				//	Polls the SPI unit for Tx FIFO Full
{								//	Returns when Tx not full - ready for another byte
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	while ((SPI1->SR & 1) == 0)
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <SPI_Rx_Wait+0x1c>)
 8002d4c:	891b      	ldrh	r3, [r3, #8]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	001a      	movs	r2, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f8      	beq.n	8002d4a <SPI_Rx_Wait+0x6>
	  ;
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40013000 	.word	0x40013000

08002d64 <SPI_Write>:


uint8 SPI_Write (uint8 byte)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	701a      	strb	r2, [r3, #0]
	uint8  b;

	SPI_Tx_Wait();				//	Wait for Tx to be Not Full
 8002d70:	f7ff ffd4 	bl	8002d1c <SPI_Tx_Wait>
	SPI_SendData8 (SPI1, byte);
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <SPI_Write+0x48>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7ff fda1 	bl	80028c4 <SPI_SendData8>
	uS_Delay (3);
 8002d82:	2003      	movs	r0, #3
 8002d84:	f003 fb74 	bl	8006470 <uS_Delay>
	SPI_Rx_Wait();				//	Wait for Rx to have something
 8002d88:	f7ff ffdc 	bl	8002d44 <SPI_Rx_Wait>
	b = SPI_ReceiveData8 (SPI1);
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fc      	adds	r4, r7, r3
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <SPI_Write+0x48>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff fdac 	bl	80028f0 <SPI_ReceiveData8>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	7023      	strb	r3, [r4, #0]
	return	b;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781b      	ldrb	r3, [r3, #0]
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b005      	add	sp, #20
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40013000 	.word	0x40013000

08002db0 <SPI_Write_3>:


uint8 SPI_Write_3 (uint8 b1, uint8 b2, uint8 b3)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	0004      	movs	r4, r0
 8002db8:	0008      	movs	r0, r1
 8002dba:	0011      	movs	r1, r2
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	1c22      	adds	r2, r4, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	1dbb      	adds	r3, r7, #6
 8002dc4:	1c02      	adds	r2, r0, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	1d7b      	adds	r3, r7, #5
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
	uint8  b;

	while (SPI1->SR & 0x1800)	//	Wait for Tx FIFO to be Empty
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <SPI_Write_3+0x98>)
 8002dd2:	891b      	ldrh	r3, [r3, #8]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	23c0      	movs	r3, #192	; 0xc0
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d1f7      	bne.n	8002dd0 <SPI_Write_3+0x20>
	  ;
	SPI_SendData8 (SPI1, b1);
 8002de0:	1dfb      	adds	r3, r7, #7
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <SPI_Write_3+0x98>)
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f7ff fd6b 	bl	80028c4 <SPI_SendData8>
	SPI_SendData8 (SPI1, b2);
 8002dee:	1dbb      	adds	r3, r7, #6
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <SPI_Write_3+0x98>)
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7ff fd64 	bl	80028c4 <SPI_SendData8>
	SPI_SendData8 (SPI1, b3);
 8002dfc:	1d7b      	adds	r3, r7, #5
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <SPI_Write_3+0x98>)
 8002e02:	0019      	movs	r1, r3
 8002e04:	0010      	movs	r0, r2
 8002e06:	f7ff fd5d 	bl	80028c4 <SPI_SendData8>

	while ((SPI1->SR & 2)==0)	//	wait here until Tx Empty
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <SPI_Write_3+0x98>)
 8002e0e:	891b      	ldrh	r3, [r3, #8]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	001a      	movs	r2, r3
 8002e14:	2302      	movs	r3, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	d0f8      	beq.n	8002e0c <SPI_Write_3+0x5c>
		;
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002e1a:	e007      	b.n	8002e2c <SPI_Write_3+0x7c>
		b = SPI_ReceiveData8 (SPI1);
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	18fc      	adds	r4, r7, r3
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <SPI_Write_3+0x98>)
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff fd64 	bl	80028f0 <SPI_ReceiveData8>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	7023      	strb	r3, [r4, #0]
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <SPI_Write_3+0x98>)
 8002e2e:	891b      	ldrh	r3, [r3, #8]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	001a      	movs	r2, r3
 8002e34:	2301      	movs	r3, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d1f0      	bne.n	8002e1c <SPI_Write_3+0x6c>
	return	b;					//	Return final byte
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b005      	add	sp, #20
 8002e46:	bd90      	pop	{r4, r7, pc}
 8002e48:	40013000 	.word	0x40013000

08002e4c <SPI_Write_4>:


uint8 SPI_Write_4 (uint8 b1, uint8 b2, uint8 b3, uint8 b4)
{
 8002e4c:	b5b0      	push	{r4, r5, r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	0005      	movs	r5, r0
 8002e54:	000c      	movs	r4, r1
 8002e56:	0010      	movs	r0, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	1c2a      	adds	r2, r5, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	1dbb      	adds	r3, r7, #6
 8002e62:	1c22      	adds	r2, r4, #0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	1d7b      	adds	r3, r7, #5
 8002e68:	1c02      	adds	r2, r0, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	1c0a      	adds	r2, r1, #0
 8002e70:	701a      	strb	r2, [r3, #0]
	uint8  b=0;
 8002e72:	230f      	movs	r3, #15
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]

	while (SPI1->SR & 0x1800)	//	Wait for Tx FIFO to be Empty
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <SPI_Write_4+0xc0>)
 8002e7e:	891b      	ldrh	r3, [r3, #8]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	001a      	movs	r2, r3
 8002e84:	23c0      	movs	r3, #192	; 0xc0
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d1f7      	bne.n	8002e7c <SPI_Write_4+0x30>
	  ;
	SPI_SendData8 (SPI1, b1);
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <SPI_Write_4+0xc0>)
 8002e92:	0019      	movs	r1, r3
 8002e94:	0010      	movs	r0, r2
 8002e96:	f7ff fd15 	bl	80028c4 <SPI_SendData8>
	SPI_SendData8 (SPI1, b2);
 8002e9a:	1dbb      	adds	r3, r7, #6
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <SPI_Write_4+0xc0>)
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	0010      	movs	r0, r2
 8002ea4:	f7ff fd0e 	bl	80028c4 <SPI_SendData8>
	SPI_SendData8 (SPI1, b3);
 8002ea8:	1d7b      	adds	r3, r7, #5
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <SPI_Write_4+0xc0>)
 8002eae:	0019      	movs	r1, r3
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	f7ff fd07 	bl	80028c4 <SPI_SendData8>
	SPI_SendData8 (SPI1, b4);
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <SPI_Write_4+0xc0>)
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	0010      	movs	r0, r2
 8002ec0:	f7ff fd00 	bl	80028c4 <SPI_SendData8>

	while ((SPI1->SR & 2)==0)	//	wait here until Tx Empty
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <SPI_Write_4+0xc0>)
 8002ec8:	891b      	ldrh	r3, [r3, #8]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	001a      	movs	r2, r3
 8002ece:	2302      	movs	r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f8      	beq.n	8002ec6 <SPI_Write_4+0x7a>
		;
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002ed4:	e00c      	b.n	8002ef0 <SPI_Write_4+0xa4>
		b += SPI_ReceiveData8 (SPI1);
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <SPI_Write_4+0xc0>)
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff fd09 	bl	80028f0 <SPI_ReceiveData8>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	230f      	movs	r3, #15
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	18ba      	adds	r2, r7, r2
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	188a      	adds	r2, r1, r2
 8002eee:	701a      	strb	r2, [r3, #0]
	while (SPI1->SR & 1)		//	Read Rx until Empty
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <SPI_Write_4+0xc0>)
 8002ef2:	891b      	ldrh	r3, [r3, #8]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1eb      	bne.n	8002ed6 <SPI_Write_4+0x8a>
	return	b;					//	Return dummy byte  (avoid compiler warnings)
 8002efe:	230f      	movs	r3, #15
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	781b      	ldrb	r3, [r3, #0]
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0c:	40013000 	.word	0x40013000

08002f10 <Flash_Enable>:


void Flash_Enable()				//	Asserts the Chip Select line to the FLASH
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	GPIO_WriteBit (GPIOA, SS_pin, Bit_RESET);	//	Select the FLASH IC   (line LOW)
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	0219      	lsls	r1, r3, #8
 8002f18:	2390      	movs	r3, #144	; 0x90
 8002f1a:	05db      	lsls	r3, r3, #23
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7ff fa29 	bl	8002376 <GPIO_WriteBit>
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <Flash_Disable>:


void Flash_Disable()			//	De-asserts the Chip Select line to the FLASH
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
	GPIO_WriteBit (GPIOA, SS_pin, Bit_SET);		//	De-select the FLASH IC   (line HIGH)
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	0219      	lsls	r1, r3, #8
 8002f32:	2390      	movs	r3, #144	; 0x90
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	2201      	movs	r2, #1
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff fa1c 	bl	8002376 <GPIO_WriteBit>
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <Flash_Wait>:


uint8 Flash_Wait()				//	Polls the Flash IC for BUSY.  Returns when the IC is Not Busy.
{								//	Returns the ECC-Fail, Write-Fail, and Erase-Fail bits.
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
	uint8  b;

	Flash_Enable();
 8002f4a:	f7ff ffe1 	bl	8002f10 <Flash_Enable>
	b = SPI_Write_3 (5,0xC0,0);	//	Read status register 3...
 8002f4e:	1dfc      	adds	r4, r7, #7
 8002f50:	2200      	movs	r2, #0
 8002f52:	21c0      	movs	r1, #192	; 0xc0
 8002f54:	2005      	movs	r0, #5
 8002f56:	f7ff ff2b 	bl	8002db0 <SPI_Write_3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	7023      	strb	r3, [r4, #0]
	while (b & 1)
 8002f5e:	e005      	b.n	8002f6c <Flash_Wait+0x28>
		b = SPI_Write (0);		//	Read continuously, without breaking the access, until ready
 8002f60:	1dfc      	adds	r4, r7, #7
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7ff fefe 	bl	8002d64 <SPI_Write>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	7023      	strb	r3, [r4, #0]
	while (b & 1)
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f4      	bne.n	8002f60 <Flash_Wait+0x1c>
	Flash_Disable();
 8002f76:	f7ff ffd8 	bl	8002f2a <Flash_Disable>
	return	(b & 0x3C);			//	Return just the failure bits
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	223c      	movs	r2, #60	; 0x3c
 8002f80:	4013      	ands	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b003      	add	sp, #12
 8002f8a:	bd90      	pop	{r4, r7, pc}

08002f8c <DMA_Wait>:


bool DMA_Wait()					//	Polls the DMA engine.  Returns when the full transfer is complete
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
	uint32  f;

	while (1)						//	no timeout
	{								//	Loop here until both Tx and Rx finish, with or without errors
		uS_Delay (30);
 8002f92:	201e      	movs	r0, #30
 8002f94:	f003 fa6c 	bl	8006470 <uS_Delay>
		f = DMA1->ISR;				//	Get Interrupt Status Register
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <DMA_Wait+0x88>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	607b      	str	r3, [r7, #4]
		if (f & DMA_ISR_TCIF3)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <DMA_Wait+0x2c>
			if ((f & DMA_ISR_TCIF2) || (f & DMA_ISR_TEIF2))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	4013      	ands	r3, r2
 8002fae:	d10a      	bne.n	8002fc6 <DMA_Wait+0x3a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d106      	bne.n	8002fc6 <DMA_Wait+0x3a>
				break;				//	Read is Complete
		if (f & DMA_ISR_TEIF3)
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <DMA_Wait+0x38>
		uS_Delay (30);
 8002fc2:	e7e6      	b.n	8002f92 <DMA_Wait+0x6>
			break;					//	If Tx error'd out, don't wait for Rx to complete
 8002fc4:	46c0      	nop			; (mov r8, r8)
	}

	DMA1_Channel2->CCR = 0;			//	Disable Rx DMA
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <DMA_Wait+0x8c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;			//	Disable Tx DMA
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <DMA_Wait+0x90>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;	//	Disable DMA transfer requests for SPI bus
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <DMA_Wait+0x94>)
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <DMA_Wait+0x94>)
 8002fd6:	889b      	ldrh	r3, [r3, #4]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2101      	movs	r1, #1
 8002fdc:	438b      	bics	r3, r1
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 &= ~SPI_CR2_TXDMAEN;
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <DMA_Wait+0x94>)
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <DMA_Wait+0x94>)
 8002fe6:	889b      	ldrh	r3, [r3, #4]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2102      	movs	r1, #2
 8002fec:	438b      	bics	r3, r1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8093      	strh	r3, [r2, #4]

	if (f & DMA_ISR_TCIF3)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d005      	beq.n	8003008 <DMA_Wait+0x7c>
		if (!(f & DMA_ISR_TEIF2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	4013      	ands	r3, r2
 8003002:	d101      	bne.n	8003008 <DMA_Wait+0x7c>
			return	true;			//	Tx completed, no Rx error
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <DMA_Wait+0x7e>

	return false;					//	Error
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	40020000 	.word	0x40020000
 8003018:	4002001c 	.word	0x4002001c
 800301c:	40020030 	.word	0x40020030
 8003020:	40013000 	.word	0x40013000

08003024 <DMA_Start_Read>:


void DMA_Start_Read (uint8 *RamAddr, uint32 Len)	//	Starts the DMA engine in reading a block of data into RAM
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	DMA1_Channel2->CCR = 0;					//	Make sure DMA is disabled for SPI
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <DMA_Start_Read+0x98>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <DMA_Start_Read+0x9c>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CTCIF2 + DMA_IFCR_CTEIF2;		//	Clear the Finished and Error flags
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <DMA_Start_Read+0xa0>)
 800303c:	22a0      	movs	r2, #160	; 0xa0
 800303e:	605a      	str	r2, [r3, #4]
	DMA1->IFCR = DMA_IFCR_CTCIF3 + DMA_IFCR_CTEIF3;		//	  for both Tx and Rx.
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <DMA_Start_Read+0xa0>)
 8003042:	22a0      	movs	r2, #160	; 0xa0
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CPAR = (int)&SPI1->DR;	//	Rx transfer: get the data from here
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <DMA_Start_Read+0x98>)
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <DMA_Start_Read+0xa4>)
 800304c:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CPAR = (int)&SPI1->DR;	//	Tx transfer: send the data here
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <DMA_Start_Read+0x9c>)
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <DMA_Start_Read+0xa4>)
 8003052:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (int)RamAddr;		//	Rx transfer: store the data here
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <DMA_Start_Read+0x98>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (int)RamAddr;		//	Tx transfer: fetch the data from here
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <DMA_Start_Read+0x9c>)
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = Len;				//	Transfer size
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <DMA_Start_Read+0x98>)
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CNDTR = Len;
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <DMA_Start_Read+0x9c>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CCR  = DMA_CCR_MINC + DMA_CCR_PL_0;					//	Incr memory, not peripheral addr (Rx)
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <DMA_Start_Read+0x98>)
 800306e:	2284      	movs	r2, #132	; 0x84
 8003070:	0152      	lsls	r2, r2, #5
 8003072:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR  = DMA_CCR_MINC + DMA_CCR_PL_0 + DMA_CCR_DIR;	//	Incr memory, not peripheral addr (Tx)
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <DMA_Start_Read+0x9c>)
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <DMA_Start_Read+0xa8>)
 8003078:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_EN;		//	Enable Rx DMA
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <DMA_Start_Read+0x98>)
 800307c:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <DMA_Start_Read+0x98>)
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_EN;		//	Enable Tx DMA
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <DMA_Start_Read+0x9c>)
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <DMA_Start_Read+0x9c>)
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_RXDMAEN;			//	Enable the SPI Rx requests to DMA engine
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <DMA_Start_Read+0xac>)
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <DMA_Start_Read+0xac>)
 8003096:	889b      	ldrh	r3, [r3, #4]
 8003098:	b29b      	uxth	r3, r3
 800309a:	2101      	movs	r1, #1
 800309c:	430b      	orrs	r3, r1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_TXDMAEN;			//	Enable the SPI Tx requests to DMA engine
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <DMA_Start_Read+0xac>)
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <DMA_Start_Read+0xac>)
 80030a6:	889b      	ldrh	r3, [r3, #4]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2102      	movs	r1, #2
 80030ac:	430b      	orrs	r3, r1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8093      	strh	r3, [r2, #4]
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b002      	add	sp, #8
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	4002001c 	.word	0x4002001c
 80030c0:	40020030 	.word	0x40020030
 80030c4:	40020000 	.word	0x40020000
 80030c8:	4001300c 	.word	0x4001300c
 80030cc:	00001090 	.word	0x00001090
 80030d0:	40013000 	.word	0x40013000

080030d4 <DMA_Start_Write>:


void DMA_Start_Write (uint8 *RamAddr, uint32 Len)		//	Starts the DMA engine in writing a block of data into FLASH
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	DMA1_Channel2->CCR = 0;					//	Make sure DMA is disabled for SPI
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <DMA_Start_Write+0x98>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR = 0;
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <DMA_Start_Write+0x9c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CTCIF2 + DMA_IFCR_CTEIF2;		//	Clear the Finished and Error flags
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <DMA_Start_Write+0xa0>)
 80030ec:	22a0      	movs	r2, #160	; 0xa0
 80030ee:	605a      	str	r2, [r3, #4]
	DMA1->IFCR = DMA_IFCR_CTCIF3 + DMA_IFCR_CTEIF3;		//	  for both Tx and Rx.
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <DMA_Start_Write+0xa0>)
 80030f2:	22a0      	movs	r2, #160	; 0xa0
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CPAR = (int)&SPI1->DR;	//	Rx transfer: get the data from here
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <DMA_Start_Write+0x98>)
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <DMA_Start_Write+0xa4>)
 80030fc:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CPAR = (int)&SPI1->DR;	//	Tx transfer: send the data here
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <DMA_Start_Write+0x9c>)
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <DMA_Start_Write+0xa4>)
 8003102:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (int)&DummyRead;	//	Rx transfer: store the data here
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <DMA_Start_Write+0x98>)
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <DMA_Start_Write+0xa8>)
 8003108:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CMAR = (int)RamAddr;		//	Tx transfer: fetch the data from here
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <DMA_Start_Write+0x9c>)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = Len;				//	Transfer size
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <DMA_Start_Write+0x98>)
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CNDTR = Len;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <DMA_Start_Write+0x9c>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CCR  = DMA_CCR_PL_0;		//	No incr of RAM or Peripheral address!	(Rx)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <DMA_Start_Write+0x98>)
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	0152      	lsls	r2, r2, #5
 8003122:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR  = DMA_CCR_PL_0 + DMA_CCR_MINC + DMA_CCR_DIR;	//	Incr memory, not peripheral addr (Tx)
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <DMA_Start_Write+0x9c>)
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <DMA_Start_Write+0xac>)
 8003128:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_EN;		//	Enable Rx DMA
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <DMA_Start_Write+0x98>)
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <DMA_Start_Write+0x98>)
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_EN;		//	Enable Tx DMA
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <DMA_Start_Write+0x9c>)
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <DMA_Start_Write+0x9c>)
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]

	SPI1->CR2 |= SPI_CR2_RXDMAEN;			//	Enable the SPI Rx requests to DMA engine
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <DMA_Start_Write+0xb0>)
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <DMA_Start_Write+0xb0>)
 8003146:	889b      	ldrh	r3, [r3, #4]
 8003148:	b29b      	uxth	r3, r3
 800314a:	2101      	movs	r1, #1
 800314c:	430b      	orrs	r3, r1
 800314e:	b29b      	uxth	r3, r3
 8003150:	8093      	strh	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_TXDMAEN;			//	Enable the SPI Tx requests to DMA engine
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <DMA_Start_Write+0xb0>)
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <DMA_Start_Write+0xb0>)
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	b29b      	uxth	r3, r3
 800315a:	2102      	movs	r1, #2
 800315c:	430b      	orrs	r3, r1
 800315e:	b29b      	uxth	r3, r3
 8003160:	8093      	strh	r3, [r2, #4]
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	4002001c 	.word	0x4002001c
 8003170:	40020030 	.word	0x40020030
 8003174:	40020000 	.word	0x40020000
 8003178:	4001300c 	.word	0x4001300c
 800317c:	2000203c 	.word	0x2000203c
 8003180:	00001090 	.word	0x00001090
 8003184:	40013000 	.word	0x40013000

08003188 <Write_Status_Register>:


void Write_Status_Register (int reg, uint8 val)		//	REG is 1,2,3		VAL is byte to write
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	000a      	movs	r2, r1
 8003192:	1cfb      	adds	r3, r7, #3
 8003194:	701a      	strb	r2, [r3, #0]
	uint8 a = (reg<<4) + 0x90;		//	Status register address   (0xA0, 0xB0, 0xC0)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	b2da      	uxtb	r2, r3
 800319e:	230f      	movs	r3, #15
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	3a70      	subs	r2, #112	; 0x70
 80031a4:	701a      	strb	r2, [r3, #0]
	Flash_Wait();					//	Make sure Flash is idle
 80031a6:	f7ff fecd 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80031aa:	f7ff feb1 	bl	8002f10 <Flash_Enable>
	SPI_Write_3 (1, a, val);		//	write status
 80031ae:	1cfb      	adds	r3, r7, #3
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	230f      	movs	r3, #15
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	0019      	movs	r1, r3
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff fdf8 	bl	8002db0 <SPI_Write_3>
	Flash_Disable();
 80031c0:	f7ff feb3 	bl	8002f2a <Flash_Disable>
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}

080031cc <Flash_Read_Page_Info>:
	return	b;
}


bool Flash_Read_Page_Info (int page, Partial_Page_t *pp)	//	page = 0-64K	(2KByte per page)
{															//	Ptr  = RAM-based buffer area
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	uint8  b, msb, lsb;										//	OUT:	FALSE if errors in page data
	uint8  *ptr;

	msb = (page >> 8) & 0xFF;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	121a      	asrs	r2, r3, #8
 80031da:	2317      	movs	r3, #23
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 80031e0:	2316      	movs	r3, #22
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)pp;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	613b      	str	r3, [r7, #16]

	Flash_Wait();					//	Make sure Flash is idle
 80031ec:	f7ff feaa 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80031f0:	f7ff fe8e 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 80031f4:	2316      	movs	r3, #22
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	7819      	ldrb	r1, [r3, #0]
 80031fa:	2317      	movs	r3, #23
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	000b      	movs	r3, r1
 8003202:	2100      	movs	r1, #0
 8003204:	2013      	movs	r0, #19
 8003206:	f7ff fe21 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 800320a:	f7ff fe8e 	bl	8002f2a <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal read of the page
 800320e:	230f      	movs	r3, #15
 8003210:	18fc      	adds	r4, r7, r3
 8003212:	f7ff fe97 	bl	8002f44 <Flash_Wait>
 8003216:	0003      	movs	r3, r0
 8003218:	7023      	strb	r3, [r4, #0]
	if (b & 0x20)
 800321a:	230f      	movs	r3, #15
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2220      	movs	r2, #32
 8003222:	4013      	ands	r3, r2
 8003224:	d001      	beq.n	800322a <Flash_Read_Page_Info+0x5e>
		return	false;				//	Had Errors in the page
 8003226:	2300      	movs	r3, #0
 8003228:	e011      	b.n	800324e <Flash_Read_Page_Info+0x82>

	Flash_Enable();
 800322a:	f7ff fe71 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (3,0x07,0xF8,0);	//	READ...		offset (msb,lsb), dummy
 800322e:	2300      	movs	r3, #0
 8003230:	22f8      	movs	r2, #248	; 0xf8
 8003232:	2107      	movs	r1, #7
 8003234:	2003      	movs	r0, #3
 8003236:	f7ff fe09 	bl	8002e4c <SPI_Write_4>

	DMA_Start_Read (ptr, 72);		//	Start the DMA: read final 72 bytes of the extended page
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2148      	movs	r1, #72	; 0x48
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff fef0 	bl	8003024 <DMA_Start_Read>
	DMA_Wait();						//	Wait for DMA complete
 8003244:	f7ff fea2 	bl	8002f8c <DMA_Wait>
	Flash_Disable();
 8003248:	f7ff fe6f 	bl	8002f2a <Flash_Disable>
	return	true;
 800324c:	2301      	movs	r3, #1
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b007      	add	sp, #28
 8003254:	bd90      	pop	{r4, r7, pc}

08003256 <Flash_Erase_Block>:

										//	Erase 128KBytes...
bool Flash_Erase_Block (int page)		//	page = 0-64K   (low 6 bits = 0.)
{										//			64 pages erased, 2KByte per page, 128KB total
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	uint8  b, msb, lsb;					//	OUT:	FALSE if error

	msb = (page >> 8) & 0xFF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	121a      	asrs	r2, r3, #8
 8003262:	230f      	movs	r3, #15
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xC0;				//	Bottom 6 bits zeroed
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	230e      	movs	r3, #14
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	213f      	movs	r1, #63	; 0x3f
 8003272:	438a      	bics	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]

	Flash_Wait();
 8003276:	f7ff fe65 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 800327a:	f7ff fe49 	bl	8002f10 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 800327e:	2006      	movs	r0, #6
 8003280:	f7ff fd70 	bl	8002d64 <SPI_Write>
	Flash_Disable();
 8003284:	f7ff fe51 	bl	8002f2a <Flash_Disable>

	Flash_Wait();					//	Make sure Flash is idle
 8003288:	f7ff fe5c 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 800328c:	f7ff fe40 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0xD8,0,msb,lsb);	//	ERASE 1 BLOCK:  64 PAGES...
 8003290:	230e      	movs	r3, #14
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	7819      	ldrb	r1, [r3, #0]
 8003296:	230f      	movs	r3, #15
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	000b      	movs	r3, r1
 800329e:	2100      	movs	r1, #0
 80032a0:	20d8      	movs	r0, #216	; 0xd8
 80032a2:	f7ff fdd3 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 80032a6:	f7ff fe40 	bl	8002f2a <Flash_Disable>
	b = Flash_Wait();				//	Wait for internal erase
 80032aa:	230d      	movs	r3, #13
 80032ac:	18fc      	adds	r4, r7, r3
 80032ae:	f7ff fe49 	bl	8002f44 <Flash_Wait>
 80032b2:	0003      	movs	r3, r0
 80032b4:	7023      	strb	r3, [r4, #0]

	if (b & 0x0C)
 80032b6:	230d      	movs	r3, #13
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	220c      	movs	r2, #12
 80032be:	4013      	ands	r3, r2
 80032c0:	d001      	beq.n	80032c6 <Flash_Erase_Block+0x70>
		return	false;				//	Had Errors
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <Flash_Erase_Block+0x72>
	return	true;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b005      	add	sp, #20
 80032ce:	bd90      	pop	{r4, r7, pc}

080032d0 <Flash_Read_Page>:


bool Flash_Read_Page (int page, Flash_Page_t *pp)	//	page = 0-64K	(2KByte per page)
{													//	ptr  = 2048 Byte buffer area
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	uint8  b, msb, lsb;
	uint8  *ptr;

	msb = (page >> 8) & 0xFF;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	121a      	asrs	r2, r3, #8
 80032de:	2317      	movs	r3, #23
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 80032e4:	2316      	movs	r3, #22
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)pp;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	613b      	str	r3, [r7, #16]

	Flash_Wait();					//	Make sure Flash is idle
 80032f0:	f7ff fe28 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80032f4:	f7ff fe0c 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 80032f8:	2316      	movs	r3, #22
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	7819      	ldrb	r1, [r3, #0]
 80032fe:	2317      	movs	r3, #23
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	000b      	movs	r3, r1
 8003306:	2100      	movs	r1, #0
 8003308:	2013      	movs	r0, #19
 800330a:	f7ff fd9f 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 800330e:	f7ff fe0c 	bl	8002f2a <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal read of the page
 8003312:	230f      	movs	r3, #15
 8003314:	18fc      	adds	r4, r7, r3
 8003316:	f7ff fe15 	bl	8002f44 <Flash_Wait>
 800331a:	0003      	movs	r3, r0
 800331c:	7023      	strb	r3, [r4, #0]
	if (b & 0x20)
 800331e:	230f      	movs	r3, #15
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2220      	movs	r2, #32
 8003326:	4013      	ands	r3, r2
 8003328:	d001      	beq.n	800332e <Flash_Read_Page+0x5e>
		return	false;				//	Had Errors in the page
 800332a:	2300      	movs	r3, #0
 800332c:	e013      	b.n	8003356 <Flash_Read_Page+0x86>

	Flash_Enable();
 800332e:	f7ff fdef 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (3, 0, 0, 0);		//	READ...		offset = 0
 8003332:	2300      	movs	r3, #0
 8003334:	2200      	movs	r2, #0
 8003336:	2100      	movs	r1, #0
 8003338:	2003      	movs	r0, #3
 800333a:	f7ff fd87 	bl	8002e4c <SPI_Write_4>
	DMA_Start_Read (ptr, 2048);		//	Start the DMA: read the 2048 bytes   (takes 1.36 mS)
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	011a      	lsls	r2, r3, #4
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fe6c 	bl	8003024 <DMA_Start_Read>
	DMA_Wait();						//	Wait for DMA complete
 800334c:	f7ff fe1e 	bl	8002f8c <DMA_Wait>
	Flash_Disable();
 8003350:	f7ff fdeb 	bl	8002f2a <Flash_Disable>
	return	true;
 8003354:	2301      	movs	r3, #1
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b007      	add	sp, #28
 800335c:	bd90      	pop	{r4, r7, pc}
	...

08003360 <Flash_Write_Page>:


bool Flash_Write_Page (int page)
{										//	page = 0-64K
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	uint8  b, msb, lsb;					//	ThePage = 2048 Byte buffer area - also writes the 64 extra bytes
	uint8  *ptr;
										//	OUT:	FALSE if error
	msb = (page >> 8) & 0xFF;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	121a      	asrs	r2, r3, #8
 800336c:	2317      	movs	r3, #23
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 8003372:	2316      	movs	r3, #22
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)&ThePage;
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <Flash_Write_Page+0xd8>)
 800337c:	613b      	str	r3, [r7, #16]

	Flash_Wait();
 800337e:	f7ff fde1 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 8003382:	f7ff fdc5 	bl	8002f10 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 8003386:	2006      	movs	r0, #6
 8003388:	f7ff fcec 	bl	8002d64 <SPI_Write>
	Flash_Disable();
 800338c:	f7ff fdcd 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 8003390:	f7ff fdd8 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 8003394:	f7ff fdbc 	bl	8002f10 <Flash_Enable>
	SPI_Write_3 (2, 0, 0);			//	PAGE LOAD DATA...		offset = 0
 8003398:	2200      	movs	r2, #0
 800339a:	2100      	movs	r1, #0
 800339c:	2002      	movs	r0, #2
 800339e:	f7ff fd07 	bl	8002db0 <SPI_Write_3>
	DMA_Start_Write (ptr, 2048+64);
 80033a2:	2384      	movs	r3, #132	; 0x84
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7ff fe92 	bl	80030d4 <DMA_Start_Write>
	DMA_Wait();						//	Wait for DMA complete
 80033b0:	f7ff fdec 	bl	8002f8c <DMA_Wait>
	Flash_Disable();
 80033b4:	f7ff fdb9 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 80033b8:	f7ff fdc4 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80033bc:	f7ff fda8 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 80033c0:	2316      	movs	r3, #22
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	7819      	ldrb	r1, [r3, #0]
 80033c6:	2317      	movs	r3, #23
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	000b      	movs	r3, r1
 80033ce:	2100      	movs	r1, #0
 80033d0:	2010      	movs	r0, #16
 80033d2:	f7ff fd3b 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 80033d6:	f7ff fda8 	bl	8002f2a <Flash_Disable>

	b = Flash_Wait();				//	Wait for internal write
 80033da:	230f      	movs	r3, #15
 80033dc:	18fc      	adds	r4, r7, r3
 80033de:	f7ff fdb1 	bl	8002f44 <Flash_Wait>
 80033e2:	0003      	movs	r3, r0
 80033e4:	7023      	strb	r3, [r4, #0]
	if (b & 0x0C)
 80033e6:	230f      	movs	r3, #15
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	220c      	movs	r2, #12
 80033ee:	4013      	ands	r3, r2
 80033f0:	d001      	beq.n	80033f6 <Flash_Write_Page+0x96>
		return	false;				//	Had Errors
 80033f2:	2300      	movs	r3, #0
 80033f4:	e01c      	b.n	8003430 <Flash_Write_Page+0xd0>

	b = Flash_Read_Page (page, &aPage);
 80033f6:	230f      	movs	r3, #15
 80033f8:	18fc      	adds	r4, r7, r3
 80033fa:	4a10      	ldr	r2, [pc, #64]	; (800343c <Flash_Write_Page+0xdc>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff ff65 	bl	80032d0 <Flash_Read_Page>
 8003406:	0003      	movs	r3, r0
 8003408:	7023      	strb	r3, [r4, #0]
	if (!b)
 800340a:	230f      	movs	r3, #15
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <Flash_Write_Page+0xb8>
		return	false;				//	Could not read it back
 8003414:	2300      	movs	r3, #0
 8003416:	e00b      	b.n	8003430 <Flash_Write_Page+0xd0>

	if (memcmp (&ThePage, &aPage, 2048))
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	011a      	lsls	r2, r3, #4
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <Flash_Write_Page+0xdc>)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <Flash_Write_Page+0xd8>)
 8003420:	0018      	movs	r0, r3
 8003422:	f004 fbf3 	bl	8007c0c <memcmp>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <Flash_Write_Page+0xce>
		return	false;				//	Did not match
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <Flash_Write_Page+0xd0>

	return	true;					//	Read back perfectly!
 800342e:	2301      	movs	r3, #1
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b007      	add	sp, #28
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	200051c0 	.word	0x200051c0
 800343c:	20002040 	.word	0x20002040

08003440 <Flash_Page_OK>:


bool Flash_Page_OK (int page)				//	IN:  page = 0-64K	(2KByte per page)
{											//	OUT: Page_Info
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	uint16	OK = 0xFFFF;
 8003448:	230e      	movs	r3, #14
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	4252      	negs	r2, r2
 8003450:	801a      	strh	r2, [r3, #0]

	if (page == TestPageNumber)		//	don't use the test page
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <Flash_Page_OK+0x80>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <Flash_Page_OK+0x1e>
		return	false;
 800345a:	2300      	movs	r3, #0
 800345c:	e02c      	b.n	80034b8 <Flash_Page_OK+0x78>

	if (Flash_Read_Page_Info (page, &Page_Info))
 800345e:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <Flash_Page_OK+0x84>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff feb1 	bl	80031cc <Flash_Read_Page_Info>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d01d      	beq.n	80034aa <Flash_Page_OK+0x6a>
		if (Page_Info.Spare[0].BadBlock == OK)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <Flash_Page_OK+0x84>)
 8003470:	891b      	ldrh	r3, [r3, #8]
 8003472:	220e      	movs	r2, #14
 8003474:	18ba      	adds	r2, r7, r2
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d116      	bne.n	80034aa <Flash_Page_OK+0x6a>
			if (Page_Info.Spare[1].BadBlock == OK)
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <Flash_Page_OK+0x84>)
 800347e:	8b1b      	ldrh	r3, [r3, #24]
 8003480:	220e      	movs	r2, #14
 8003482:	18ba      	adds	r2, r7, r2
 8003484:	8812      	ldrh	r2, [r2, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d10f      	bne.n	80034aa <Flash_Page_OK+0x6a>
				if (Page_Info.Spare[2].BadBlock == OK)
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <Flash_Page_OK+0x84>)
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	220e      	movs	r2, #14
 8003490:	18ba      	adds	r2, r7, r2
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d108      	bne.n	80034aa <Flash_Page_OK+0x6a>
					if (Page_Info.Spare[3].BadBlock == OK)
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <Flash_Page_OK+0x84>)
 800349a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800349c:	220e      	movs	r2, #14
 800349e:	18ba      	adds	r2, r7, r2
 80034a0:	8812      	ldrh	r2, [r2, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d101      	bne.n	80034aa <Flash_Page_OK+0x6a>
						return	true;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e006      	b.n	80034b8 <Flash_Page_OK+0x78>

	debug_Printf("*** Flash_Page_OK = False for %d\r\n", page);
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <Flash_Page_OK+0x88>)
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f004 f853 	bl	800755c <uart1_Printf>
	return	false;							//	 Returns TRUE if no ECC errors, and the BadBlock markers are OK
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	0000ff80 	.word	0x0000ff80
 80034c4:	20002880 	.word	0x20002880
 80034c8:	08009ad0 	.word	0x08009ad0

080034cc <Flash_Read_Unique_ID>:


void Flash_Read_Unique_ID()				//	Out:  aPage <-- 32 bytes of unique ID as read from the FLASH IC
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
	int  i;

	Write_Status_Register(2,0x58);		//	OTP-E = 1		ECC-E = 1		BUF = 1
 80034d2:	2158      	movs	r1, #88	; 0x58
 80034d4:	2002      	movs	r0, #2
 80034d6:	f7ff fe57 	bl	8003188 <Write_Status_Register>
	Flash_Wait();
 80034da:	f7ff fd33 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80034de:	f7ff fd17 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x13,0,0,0);			//	PAGE DATA READ...		page number 0
 80034e2:	2300      	movs	r3, #0
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	2013      	movs	r0, #19
 80034ea:	f7ff fcaf 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 80034ee:	f7ff fd1c 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 80034f2:	f7ff fd27 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80034f6:	f7ff fd0b 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (3,0,0,0);					//	READ...		offset = 0
 80034fa:	2300      	movs	r3, #0
 80034fc:	2200      	movs	r2, #0
 80034fe:	2100      	movs	r1, #0
 8003500:	2003      	movs	r0, #3
 8003502:	f7ff fca3 	bl	8002e4c <SPI_Write_4>
	DMA_Start_Read ((uint8 *)UniqueID,32);	//	Start DMA:  read the 32 ID bytes
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <Flash_Read_Unique_ID+0x90>)
 8003508:	2120      	movs	r1, #32
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fd8a 	bl	8003024 <DMA_Start_Read>
	DMA_Wait();								//	Wait for DMA complete
 8003510:	f7ff fd3c 	bl	8002f8c <DMA_Wait>
	Flash_Disable();
 8003514:	f7ff fd09 	bl	8002f2a <Flash_Disable>
	Write_Status_Register(2,0x18);		//	OTP-E = 0		ECC-E = 1		BUF = 1
 8003518:	2118      	movs	r1, #24
 800351a:	2002      	movs	r0, #2
 800351c:	f7ff fe34 	bl	8003188 <Write_Status_Register>

	CRC->CR = 1;						//	Begin a new CRC...
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <Flash_Read_Unique_ID+0x94>)
 8003522:	2201      	movs	r2, #1
 8003524:	609a      	str	r2, [r3, #8]
	for (i=0; i<8; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	e008      	b.n	800353e <Flash_Read_Unique_ID+0x72>
		CRC->DR = UniqueID[i];
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <Flash_Read_Unique_ID+0x94>)
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <Flash_Read_Unique_ID+0x90>)
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	0089      	lsls	r1, r1, #2
 8003534:	588a      	ldr	r2, [r1, r2]
 8003536:	601a      	str	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3301      	adds	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b07      	cmp	r3, #7
 8003542:	ddf3      	ble.n	800352c <Flash_Read_Unique_ID+0x60>
	UniqueID[0] = CRC->DR;				//	Replace the first word with the CRC of all 8 words
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <Flash_Read_Unique_ID+0x94>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <Flash_Read_Unique_ID+0x90>)
 800354a:	601a      	str	r2, [r3, #0]
	CRC->CR = 1;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <Flash_Read_Unique_ID+0x94>)
 800354e:	2201      	movs	r2, #1
 8003550:	609a      	str	r2, [r3, #8]
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	2000201c 	.word	0x2000201c
 8003560:	40023000 	.word	0x40023000

08003564 <Flash_Locate_Next_Page>:


void Flash_Locate_Next_Page()			//	Out:  Free_Page = next page to write
{										//		  Sequence  = next Sequence number to use
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
	bool erased = false;
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
	int  i;

	if (++Free_Page == 65536)			//	Begin search with next page
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	025b      	lsls	r3, r3, #9
 8003582:	429a      	cmp	r2, r3
 8003584:	d102      	bne.n	800358c <Flash_Locate_Next_Page+0x28>
		Free_Page = 0;
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

	debug_Printf("*** Flash_Locate_Next_Page - Free_Page %d\r\n", Free_Page);
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <Flash_Locate_Next_Page+0x134>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f003 ffe1 	bl	800755c <uart1_Printf>

	for (i=0; i<65536; i++)				//	Try all pages once, then quit
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	e06a      	b.n	8003676 <Flash_Locate_Next_Page+0x112>
	{
		if (Flash_Page_OK (Free_Page))
 80035a0:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff ff4b 	bl	8003440 <Flash_Page_OK>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d037      	beq.n	800361e <Flash_Locate_Next_Page+0xba>
		{
			if (Page_Info.Sequence == 0xFFFFFFFF)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <Flash_Locate_Next_Page+0x138>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	3301      	adds	r3, #1
 80035b4:	d107      	bne.n	80035c6 <Flash_Locate_Next_Page+0x62>
			{
				debug_Printf("*** Free_Page Now %d\r\n", Free_Page);
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <Flash_Locate_Next_Page+0x13c>)
 80035bc:	0011      	movs	r1, r2
 80035be:	0018      	movs	r0, r3
 80035c0:	f003 ffcc 	bl	800755c <uart1_Printf>
				break;							//	Found a good page to try
 80035c4:	e05b      	b.n	800367e <Flash_Locate_Next_Page+0x11a>
			}

			debug_Printf("*** Page %d Not Free: Seq=%d\r\n", Free_Page, Page_Info.Sequence);
 80035c6:	4b33      	ldr	r3, [pc, #204]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	4b34      	ldr	r3, [pc, #208]	; (800369c <Flash_Locate_Next_Page+0x138>)
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <Flash_Locate_Next_Page+0x140>)
 80035d0:	0018      	movs	r0, r3
 80035d2:	f003 ffc3 	bl	800755c <uart1_Printf>
			if ((Free_Page & 0x3F)==0 && !erased)		///	TODO: fix: what about if first good page in a block is not the first page
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	223f      	movs	r2, #63	; 0x3f
 80035dc:	4013      	ands	r3, r2
 80035de:	d11e      	bne.n	800361e <Flash_Locate_Next_Page+0xba>
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11a      	bne.n	800361e <Flash_Locate_Next_Page+0xba>
			{
				debug_Printf("*** Erasing Page %d\r\n", Free_Page);
 80035e8:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <Flash_Locate_Next_Page+0x144>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f003 ffb3 	bl	800755c <uart1_Printf>
				Write_Status_Register(1,0);		//	Enable FLASH writes to all pages
 80035f6:	2100      	movs	r1, #0
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7ff fdc5 	bl	8003188 <Write_Status_Register>
				Flash_Erase_Block (Free_Page);	//	Erase a block if at the beginning
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fe27 	bl	8003256 <Flash_Erase_Block>
				Write_Status_Register(1,0x7C);	//	  and it hasn't been erased yet.
 8003608:	217c      	movs	r1, #124	; 0x7c
 800360a:	2001      	movs	r0, #1
 800360c:	f7ff fdbc 	bl	8003188 <Write_Status_Register>
				erased = true;
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
				i--;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	603b      	str	r3, [r7, #0]
				continue;
 800361c:	e028      	b.n	8003670 <Flash_Locate_Next_Page+0x10c>
			}
		}
		erased = false;
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

		if (++Free_Page >= 65536)
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <Flash_Locate_Next_Page+0x148>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d914      	bls.n	8003662 <Flash_Locate_Next_Page+0xfe>
		{
			debug_Printf("*** Free_Page Wrapped to 0\r\n");
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <Flash_Locate_Next_Page+0x14c>)
 800363a:	0018      	movs	r0, r3
 800363c:	f003 ff8e 	bl	800755c <uart1_Printf>
			Free_Page = 0;
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
			Write_Status_Register(1,0);		//	Enable FLASH writes to all pages
 8003646:	2100      	movs	r1, #0
 8003648:	2001      	movs	r0, #1
 800364a:	f7ff fd9d 	bl	8003188 <Write_Status_Register>
			Flash_Erase_Block(0);			//	Rolled over to first page: start clearing old data
 800364e:	2000      	movs	r0, #0
 8003650:	f7ff fe01 	bl	8003256 <Flash_Erase_Block>
			Write_Status_Register(1,0x7C);	//	Disable FLASH writes
 8003654:	217c      	movs	r1, #124	; 0x7c
 8003656:	2001      	movs	r0, #1
 8003658:	f7ff fd96 	bl	8003188 <Write_Status_Register>
			erased = true;
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
		}
		debug_Printf("*** Flash_Locate_Next_Page - At End Free_Page %d\r\n", Free_Page);
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <Flash_Locate_Next_Page+0x150>)
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f003 ff76 	bl	800755c <uart1_Printf>
	for (i=0; i<65536; i++)				//	Try all pages once, then quit
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <Flash_Locate_Next_Page+0x148>)
 800367a:	4293      	cmp	r3, r2
 800367c:	dd90      	ble.n	80035a0 <Flash_Locate_Next_Page+0x3c>
	}

	debug_Printf("***  Flash_Locate_Next_Page - At Exit Free_Page %d\r\n", Free_Page);
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <Flash_Locate_Next_Page+0x130>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <Flash_Locate_Next_Page+0x154>)
 8003684:	0011      	movs	r1, r2
 8003686:	0018      	movs	r0, r3
 8003688:	f003 ff68 	bl	800755c <uart1_Printf>
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20002014 	.word	0x20002014
 8003698:	08009af4 	.word	0x08009af4
 800369c:	20002880 	.word	0x20002880
 80036a0:	08009b20 	.word	0x08009b20
 80036a4:	08009b38 	.word	0x08009b38
 80036a8:	08009b58 	.word	0x08009b58
 80036ac:	0000ffff 	.word	0x0000ffff
 80036b0:	08009b70 	.word	0x08009b70
 80036b4:	08009b90 	.word	0x08009b90
 80036b8:	08009bc4 	.word	0x08009bc4

080036bc <Flash_Locate_Latest_Record>:

//	This is called at POR to find the next free page to write,
//		and the span of records to be uploaded.
//
void Flash_Locate_Latest_Record()			//	Out:  Free_Page  = next page to write
{											//		  Sequence   = next Sequence number to use
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
	int32	diff;							//		  First_Page = first page requiring upload
	uint32	i, seq;							//		  Last_Page  = final page requiring upload
	uint32	LoSeq = 0;						//		  Takes 15 seconds
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
	uint32	HiSeq = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

	Send.Nothing = true;					//	Nothing to send (yet)
 80036ca:	4a55      	ldr	r2, [pc, #340]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 80036cc:	2385      	movs	r3, #133	; 0x85
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	2101      	movs	r1, #1
 80036d2:	54d1      	strb	r1, [r2, r3]
	Free_Page = 0;
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <Flash_Locate_Latest_Record+0x168>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	Sequence = 1;
 80036da:	4b53      	ldr	r3, [pc, #332]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

	for (i=0; i<65536; i++)					//	Search every page for first valid sequence number...
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e017      	b.n	8003716 <Flash_Locate_Latest_Record+0x5a>
	{
		if (! Flash_Page_OK(i))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff fea9 	bl	8003440 <Flash_Page_OK>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d00b      	beq.n	800370a <Flash_Locate_Latest_Record+0x4e>
			continue;						//	Skip unreadable pages

		if (1+Page_Info.Sequence == 0)		//	Sequence = all F's ?
 80036f2:	4b4e      	ldr	r3, [pc, #312]	; (800382c <Flash_Locate_Latest_Record+0x170>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	3301      	adds	r3, #1
 80036f8:	d009      	beq.n	800370e <Flash_Locate_Latest_Record+0x52>
			continue;						//	  Yes.  Un-written page - skip it

		Sequence = Page_Info.Sequence;		//	Record first sequence # so that the DIFFing in the next loop works,
 80036fa:	4b4c      	ldr	r3, [pc, #304]	; (800382c <Flash_Locate_Latest_Record+0x170>)
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 8003700:	601a      	str	r2, [r3, #0]
		Free_Page = i;						//	  no matter what the first unsigned sequence value is.
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <Flash_Locate_Latest_Record+0x168>)
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	601a      	str	r2, [r3, #0]
		break;
 8003708:	e009      	b.n	800371e <Flash_Locate_Latest_Record+0x62>
			continue;						//	Skip unreadable pages
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	e000      	b.n	8003710 <Flash_Locate_Latest_Record+0x54>
			continue;						//	  Yes.  Un-written page - skip it
 800370e:	46c0      	nop			; (mov r8, r8)
	for (i=0; i<65536; i++)					//	Search every page for first valid sequence number...
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3301      	adds	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4a45      	ldr	r2, [pc, #276]	; (8003830 <Flash_Locate_Latest_Record+0x174>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d9e3      	bls.n	80036e6 <Flash_Locate_Latest_Record+0x2a>
	}

	if (i == 65536)							//	If a totally blank Flash chip, exit now.
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	025b      	lsls	r3, r3, #9
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <Flash_Locate_Latest_Record+0x7c>
	{
		debug_Printf("*** Uhh... Is this card JACKED!?\r\n", Free_Page);
 8003728:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <Flash_Locate_Latest_Record+0x168>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <Flash_Locate_Latest_Record+0x178>)
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f003 ff13 	bl	800755c <uart1_Printf>
		return;
 8003736:	e06f      	b.n	8003818 <Flash_Locate_Latest_Record+0x15c>
	}

	--i;									//	Decrement so we re-locate the first valid page again
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
	while (++i < 65536)						//	Search every page...
 800373e:	e052      	b.n	80037e6 <Flash_Locate_Latest_Record+0x12a>
	{
		if (Flash_Page_OK(i))
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff fe7c 	bl	8003440 <Flash_Page_OK>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d04c      	beq.n	80037e6 <Flash_Locate_Latest_Record+0x12a>
		{
			seq = Page_Info.Sequence;
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <Flash_Locate_Latest_Record+0x170>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60bb      	str	r3, [r7, #8]
			if (seq == 0xFFFFFFFF)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	d100      	bne.n	800375a <Flash_Locate_Latest_Record+0x9e>
				continue;					//	Un-written page - ignore it
 8003758:	e045      	b.n	80037e6 <Flash_Locate_Latest_Record+0x12a>

			if (Page_Info.Uploaded == 0xFF)
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <Flash_Locate_Latest_Record+0x170>)
 800375c:	78db      	ldrb	r3, [r3, #3]
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d133      	bne.n	80037ca <Flash_Locate_Latest_Record+0x10e>
			{								//	This page needs uploading:  Data is good, Sequence is valid, Uploaded it is not
				if (Send.Nothing)
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 8003764:	2385      	movs	r3, #133	; 0x85
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <Flash_Locate_Latest_Record+0xd8>
				{							//	This is the first page found to upload
					LoSeq = seq;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	613b      	str	r3, [r7, #16]
					HiSeq = seq;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	60fb      	str	r3, [r7, #12]
					Send.Last_Page = i;
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 8003778:	492f      	ldr	r1, [pc, #188]	; (8003838 <Flash_Locate_Latest_Record+0x17c>)
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	505a      	str	r2, [r3, r1]
					Send.First_Page = i;
 800377e:	4a28      	ldr	r2, [pc, #160]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 8003780:	2384      	movs	r3, #132	; 0x84
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	50d1      	str	r1, [r2, r3]
					Send.Nothing = false;	//	We have something
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 800378a:	2385      	movs	r3, #133	; 0x85
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	2100      	movs	r1, #0
 8003790:	54d1      	strb	r1, [r2, r3]
 8003792:	e01a      	b.n	80037ca <Flash_Locate_Latest_Record+0x10e>
				}
				else
				{
					diff = seq - LoSeq;
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	607b      	str	r3, [r7, #4]
					if (diff < 0)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da06      	bge.n	80037b0 <Flash_Locate_Latest_Record+0xf4>
					{
						LoSeq = seq;		//	Mark new first page  (happens when upload pages wrapped around)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	613b      	str	r3, [r7, #16]
						Send.First_Page = i;
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 80037a8:	2384      	movs	r3, #132	; 0x84
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	6979      	ldr	r1, [r7, #20]
 80037ae:	50d1      	str	r1, [r2, r3]
					}
					diff = seq - HiSeq;
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	607b      	str	r3, [r7, #4]
					if (diff > 0)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dd05      	ble.n	80037ca <Flash_Locate_Latest_Record+0x10e>
					{
						HiSeq = seq;		//	Mark new last page
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	60fb      	str	r3, [r7, #12]
						Send.Last_Page = i;
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <Flash_Locate_Latest_Record+0x164>)
 80037c4:	491c      	ldr	r1, [pc, #112]	; (8003838 <Flash_Locate_Latest_Record+0x17c>)
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	505a      	str	r2, [r3, r1]
					}
				}
			}

			diff = seq - Sequence;
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	607b      	str	r3, [r7, #4]
			if (diff > 0)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dd05      	ble.n	80037e6 <Flash_Locate_Latest_Record+0x12a>
			{
				Sequence = seq;				//	Keep track of highest sequence number found and
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	601a      	str	r2, [r3, #0]
				Free_Page = i;				//		its location, whether it is uploaded or not.
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <Flash_Locate_Latest_Record+0x168>)
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	601a      	str	r2, [r3, #0]
	while (++i < 65536)						//	Search every page...
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <Flash_Locate_Latest_Record+0x174>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d9a5      	bls.n	8003740 <Flash_Locate_Latest_Record+0x84>
			}
		}
	}

	Flash_Locate_Next_Page();				//	Set Free_Page for first write
 80037f4:	f7ff feb6 	bl	8003564 <Flash_Locate_Next_Page>
	if (++Sequence == 0xFFFFFFFF)			//	Set sequence number for first write
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	d102      	bne.n	8003810 <Flash_Locate_Latest_Record+0x154>
		Sequence = 1;						//	Skip values of -1 and 0
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <Flash_Locate_Latest_Record+0x16c>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

	debug_Printf("*** Flash_Locate_Latest_Record Complete\r\n");
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <Flash_Locate_Latest_Record+0x180>)
 8003812:	0018      	movs	r0, r3
 8003814:	f003 fea2 	bl	800755c <uart1_Printf>
}
 8003818:	46bd      	mov	sp, r7
 800381a:	b006      	add	sp, #24
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20004964 	.word	0x20004964
 8003824:	20002014 	.word	0x20002014
 8003828:	20002018 	.word	0x20002018
 800382c:	20002880 	.word	0x20002880
 8003830:	0000ffff 	.word	0x0000ffff
 8003834:	08009bfc 	.word	0x08009bfc
 8003838:	00000848 	.word	0x00000848
 800383c:	08009c20 	.word	0x08009c20

08003840 <Flash_Mark_Page_Sent>:


bool Flash_Mark_Page_Sent (int page)	//	This marks one page which was sent to the cloud as being
{										//	 successfully uploaded by writing the 'Uploaded' byte in 
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	uint8  msb, lsb;					//	 the page structure.
	uint8  a, b;
	int    offs;

	msb = (page >> 8) & 0xFF;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	121a      	asrs	r2, r3, #8
 800384c:	2317      	movs	r3, #23
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 8003852:	2316      	movs	r3, #22
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	701a      	strb	r2, [r3, #0]

	Flash_Wait();					//	Get the page into Flash Device's internal RAM area...
 800385a:	f7ff fb73 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 800385e:	f7ff fb57 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x13,0,msb,lsb);	//	PAGE DATA READ...
 8003862:	2316      	movs	r3, #22
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	7819      	ldrb	r1, [r3, #0]
 8003868:	2317      	movs	r3, #23
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	000b      	movs	r3, r1
 8003870:	2100      	movs	r1, #0
 8003872:	2013      	movs	r0, #19
 8003874:	f7ff faea 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 8003878:	f7ff fb57 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 800387c:	f7ff fb62 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 8003880:	f7ff fb46 	bl	8002f10 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 8003884:	2006      	movs	r0, #6
 8003886:	f7ff fa6d 	bl	8002d64 <SPI_Write>
	Flash_Disable();
 800388a:	f7ff fb4e 	bl	8002f2a <Flash_Disable>

	offs = offsetof(Flash_Page_t, Uploaded);
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <Flash_Mark_Page_Sent+0xec>)
 8003890:	613b      	str	r3, [r7, #16]
	a = (offs >> 8) & 0x0F;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	121b      	asrs	r3, r3, #8
 8003896:	b2da      	uxtb	r2, r3
 8003898:	230f      	movs	r3, #15
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	210f      	movs	r1, #15
 800389e:	400a      	ands	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
	b = offs & 0xFF;
 80038a2:	230e      	movs	r3, #14
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	701a      	strb	r2, [r3, #0]

	Flash_Wait();					//	Write a '00' byte to the UPLOADED structure entry...
 80038aa:	f7ff fb4b 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80038ae:	f7ff fb2f 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x84,a,b,0);		//	RANDOM PAGE LOAD DATA   (does not affect current page data)
 80038b2:	230e      	movs	r3, #14
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	230f      	movs	r3, #15
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	7819      	ldrb	r1, [r3, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	2084      	movs	r0, #132	; 0x84
 80038c2:	f7ff fac3 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();
 80038c6:	f7ff fb30 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 80038ca:	f7ff fb3b 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80038ce:	f7ff fb1f 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 80038d2:	2316      	movs	r3, #22
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	7819      	ldrb	r1, [r3, #0]
 80038d8:	2317      	movs	r3, #23
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	000b      	movs	r3, r1
 80038e0:	2100      	movs	r1, #0
 80038e2:	2010      	movs	r0, #16
 80038e4:	f7ff fab2 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 80038e8:	f7ff fb1f 	bl	8002f2a <Flash_Disable>
	b = Flash_Wait();				//	Wait for internal write
 80038ec:	230e      	movs	r3, #14
 80038ee:	18fc      	adds	r4, r7, r3
 80038f0:	f7ff fb28 	bl	8002f44 <Flash_Wait>
 80038f4:	0003      	movs	r3, r0
 80038f6:	7023      	strb	r3, [r4, #0]

	if (b & 0x0C)
 80038f8:	230e      	movs	r3, #14
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	220c      	movs	r2, #12
 8003900:	4013      	ands	r3, r2
 8003902:	d007      	beq.n	8003914 <Flash_Mark_Page_Sent+0xd4>
	{
		debug_Printf("*** WITH ERRORS! Flash_Mark_Page_Sent %d\r\n", page);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <Flash_Mark_Page_Sent+0xf0>)
 8003908:	0011      	movs	r1, r2
 800390a:	0018      	movs	r0, r3
 800390c:	f003 fe26 	bl	800755c <uart1_Printf>
		return	false;				//	Had Errors
 8003910:	2300      	movs	r3, #0
 8003912:	e006      	b.n	8003922 <Flash_Mark_Page_Sent+0xe2>
	}

	debug_Printf("*** Flash_Mark_Page_Sent %d\r\n", page);
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <Flash_Mark_Page_Sent+0xf4>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f003 fe1e 	bl	800755c <uart1_Printf>
	return	true;
 8003920:	2301      	movs	r3, #1
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b007      	add	sp, #28
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	000007fb 	.word	0x000007fb
 8003930:	08009c4c 	.word	0x08009c4c
 8003934:	08009c78 	.word	0x08009c78

08003938 <Flash_Mark_Page_Bad>:


void Flash_Mark_Page_Bad (int page)		//	This marks the page as being unusable by writing to the BadBlock bytes
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	uint8  msb, lsb;
	uint8  *ptr;

	debug_Printf("*** Marking Bad Page %d\r\n", page);
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <Flash_Mark_Page_Bad+0x9c>)
 8003944:	0011      	movs	r1, r2
 8003946:	0018      	movs	r0, r3
 8003948:	f003 fe08 	bl	800755c <uart1_Printf>

	msb = (page >> 8) & 0xFF;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	121a      	asrs	r2, r3, #8
 8003950:	230f      	movs	r3, #15
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	701a      	strb	r2, [r3, #0]
	lsb = page & 0xFF;
 8003956:	230e      	movs	r3, #14
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	701a      	strb	r2, [r3, #0]
	ptr = (uint8 *)&Page_Info;
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <Flash_Mark_Page_Bad+0xa0>)
 8003960:	60bb      	str	r3, [r7, #8]
	memset (ptr, 0, 64);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2240      	movs	r2, #64	; 0x40
 8003966:	2100      	movs	r1, #0
 8003968:	0018      	movs	r0, r3
 800396a:	f004 f967 	bl	8007c3c <memset>

	Flash_Wait();
 800396e:	f7ff fae9 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 8003972:	f7ff facd 	bl	8002f10 <Flash_Enable>
	SPI_Write (0x06);				//	WRITE ENABLE...
 8003976:	2006      	movs	r0, #6
 8003978:	f7ff f9f4 	bl	8002d64 <SPI_Write>
	Flash_Disable();
 800397c:	f7ff fad5 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 8003980:	f7ff fae0 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 8003984:	f7ff fac4 	bl	8002f10 <Flash_Enable>
	SPI_Write_3 (2, 8, 0);			//	PAGE LOAD DATA...		offset = 0800h = 2K		point to EXTRA section
 8003988:	2200      	movs	r2, #0
 800398a:	2108      	movs	r1, #8
 800398c:	2002      	movs	r0, #2
 800398e:	f7ff fa0f 	bl	8002db0 <SPI_Write_3>
	DMA_Start_Write (ptr, 64);		//	Write 64 bytes of zeros in EXTRA section
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	0018      	movs	r0, r3
 8003998:	f7ff fb9c 	bl	80030d4 <DMA_Start_Write>
	DMA_Wait();						//	Wait for DMA complete
 800399c:	f7ff faf6 	bl	8002f8c <DMA_Wait>
	Flash_Disable();
 80039a0:	f7ff fac3 	bl	8002f2a <Flash_Disable>

	Flash_Wait();
 80039a4:	f7ff face 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 80039a8:	f7ff fab2 	bl	8002f10 <Flash_Enable>
	SPI_Write_4 (0x10,0,msb,lsb);	//	PROGRAM EXECUTE...   (write page to flash array)
 80039ac:	230e      	movs	r3, #14
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	7819      	ldrb	r1, [r3, #0]
 80039b2:	230f      	movs	r3, #15
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	000b      	movs	r3, r1
 80039ba:	2100      	movs	r1, #0
 80039bc:	2010      	movs	r0, #16
 80039be:	f7ff fa45 	bl	8002e4c <SPI_Write_4>
	Flash_Disable();				//	Begin the write
 80039c2:	f7ff fab2 	bl	8002f2a <Flash_Disable>
	Flash_Wait();					//	Wait for internal write - ignore errors
 80039c6:	f7ff fabd 	bl	8002f44 <Flash_Wait>
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	08009c98 	.word	0x08009c98
 80039d8:	20002880 	.word	0x20002880

080039dc <Flash_Write_Events>:


void Flash_Write_Events()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
	int  i;


	debug_Printf("*** (Probably) Write Page %d with Seq=%d\r\n", Free_Page, Sequence);
 80039e2:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <Flash_Write_Events+0xf8>)
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	4b3c      	ldr	r3, [pc, #240]	; (8003ad8 <Flash_Write_Events+0xfc>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <Flash_Write_Events+0x100>)
 80039ec:	0018      	movs	r0, r3
 80039ee:	f003 fdb5 	bl	800755c <uart1_Printf>

	ThePage.Sequence = Sequence;		//	Store the sequence number to use
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <Flash_Write_Events+0xfc>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <Flash_Write_Events+0x104>)
 80039f8:	493a      	ldr	r1, [pc, #232]	; (8003ae4 <Flash_Write_Events+0x108>)
 80039fa:	505a      	str	r2, [r3, r1]
	if (++Sequence == 0xFFFFFFFF)		//	Set sequence number for next time
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <Flash_Write_Events+0xfc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <Flash_Write_Events+0xfc>)
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <Flash_Write_Events+0xfc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <Flash_Write_Events+0x38>
		Sequence = 1;					//	Skip values of -1 and 0
 8003a0e:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <Flash_Write_Events+0xfc>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

	if (Send.Nothing)
 8003a14:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <Flash_Write_Events+0x10c>)
 8003a16:	2385      	movs	r3, #133	; 0x85
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <Flash_Write_Events+0x68>
	{
		debug_Printf("*** Send.Nothing Set : First_Page=Free_Page=%d\r\n", Free_Page);
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <Flash_Write_Events+0x110>)
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f003 fd97 	bl	800755c <uart1_Printf>
		Send.First_Page = Free_Page;
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	4a2d      	ldr	r2, [pc, #180]	; (8003ae8 <Flash_Write_Events+0x10c>)
 8003a34:	2384      	movs	r3, #132	; 0x84
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	50d1      	str	r1, [r2, r3]
		Send.Nothing = false;			//	We have something
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <Flash_Write_Events+0x10c>)
 8003a3c:	2385      	movs	r3, #133	; 0x85
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	2100      	movs	r1, #0
 8003a42:	54d1      	strb	r1, [r2, r3]
	}

	Write_Status_Register (1,0);		//	Enable FLASH writes to all pages
 8003a44:	2100      	movs	r1, #0
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7ff fb9e 	bl	8003188 <Write_Status_Register>
	for (i=0; i<25; i++)				//	Try 25 times to write it
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	e017      	b.n	8003a82 <Flash_Write_Events+0xa6>
	{
		if (Flash_Write_Page (Free_Page))
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff fc82 	bl	8003360 <Flash_Write_Page>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d114      	bne.n	8003a8a <Flash_Write_Events+0xae>
			break;						//	Worked!

		debug_Printf("*** Bad Write!  Page Marked Bad: %d\r\n", Free_Page);
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <Flash_Write_Events+0x114>)
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f003 fd77 	bl	800755c <uart1_Printf>
		Flash_Mark_Page_Bad (Free_Page);
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7ff ff60 	bl	8003938 <Flash_Mark_Page_Bad>
		Flash_Locate_Next_Page();		//	Find another page to try
 8003a78:	f7ff fd74 	bl	8003564 <Flash_Locate_Next_Page>
	for (i=0; i<25; i++)				//	Try 25 times to write it
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b18      	cmp	r3, #24
 8003a86:	dde4      	ble.n	8003a52 <Flash_Write_Events+0x76>
 8003a88:	e000      	b.n	8003a8c <Flash_Write_Events+0xb0>
			break;						//	Worked!
 8003a8a:	46c0      	nop			; (mov r8, r8)
	}
	Write_Status_Register (1,0x7C);		//	Disable all FLASH writes -- write protected
 8003a8c:	217c      	movs	r1, #124	; 0x7c
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7ff fb7a 	bl	8003188 <Write_Status_Register>
	Send.Last_Page = Free_Page;			//	Keep track of final page to be uploaded
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <Flash_Write_Events+0x10c>)
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <Flash_Write_Events+0x118>)
 8003a9c:	505a      	str	r2, [r3, r1]

	if (i < 25)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b18      	cmp	r3, #24
 8003aa2:	dc01      	bgt.n	8003aa8 <Flash_Write_Events+0xcc>
		Flash_Locate_Next_Page();		//	Find next available page for next time
 8003aa4:	f7ff fd5e 	bl	8003564 <Flash_Locate_Next_Page>

	debug_Printf("*** Bad Write!  Page Marked Bad: %d\r\n", Free_Page);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <Flash_Write_Events+0xf8>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <Flash_Write_Events+0x114>)
 8003aae:	0011      	movs	r1, r2
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f003 fd53 	bl	800755c <uart1_Printf>
	memset (&ThePage, 0xFF, sizeof(ThePage));
 8003ab6:	2384      	movs	r3, #132	; 0x84
 8003ab8:	011a      	lsls	r2, r3, #4
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <Flash_Write_Events+0x104>)
 8003abc:	21ff      	movs	r1, #255	; 0xff
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f004 f8bc 	bl	8007c3c <memset>
	nEvents = 0;						//	Clear the buffer area
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <Flash_Write_Events+0x11c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	20002014 	.word	0x20002014
 8003ad8:	20002018 	.word	0x20002018
 8003adc:	08009cb4 	.word	0x08009cb4
 8003ae0:	200051c0 	.word	0x200051c0
 8003ae4:	000007fc 	.word	0x000007fc
 8003ae8:	20004964 	.word	0x20004964
 8003aec:	08009ce0 	.word	0x08009ce0
 8003af0:	08009d14 	.word	0x08009d14
 8003af4:	00000848 	.word	0x00000848
 8003af8:	200051b8 	.word	0x200051b8

08003afc <Begin_Report>:


void Begin_Report()
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
	flash_Log (FLAG_FLUSH);					//	Generate a log, and flush the record to FLASH
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f994 	bl	8003e34 <flash_Log>

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);	//  lock it
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <Begin_Report+0xdc>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	2301      	movs	r3, #1
 8003b12:	425a      	negs	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	f7fd f915 	bl	8000d46 <xQueueGenericReceive>
	Send.Index = 0;							//	Start with first event of first page
 8003b1c:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <Begin_Report+0xe0>)
 8003b1e:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <Begin_Report+0xe4>)
 8003b20:	2100      	movs	r1, #0
 8003b22:	5099      	str	r1, [r3, r2]
	Send.Current_Page = Send.First_Page;
 8003b24:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <Begin_Report+0xe0>)
 8003b26:	2384      	movs	r3, #132	; 0x84
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	58d2      	ldr	r2, [r2, r3]
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <Begin_Report+0xe0>)
 8003b2e:	492d      	ldr	r1, [pc, #180]	; (8003be4 <Begin_Report+0xe8>)
 8003b30:	505a      	str	r2, [r3, r1]
	bool b = Send.Nothing;
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	4929      	ldr	r1, [pc, #164]	; (8003bdc <Begin_Report+0xe0>)
 8003b36:	2285      	movs	r2, #133	; 0x85
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	5c8a      	ldrb	r2, [r1, r2]
 8003b3c:	701a      	strb	r2, [r3, #0]

	debug_Printf("***  Begin_Report: Current_Page=First_Page=%d\r\n", Send.First_Page);
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <Begin_Report+0xe0>)
 8003b40:	2384      	movs	r3, #132	; 0x84
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	58d2      	ldr	r2, [r2, r3]
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <Begin_Report+0xec>)
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f003 fd06 	bl	800755c <uart1_Printf>

	while (!b)								//	While looking for valid data to send...
 8003b50:	e028      	b.n	8003ba4 <Begin_Report+0xa8>
	{
		b = Flash_Read_Page (Send.Current_Page, &Send.Data);
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <Begin_Report+0xe0>)
 8003b54:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <Begin_Report+0xe8>)
 8003b56:	589b      	ldr	r3, [r3, r2]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	1dfc      	adds	r4, r7, #7
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <Begin_Report+0xe0>)
 8003b5e:	0019      	movs	r1, r3
 8003b60:	0010      	movs	r0, r2
 8003b62:	f7ff fbb5 	bl	80032d0 <Flash_Read_Page>
 8003b66:	0003      	movs	r3, r0
 8003b68:	7023      	strb	r3, [r4, #0]
		if (!b)								//	Fail...
 8003b6a:	1dfb      	adds	r3, r7, #7
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <Begin_Report+0xa8>
		{									//	Try next page if Current is unreadable
			debug_Printf("***  Begin_Report Failed To Read Page!? %d\r\n", Send.Current_Page);
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <Begin_Report+0xe0>)
 8003b74:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <Begin_Report+0xe8>)
 8003b76:	589a      	ldr	r2, [r3, r2]
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <Begin_Report+0xf0>)
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f003 fced 	bl	800755c <uart1_Printf>
			if (Send.Current_Page == Send.Last_Page)
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <Begin_Report+0xe0>)
 8003b84:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <Begin_Report+0xe8>)
 8003b86:	589a      	ldr	r2, [r3, r2]
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <Begin_Report+0xe0>)
 8003b8a:	4919      	ldr	r1, [pc, #100]	; (8003bf0 <Begin_Report+0xf4>)
 8003b8c:	585b      	ldr	r3, [r3, r1]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00d      	beq.n	8003bae <Begin_Report+0xb2>
				break;						//	Stop looping if Last page is unreadable
			Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <Begin_Report+0xe0>)
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <Begin_Report+0xe8>)
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	0c1a      	lsrs	r2, r3, #16
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <Begin_Report+0xe0>)
 8003ba0:	4910      	ldr	r1, [pc, #64]	; (8003be4 <Begin_Report+0xe8>)
 8003ba2:	505a      	str	r2, [r3, r1]
	while (!b)								//	While looking for valid data to send...
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0d2      	beq.n	8003b52 <Begin_Report+0x56>
 8003bac:	e000      	b.n	8003bb0 <Begin_Report+0xb4>
				break;						//	Stop looping if Last page is unreadable
 8003bae:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (!b)
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <Begin_Report+0xc6>
		Send.Nothing = true;				//	Nothing to send: all records are unreadable
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <Begin_Report+0xe0>)
 8003bba:	2385      	movs	r3, #133	; 0x85
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	54d1      	strb	r1, [r2, r3]
	xSemaphoreGive(flash_Mutex);			//  release it
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <Begin_Report+0xdc>)
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f7fc ffd6 	bl	8000b7c <xQueueGenericSend>
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b003      	add	sp, #12
 8003bd6:	bd90      	pop	{r4, r7, pc}
 8003bd8:	200051bc 	.word	0x200051bc
 8003bdc:	20004964 	.word	0x20004964
 8003be0:	0000084c 	.word	0x0000084c
 8003be4:	00000844 	.word	0x00000844
 8003be8:	08009d3c 	.word	0x08009d3c
 8003bec:	08009d6c 	.word	0x08009d6c
 8003bf0:	00000848 	.word	0x00000848

08003bf4 <Report_Callback>:


int  Report_Callback (Event_t *OneEvent)	//	OUT:	 0: OneEvent points to valid event
{											//			-1: no more data
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	bool  b;								//			Send.Index is updated for next call

	if (Send.Nothing)
 8003bfc:	4a5c      	ldr	r2, [pc, #368]	; (8003d70 <Report_Callback+0x17c>)
 8003bfe:	2385      	movs	r3, #133	; 0x85
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <Report_Callback+0x1a>
		return	-1;							//	Quit immediately if no records to upload
 8003c08:	2301      	movs	r3, #1
 8003c0a:	425b      	negs	r3, r3
 8003c0c:	e0ab      	b.n	8003d66 <Report_Callback+0x172>

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);		//  lock it
 8003c0e:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <Report_Callback+0x180>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	2301      	movs	r3, #1
 8003c14:	425a      	negs	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f7fd f894 	bl	8000d46 <xQueueGenericReceive>
	while (1)
	{
		if (Send.Index < EventsPerPage)
 8003c1e:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <Report_Callback+0x17c>)
 8003c20:	4a55      	ldr	r2, [pc, #340]	; (8003d78 <Report_Callback+0x184>)
 8003c22:	589b      	ldr	r3, [r3, r2]
 8003c24:	2ba9      	cmp	r3, #169	; 0xa9
 8003c26:	d820      	bhi.n	8003c6a <Report_Callback+0x76>
		{											//	Copy the data into caller's memory - may or may not be valid data
			*OneEvent = Send.Data.Events[Send.Index];
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <Report_Callback+0x17c>)
 8003c2a:	4a53      	ldr	r2, [pc, #332]	; (8003d78 <Report_Callback+0x184>)
 8003c2c:	589a      	ldr	r2, [r3, r2]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	494f      	ldr	r1, [pc, #316]	; (8003d70 <Report_Callback+0x17c>)
 8003c32:	0013      	movs	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	18cb      	adds	r3, r1, r3
 8003c3e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8003c40:	c213      	stmia	r2!, {r0, r1, r4}
			if (OneEvent->TimeStamp != 0xFFFFFFFF)	//	This entry was valid...
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	d00f      	beq.n	8003c6a <Report_Callback+0x76>
			{
				Send.Index++;						//	Update index for next call
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <Report_Callback+0x17c>)
 8003c4c:	4a4a      	ldr	r2, [pc, #296]	; (8003d78 <Report_Callback+0x184>)
 8003c4e:	589b      	ldr	r3, [r3, r2]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <Report_Callback+0x17c>)
 8003c54:	4948      	ldr	r1, [pc, #288]	; (8003d78 <Report_Callback+0x184>)
 8003c56:	505a      	str	r2, [r3, r1]
				xSemaphoreGive(flash_Mutex);		//  release it
 8003c58:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <Report_Callback+0x180>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	f7fc ff8b 	bl	8000b7c <xQueueGenericSend>
				return	0;							//	PASS: page is not exhausted and data is valid
 8003c66:	2300      	movs	r3, #0
 8003c68:	e07d      	b.n	8003d66 <Report_Callback+0x172>
			}
		}

		debug_Printf("***  Report_Callback: End of Events on Page.  Send.Index == %d\r\n", Send.Index);
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <Report_Callback+0x17c>)
 8003c6c:	4a42      	ldr	r2, [pc, #264]	; (8003d78 <Report_Callback+0x184>)
 8003c6e:	589a      	ldr	r2, [r3, r2]
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <Report_Callback+0x188>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f003 fc71 	bl	800755c <uart1_Printf>
	
		if (Send.Current_Page == Send.Last_Page)
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <Report_Callback+0x17c>)
 8003c7c:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <Report_Callback+0x18c>)
 8003c7e:	589a      	ldr	r2, [r3, r2]
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <Report_Callback+0x17c>)
 8003c82:	4940      	ldr	r1, [pc, #256]	; (8003d84 <Report_Callback+0x190>)
 8003c84:	585b      	ldr	r3, [r3, r1]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d116      	bne.n	8003cb8 <Report_Callback+0xc4>
		{
			debug_Printf("***  Send.Current_Page=Send.Last_Page=%d -- no pages\r\n", Send.Current_Page);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <Report_Callback+0x17c>)
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <Report_Callback+0x18c>)
 8003c8e:	589a      	ldr	r2, [r3, r2]
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <Report_Callback+0x194>)
 8003c92:	0011      	movs	r1, r2
 8003c94:	0018      	movs	r0, r3
 8003c96:	f003 fc61 	bl	800755c <uart1_Printf>
			Send.Nothing = true;
 8003c9a:	4a35      	ldr	r2, [pc, #212]	; (8003d70 <Report_Callback+0x17c>)
 8003c9c:	2385      	movs	r3, #133	; 0x85
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	54d1      	strb	r1, [r2, r3]
			xSemaphoreGive(flash_Mutex);			//  release it
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <Report_Callback+0x180>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	f7fc ff65 	bl	8000b7c <xQueueGenericSend>
			return	-1;								//	STOP: no more pages to read out
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	e056      	b.n	8003d66 <Report_Callback+0x172>
		}
													//	Advance to next page
		Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <Report_Callback+0x17c>)
 8003cba:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <Report_Callback+0x18c>)
 8003cbc:	589b      	ldr	r3, [r3, r2]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	0c1a      	lsrs	r2, r3, #16
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <Report_Callback+0x17c>)
 8003cc6:	492e      	ldr	r1, [pc, #184]	; (8003d80 <Report_Callback+0x18c>)
 8003cc8:	505a      	str	r2, [r3, r1]
		Send.Index = 0;								//	Start with first event of first page
 8003cca:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <Report_Callback+0x17c>)
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <Report_Callback+0x184>)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5099      	str	r1, [r3, r2]

		b = false;
 8003cd2:	230f      	movs	r3, #15
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
		while (!b)									//	Find next readable page...
 8003cda:	e03e      	b.n	8003d5a <Report_Callback+0x166>
		{
			b = Flash_Read_Page (Send.Current_Page, &Send.Data);
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <Report_Callback+0x17c>)
 8003cde:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <Report_Callback+0x18c>)
 8003ce0:	589b      	ldr	r3, [r3, r2]
 8003ce2:	001a      	movs	r2, r3
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	18fc      	adds	r4, r7, r3
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <Report_Callback+0x17c>)
 8003cea:	0019      	movs	r1, r3
 8003cec:	0010      	movs	r0, r2
 8003cee:	f7ff faef 	bl	80032d0 <Flash_Read_Page>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	7023      	strb	r3, [r4, #0]
			if ((!b) || (Send.Data.Uploaded != 0xFF))
 8003cf6:	230f      	movs	r3, #15
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <Report_Callback+0x116>
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <Report_Callback+0x17c>)
 8003d02:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <Report_Callback+0x198>)
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	2bff      	cmp	r3, #255	; 0xff
 8003d08:	d027      	beq.n	8003d5a <Report_Callback+0x166>
			{										//	Current Page is unreadable or uploaded: skip over it
				debug_Printf("***  Report_Callback Skipping Page: %d\r\n", Send.Current_Page);
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <Report_Callback+0x17c>)
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <Report_Callback+0x18c>)
 8003d0e:	589a      	ldr	r2, [r3, r2]
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <Report_Callback+0x19c>)
 8003d12:	0011      	movs	r1, r2
 8003d14:	0018      	movs	r0, r3
 8003d16:	f003 fc21 	bl	800755c <uart1_Printf>
				if (Send.Current_Page == Send.Last_Page)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <Report_Callback+0x17c>)
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <Report_Callback+0x18c>)
 8003d1e:	589a      	ldr	r2, [r3, r2]
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <Report_Callback+0x17c>)
 8003d22:	4918      	ldr	r1, [pc, #96]	; (8003d84 <Report_Callback+0x190>)
 8003d24:	585b      	ldr	r3, [r3, r1]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10e      	bne.n	8003d48 <Report_Callback+0x154>
				{
					Send.Nothing = true;
 8003d2a:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <Report_Callback+0x17c>)
 8003d2c:	2385      	movs	r3, #133	; 0x85
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	2101      	movs	r1, #1
 8003d32:	54d1      	strb	r1, [r2, r3]
					xSemaphoreGive(flash_Mutex);	//  release it
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <Report_Callback+0x180>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f7fc ff1d 	bl	8000b7c <xQueueGenericSend>
					return	-1;						//	STOP: nothing more to upload due to unreadable
 8003d42:	2301      	movs	r3, #1
 8003d44:	425b      	negs	r3, r3
 8003d46:	e00e      	b.n	8003d66 <Report_Callback+0x172>
				}
				Send.Current_Page = (1 + Send.Current_Page) & 0xFFFF;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <Report_Callback+0x17c>)
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <Report_Callback+0x18c>)
 8003d4c:	589b      	ldr	r3, [r3, r2]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	0c1a      	lsrs	r2, r3, #16
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <Report_Callback+0x17c>)
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <Report_Callback+0x18c>)
 8003d58:	505a      	str	r2, [r3, r1]
		while (!b)									//	Find next readable page...
 8003d5a:	230f      	movs	r3, #15
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0bb      	beq.n	8003cdc <Report_Callback+0xe8>
		if (Send.Index < EventsPerPage)
 8003d64:	e75b      	b.n	8003c1e <Report_Callback+0x2a>
			}
		}
	}
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b005      	add	sp, #20
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	20004964 	.word	0x20004964
 8003d74:	200051bc 	.word	0x200051bc
 8003d78:	0000084c 	.word	0x0000084c
 8003d7c:	08009d9c 	.word	0x08009d9c
 8003d80:	00000844 	.word	0x00000844
 8003d84:	00000848 	.word	0x00000848
 8003d88:	08009de0 	.word	0x08009de0
 8003d8c:	000007fb 	.word	0x000007fb
 8003d90:	08009e18 	.word	0x08009e18

08003d94 <Successful_Xfer_Callback>:


void Successful_Xfer_Callback()						//	All pages fully transferred, so far, during this 
{													//	  connection are marked as 'sent'.
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	xSemaphoreTake(flash_Mutex,portMAX_DELAY);
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <Successful_Xfer_Callback+0x8c>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	425a      	negs	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	2100      	movs	r1, #0
 8003da4:	f7fc ffcf 	bl	8000d46 <xQueueGenericReceive>
	Write_Status_Register (1, 0);					//	Enable FLASH writes to all pages
 8003da8:	2100      	movs	r1, #0
 8003daa:	2001      	movs	r0, #1
 8003dac:	f7ff f9ec 	bl	8003188 <Write_Status_Register>

	debug_Printf("***  Successful_Xfer_Callback - Marking all pages sent\r\n");
 8003db0:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <Successful_Xfer_Callback+0x90>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f003 fbd2 	bl	800755c <uart1_Printf>

	while (Send.First_Page < Send.Current_Page)
 8003db8:	e00f      	b.n	8003dda <Successful_Xfer_Callback+0x46>
	{
		Flash_Mark_Page_Sent (Send.First_Page);		//	Mark that page as done
 8003dba:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003dbc:	2384      	movs	r3, #132	; 0x84
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	58d3      	ldr	r3, [r2, r3]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7ff fd3c 	bl	8003840 <Flash_Mark_Page_Sent>
		Send.First_Page++;
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003dca:	2384      	movs	r3, #132	; 0x84
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	58d3      	ldr	r3, [r2, r3]
 8003dd0:	1c59      	adds	r1, r3, #1
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003dd4:	2384      	movs	r3, #132	; 0x84
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	50d1      	str	r1, [r2, r3]
	while (Send.First_Page < Send.Current_Page)
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003ddc:	2384      	movs	r3, #132	; 0x84
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	58d2      	ldr	r2, [r2, r3]
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003de4:	4911      	ldr	r1, [pc, #68]	; (8003e2c <Successful_Xfer_Callback+0x98>)
 8003de6:	585b      	ldr	r3, [r3, r1]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3e6      	bcc.n	8003dba <Successful_Xfer_Callback+0x26>
	}

	if (Send.Nothing == true)
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003dee:	2385      	movs	r3, #133	; 0x85
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <Successful_Xfer_Callback+0x70>
	{
		Flash_Mark_Page_Sent (Send.Last_Page);		//	Mark final page as done
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <Successful_Xfer_Callback+0x94>)
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <Successful_Xfer_Callback+0x9c>)
 8003dfc:	589b      	ldr	r3, [r3, r2]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fd1e 	bl	8003840 <Flash_Mark_Page_Sent>
	}

	Write_Status_Register (1, 0x7C);				//	Disable all FLASH writes -- write protected
 8003e04:	217c      	movs	r1, #124	; 0x7c
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7ff f9be 	bl	8003188 <Write_Status_Register>
	xSemaphoreGive(flash_Mutex);
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <Successful_Xfer_Callback+0x8c>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	2200      	movs	r2, #0
 8003e14:	2100      	movs	r1, #0
 8003e16:	f7fc feb1 	bl	8000b7c <xQueueGenericSend>
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200051bc 	.word	0x200051bc
 8003e24:	08009e44 	.word	0x08009e44
 8003e28:	20004964 	.word	0x20004964
 8003e2c:	00000844 	.word	0x00000844
 8003e30:	00000848 	.word	0x00000848

08003e34 <flash_Log>:


void flash_Log (int cause)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
	Event_t  Event;

	xSemaphoreTake(flash_Mutex,portMAX_DELAY);	//  lock it
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <flash_Log+0xd8>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	2301      	movs	r3, #1
 8003e42:	425a      	negs	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	2100      	movs	r1, #0
 8003e48:	f7fc ff7d 	bl	8000d46 <xQueueGenericReceive>
	Periodic = Config.Periodic_Event_Rate;		//	Force another event in x seconds, if nothing else happens
 8003e4c:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <flash_Log+0xdc>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <flash_Log+0xe0>)
 8003e52:	601a      	str	r2, [r3, #0]

	Event.TimeStamp = TheTime.Epoch;		//	Store time, Volts, and Temp of right now
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <flash_Log+0xe4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	230c      	movs	r3, #12
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	601a      	str	r2, [r3, #0]
	Event.mVolts = Current_Volts;			//	0.001 V
 8003e5e:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <flash_Log+0xe8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	230c      	movs	r3, #12
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	809a      	strh	r2, [r3, #4]
	Event.dTemp  = Current_Temp;			//	0.1 C
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <flash_Log+0xec>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	230c      	movs	r3, #12
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	80da      	strh	r2, [r3, #6]

	Last_Logged_Volts = Event.mVolts;
 8003e76:	230c      	movs	r3, #12
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	889b      	ldrh	r3, [r3, #4]
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <flash_Log+0xf0>)
 8003e80:	601a      	str	r2, [r3, #0]
	Last_Logged_Temp = Event.dTemp;
 8003e82:	230c      	movs	r3, #12
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	88db      	ldrh	r3, [r3, #6]
 8003e88:	001a      	movs	r2, r3
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <flash_Log+0xf4>)
 8003e8c:	601a      	str	r2, [r3, #0]

	Event.flags = cause;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	230c      	movs	r3, #12
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	811a      	strh	r2, [r3, #8]
	ThePage.Events[nEvents] = Event;
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <flash_Log+0xf8>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4924      	ldr	r1, [pc, #144]	; (8003f30 <flash_Log+0xfc>)
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	18ba      	adds	r2, r7, r2
 8003eaa:	18cb      	adds	r3, r1, r3
 8003eac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003eae:	c313      	stmia	r3!, {r0, r1, r4}

	if ((++nEvents >= EventsPerPage) || (cause == FLAG_FLUSH))
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <flash_Log+0xf8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <flash_Log+0xf8>)
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <flash_Log+0xf8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2ba9      	cmp	r3, #169	; 0xa9
 8003ec0:	dc04      	bgt.n	8003ecc <flash_Log+0x98>
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d101      	bne.n	8003ed0 <flash_Log+0x9c>
		Flash_Write_Events();
 8003ecc:	f7ff fd86 	bl	80039dc <Flash_Write_Events>
	xSemaphoreGive(flash_Mutex);			// give it back
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <flash_Log+0xd8>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f7fc fe4f 	bl	8000b7c <xQueueGenericSend>
#if 1
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003ede:	230c      	movs	r3, #12
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	6819      	ldr	r1, [r3, #0]
												  Event.mVolts,
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	889b      	ldrh	r3, [r3, #4]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003eea:	001a      	movs	r2, r3
												  Event.dTemp,
 8003eec:	230c      	movs	r3, #12
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	88db      	ldrh	r3, [r3, #6]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003ef2:	001c      	movs	r4, r3
												  Event.flags);
 8003ef4:	230c      	movs	r3, #12
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	891b      	ldrh	r3, [r3, #8]
	debug_Printf("**ts:%d, v:%d, t:%d, f:%04x\r\n", Event.TimeStamp,
 8003efa:	480e      	ldr	r0, [pc, #56]	; (8003f34 <flash_Log+0x100>)
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	0023      	movs	r3, r4
 8003f00:	f003 fb2c 	bl	800755c <uart1_Printf>
#endif
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b007      	add	sp, #28
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	200051bc 	.word	0x200051bc
 8003f10:	20005a68 	.word	0x20005a68
 8003f14:	20005a04 	.word	0x20005a04
 8003f18:	20005a20 	.word	0x20005a20
 8003f1c:	20005a3c 	.word	0x20005a3c
 8003f20:	20005a4c 	.word	0x20005a4c
 8003f24:	20005a60 	.word	0x20005a60
 8003f28:	20005a44 	.word	0x20005a44
 8003f2c:	200051b8 	.word	0x200051b8
 8003f30:	200051c0 	.word	0x200051c0
 8003f34:	08009e80 	.word	0x08009e80

08003f38 <Flash_Test>:


static void Flash_Test()				//	Performs a quick test of the FLASH device at POR
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	int  i;
	uint8  *ptr;
	ptr = (uint8 *)&ThePage;
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <Flash_Test+0xb4>)
 8003f40:	603b      	str	r3, [r7, #0]

	for (i=0; i<2048; i++)					//	'ThePage' gets generated test data
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	e00a      	b.n	8003f5e <Flash_Test+0x26>
		*ptr++ = 1+i;						//	 'aPage' gets Flash contents
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	603a      	str	r2, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	3201      	adds	r2, #1
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
	for (i=0; i<2048; i++)					//	'ThePage' gets generated test data
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <Flash_Test+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	ddf0      	ble.n	8003f48 <Flash_Test+0x10>

	if (Flash_Read_Page (TestPageNumber, &aPage))
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <Flash_Test+0xbc>)
 8003f68:	4a23      	ldr	r2, [pc, #140]	; (8003ff8 <Flash_Test+0xc0>)
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	0010      	movs	r0, r2
 8003f6e:	f7ff f9af 	bl	80032d0 <Flash_Read_Page>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d008      	beq.n	8003f88 <Flash_Test+0x50>
		if (!memcmp (&ThePage, &aPage, 2048))
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	491e      	ldr	r1, [pc, #120]	; (8003ff4 <Flash_Test+0xbc>)
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <Flash_Test+0xb4>)
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f003 fe44 	bl	8007c0c <memcmp>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d02c      	beq.n	8003fe2 <Flash_Test+0xaa>
			return;							//	ThePage == aPage:  Flash already has the test data, and works

	Write_Status_Register (1, 0);			//	Enable FLASH writes to all pages
 8003f88:	2100      	movs	r1, #0
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7ff f8fc 	bl	8003188 <Write_Status_Register>

	Flash_Erase_Block (TestPageNumber);		//	Erase the block containing the test page
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <Flash_Test+0xc0>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff f95f 	bl	8003256 <Flash_Erase_Block>
											//	Note: ThePage still has the test data in it
	ThePage.Spare[0].BadBlock = 0;
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <Flash_Test+0xb4>)
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[1].BadBlock = 0;			//	Mark the Test Page as no good for normal use
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <Flash_Test+0xb4>)
 8003fa4:	2381      	movs	r3, #129	; 0x81
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[2].BadBlock = 0;
 8003fac:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <Flash_Test+0xb4>)
 8003fae:	2382      	movs	r3, #130	; 0x82
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	52d1      	strh	r1, [r2, r3]
	ThePage.Spare[3].BadBlock = 0;
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <Flash_Test+0xb4>)
 8003fb8:	2383      	movs	r3, #131	; 0x83
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	52d1      	strh	r1, [r2, r3]

	if (! Flash_Write_Page (TestPageNumber))
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <Flash_Test+0xc0>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff f9cc 	bl	8003360 <Flash_Write_Page>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d105      	bne.n	8003fd8 <Flash_Test+0xa0>
		Board_Fails |= FLASH_FAIL;			//	Performs write of ThePage, read-back into aPage, and comparison
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <Flash_Test+0xc4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <Flash_Test+0xc4>)
 8003fd6:	601a      	str	r2, [r3, #0]

	Write_Status_Register (1, 0x7C);		//	Disable all FLASH writes -- write protected
 8003fd8:	217c      	movs	r1, #124	; 0x7c
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f7ff f8d4 	bl	8003188 <Write_Status_Register>
 8003fe0:	e000      	b.n	8003fe4 <Flash_Test+0xac>
			return;							//	ThePage == aPage:  Flash already has the test data, and works
 8003fe2:	46c0      	nop			; (mov r8, r8)
}
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	200051c0 	.word	0x200051c0
 8003ff0:	000007ff 	.word	0x000007ff
 8003ff4:	20002040 	.word	0x20002040
 8003ff8:	0000ff80 	.word	0x0000ff80
 8003ffc:	20005a14 	.word	0x20005a14

08004000 <Flash_Init>:


void Flash_Init()
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
	SPI1_Init();			//	Interface to external flash memory
 8004004:	f7fe fe5e 	bl	8002cc4 <SPI1_Init>
	Flash_Wait();			//	Make sure Flash is idle
 8004008:	f7fe ff9c 	bl	8002f44 <Flash_Wait>
	Flash_Enable();
 800400c:	f7fe ff80 	bl	8002f10 <Flash_Enable>
	SPI_Write (0xFF);		//	Perform a DEVICE RESET of the Flash
 8004010:	20ff      	movs	r0, #255	; 0xff
 8004012:	f7fe fea7 	bl	8002d64 <SPI_Write>
	Flash_Disable();
 8004016:	f7fe ff88 	bl	8002f2a <Flash_Disable>
	Flash_Read_Unique_ID();
 800401a:	f7ff fa57 	bl	80034cc <Flash_Read_Unique_ID>
	Flash_Test();
 800401e:	f7ff ff8b 	bl	8003f38 <Flash_Test>

	memset (&ThePage, 0xFF, sizeof(ThePage));
 8004022:	2384      	movs	r3, #132	; 0x84
 8004024:	011a      	lsls	r2, r3, #4
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <Flash_Init+0x54>)
 8004028:	21ff      	movs	r1, #255	; 0xff
 800402a:	0018      	movs	r0, r3
 800402c:	f003 fe06 	bl	8007c3c <memset>
	nEvents = 0;
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <Flash_Init+0x58>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
	Send.Nothing = true;
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <Flash_Init+0x5c>)
 8004038:	2385      	movs	r3, #133	; 0x85
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	54d1      	strb	r1, [r2, r3]
	flash_Mutex = xSemaphoreCreateMutex(); // initialize the mutex for access to flash
 8004040:	2001      	movs	r0, #1
 8004042:	f7fc fd56 	bl	8000af2 <xQueueCreateMutex>
 8004046:	0002      	movs	r2, r0
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <Flash_Init+0x60>)
 800404a:	601a      	str	r2, [r3, #0]
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	200051c0 	.word	0x200051c0
 8004058:	200051b8 	.word	0x200051b8
 800405c:	20004964 	.word	0x20004964
 8004060:	200051bc 	.word	0x200051bc

08004064 <LED_ON>:
  * @brief	Turn specified LED on
  * @param	None
  * @retval None
  */
void LED_ON (int LED_pin)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	GPIO_WriteBit (GPIOB, LED_pin, Bit_RESET);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	b29b      	uxth	r3, r3
 8004070:	4804      	ldr	r0, [pc, #16]	; (8004084 <LED_ON+0x20>)
 8004072:	2200      	movs	r2, #0
 8004074:	0019      	movs	r1, r3
 8004076:	f7fe f97e 	bl	8002376 <GPIO_WriteBit>
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	48000400 	.word	0x48000400

08004088 <LED_OFF>:
  * @brief	Turn specified LED off
  * @param	None
  * @retval None
  */
void LED_OFF (int LED_pin)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	GPIO_WriteBit (GPIOB, LED_pin, Bit_SET);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b29b      	uxth	r3, r3
 8004094:	4804      	ldr	r0, [pc, #16]	; (80040a8 <LED_OFF+0x20>)
 8004096:	2201      	movs	r2, #1
 8004098:	0019      	movs	r1, r3
 800409a:	f7fe f96c 	bl	8002376 <GPIO_WriteBit>
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	48000400 	.word	0x48000400

080040ac <Modem_Init>:




void Modem_Init()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	uart5_Init();		//	CELL MODEM UART
 80040b0:	f003 fb26 	bl	8007700 <uart5_Init>
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <START_I2C>:
	 1958,  1912,  1868,  1824,  1782,  1741,  1701,  1662,  1624,  1587
};


static void START_I2C()
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	af00      	add	r7, sp, #0
	TEMP_SDA(1);				//	Send repeated-start if necessary
 80040be:	2001      	movs	r0, #1
 80040c0:	f001 ffa8 	bl	8006014 <TEMP_SDA>
	TEMP_SCL(1);
 80040c4:	2001      	movs	r0, #1
 80040c6:	f001 ff8f 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(3);
 80040ca:	2003      	movs	r0, #3
 80040cc:	f002 f9d0 	bl	8006470 <uS_Delay>
	TEMP_SDA(0);				//	Do START bit
 80040d0:	2000      	movs	r0, #0
 80040d2:	f001 ff9f 	bl	8006014 <TEMP_SDA>
	uS_Delay(3);
 80040d6:	2003      	movs	r0, #3
 80040d8:	f002 f9ca 	bl	8006470 <uS_Delay>
	TEMP_SCL(0);
 80040dc:	2000      	movs	r0, #0
 80040de:	f001 ff83 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(5);
 80040e2:	2005      	movs	r0, #5
 80040e4:	f002 f9c4 	bl	8006470 <uS_Delay>
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <STOP_I2C>:


static void STOP_I2C()
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	af00      	add	r7, sp, #0
	TEMP_SDA(0);
 80040f2:	2000      	movs	r0, #0
 80040f4:	f001 ff8e 	bl	8006014 <TEMP_SDA>
	uS_Delay(3);
 80040f8:	2003      	movs	r0, #3
 80040fa:	f002 f9b9 	bl	8006470 <uS_Delay>
	TEMP_SCL(1);
 80040fe:	2001      	movs	r0, #1
 8004100:	f001 ff72 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(3);
 8004104:	2003      	movs	r0, #3
 8004106:	f002 f9b3 	bl	8006470 <uS_Delay>
	TEMP_SDA(1);
 800410a:	2001      	movs	r0, #1
 800410c:	f001 ff82 	bl	8006014 <TEMP_SDA>
	uS_Delay(5);
 8004110:	2005      	movs	r0, #5
 8004112:	f002 f9ad 	bl	8006470 <uS_Delay>
}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <ACK_I2C>:


static void ACK_I2C()			//	ACK ==> continue reading
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
	TEMP_SDA(0);
 8004120:	2000      	movs	r0, #0
 8004122:	f001 ff77 	bl	8006014 <TEMP_SDA>
	TEMP_SCL(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f001 ff5e 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(3);
 800412c:	2003      	movs	r0, #3
 800412e:	f002 f99f 	bl	8006470 <uS_Delay>
	TEMP_SCL(0);
 8004132:	2000      	movs	r0, #0
 8004134:	f001 ff58 	bl	8005fe8 <TEMP_SCL>
	TEMP_SDA(1);				//	allow slave's data to come in again
 8004138:	2001      	movs	r0, #1
 800413a:	f001 ff6b 	bl	8006014 <TEMP_SDA>
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <NACK_I2C>:


static void NACK_I2C()			//	NACK ==> discontinue read
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
	TEMP_SDA(1);
 8004148:	2001      	movs	r0, #1
 800414a:	f001 ff63 	bl	8006014 <TEMP_SDA>
	uS_Delay(3);
 800414e:	2003      	movs	r0, #3
 8004150:	f002 f98e 	bl	8006470 <uS_Delay>
	TEMP_SCL(1);
 8004154:	2001      	movs	r0, #1
 8004156:	f001 ff47 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(3);
 800415a:	2003      	movs	r0, #3
 800415c:	f002 f988 	bl	8006470 <uS_Delay>
	TEMP_SCL(0);
 8004160:	2000      	movs	r0, #0
 8004162:	f001 ff41 	bl	8005fe8 <TEMP_SCL>
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <WRITE_I2C_BYTE>:


static bool WRITE_I2C_BYTE (int c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	int  n;
	bool b;

	for (n=0; n<8; n++)
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e019      	b.n	80041ae <WRITE_I2C_BYTE+0x42>
	{
		if (c & 0x80)			//	Shift out the data, MSB first...
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	4013      	ands	r3, r2
 8004180:	d003      	beq.n	800418a <WRITE_I2C_BYTE+0x1e>
			TEMP_SDA(1);
 8004182:	2001      	movs	r0, #1
 8004184:	f001 ff46 	bl	8006014 <TEMP_SDA>
 8004188:	e002      	b.n	8004190 <WRITE_I2C_BYTE+0x24>
		else
			TEMP_SDA(0);
 800418a:	2000      	movs	r0, #0
 800418c:	f001 ff42 	bl	8006014 <TEMP_SDA>

		c <<= 1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	607b      	str	r3, [r7, #4]
		TEMP_SCL(1);
 8004196:	2001      	movs	r0, #1
 8004198:	f001 ff26 	bl	8005fe8 <TEMP_SCL>
		uS_Delay(3);
 800419c:	2003      	movs	r0, #3
 800419e:	f002 f967 	bl	8006470 <uS_Delay>
		TEMP_SCL(0);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f001 ff20 	bl	8005fe8 <TEMP_SCL>
	for (n=0; n<8; n++)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	dde2      	ble.n	800417a <WRITE_I2C_BYTE+0xe>
	}
	TEMP_SDA(1);				//	Set data line HI so ACK can come in
 80041b4:	2001      	movs	r0, #1
 80041b6:	f001 ff2d 	bl	8006014 <TEMP_SDA>
	uS_Delay(3);
 80041ba:	2003      	movs	r0, #3
 80041bc:	f002 f958 	bl	8006470 <uS_Delay>
	TEMP_SCL(1);				//	Clock in the device's ACK bit
 80041c0:	2001      	movs	r0, #1
 80041c2:	f001 ff11 	bl	8005fe8 <TEMP_SCL>
	uS_Delay(5);
 80041c6:	2005      	movs	r0, #5
 80041c8:	f002 f952 	bl	8006470 <uS_Delay>
	b = true;
 80041cc:	230b      	movs	r3, #11
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
	if (TEMP_DAT)
 80041d4:	2390      	movs	r3, #144	; 0x90
 80041d6:	05db      	lsls	r3, r3, #23
 80041d8:	8a1b      	ldrh	r3, [r3, #16]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	001a      	movs	r2, r3
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4013      	ands	r3, r2
 80041e4:	d003      	beq.n	80041ee <WRITE_I2C_BYTE+0x82>
		b = false;
 80041e6:	230b      	movs	r3, #11
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
	TEMP_SCL(0);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f001 fefa 	bl	8005fe8 <TEMP_SCL>
	return	b;
 80041f4:	230b      	movs	r3, #11
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bd80      	pop	{r7, pc}

08004202 <READ_I2C_BYTE>:


static int READ_I2C_BYTE()
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
	int	n=8;
 8004208:	2308      	movs	r3, #8
 800420a:	607b      	str	r3, [r7, #4]
	int c=0;
 800420c:	2300      	movs	r3, #0
 800420e:	603b      	str	r3, [r7, #0]

	while (--n >= 0)
 8004210:	e017      	b.n	8004242 <READ_I2C_BYTE+0x40>
	{
		c <<= 1;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	603b      	str	r3, [r7, #0]
		if (TEMP_DAT)			//	Shift in the data, MSB first...
 8004218:	2390      	movs	r3, #144	; 0x90
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	8a1b      	ldrh	r3, [r3, #16]
 800421e:	b29b      	uxth	r3, r3
 8004220:	001a      	movs	r2, r3
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4013      	ands	r3, r2
 8004228:	d002      	beq.n	8004230 <READ_I2C_BYTE+0x2e>
			c++;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	603b      	str	r3, [r7, #0]
		TEMP_SCL(1);
 8004230:	2001      	movs	r0, #1
 8004232:	f001 fed9 	bl	8005fe8 <TEMP_SCL>
		uS_Delay(3);
 8004236:	2003      	movs	r0, #3
 8004238:	f002 f91a 	bl	8006470 <uS_Delay>
		TEMP_SCL(0);
 800423c:	2000      	movs	r0, #0
 800423e:	f001 fed3 	bl	8005fe8 <TEMP_SCL>
	while (--n >= 0)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3b01      	subs	r3, #1
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	dae1      	bge.n	8004212 <READ_I2C_BYTE+0x10>
	}
	return	c;
 800424e:	683b      	ldr	r3, [r7, #0]
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <Read_Temperature>:


bool Read_Temperature (uint32 *v)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	bool	b;
	uint32  a;
	int		msb, lsb;

	a = 0x29;						//	Perform a read access
 8004260:	2329      	movs	r3, #41	; 0x29
 8004262:	617b      	str	r3, [r7, #20]
	if (Set_Temp_Update_Rate)
 8004264:	4b37      	ldr	r3, [pc, #220]	; (8004344 <Read_Temperature+0xec>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <Read_Temperature+0x1a>
		a--;						//	If time to set the update rate, make it a write access
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3b01      	subs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]

	START_I2C();
 8004272:	f7ff ff22 	bl	80040ba <START_I2C>
	b = WRITE_I2C_BYTE (a);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2213      	movs	r2, #19
 800427a:	18bc      	adds	r4, r7, r2
 800427c:	0018      	movs	r0, r3
 800427e:	f7ff ff75 	bl	800416c <WRITE_I2C_BYTE>
 8004282:	0003      	movs	r3, r0
 8004284:	7023      	strb	r3, [r4, #0]
	if (!b)
 8004286:	2313      	movs	r3, #19
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <Read_Temperature+0x40>
	{
		STOP_I2C();					//	A/D still converting: close the bus transaction and exit
 8004290:	f7ff ff2d 	bl	80040ee <STOP_I2C>
		return	false;
 8004294:	2300      	movs	r3, #0
 8004296:	e051      	b.n	800433c <Read_Temperature+0xe4>
	}

	if (Set_Temp_Update_Rate)
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <Read_Temperature+0xec>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <Read_Temperature+0x8a>
	{
		Set_Temp_Update_Rate = false;
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <Read_Temperature+0xec>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
		b = WRITE_I2C_BYTE (1);		//	Set conversion rate to 30 Hz
 80042a6:	2313      	movs	r3, #19
 80042a8:	18fc      	adds	r4, r7, r3
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7ff ff5e 	bl	800416c <WRITE_I2C_BYTE>
 80042b0:	0003      	movs	r3, r0
 80042b2:	7023      	strb	r3, [r4, #0]
		START_I2C();				//	This is actually a repeated-start condition
 80042b4:	f7ff ff01 	bl	80040ba <START_I2C>
		b &= WRITE_I2C_BYTE(0x29);	//	Address the A/D again, for a read access
 80042b8:	2029      	movs	r0, #41	; 0x29
 80042ba:	f7ff ff57 	bl	800416c <WRITE_I2C_BYTE>
 80042be:	0003      	movs	r3, r0
 80042c0:	0019      	movs	r1, r3
 80042c2:	2313      	movs	r3, #19
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	2213      	movs	r2, #19
 80042c8:	18ba      	adds	r2, r7, r2
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	400a      	ands	r2, r1
 80042ce:	701a      	strb	r2, [r3, #0]

		if (!b)
 80042d0:	2313      	movs	r3, #19
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <Read_Temperature+0x8a>
		{
			STOP_I2C();				//	A/D stopped talking: close the bus transaction and exit
 80042da:	f7ff ff08 	bl	80040ee <STOP_I2C>
			return	false;
 80042de:	2300      	movs	r3, #0
 80042e0:	e02c      	b.n	800433c <Read_Temperature+0xe4>
		}
	}

	msb = READ_I2C_BYTE();			//	MSB of result
 80042e2:	f7ff ff8e 	bl	8004202 <READ_I2C_BYTE>
 80042e6:	0003      	movs	r3, r0
 80042e8:	60fb      	str	r3, [r7, #12]
	ACK_I2C();
 80042ea:	f7ff ff17 	bl	800411c <ACK_I2C>
	lsb = READ_I2C_BYTE();			//	LSB of result
 80042ee:	f7ff ff88 	bl	8004202 <READ_I2C_BYTE>
 80042f2:	0003      	movs	r3, r0
 80042f4:	60bb      	str	r3, [r7, #8]
	NACK_I2C();
 80042f6:	f7ff ff25 	bl	8004144 <NACK_I2C>
	STOP_I2C();
 80042fa:	f7ff fef8 	bl	80040ee <STOP_I2C>

	a = msb & 0xFF;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	4013      	ands	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
	a <<= 8;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	617b      	str	r3, [r7, #20]
	a += lsb & 0xFF;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	22ff      	movs	r2, #255	; 0xff
 8004310:	4013      	ands	r3, r2
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	617b      	str	r3, [r7, #20]
	*v = a;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	601a      	str	r2, [r3, #0]

	if (a >= Temp_Table[0])
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <Read_Temperature+0xf0>)
 8004320:	001a      	movs	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d801      	bhi.n	800432c <Read_Temperature+0xd4>
		return	false;				//	Reading too high
 8004328:	2300      	movs	r3, #0
 800432a:	e007      	b.n	800433c <Read_Temperature+0xe4>
	if (a <= Temp_Table[Temp_Table_Size-1])
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <Read_Temperature+0xf4>)
 800432e:	001a      	movs	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	429a      	cmp	r2, r3
 8004334:	d301      	bcc.n	800433a <Read_Temperature+0xe2>
		return	false;				//	Reading too low
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <Read_Temperature+0xe4>

	return	true;					//	Valid reading
 800433a:	2301      	movs	r3, #1
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b007      	add	sp, #28
 8004342:	bd90      	pop	{r4, r7, pc}
 8004344:	20005a08 	.word	0x20005a08
 8004348:	0000c5c8 	.word	0x0000c5c8
 800434c:	00000633 	.word	0x00000633

08004350 <Get_Temperature>:


int  Get_Temperature()				//	OUT:	battery temperature, averaged over previous second.  LSB= 0.1 C
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
	int32  v, t, i;
	int32  a, b;

	if (nV > 0)
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <Get_Temperature+0xd8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd0a      	ble.n	8004374 <Get_Temperature+0x24>
		v = sumV / nV;
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <Get_Temperature+0xdc>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <Get_Temperature+0xd8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0019      	movs	r1, r3
 8004368:	0010      	movs	r0, r2
 800436a:	f7fb ff67 	bl	800023c <__divsi3>
 800436e:	0003      	movs	r3, r0
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e002      	b.n	800437a <Get_Temperature+0x2a>
	else
		v = AvgV;					//	No average available: use last second's value
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <Get_Temperature+0xe0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]

	AvgV = v;
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <Get_Temperature+0xe0>)
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	601a      	str	r2, [r3, #0]
	sumV = 0;						//	Ready for next average
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <Get_Temperature+0xdc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
	nV = 0;
 8004386:	4b28      	ldr	r3, [pc, #160]	; (8004428 <Get_Temperature+0xd8>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

	if ((uint16)v >= Temp_Table[0])
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <Get_Temperature+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d301      	bcc.n	800439a <Get_Temperature+0x4a>
		return	0;					//	Temp is 0 or less
 8004396:	2300      	movs	r3, #0
 8004398:	e042      	b.n	8004420 <Get_Temperature+0xd0>

	for (i=1; i<Temp_Table_Size; i++)
 800439a:	2301      	movs	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e00a      	b.n	80043b6 <Get_Temperature+0x66>
		if (Temp_Table[i] <= v)
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <Get_Temperature+0xe8>)
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	0052      	lsls	r2, r2, #1
 80043a6:	5ad3      	ldrh	r3, [r2, r3]
 80043a8:	001a      	movs	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	dd06      	ble.n	80043be <Get_Temperature+0x6e>
	for (i=1; i<Temp_Table_Size; i++)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3301      	adds	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b8b      	cmp	r3, #139	; 0x8b
 80043ba:	ddf1      	ble.n	80043a0 <Get_Temperature+0x50>
 80043bc:	e000      	b.n	80043c0 <Get_Temperature+0x70>
			break;					//	Temp is between [i-1] and [i]
 80043be:	46c0      	nop			; (mov r8, r8)

	if (i >= Temp_Table_Size)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b8b      	cmp	r3, #139	; 0x8b
 80043c4:	dd01      	ble.n	80043ca <Get_Temperature+0x7a>
		return	139;				//	Temp is 139 or greater
 80043c6:	238b      	movs	r3, #139	; 0x8b
 80043c8:	e02a      	b.n	8004420 <Get_Temperature+0xd0>

	a = Temp_Table[i-1];			//	Temp is between i-1 and i  (degrees C)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <Get_Temperature+0xe8>)
 80043d0:	0052      	lsls	r2, r2, #1
 80043d2:	5ad3      	ldrh	r3, [r2, r3]
 80043d4:	60fb      	str	r3, [r7, #12]
	b = a - Temp_Table[i];			//	B = distance from [i-1] to [i]
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <Get_Temperature+0xe8>)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	0052      	lsls	r2, r2, #1
 80043dc:	5ad3      	ldrh	r3, [r2, r3]
 80043de:	001a      	movs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]
	t = (i-1) * 10;					//	Store the whole-degrees part	LSB = 0.1 C
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	0013      	movs	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	607b      	str	r3, [r7, #4]

	i = (((a-v)*10)+(b>>1)) / b;	//	Fractional degrees, rounded off   (tenths)
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	0013      	movs	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	001a      	movs	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	105b      	asrs	r3, r3, #1
 8004408:	18d3      	adds	r3, r2, r3
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	0018      	movs	r0, r3
 800440e:	f7fb ff15 	bl	800023c <__divsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]
	t += i;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	607b      	str	r3, [r7, #4]
	return	t;						//	Full temperature	LSB = 0.1 C
 800441e:	687b      	ldr	r3, [r7, #4]
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b006      	add	sp, #24
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200028cc 	.word	0x200028cc
 800442c:	200028c8 	.word	0x200028c8
 8004430:	200028d0 	.word	0x200028d0
 8004434:	0000c5c8 	.word	0x0000c5c8
 8004438:	0800a7a8 	.word	0x0800a7a8

0800443c <Handle_Temp>:


void Handle_Temp()
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
	uint32  t;

	Need_Temp = false;
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <Handle_Temp+0x3c>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
	if (Read_Temperature (&t))		//	Ignore process if data not available yet
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff ff04 	bl	8004258 <Read_Temperature>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d00c      	beq.n	800446e <Handle_Temp+0x32>
	{
		sumV += t;					//	Add to the average
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <Handle_Temp+0x40>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	001a      	movs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	001a      	movs	r2, r3
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <Handle_Temp+0x40>)
 8004462:	601a      	str	r2, [r3, #0]
		nV++;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <Handle_Temp+0x44>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <Handle_Temp+0x44>)
 800446c:	601a      	str	r2, [r3, #0]
			if (t < 32757 || t > 32760)
				debug_Printf("*** t: %d ***\r\n", t);
		}
#endif
	}
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20005a34 	.word	0x20005a34
 800447c:	200028c8 	.word	0x200028c8
 8004480:	200028cc 	.word	0x200028cc

08004484 <Temperature_Init>:


void Temperature_Init()
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
	uint32  v;

	STOP_I2C();
 800448a:	f7ff fe30 	bl	80040ee <STOP_I2C>

	nV = 0;
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <Temperature_Init+0x5c>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
	sumV = 0;
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <Temperature_Init+0x60>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
	AvgV = 0;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <Temperature_Init+0x64>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
	Read_Temperature (&v);		//	Read 3 times...
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7ff fed8 	bl	8004258 <Read_Temperature>
	uS_Delay(100000);
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <Temperature_Init+0x68>)
 80044aa:	0018      	movs	r0, r3
 80044ac:	f001 ffe0 	bl	8006470 <uS_Delay>
	Read_Temperature (&v);
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7ff fed0 	bl	8004258 <Read_Temperature>
	uS_Delay(100000);
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <Temperature_Init+0x68>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f001 ffd8 	bl	8006470 <uS_Delay>
	if (!Read_Temperature (&v))
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7ff fec8 	bl	8004258 <Read_Temperature>
 80044c8:	1e03      	subs	r3, r0, #0
 80044ca:	d105      	bne.n	80044d8 <Temperature_Init+0x54>
		Board_Fails |= TEMP_FAIL;	//	Reading is out of range on the third try
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <Temperature_Init+0x6c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	431a      	orrs	r2, r3
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <Temperature_Init+0x6c>)
 80044d6:	601a      	str	r2, [r3, #0]
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200028cc 	.word	0x200028cc
 80044e4:	200028c8 	.word	0x200028c8
 80044e8:	200028d0 	.word	0x200028d0
 80044ec:	000186a0 	.word	0x000186a0
 80044f0:	20005a14 	.word	0x20005a14

080044f4 <START_I2C>:
static uint32	AbsMaxV;		//	Absolute maximum valid Voltage, given the battery size
static uint32	AbsMinV;		//	Absolute minimum valid Voltage, given the battery size


static void START_I2C()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
	VOLT_SDA(1);				//	Send repeated-start if necessary
 80044f8:	2001      	movs	r0, #1
 80044fa:	f001 fdb7 	bl	800606c <VOLT_SDA>
	VOLT_SCL(1);
 80044fe:	2001      	movs	r0, #1
 8004500:	f001 fd9e 	bl	8006040 <VOLT_SCL>
	uS_Delay(3);
 8004504:	2003      	movs	r0, #3
 8004506:	f001 ffb3 	bl	8006470 <uS_Delay>
	VOLT_SDA(0);				//	Do START bit
 800450a:	2000      	movs	r0, #0
 800450c:	f001 fdae 	bl	800606c <VOLT_SDA>
	uS_Delay(3);
 8004510:	2003      	movs	r0, #3
 8004512:	f001 ffad 	bl	8006470 <uS_Delay>
	VOLT_SCL(0);
 8004516:	2000      	movs	r0, #0
 8004518:	f001 fd92 	bl	8006040 <VOLT_SCL>
	uS_Delay(5);
 800451c:	2005      	movs	r0, #5
 800451e:	f001 ffa7 	bl	8006470 <uS_Delay>
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <STOP_I2C>:


static void STOP_I2C()
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	VOLT_SDA(0);
 800452c:	2000      	movs	r0, #0
 800452e:	f001 fd9d 	bl	800606c <VOLT_SDA>
	uS_Delay(3);
 8004532:	2003      	movs	r0, #3
 8004534:	f001 ff9c 	bl	8006470 <uS_Delay>
	VOLT_SCL(1);
 8004538:	2001      	movs	r0, #1
 800453a:	f001 fd81 	bl	8006040 <VOLT_SCL>
	uS_Delay(3);
 800453e:	2003      	movs	r0, #3
 8004540:	f001 ff96 	bl	8006470 <uS_Delay>
	VOLT_SDA(1);
 8004544:	2001      	movs	r0, #1
 8004546:	f001 fd91 	bl	800606c <VOLT_SDA>
	uS_Delay(5);
 800454a:	2005      	movs	r0, #5
 800454c:	f001 ff90 	bl	8006470 <uS_Delay>
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <ACK_I2C>:


static void ACK_I2C()			//	ACK ==> continue reading
{
 8004556:	b580      	push	{r7, lr}
 8004558:	af00      	add	r7, sp, #0
	VOLT_SDA(0);
 800455a:	2000      	movs	r0, #0
 800455c:	f001 fd86 	bl	800606c <VOLT_SDA>
	VOLT_SCL(1);
 8004560:	2001      	movs	r0, #1
 8004562:	f001 fd6d 	bl	8006040 <VOLT_SCL>
	uS_Delay(3);
 8004566:	2003      	movs	r0, #3
 8004568:	f001 ff82 	bl	8006470 <uS_Delay>
	VOLT_SCL(0);
 800456c:	2000      	movs	r0, #0
 800456e:	f001 fd67 	bl	8006040 <VOLT_SCL>
	VOLT_SDA(1);				//	allow slave's data to come in again
 8004572:	2001      	movs	r0, #1
 8004574:	f001 fd7a 	bl	800606c <VOLT_SDA>
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <NACK_I2C>:


static void NACK_I2C()			//	NACK ==> discontinue read
{
 800457e:	b580      	push	{r7, lr}
 8004580:	af00      	add	r7, sp, #0
	VOLT_SDA(1);
 8004582:	2001      	movs	r0, #1
 8004584:	f001 fd72 	bl	800606c <VOLT_SDA>
	uS_Delay(3);
 8004588:	2003      	movs	r0, #3
 800458a:	f001 ff71 	bl	8006470 <uS_Delay>
	VOLT_SCL(1);
 800458e:	2001      	movs	r0, #1
 8004590:	f001 fd56 	bl	8006040 <VOLT_SCL>
	uS_Delay(3);
 8004594:	2003      	movs	r0, #3
 8004596:	f001 ff6b 	bl	8006470 <uS_Delay>
	VOLT_SCL(0);
 800459a:	2000      	movs	r0, #0
 800459c:	f001 fd50 	bl	8006040 <VOLT_SCL>
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <WRITE_I2C_BYTE>:


static bool WRITE_I2C_BYTE (int c)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
	int  n;
	bool b;

	for (n=0; n<8; n++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e019      	b.n	80045e8 <WRITE_I2C_BYTE+0x42>
	{
		if (c & 0x80)			//	Shift out the data, MSB first...
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	4013      	ands	r3, r2
 80045ba:	d003      	beq.n	80045c4 <WRITE_I2C_BYTE+0x1e>
			VOLT_SDA(1);
 80045bc:	2001      	movs	r0, #1
 80045be:	f001 fd55 	bl	800606c <VOLT_SDA>
 80045c2:	e002      	b.n	80045ca <WRITE_I2C_BYTE+0x24>
		else
			VOLT_SDA(0);
 80045c4:	2000      	movs	r0, #0
 80045c6:	f001 fd51 	bl	800606c <VOLT_SDA>

		c <<= 1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	607b      	str	r3, [r7, #4]
		VOLT_SCL(1);
 80045d0:	2001      	movs	r0, #1
 80045d2:	f001 fd35 	bl	8006040 <VOLT_SCL>
		uS_Delay(3);
 80045d6:	2003      	movs	r0, #3
 80045d8:	f001 ff4a 	bl	8006470 <uS_Delay>
		VOLT_SCL(0);
 80045dc:	2000      	movs	r0, #0
 80045de:	f001 fd2f 	bl	8006040 <VOLT_SCL>
	for (n=0; n<8; n++)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3301      	adds	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	dde2      	ble.n	80045b4 <WRITE_I2C_BYTE+0xe>
	}
	VOLT_SDA(1);				//	Set data line HI so ACK can come in
 80045ee:	2001      	movs	r0, #1
 80045f0:	f001 fd3c 	bl	800606c <VOLT_SDA>
	uS_Delay(3);
 80045f4:	2003      	movs	r0, #3
 80045f6:	f001 ff3b 	bl	8006470 <uS_Delay>
	VOLT_SCL(1);				//	Clock in the device's ACK bit
 80045fa:	2001      	movs	r0, #1
 80045fc:	f001 fd20 	bl	8006040 <VOLT_SCL>
	uS_Delay(5);
 8004600:	2005      	movs	r0, #5
 8004602:	f001 ff35 	bl	8006470 <uS_Delay>
	b = true;
 8004606:	230b      	movs	r3, #11
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
	if (VOLT_DAT)
 800460e:	2390      	movs	r3, #144	; 0x90
 8004610:	05db      	lsls	r3, r3, #23
 8004612:	8a1b      	ldrh	r3, [r3, #16]
 8004614:	b29b      	uxth	r3, r3
 8004616:	001a      	movs	r2, r3
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	015b      	lsls	r3, r3, #5
 800461c:	4013      	ands	r3, r2
 800461e:	d003      	beq.n	8004628 <WRITE_I2C_BYTE+0x82>
		b = false;
 8004620:	230b      	movs	r3, #11
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
	VOLT_SCL(0);
 8004628:	2000      	movs	r0, #0
 800462a:	f001 fd09 	bl	8006040 <VOLT_SCL>
	return	b;
 800462e:	230b      	movs	r3, #11
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b004      	add	sp, #16
 800463a:	bd80      	pop	{r7, pc}

0800463c <READ_I2C_BYTE>:


static int READ_I2C_BYTE()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
	int	n=8;
 8004642:	2308      	movs	r3, #8
 8004644:	607b      	str	r3, [r7, #4]
	int c=0;
 8004646:	2300      	movs	r3, #0
 8004648:	603b      	str	r3, [r7, #0]

	while (--n >= 0)
 800464a:	e017      	b.n	800467c <READ_I2C_BYTE+0x40>
	{
		c <<= 1;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	603b      	str	r3, [r7, #0]
		if (VOLT_DAT)			//	Shift in the data, MSB first...
 8004652:	2390      	movs	r3, #144	; 0x90
 8004654:	05db      	lsls	r3, r3, #23
 8004656:	8a1b      	ldrh	r3, [r3, #16]
 8004658:	b29b      	uxth	r3, r3
 800465a:	001a      	movs	r2, r3
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	015b      	lsls	r3, r3, #5
 8004660:	4013      	ands	r3, r2
 8004662:	d002      	beq.n	800466a <READ_I2C_BYTE+0x2e>
			c++;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	603b      	str	r3, [r7, #0]
		VOLT_SCL(1);
 800466a:	2001      	movs	r0, #1
 800466c:	f001 fce8 	bl	8006040 <VOLT_SCL>
		uS_Delay(3);
 8004670:	2003      	movs	r0, #3
 8004672:	f001 fefd 	bl	8006470 <uS_Delay>
		VOLT_SCL(0);
 8004676:	2000      	movs	r0, #0
 8004678:	f001 fce2 	bl	8006040 <VOLT_SCL>
	while (--n >= 0)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	dae1      	bge.n	800464c <READ_I2C_BYTE+0x10>
	}
	return	c;
 8004688:	683b      	ldr	r3, [r7, #0]
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <Read_Volts>:


bool Read_Volts (uint32 *v)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	bool b;
	int  a;
	int  msb, lsb;

	a = 0x29;						//	Perform a read access
 800469c:	2329      	movs	r3, #41	; 0x29
 800469e:	617b      	str	r3, [r7, #20]
	if (Set_Volt_Update_Rate)
 80046a0:	4b38      	ldr	r3, [pc, #224]	; (8004784 <Read_Volts+0xf0>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <Read_Volts+0x1a>
		a--;						//	If time to set the update rate, make it a write access
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]

	START_I2C();
 80046ae:	f7ff ff21 	bl	80044f4 <START_I2C>
	b = WRITE_I2C_BYTE (a);
 80046b2:	2313      	movs	r3, #19
 80046b4:	18fc      	adds	r4, r7, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff ff74 	bl	80045a6 <WRITE_I2C_BYTE>
 80046be:	0003      	movs	r3, r0
 80046c0:	7023      	strb	r3, [r4, #0]
	if (!b)
 80046c2:	2313      	movs	r3, #19
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <Read_Volts+0x40>
	{
		STOP_I2C();					//	A/D still converting: close the bus transaction and exit
 80046cc:	f7ff ff2c 	bl	8004528 <STOP_I2C>
		return	false;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e053      	b.n	800477c <Read_Volts+0xe8>
	}

	if (Set_Volt_Update_Rate)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <Read_Volts+0xf0>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <Read_Volts+0x8a>
	{
		Set_Volt_Update_Rate = false;
 80046dc:	4b29      	ldr	r3, [pc, #164]	; (8004784 <Read_Volts+0xf0>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
		b = WRITE_I2C_BYTE (1);		//	Set conversion rate to 30 Hz
 80046e2:	2313      	movs	r3, #19
 80046e4:	18fc      	adds	r4, r7, r3
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7ff ff5d 	bl	80045a6 <WRITE_I2C_BYTE>
 80046ec:	0003      	movs	r3, r0
 80046ee:	7023      	strb	r3, [r4, #0]
		START_I2C();				//	This is actually a repeated-start condition
 80046f0:	f7ff ff00 	bl	80044f4 <START_I2C>
		b &= WRITE_I2C_BYTE(0x29);	//	Address the A/D again, for a read access
 80046f4:	2029      	movs	r0, #41	; 0x29
 80046f6:	f7ff ff56 	bl	80045a6 <WRITE_I2C_BYTE>
 80046fa:	0003      	movs	r3, r0
 80046fc:	0019      	movs	r1, r3
 80046fe:	2313      	movs	r3, #19
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2213      	movs	r2, #19
 8004704:	18ba      	adds	r2, r7, r2
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	400a      	ands	r2, r1
 800470a:	701a      	strb	r2, [r3, #0]

		if (!b)
 800470c:	2313      	movs	r3, #19
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <Read_Volts+0x8a>
		{
			STOP_I2C();				//	A/D stopped talking: close the bus transaction and exit
 8004716:	f7ff ff07 	bl	8004528 <STOP_I2C>
			return	false;
 800471a:	2300      	movs	r3, #0
 800471c:	e02e      	b.n	800477c <Read_Volts+0xe8>
		}
	}

	msb = READ_I2C_BYTE();			//	MSB of result
 800471e:	f7ff ff8d 	bl	800463c <READ_I2C_BYTE>
 8004722:	0003      	movs	r3, r0
 8004724:	60fb      	str	r3, [r7, #12]
	ACK_I2C();
 8004726:	f7ff ff16 	bl	8004556 <ACK_I2C>
	lsb = READ_I2C_BYTE();			//	LSB of result
 800472a:	f7ff ff87 	bl	800463c <READ_I2C_BYTE>
 800472e:	0003      	movs	r3, r0
 8004730:	60bb      	str	r3, [r7, #8]
	NACK_I2C();
 8004732:	f7ff ff24 	bl	800457e <NACK_I2C>
	STOP_I2C();
 8004736:	f7ff fef7 	bl	8004528 <STOP_I2C>

	*v = msb & 0xFF;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	601a      	str	r2, [r3, #0]
	*v <<= 8;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021a      	lsls	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
	*v += lsb & 0xFF;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	21ff      	movs	r1, #255	; 0xff
 8004756:	400b      	ands	r3, r1
 8004758:	18d2      	adds	r2, r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]

	if (*v == 0 || *v == 0xFFFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <Read_Volts+0xdc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <Read_Volts+0xf4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d104      	bne.n	800477a <Read_Volts+0xe6>
	{
		*v = 0;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
		return	false;				//	Invalid reading
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <Read_Volts+0xe8>
	}
	return	true;					//	Valid reading
 800477a:	2301      	movs	r3, #1
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b007      	add	sp, #28
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	20005a18 	.word	0x20005a18
 8004788:	0000ffff 	.word	0x0000ffff

0800478c <ADC_To_Volts>:


static int32 ADC_To_Volts (int32 adc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	return (adc * 8442) >> 13;		//	Convert ADC value to voltage    LSB = 1mV
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a03      	ldr	r2, [pc, #12]	; (80047a4 <ADC_To_Volts+0x18>)
 8004798:	4353      	muls	r3, r2
 800479a:	135b      	asrs	r3, r3, #13
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	000020fa 	.word	0x000020fa

080047a8 <Volts_To_ADC>:


static int32 Volts_To_ADC (int v)	//	Volts in, corresponding A/D value out
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	int32 t = v;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60fb      	str	r3, [r7, #12]
	return (t << 13) / 8442;		//	Convert ADC value to voltage    LSB = 1mV
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	035b      	lsls	r3, r3, #13
 80047b8:	4904      	ldr	r1, [pc, #16]	; (80047cc <Volts_To_ADC+0x24>)
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7fb fd3e 	bl	800023c <__divsi3>
 80047c0:	0003      	movs	r3, r0
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b004      	add	sp, #16
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	000020fa 	.word	0x000020fa

080047d0 <Get_Volts>:


int  Get_Volts()					//	OUT:	battery voltage, averaged over previous second.  LSB=1mV
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
	int32  v;

	if (nV > 0)
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <Get_Volts+0x54>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <Get_Volts+0x24>
		v = sumV / nV;
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <Get_Volts+0x58>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <Get_Volts+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	0019      	movs	r1, r3
 80047e8:	0010      	movs	r0, r2
 80047ea:	f7fb fc9d 	bl	8000128 <__udivsi3>
 80047ee:	0003      	movs	r3, r0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	e002      	b.n	80047fa <Get_Volts+0x2a>
	else
		v = AvgV;					//	No average available: use last second's value
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <Get_Volts+0x5c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	607b      	str	r3, [r7, #4]

	AvgV = v;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <Get_Volts+0x5c>)
 80047fe:	601a      	str	r2, [r3, #0]
	sumV = 0;						//	Ready for next average
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <Get_Volts+0x58>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
	nV = 0;
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <Get_Volts+0x54>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

	v = ADC_To_Volts (v);			//	Convert to voltage    LSB = 1mV
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff ffbc 	bl	800478c <ADC_To_Volts>
 8004814:	0003      	movs	r3, r0
 8004816:	607b      	str	r3, [r7, #4]
	return	v;
 8004818:	687b      	ldr	r3, [r7, #4]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	200028d8 	.word	0x200028d8
 8004828:	200028d4 	.word	0x200028d4
 800482c:	200028dc 	.word	0x200028dc

08004830 <Handle_Volts>:


void Handle_Volts()
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
	uint32  v;

	if (Read_Volts (&v))			//	Ignore process if data not available yet
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff ff2b 	bl	8004694 <Read_Volts>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d014      	beq.n	800486c <Handle_Volts+0x3c>
	{								//	Validate the A/D value
		if ((v < AbsMaxV) && (v > AbsMinV))
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <Handle_Volts+0x4c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d20f      	bcs.n	800486c <Handle_Volts+0x3c>
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <Handle_Volts+0x50>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d90a      	bls.n	800486c <Handle_Volts+0x3c>
		{
			sumV += v;				//	Add to the average
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <Handle_Volts+0x54>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	18d2      	adds	r2, r2, r3
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <Handle_Volts+0x54>)
 8004860:	601a      	str	r2, [r3, #0]
			nV++;
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <Handle_Volts+0x58>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <Handle_Volts+0x58>)
 800486a:	601a      	str	r2, [r3, #0]
				// did we read 10% off?
				debug_Printf("*** v: %d ***\r\n", v);
		}
#endif
	}
	Need_Volts = false;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <Handle_Volts+0x5c>)
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	200028e0 	.word	0x200028e0
 8004880:	200028e4 	.word	0x200028e4
 8004884:	200028d4 	.word	0x200028d4
 8004888:	200028d8 	.word	0x200028d8
 800488c:	20005a1a 	.word	0x20005a1a

08004890 <Voltage_Init>:


void Voltage_Init()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
	uint32	v, adc;

	STOP_I2C();
 8004896:	f7ff fe47 	bl	8004528 <STOP_I2C>
	nV = 0;
 800489a:	4b35      	ldr	r3, [pc, #212]	; (8004970 <Voltage_Init+0xe0>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
	sumV = 0;
 80048a0:	4b34      	ldr	r3, [pc, #208]	; (8004974 <Voltage_Init+0xe4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
	AvgV = 0;
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <Voltage_Init+0xe8>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
	Read_Volts(&v);		//	Read 3 times before using...
 80048ac:	003b      	movs	r3, r7
 80048ae:	0018      	movs	r0, r3
 80048b0:	f7ff fef0 	bl	8004694 <Read_Volts>
	uS_Delay(100000);
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <Voltage_Init+0xec>)
 80048b6:	0018      	movs	r0, r3
 80048b8:	f001 fdda 	bl	8006470 <uS_Delay>
	Read_Volts(&v);
 80048bc:	003b      	movs	r3, r7
 80048be:	0018      	movs	r0, r3
 80048c0:	f7ff fee8 	bl	8004694 <Read_Volts>
	uS_Delay(100000);
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <Voltage_Init+0xec>)
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 fdd2 	bl	8006470 <uS_Delay>
	v = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	603b      	str	r3, [r7, #0]
	Read_Volts(&v);
 80048d0:	003b      	movs	r3, r7
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7ff fede 	bl	8004694 <Read_Volts>
	v = ADC_To_Volts (v);			//	Convert to voltage    LSB = 1mV
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff ff56 	bl	800478c <ADC_To_Volts>
 80048e0:	0003      	movs	r3, r0
 80048e2:	603b      	str	r3, [r7, #0]

	if (v < 7700)	Board_Fails |= VOLT_FAIL;	//	Vbat < 7.7
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4a26      	ldr	r2, [pc, #152]	; (8004980 <Voltage_Init+0xf0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d805      	bhi.n	80048f8 <Voltage_Init+0x68>
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <Voltage_Init+0xf4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2202      	movs	r2, #2
 80048f2:	431a      	orrs	r2, r3
 80048f4:	4b23      	ldr	r3, [pc, #140]	; (8004984 <Voltage_Init+0xf4>)
 80048f6:	601a      	str	r2, [r3, #0]
	if (v > 65000)	Board_Fails |= VOLT_FAIL;	//	Vbat > 65.0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4a23      	ldr	r2, [pc, #140]	; (8004988 <Voltage_Init+0xf8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d905      	bls.n	800490c <Voltage_Init+0x7c>
 8004900:	4b20      	ldr	r3, [pc, #128]	; (8004984 <Voltage_Init+0xf4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2202      	movs	r2, #2
 8004906:	431a      	orrs	r2, r3
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <Voltage_Init+0xf4>)
 800490a:	601a      	str	r2, [r3, #0]

	if (v < 16000)  Battery_Size = 1;		//	Its a 12v battery
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <Voltage_Init+0xfc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d803      	bhi.n	800491c <Voltage_Init+0x8c>
 8004914:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <Voltage_Init+0x100>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e012      	b.n	8004942 <Voltage_Init+0xb2>
	else
	if (v < 30000)  Battery_Size = 2;		//	Its a 24v battery
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <Voltage_Init+0x104>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d803      	bhi.n	800492c <Voltage_Init+0x9c>
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <Voltage_Init+0x100>)
 8004926:	2202      	movs	r2, #2
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e00a      	b.n	8004942 <Voltage_Init+0xb2>
	else
	if (v < 45000)  Battery_Size = 3;		//	Its a 36v battery
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <Voltage_Init+0x108>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d803      	bhi.n	800493c <Voltage_Init+0xac>
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <Voltage_Init+0x100>)
 8004936:	2203      	movs	r2, #3
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e002      	b.n	8004942 <Voltage_Init+0xb2>
	else
	Battery_Size = 4;						//	Its a 48v battery
 800493c:	4b14      	ldr	r3, [pc, #80]	; (8004990 <Voltage_Init+0x100>)
 800493e:	2204      	movs	r2, #4
 8004940:	601a      	str	r2, [r3, #0]

	adc = Volts_To_ADC (Battery_Size * MODE_NOMINAL_V);	//	ADC = nominal battery voltage, in A/D counts
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <Voltage_Init+0x100>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <Voltage_Init+0x10c>)
 8004948:	4353      	muls	r3, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff ff2c 	bl	80047a8 <Volts_To_ADC>
 8004950:	0003      	movs	r3, r0
 8004952:	607b      	str	r3, [r7, #4]
	AbsMinV = adc >> 1;						//	A/D reading must be greater than 0.5 * V nominal
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	085a      	lsrs	r2, r3, #1
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <Voltage_Init+0x110>)
 800495a:	601a      	str	r2, [r3, #0]
	AbsMaxV = adc + AbsMinV;				//	A/D reading must be no more than 1.5 * V nominal
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <Voltage_Init+0x110>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	18d2      	adds	r2, r2, r3
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <Voltage_Init+0x114>)
 8004966:	601a      	str	r2, [r3, #0]
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200028d8 	.word	0x200028d8
 8004974:	200028d4 	.word	0x200028d4
 8004978:	200028dc 	.word	0x200028dc
 800497c:	000186a0 	.word	0x000186a0
 8004980:	00001e13 	.word	0x00001e13
 8004984:	20005a14 	.word	0x20005a14
 8004988:	0000fde8 	.word	0x0000fde8
 800498c:	00003e7f 	.word	0x00003e7f
 8004990:	20005a28 	.word	0x20005a28
 8004994:	0000752f 	.word	0x0000752f
 8004998:	0000afc7 	.word	0x0000afc7
 800499c:	00003138 	.word	0x00003138
 80049a0:	200028e4 	.word	0x200028e4
 80049a4:	200028e0 	.word	0x200028e0

080049a8 <strnmatch>:
	{ NULL, 0 }
};

// -------------------- private methods

static int strnmatch (char const *haystack, char const *needle) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	int n_match = strlen(needle), is_match = haystack && (strncmp(haystack, needle, n_match) == 0);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fb fbaf 	bl	8000118 <strlen>
 80049ba:	0003      	movs	r3, r0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <strnmatch+0x30>
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f003 fc03 	bl	80081d6 <strncmp>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d101      	bne.n	80049d8 <strnmatch+0x30>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <strnmatch+0x32>
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
	return is_match ? n_match : 0;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <strnmatch+0x3e>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	e000      	b.n	80049e8 <strnmatch+0x40>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <strfindend>:

static char const *strfindend (char const *haystack, char const *needle) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	char const *f = strstr(haystack, needle);
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0011      	movs	r1, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	f003 fc0e 	bl	8008222 <strstr>
 8004a06:	0003      	movs	r3, r0
 8004a08:	60fb      	str	r3, [r7, #12]
	return f ? (char const *)(f + strlen(needle)) : NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <strfindend+0x30>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fb fb80 	bl	8000118 <strlen>
 8004a18:	0002      	movs	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	e000      	b.n	8004a22 <strfindend+0x32>
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <get_ms_timeout>:

static int get_ms_timeout (char const *cmd) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	int i;

	if (cmd[0] == 'A' && cmd[1] == 'T') {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b41      	cmp	r3, #65	; 0x41
 8004a3a:	d125      	bne.n	8004a88 <get_ms_timeout+0x5c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b54      	cmp	r3, #84	; 0x54
 8004a44:	d120      	bne.n	8004a88 <get_ms_timeout+0x5c>
		for (i = 0; command_response_timeouts[i].at_cmd; ++i) {
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e017      	b.n	8004a7c <get_ms_timeout+0x50>
			if (strnmatch(cmd + 2, command_response_timeouts[i].at_cmd) > 0)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	1c98      	adds	r0, r3, #2
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <get_ms_timeout+0x68>)
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	00d2      	lsls	r2, r2, #3
 8004a56:	58d3      	ldr	r3, [r2, r3]
 8004a58:	0019      	movs	r1, r3
 8004a5a:	f7ff ffa5 	bl	80049a8 <strnmatch>
 8004a5e:	1e03      	subs	r3, r0, #0
 8004a60:	dd09      	ble.n	8004a76 <get_ms_timeout+0x4a>
				return (command_response_timeouts[i].s_timeout * 1000);
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <get_ms_timeout+0x68>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	22fa      	movs	r2, #250	; 0xfa
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	4353      	muls	r3, r2
 8004a74:	e00a      	b.n	8004a8c <get_ms_timeout+0x60>
		for (i = 0; command_response_timeouts[i].at_cmd; ++i) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <get_ms_timeout+0x68>)
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	00d2      	lsls	r2, r2, #3
 8004a82:	58d3      	ldr	r3, [r2, r3]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e1      	bne.n	8004a4c <get_ms_timeout+0x20>
		}
	}
	return default_command_response_timeout_ms;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <get_ms_timeout+0x6c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	2000003c 	.word	0x2000003c
 8004a98:	20000038 	.word	0x20000038

08004a9c <matchright>:

static int matchright (char const *s1, char const *s2) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	int n1 = strlen(s1), n2 = strlen(s2);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fb fb35 	bl	8000118 <strlen>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fb fb2f 	bl	8000118 <strlen>
 8004aba:	0003      	movs	r3, r0
 8004abc:	60bb      	str	r3, [r7, #8]

	return (n1 >= n2 && strcmp(&s1[n1 - n2], s2) == 0);
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	db0e      	blt.n	8004ae4 <matchright+0x48>
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	001a      	movs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fb fb14 	bl	8000104 <strcmp>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d101      	bne.n	8004ae4 <matchright+0x48>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <matchright+0x4a>
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}

08004aee <at_puts>:

static void at_puts (char const *wbuf) {
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; wbuf[i]; ++i)
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e009      	b.n	8004b10 <at_puts+0x22>
		uart5_PutByte(wbuf[i]);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	18d3      	adds	r3, r2, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f002 ff19 	bl	800793c <uart5_PutByte>
	for (i = 0; wbuf[i]; ++i)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ef      	bne.n	8004afc <at_puts+0xe>
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b004      	add	sp, #16
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <scan>:

static void scan (char const *str, char const *find, int *pint0, int d0, int *pint1, int d1) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	char const *p = strstr(str, find);
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f003 fb72 	bl	8008222 <strstr>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	61fb      	str	r3, [r7, #28]
	int i, n = strlen(find);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fb fae7 	bl	8000118 <strlen>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	61bb      	str	r3, [r7, #24]

	if (pint0)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <scan+0x36>
		*pint0 = d0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	601a      	str	r2, [r3, #0]
	if (pint1)
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <scan+0x42>
		*pint1 = d1;
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b64:	601a      	str	r2, [r3, #0]
	if (p) {
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02b      	beq.n	8004bc4 <scan+0xa0>
		char const *e = p + n;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	613b      	str	r3, [r7, #16]

		i = strtol(e, (char **)&e, 0);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2210      	movs	r2, #16
 8004b78:	18b9      	adds	r1, r7, r2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f003 fbff 	bl	8008380 <strtol>
 8004b82:	0003      	movs	r3, r0
 8004b84:	617b      	str	r3, [r7, #20]
		if (pint0)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <scan+0x6e>
			*pint0 = i;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	601a      	str	r2, [r3, #0]
		if (*e == ',' && ++e) {
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b2c      	cmp	r3, #44	; 0x2c
 8004b98:	d114      	bne.n	8004bc4 <scan+0xa0>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <scan+0xa0>
			i = strtol(e, (char **)&e, 0);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	18b9      	adds	r1, r7, r2
 8004bac:	2200      	movs	r2, #0
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f003 fbe6 	bl	8008380 <strtol>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	617b      	str	r3, [r7, #20]
			if (pint1)
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <scan+0xa0>
				*pint1 = i;
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b008      	add	sp, #32
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <at_readbytes>:

static int at_readbytes (char *rbuf, int sz_rbuf, int ms_initial_timeout, int is_AT_command_response) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	static char const receiveheader[] = "\r\n+RECEIVE,";
	int len_receiveheader = sizeof(receiveheader) - 1;
 8004bda:	230b      	movs	r3, #11
 8004bdc:	61bb      	str	r3, [r7, #24]
	int ms_timeout_subsequent = 10;
 8004bde:	230a      	movs	r3, #10
 8004be0:	617b      	str	r3, [r7, #20]
	int ms_timeout = ms_initial_timeout;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int is_receive = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
	int n_receive = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
	//int n_prefix = 0;
	int i;

	rbuf[i = 0] = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
	while (i < sz_rbuf - 1) {
 8004bf8:	e085      	b.n	8004d06 <at_readbytes+0x13a>
		int ch = uart5_WaitForByte(ms_timeout);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f002 febd 	bl	800797c <uart5_WaitForByte>
 8004c02:	0003      	movs	r3, r0
 8004c04:	613b      	str	r3, [r7, #16]

		if (ch < 0) {
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da06      	bge.n	8004c1a <at_readbytes+0x4e>
			if (i == 0)
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d000      	beq.n	8004c14 <at_readbytes+0x48>
 8004c12:	e07f      	b.n	8004d14 <at_readbytes+0x148>
				return -1;	// got nothing, call it a timeout
 8004c14:	2301      	movs	r3, #1
 8004c16:	425b      	negs	r3, r3
 8004c18:	e082      	b.n	8004d20 <at_readbytes+0x154>
			break;
		}

		rbuf[i++] = (char)ch;
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	623a      	str	r2, [r7, #32]
 8004c20:	001a      	movs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
		rbuf[i] = 0;
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
		if (is_AT_command_response) {
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <at_readbytes+0xa4>
			if (matchright(rbuf, "OK\r\n"))
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	; (8004d28 <at_readbytes+0x15c>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff ff2a 	bl	8004a9c <matchright>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d000      	beq.n	8004c4e <at_readbytes+0x82>
 8004c4c:	e064      	b.n	8004d18 <at_readbytes+0x14c>
				break;
			if (matchright(rbuf, "ERROR\r\n"))
 8004c4e:	4a37      	ldr	r2, [pc, #220]	; (8004d2c <at_readbytes+0x160>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff ff21 	bl	8004a9c <matchright>
 8004c5a:	1e03      	subs	r3, r0, #0
 8004c5c:	d15e      	bne.n	8004d1c <at_readbytes+0x150>
				break;
			if (matchright(rbuf, "> "))	// CIPSEND
 8004c5e:	4a34      	ldr	r2, [pc, #208]	; (8004d30 <at_readbytes+0x164>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0011      	movs	r1, r2
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff ff19 	bl	8004a9c <matchright>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d040      	beq.n	8004cf0 <at_readbytes+0x124>
				break;
 8004c6e:	e056      	b.n	8004d1e <at_readbytes+0x152>
		} else {
			if (i == len_receiveheader) {
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d10b      	bne.n	8004c90 <at_readbytes+0xc4>
				is_receive = (strcmp(rbuf, receiveheader) == 0);
 8004c78:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <at_readbytes+0x168>)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	0011      	movs	r1, r2
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7fb fa40 	bl	8000104 <strcmp>
 8004c84:	0003      	movs	r3, r0
 8004c86:	425a      	negs	r2, r3
 8004c88:	4153      	adcs	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8e:	e02f      	b.n	8004cf0 <at_readbytes+0x124>
			} else if (i > len_receiveheader && is_receive && n_receive == 0 && ch == '\n') {
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dd2b      	ble.n	8004cf0 <at_readbytes+0x124>
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d028      	beq.n	8004cf0 <at_readbytes+0x124>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d125      	bne.n	8004cf0 <at_readbytes+0x124>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b0a      	cmp	r3, #10
 8004ca8:	d122      	bne.n	8004cf0 <at_readbytes+0x124>
				char *p;

				// parse out n_receive now from something like "\r\n+RECEIVE,2,1348,216.58.219.4:80\r\n"
				p = strchr(rbuf, ',');
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	212c      	movs	r1, #44	; 0x2c
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f003 fa83 	bl	80081ba <strchr>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	61fb      	str	r3, [r7, #28]
				if (p) {
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <at_readbytes+0x11a>
					p = strchr(p + 1, ',');
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f003 fa78 	bl	80081ba <strchr>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	61fb      	str	r3, [r7, #28]
					if (p) {
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <at_readbytes+0x11a>
						//n_prefix = i;
						n_receive = strtol(p + 1, NULL, 10);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	220a      	movs	r2, #10
 8004cda:	2100      	movs	r1, #0
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f003 fb4f 	bl	8008380 <strtol>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
						//logmsg("..receiving %d\n", n_receive);
					}
				}
				if (!p) {
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <at_readbytes+0x124>
					is_receive = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
		}
		// adjust subsequent timeout chars
		if (n_receive)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <at_readbytes+0x136>
			ms_timeout = ms_timeout_subsequent * 5;
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	0013      	movs	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	e001      	b.n	8004d06 <at_readbytes+0x13a>
		else
			ms_timeout = ms_timeout_subsequent;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (i < sz_rbuf - 1) {
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	dd00      	ble.n	8004d12 <at_readbytes+0x146>
 8004d10:	e773      	b.n	8004bfa <at_readbytes+0x2e>
 8004d12:	e004      	b.n	8004d1e <at_readbytes+0x152>
			break;
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	e002      	b.n	8004d1e <at_readbytes+0x152>
				break;
 8004d18:	46c0      	nop			; (mov r8, r8)
 8004d1a:	e000      	b.n	8004d1e <at_readbytes+0x152>
				break;
 8004d1c:	46c0      	nop			; (mov r8, r8)
	}
	return i;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b00c      	add	sp, #48	; 0x30
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	08009ef0 	.word	0x08009ef0
 8004d2c:	08009ef8 	.word	0x08009ef8
 8004d30:	08009f00 	.word	0x08009f00
 8004d34:	0800a8c0 	.word	0x0800a8c0

08004d38 <_at_recv_after_send>:

static void _at_recv_after_send (char *rbuf, int sz_rbuf, char const *fmt, va_list vl) {
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
	static char txt[1024];

	vsnprintf(txt, sizeof(txt), fmt, vl);
 8004d46:	683c      	ldr	r4, [r7, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	00d9      	lsls	r1, r3, #3
 8004d4e:	481c      	ldr	r0, [pc, #112]	; (8004dc0 <_at_recv_after_send+0x88>)
 8004d50:	0023      	movs	r3, r4
 8004d52:	f003 fd8b 	bl	800886c <vsniprintf>
	txt[sizeof(txt) - 1] = 0;		// MSFT is buggy and won't zero terminate
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <_at_recv_after_send+0x88>)
 8004d58:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <_at_recv_after_send+0x8c>)
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]
    
	// SS: Hack: If we are sending a cmd, we really don't expect there to be
    // anything already in the read buffer that is unread.  So... do a quick
    // read in hopes of yanking anything off that wasn't supposed to be there.
	at_readbytes(rbuf, sz_rbuf, 1, 0);
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	2201      	movs	r2, #1
 8004d66:	f7ff ff31 	bl	8004bcc <at_readbytes>
    if (strlen(rbuf) > 0)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <_at_recv_after_send+0x46>
    {
        logbytes("  [RemoveStale] > ", rbuf);
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <_at_recv_after_send+0x90>)
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fd7f 	bl	800587c <logbytes>
    }

	// send...
	logbytes("  > ", txt);
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <_at_recv_after_send+0x88>)
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <_at_recv_after_send+0x94>)
 8004d82:	0011      	movs	r1, r2
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 fd79 	bl	800587c <logbytes>
	at_puts(txt);			// fputs() doesn't unexpectedly add a newline as puts() does
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <_at_recv_after_send+0x88>)
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff feae 	bl	8004aee <at_puts>

	if (rbuf) {
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00f      	beq.n	8004db8 <_at_recv_after_send+0x80>
		// the read ms_timeout depends on the command sent
		at_readbytes(rbuf, sz_rbuf, get_ms_timeout(txt), 1);
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_at_recv_after_send+0x88>)
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7ff fe46 	bl	8004a2c <get_ms_timeout>
 8004da0:	0002      	movs	r2, r0
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	2301      	movs	r3, #1
 8004da8:	f7ff ff10 	bl	8004bcc <at_readbytes>
		logbytes("  < ", rbuf);
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <_at_recv_after_send+0x98>)
 8004db0:	0011      	movs	r1, r2
 8004db2:	0018      	movs	r0, r3
 8004db4:	f000 fd62 	bl	800587c <logbytes>
	}
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b005      	add	sp, #20
 8004dbe:	bd90      	pop	{r4, r7, pc}
 8004dc0:	200028e8 	.word	0x200028e8
 8004dc4:	000003ff 	.word	0x000003ff
 8004dc8:	08009f04 	.word	0x08009f04
 8004dcc:	08009f18 	.word	0x08009f18
 8004dd0:	08009f20 	.word	0x08009f20

08004dd4 <at_recv_after_send>:

static void at_recv_after_send (char *rbuf, int sz_rbuf, char const *fmt, ...) {
 8004dd4:	b40c      	push	{r2, r3}
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
	va_list vl;

	va_start(vl, fmt);
 8004de0:	231c      	movs	r3, #28
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	60fb      	str	r3, [r7, #12]
	_at_recv_after_send(rbuf, sz_rbuf, fmt, vl);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ffa3 	bl	8004d38 <_at_recv_after_send>
	va_end(vl);
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bc80      	pop	{r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	b002      	add	sp, #8
 8004dfe:	4718      	bx	r3

08004e00 <at_send>:

static void at_send (char const *fmt, ...) {
 8004e00:	b40f      	push	{r0, r1, r2, r3}
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
	va_list vl;

	va_start(vl, fmt);
 8004e08:	2314      	movs	r3, #20
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	607b      	str	r3, [r7, #4]
	_at_recv_after_send(NULL, 0, fmt, vl);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	2100      	movs	r1, #0
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7ff ff8f 	bl	8004d38 <_at_recv_after_send>
	va_end(vl);
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b002      	add	sp, #8
 8004e20:	bc80      	pop	{r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	b004      	add	sp, #16
 8004e26:	4718      	bx	r3

08004e28 <at_sleep>:

void at_sleep() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08e      	sub	sp, #56	; 0x38
 8004e2c:	af00      	add	r7, sp, #0
	char rbuf[50];
	int sz_rbuf = sizeof(rbuf);
 8004e2e:	2332      	movs	r3, #50	; 0x32
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34

	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=0,1\n");	// close bearer profile first
 8004e32:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <at_sleep+0x40>)
 8004e34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e36:	003b      	movs	r3, r7
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff ffcb 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN=4\n");		// disable tx/rx
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <at_sleep+0x44>)
 8004e40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e42:	003b      	movs	r3, r7
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff ffc5 	bl	8004dd4 <at_recv_after_send>
	vTaskDelay(MS_TO_TICKS(5000));							// wait 5 seconds
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <at_sleep+0x48>)
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fc fa29 	bl	80012a4 <vTaskDelay>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=2\n");		// then sleep
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <at_sleep+0x4c>)
 8004e54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e56:	003b      	movs	r3, r7
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff ffbb 	bl	8004dd4 <at_recv_after_send>
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b00e      	add	sp, #56	; 0x38
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	08009f28 	.word	0x08009f28
 8004e6c:	08009f38 	.word	0x08009f38
 8004e70:	00001388 	.word	0x00001388
 8004e74:	08009f44 	.word	0x08009f44

08004e78 <at_init>:

static void at_init (char *rbuf, int sz_rbuf) {
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	int int0, int1;

	logmsg("initializing modem\n");
 8004e82:	4b68      	ldr	r3, [pc, #416]	; (8005024 <at_init+0x1ac>)
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fcd7 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <at_init+0x1b0>)
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff ff9f 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+COPS?\n");
 8004e96:	4a65      	ldr	r2, [pc, #404]	; (800502c <at_init+0x1b4>)
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7ff ff99 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "ATE0\n");	// disable local echo
 8004ea2:	4a63      	ldr	r2, [pc, #396]	; (8005030 <at_init+0x1b8>)
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff ff93 	bl	8004dd4 <at_recv_after_send>

	logmsg("getting modem info\n");
 8004eae:	4b61      	ldr	r3, [pc, #388]	; (8005034 <at_init+0x1bc>)
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 fcc1 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CGMM\n");
 8004eb6:	4a60      	ldr	r2, [pc, #384]	; (8005038 <at_init+0x1c0>)
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff ff89 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CGMI\n");
 8004ec2:	4a5e      	ldr	r2, [pc, #376]	; (800503c <at_init+0x1c4>)
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7ff ff83 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CPIN?\n");
 8004ece:	4a5c      	ldr	r2, [pc, #368]	; (8005040 <at_init+0x1c8>)
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff ff7d 	bl	8004dd4 <at_recv_after_send>

	logmsg("getting sleep mode\n");
 8004eda:	4b5a      	ldr	r3, [pc, #360]	; (8005044 <at_init+0x1cc>)
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fcab 	bl	8005838 <logmsg>
	// at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK?\n");
	at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8004ee2:	4a51      	ldr	r2, [pc, #324]	; (8005028 <at_init+0x1b0>)
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7ff ff73 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=0\n");
 8004eee:	4a56      	ldr	r2, [pc, #344]	; (8005048 <at_init+0x1d0>)
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7ff ff6d 	bl	8004dd4 <at_recv_after_send>
	vTaskDelay(MS_TO_TICKS(2000));
 8004efa:	23fa      	movs	r3, #250	; 0xfa
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7fc f9d0 	bl	80012a4 <vTaskDelay>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK?\n");
 8004f04:	4a51      	ldr	r2, [pc, #324]	; (800504c <at_init+0x1d4>)
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f7ff ff62 	bl	8004dd4 <at_recv_after_send>

	logmsg("checking registration status\n");
 8004f10:	4b4f      	ldr	r3, [pc, #316]	; (8005050 <at_init+0x1d8>)
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 fc90 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CREG?\n");
 8004f18:	4a4e      	ldr	r2, [pc, #312]	; (8005054 <at_init+0x1dc>)
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f7ff ff58 	bl	8004dd4 <at_recv_after_send>
	scan(rbuf, "CREG:", &int0, -1, &int1, -1);
 8004f24:	2301      	movs	r3, #1
 8004f26:	425c      	negs	r4, r3
 8004f28:	230c      	movs	r3, #12
 8004f2a:	18fa      	adds	r2, r7, r3
 8004f2c:	494a      	ldr	r1, [pc, #296]	; (8005058 <at_init+0x1e0>)
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	2301      	movs	r3, #1
 8004f32:	425b      	negs	r3, r3
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2308      	movs	r3, #8
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	0023      	movs	r3, r4
 8004f3e:	f7ff fdf1 	bl	8004b24 <scan>
	switch (int1) {
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d002      	beq.n	8004f4e <at_init+0xd6>
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d005      	beq.n	8004f58 <at_init+0xe0>
 8004f4c:	e009      	b.n	8004f62 <at_init+0xea>
		case 1: logmsg("...registered home network\n"); break;
 8004f4e:	4b43      	ldr	r3, [pc, #268]	; (800505c <at_init+0x1e4>)
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 fc71 	bl	8005838 <logmsg>
 8004f56:	e009      	b.n	8004f6c <at_init+0xf4>
		case 5: logmsg("...registered and roaming\n"); break;
 8004f58:	4b41      	ldr	r3, [pc, #260]	; (8005060 <at_init+0x1e8>)
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fc6c 	bl	8005838 <logmsg>
 8004f60:	e004      	b.n	8004f6c <at_init+0xf4>
		default: logmsg("...not registered\n"); break;
 8004f62:	4b40      	ldr	r3, [pc, #256]	; (8005064 <at_init+0x1ec>)
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 fc67 	bl	8005838 <logmsg>
 8004f6a:	46c0      	nop			; (mov r8, r8)
	}

	logmsg("no sync RTC with network\n");
 8004f6c:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <at_init+0x1f0>)
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 fc62 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CLTS=0\n");	// no sync RTC with network time
 8004f74:	4a3d      	ldr	r2, [pc, #244]	; (800506c <at_init+0x1f4>)
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7ff ff2a 	bl	8004dd4 <at_recv_after_send>
	logmsg("disable call ready\n");
 8004f80:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <at_init+0x1f8>)
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 fc58 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CIURC=0\n");	// disable call ready URC
 8004f88:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <at_init+0x1fc>)
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff ff20 	bl	8004dd4 <at_recv_after_send>
	logmsg("getting RSSI\n");
 8004f94:	4b38      	ldr	r3, [pc, #224]	; (8005078 <at_init+0x200>)
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 fc4e 	bl	8005838 <logmsg>
	logmsg("   0 -115 dBm or less\n");
 8004f9c:	4b37      	ldr	r3, [pc, #220]	; (800507c <at_init+0x204>)
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fc4a 	bl	8005838 <logmsg>
	logmsg("   1 -111 dBm\n");
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <at_init+0x208>)
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fc46 	bl	8005838 <logmsg>
	logmsg("   2...30 -110... -54 dBm\n");
 8004fac:	4b35      	ldr	r3, [pc, #212]	; (8005084 <at_init+0x20c>)
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 fc42 	bl	8005838 <logmsg>
	logmsg("   31 -52 dBm or greater\n");
 8004fb4:	4b34      	ldr	r3, [pc, #208]	; (8005088 <at_init+0x210>)
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 fc3e 	bl	8005838 <logmsg>
	logmsg("   99 not known or not detectable\n");
 8004fbc:	4b33      	ldr	r3, [pc, #204]	; (800508c <at_init+0x214>)
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fc3a 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+CSQ\n");		// RSSI
 8004fc4:	4a32      	ldr	r2, [pc, #200]	; (8005090 <at_init+0x218>)
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff ff02 	bl	8004dd4 <at_recv_after_send>

	// buggy:
	//logmsg("getting clock\n");
	//at_recv_after_send(rbuf, sz_rbuf, "AT+CCLK?\n");	// time

	logmsg("set context type, APN, open bearer, query\n");
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <at_init+0x21c>)
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fc30 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=0,1\n");
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	; (8005098 <at_init+0x220>)
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fef8 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"Contype\",\"GPRS\"\n");
 8004fe4:	4a2d      	ldr	r2, [pc, #180]	; (800509c <at_init+0x224>)
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff fef2 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"APN\",\"%s\"\n", g_apn);
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <at_init+0x228>)
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <at_init+0x22c>)
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff feec 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=1,1\n");
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <at_init+0x230>)
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f7ff fee6 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=2,1\n");
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <at_init+0x234>)
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	0018      	movs	r0, r3
 8005010:	f7ff fee0 	bl	8004dd4 <at_recv_after_send>

	logmsg("------ initialized\n");
 8005014:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <at_init+0x238>)
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fc0e 	bl	8005838 <logmsg>
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b005      	add	sp, #20
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	08009f50 	.word	0x08009f50
 8005028:	08009f64 	.word	0x08009f64
 800502c:	08009f68 	.word	0x08009f68
 8005030:	08009f74 	.word	0x08009f74
 8005034:	08009f7c 	.word	0x08009f7c
 8005038:	08009f90 	.word	0x08009f90
 800503c:	08009f9c 	.word	0x08009f9c
 8005040:	08009fa8 	.word	0x08009fa8
 8005044:	08009fb4 	.word	0x08009fb4
 8005048:	08009fc8 	.word	0x08009fc8
 800504c:	08009fd4 	.word	0x08009fd4
 8005050:	08009fe0 	.word	0x08009fe0
 8005054:	0800a000 	.word	0x0800a000
 8005058:	0800a00c 	.word	0x0800a00c
 800505c:	0800a014 	.word	0x0800a014
 8005060:	0800a030 	.word	0x0800a030
 8005064:	0800a04c 	.word	0x0800a04c
 8005068:	0800a060 	.word	0x0800a060
 800506c:	0800a07c 	.word	0x0800a07c
 8005070:	0800a088 	.word	0x0800a088
 8005074:	0800a09c 	.word	0x0800a09c
 8005078:	0800a0a8 	.word	0x0800a0a8
 800507c:	0800a0b8 	.word	0x0800a0b8
 8005080:	0800a0d0 	.word	0x0800a0d0
 8005084:	0800a0e0 	.word	0x0800a0e0
 8005088:	0800a0fc 	.word	0x0800a0fc
 800508c:	0800a118 	.word	0x0800a118
 8005090:	0800a13c 	.word	0x0800a13c
 8005094:	0800a144 	.word	0x0800a144
 8005098:	08009f28 	.word	0x08009f28
 800509c:	0800a170 	.word	0x0800a170
 80050a0:	20000018 	.word	0x20000018
 80050a4:	0800a190 	.word	0x0800a190
 80050a8:	0800a1ac 	.word	0x0800a1ac
 80050ac:	0800a1bc 	.word	0x0800a1bc
 80050b0:	0800a1cc 	.word	0x0800a1cc

080050b4 <scan_time>:

static uint32 scan_time (char const *p) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	struct tm tm[1];

	memset(tm, 0, sizeof(tm[0]));
 80050bc:	230c      	movs	r3, #12
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	2100      	movs	r1, #0
 80050c4:	0018      	movs	r0, r3
 80050c6:	f002 fdb9 	bl	8007c3c <memset>

	tm->tm_year = strtol(p, (char **)&p, 10) - 1900;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	1d39      	adds	r1, r7, #4
 80050ce:	220a      	movs	r2, #10
 80050d0:	0018      	movs	r0, r3
 80050d2:	f003 f955 	bl	8008380 <strtol>
 80050d6:	0003      	movs	r3, r0
 80050d8:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <scan_time+0x104>)
 80050da:	189a      	adds	r2, r3, r2
 80050dc:	230c      	movs	r3, #12
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	615a      	str	r2, [r3, #20]
	p += (*p == '/');
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	3a2f      	subs	r2, #47	; 0x2f
 80050ea:	4251      	negs	r1, r2
 80050ec:	414a      	adcs	r2, r1
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	607b      	str	r3, [r7, #4]
	tm->tm_mon = strtol(p, (char **)&p, 10) - 1;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1d39      	adds	r1, r7, #4
 80050f8:	220a      	movs	r2, #10
 80050fa:	0018      	movs	r0, r3
 80050fc:	f003 f940 	bl	8008380 <strtol>
 8005100:	0003      	movs	r3, r0
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	230c      	movs	r3, #12
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	611a      	str	r2, [r3, #16]
	p += (*p == '/');
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	3a2f      	subs	r2, #47	; 0x2f
 8005112:	4251      	negs	r1, r2
 8005114:	414a      	adcs	r2, r1
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	189b      	adds	r3, r3, r2
 800511a:	607b      	str	r3, [r7, #4]
	tm->tm_mday = strtol(p, (char **)&p, 10);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	1d39      	adds	r1, r7, #4
 8005120:	220a      	movs	r2, #10
 8005122:	0018      	movs	r0, r3
 8005124:	f003 f92c 	bl	8008380 <strtol>
 8005128:	0002      	movs	r2, r0
 800512a:	230c      	movs	r3, #12
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	60da      	str	r2, [r3, #12]
	p += (*p == ',');
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	3a2c      	subs	r2, #44	; 0x2c
 8005138:	4251      	negs	r1, r2
 800513a:	414a      	adcs	r2, r1
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	189b      	adds	r3, r3, r2
 8005140:	607b      	str	r3, [r7, #4]
	tm->tm_hour = strtol(p, (char **)&p, 10);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1d39      	adds	r1, r7, #4
 8005146:	220a      	movs	r2, #10
 8005148:	0018      	movs	r0, r3
 800514a:	f003 f919 	bl	8008380 <strtol>
 800514e:	0002      	movs	r2, r0
 8005150:	230c      	movs	r3, #12
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	609a      	str	r2, [r3, #8]
	p += (*p == ':');
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	3a3a      	subs	r2, #58	; 0x3a
 800515e:	4251      	negs	r1, r2
 8005160:	414a      	adcs	r2, r1
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	189b      	adds	r3, r3, r2
 8005166:	607b      	str	r3, [r7, #4]
	tm->tm_min = strtol(p, (char **)&p, 10);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	1d39      	adds	r1, r7, #4
 800516c:	220a      	movs	r2, #10
 800516e:	0018      	movs	r0, r3
 8005170:	f003 f906 	bl	8008380 <strtol>
 8005174:	0002      	movs	r2, r0
 8005176:	230c      	movs	r3, #12
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	605a      	str	r2, [r3, #4]
	p += (*p == ':');
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	3a3a      	subs	r2, #58	; 0x3a
 8005184:	4251      	negs	r1, r2
 8005186:	414a      	adcs	r2, r1
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	189b      	adds	r3, r3, r2
 800518c:	607b      	str	r3, [r7, #4]
	tm->tm_sec = strtol(p, (char **)&p, 10);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	220a      	movs	r2, #10
 8005194:	0018      	movs	r0, r3
 8005196:	f003 f8f3 	bl	8008380 <strtol>
 800519a:	0002      	movs	r2, r0
 800519c:	230c      	movs	r3, #12
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	601a      	str	r2, [r3, #0]

#if defined(_MSC_VER)
#define mktime _mkgmtime
#endif
	return (uint32)mktime(tm);
 80051a2:	230c      	movs	r3, #12
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	0018      	movs	r0, r3
 80051a8:	f002 fe1c 	bl	8007de4 <mktime>
 80051ac:	0003      	movs	r3, r0
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b00c      	add	sp, #48	; 0x30
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	fffff894 	.word	0xfffff894

080051bc <do_init>:

void do_init()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	static char rbuf[kMAX_BUFFER];
	static int sz_rbuf = sizeof(rbuf);
    at_init(rbuf, sz_rbuf);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <do_init+0x18>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <do_init+0x1c>)
 80051c6:	0011      	movs	r1, r2
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7ff fe55 	bl	8004e78 <at_init>
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000084 	.word	0x20000084
 80051d8:	20002ce8 	.word	0x20002ce8

080051dc <scan_gsmloc>:
			break;
		}
	}
}

static int scan_gsmloc (char const *str, char const *find, char *long_lat, int sz_long_lat, uint32 *ptime) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
	// looks like "\r\n+CIPGSMLOC: 0,-111.746056,35.198174,2018/03/08,21:02:57\r\n\r\nOK\r\n"
	char const *p = strfindend(str, find), *e;
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7ff fbfd 	bl	80049f0 <strfindend>
 80051f6:	0003      	movs	r3, r0
 80051f8:	613b      	str	r3, [r7, #16]
	int locationcode;

	*long_lat = 0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
	*ptime = 0;
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	if (p) {
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d052      	beq.n	80052b2 <scan_gsmloc+0xd6>
		// hack since not sure if germany is responding as it should
		//set_cipgsmloc(p);
		// resume
		locationcode = strtol(p, (char **)&p, 10);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2210      	movs	r2, #16
 8005210:	18b9      	adds	r1, r7, r2
 8005212:	220a      	movs	r2, #10
 8005214:	0018      	movs	r0, r3
 8005216:	f003 f8b3 	bl	8008380 <strtol>
 800521a:	0003      	movs	r3, r0
 800521c:	61bb      	str	r3, [r7, #24]
		if (locationcode == 0) {
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d146      	bne.n	80052b2 <scan_gsmloc+0xd6>
			p += (*p == ',');
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	3a2c      	subs	r2, #44	; 0x2c
 800522c:	4251      	negs	r1, r2
 800522e:	414a      	adcs	r2, r1
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	189b      	adds	r3, r3, r2
 8005234:	613b      	str	r3, [r7, #16]
			e = strchr(p, ',');
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	0018      	movs	r0, r3
 800523c:	f002 ffbd 	bl	80081ba <strchr>
 8005240:	0003      	movs	r3, r0
 8005242:	617b      	str	r3, [r7, #20]
			if (e) {
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d033      	beq.n	80052b2 <scan_gsmloc+0xd6>
				e = strchr(e + 1, ',');
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	3301      	adds	r3, #1
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	0018      	movs	r0, r3
 8005252:	f002 ffb2 	bl	80081ba <strchr>
 8005256:	0003      	movs	r3, r0
 8005258:	617b      	str	r3, [r7, #20]
				if (e) {
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d028      	beq.n	80052b2 <scan_gsmloc+0xd6>
					int len = e - p;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
					if (len > sz_long_lat - 1)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	429a      	cmp	r2, r3
 8005270:	da02      	bge.n	8005278 <scan_gsmloc+0x9c>
						len = sz_long_lat - 1;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	3b01      	subs	r3, #1
 8005276:	61fb      	str	r3, [r7, #28]
					strncpy(long_lat, p, len);
 8005278:	6939      	ldr	r1, [r7, #16]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f002 ffba 	bl	80081f8 <strncpy>
					long_lat[len] = 0;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
					p = e;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	613b      	str	r3, [r7, #16]
					p += (*e == ',');
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	3a2c      	subs	r2, #44	; 0x2c
 800529a:	4251      	negs	r1, r2
 800529c:	414a      	adcs	r2, r1
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
					*ptime = scan_time(p);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f7ff ff04 	bl	80050b4 <scan_time>
 80052ac:	0002      	movs	r2, r0
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	return -1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	425b      	negs	r3, r3
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b008      	add	sp, #32
 80052bc:	bd80      	pop	{r7, pc}

080052be <trimwhitespace>:

size_t trimwhitespace(char *out, size_t len, const char *str)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
	if(len == 0)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <trimwhitespace+0x1c>
		return 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e048      	b.n	8005366 <trimwhitespace+0xa8>
	const char *end;
	size_t out_size;

	// Trim leading space
	while(isspace((unsigned char)*str))
		str++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	607b      	str	r3, [r7, #4]
	while(isspace((unsigned char)*str))
 80052da:	f002 fc77 	bl	8007bcc <__locale_ctype_ptr>
 80052de:	0002      	movs	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	001a      	movs	r2, r3
 80052ec:	2308      	movs	r3, #8
 80052ee:	4013      	ands	r3, r2
 80052f0:	d1f0      	bne.n	80052d4 <trimwhitespace+0x16>

	if(*str == 0)  // All spaces?
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <trimwhitespace+0x46>
		{
		*out = 0;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
		return 1;
 8005300:	2301      	movs	r3, #1
 8005302:	e030      	b.n	8005366 <trimwhitespace+0xa8>
		}

	// Trim trailing space
	end = str;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	617b      	str	r3, [r7, #20]
	while(!isspace((unsigned char)*end) && ((end-str) < (len-1)))
 8005308:	e002      	b.n	8005310 <trimwhitespace+0x52>
		end++;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
	while(!isspace((unsigned char)*end) && ((end-str) < (len-1)))
 8005310:	f002 fc5c 	bl	8007bcc <__locale_ctype_ptr>
 8005314:	0002      	movs	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	18d3      	adds	r3, r2, r3
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	001a      	movs	r2, r3
 8005322:	2308      	movs	r3, #8
 8005324:	4013      	ands	r3, r2
 8005326:	d107      	bne.n	8005338 <trimwhitespace+0x7a>
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	001a      	movs	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3b01      	subs	r3, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d3e8      	bcc.n	800530a <trimwhitespace+0x4c>

	// Set output size to minimum of trimmed string length and buffer size minus 1
	out_size = (end - str) < len-1 ? (end - str) : len-1;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1e59      	subs	r1, r3, #1
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	001a      	movs	r2, r3
 8005344:	000b      	movs	r3, r1
 8005346:	4293      	cmp	r3, r2
 8005348:	d900      	bls.n	800534c <trimwhitespace+0x8e>
 800534a:	0013      	movs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

	// Copy trimmed string and add null terminator
	memcpy(out, str, out_size);
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	0018      	movs	r0, r3
 8005356:	f002 fc68 	bl	8007c2a <memcpy>
	out[out_size] = 0;
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	18d3      	adds	r3, r2, r3
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]

	return out_size;
 8005364:	693b      	ldr	r3, [r7, #16]
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b006      	add	sp, #24
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <gsm_get_IMSI>:
    // looks like "\r\n868345036355816\r\n\r\n"
	return trimwhitespace(sim_id, sz, rbuf);
}

// get International Mobile Subscriber Identity (IMSI)
int gsm_get_IMSI (char *sim_id, int sz) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	static int sz_rbuf = sizeof(rbuf);

    // at_init(rbuf, sz_rbuf);

	// read out any stale data
	at_readbytes(rbuf, sz_rbuf, 1, 0);
 800537a:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <gsm_get_IMSI+0x3c>)
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	480c      	ldr	r0, [pc, #48]	; (80053b0 <gsm_get_IMSI+0x40>)
 8005380:	2300      	movs	r3, #0
 8005382:	2201      	movs	r2, #1
 8005384:	f7ff fc22 	bl	8004bcc <at_readbytes>

    // AT+CIMI\r\n204043395024304\r\n\r\nOK\r\n"
    at_recv_after_send(rbuf, sz_rbuf, "AT+CIMI\n");
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <gsm_get_IMSI+0x3c>)
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <gsm_get_IMSI+0x44>)
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <gsm_get_IMSI+0x40>)
 8005390:	0018      	movs	r0, r3
 8005392:	f7ff fd1f 	bl	8004dd4 <at_recv_after_send>
	return trimwhitespace(sim_id, sz, rbuf+9);  // +9 to skip AT+CIMI\r\n
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <gsm_get_IMSI+0x48>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f7ff ff8e 	bl	80052be <trimwhitespace>
 80053a2:	0003      	movs	r3, r0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000088 	.word	0x20000088
 80053b0:	200032b0 	.word	0x200032b0
 80053b4:	0800a1ec 	.word	0x0800a1ec
 80053b8:	200032b9 	.word	0x200032b9

080053bc <gsm_set_apn>:

void gsm_set_apn (char const *apn) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	strncpy(g_apn, apn, sizeof(g_apn));
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <gsm_set_apn+0x24>)
 80053c8:	2220      	movs	r2, #32
 80053ca:	0018      	movs	r0, r3
 80053cc:	f002 ff14 	bl	80081f8 <strncpy>
	g_apn[sizeof(g_apn) - 1] = 0;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <gsm_set_apn+0x24>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	77da      	strb	r2, [r3, #31]
}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	46bd      	mov	sp, r7
 80053da:	b002      	add	sp, #8
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	20000018 	.word	0x20000018

080053e4 <gsm_get_location_and_time>:

void gsm_get_location_and_time (char *long_lat, int sz, uint32 *ptime) {
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
	static int sz_rbuf = sizeof(rbuf);
	int i;

    // at_init(rbuf, sz_rbuf);

	*ptime = 0;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 5 && *ptime == 0; i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e01c      	b.n	8005436 <gsm_get_location_and_time+0x52>
	{
		vTaskDelay(MS_TO_TICKS(2000));
 80053fc:	23fa      	movs	r3, #250	; 0xfa
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	0018      	movs	r0, r3
 8005402:	f7fb ff4f 	bl	80012a4 <vTaskDelay>
		at_recv_after_send(rbuf, sz_rbuf, "AT+CIPGSMLOC=1,1\n");
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <gsm_get_location_and_time+0x68>)
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	4a11      	ldr	r2, [pc, #68]	; (8005450 <gsm_get_location_and_time+0x6c>)
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <gsm_get_location_and_time+0x70>)
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff fce0 	bl	8004dd4 <at_recv_after_send>
		scan_gsmloc(rbuf, "CIPGSMLOC:", long_lat, sz, ptime);
 8005414:	68bc      	ldr	r4, [r7, #8]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	490f      	ldr	r1, [pc, #60]	; (8005458 <gsm_get_location_and_time+0x74>)
 800541a:	480e      	ldr	r0, [pc, #56]	; (8005454 <gsm_get_location_and_time+0x70>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	0023      	movs	r3, r4
 8005422:	f7ff fedb 	bl	80051dc <scan_gsmloc>
		vTaskDelay(MS_TO_TICKS(2000));
 8005426:	23fa      	movs	r3, #250	; 0xfa
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	0018      	movs	r0, r3
 800542c:	f7fb ff3a 	bl	80012a4 <vTaskDelay>
	for (i = 0; i < 5 && *ptime == 0; i++)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3301      	adds	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b04      	cmp	r3, #4
 800543a:	dc03      	bgt.n	8005444 <gsm_get_location_and_time+0x60>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0db      	beq.n	80053fc <gsm_get_location_and_time+0x18>
	}

}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b007      	add	sp, #28
 800544a:	bd90      	pop	{r4, r7, pc}
 800544c:	2000008c 	.word	0x2000008c
 8005450:	0800a1f8 	.word	0x0800a1f8
 8005454:	20003878 	.word	0x20003878
 8005458:	0800a20c 	.word	0x0800a20c

0800545c <gsm_send_json>:

const char *gsm_get_cipgsmloc (void) {
	return cipgsmloc;
}

int gsm_send_json (char const *url, char const *auth, char const *json) {
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
	static char rbuf[kMAX_BUFFER];
	static int sz_rbuf = sizeof(rbuf);
	int i;
	int result=0;	//
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]

	(void)i;
	// at_init(rbuf, sz_rbuf);

	logmsg("enable HTTP\n");
 800546c:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <gsm_send_json+0x148>)
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f9e2 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPTERM\n");
 8005474:	4b4c      	ldr	r3, [pc, #304]	; (80055a8 <gsm_send_json+0x14c>)
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	4a4c      	ldr	r2, [pc, #304]	; (80055ac <gsm_send_json+0x150>)
 800547a:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <gsm_send_json+0x154>)
 800547c:	0018      	movs	r0, r3
 800547e:	f7ff fca9 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPINIT\n");
 8005482:	4b49      	ldr	r3, [pc, #292]	; (80055a8 <gsm_send_json+0x14c>)
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	4a4b      	ldr	r2, [pc, #300]	; (80055b4 <gsm_send_json+0x158>)
 8005488:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <gsm_send_json+0x154>)
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff fca2 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPSSL=1\n");
 8005490:	4b45      	ldr	r3, [pc, #276]	; (80055a8 <gsm_send_json+0x14c>)
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	4a48      	ldr	r2, [pc, #288]	; (80055b8 <gsm_send_json+0x15c>)
 8005496:	4b46      	ldr	r3, [pc, #280]	; (80055b0 <gsm_send_json+0x154>)
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff fc9b 	bl	8004dd4 <at_recv_after_send>

	logmsg("transmit\n");
 800549e:	4b47      	ldr	r3, [pc, #284]	; (80055bc <gsm_send_json+0x160>)
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 f9c9 	bl	8005838 <logmsg>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"CID\",1\n");
 80054a6:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <gsm_send_json+0x14c>)
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	4a45      	ldr	r2, [pc, #276]	; (80055c0 <gsm_send_json+0x164>)
 80054ac:	4b40      	ldr	r3, [pc, #256]	; (80055b0 <gsm_send_json+0x154>)
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7ff fc90 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"URL\",\"%s\"\n", url);
 80054b4:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <gsm_send_json+0x14c>)
 80054b6:	6819      	ldr	r1, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a42      	ldr	r2, [pc, #264]	; (80055c4 <gsm_send_json+0x168>)
 80054bc:	483c      	ldr	r0, [pc, #240]	; (80055b0 <gsm_send_json+0x154>)
 80054be:	f7ff fc89 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"USERDATA\",\"Authorization: %s\"\n", auth);
 80054c2:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <gsm_send_json+0x14c>)
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <gsm_send_json+0x16c>)
 80054ca:	4839      	ldr	r0, [pc, #228]	; (80055b0 <gsm_send_json+0x154>)
 80054cc:	f7ff fc82 	bl	8004dd4 <at_recv_after_send>
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPPARA=\"CONTENT\",\"application/json\"\n");
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <gsm_send_json+0x14c>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <gsm_send_json+0x170>)
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <gsm_send_json+0x154>)
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff fc7b 	bl	8004dd4 <at_recv_after_send>

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPDATA=%d,20000\r\n", strlen(json));
 80054de:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <gsm_send_json+0x14c>)
 80054e0:	681c      	ldr	r4, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fa fe17 	bl	8000118 <strlen>
 80054ea:	0003      	movs	r3, r0
 80054ec:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <gsm_send_json+0x174>)
 80054ee:	4830      	ldr	r0, [pc, #192]	; (80055b0 <gsm_send_json+0x154>)
 80054f0:	0021      	movs	r1, r4
 80054f2:	f7ff fc6f 	bl	8004dd4 <at_recv_after_send>
	at_send("%s", json);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <gsm_send_json+0x178>)
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff fc7f 	bl	8004e00 <at_send>
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <gsm_send_json+0x14c>)
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <gsm_send_json+0x17c>)
 8005508:	4829      	ldr	r0, [pc, #164]	; (80055b0 <gsm_send_json+0x154>)
 800550a:	2300      	movs	r3, #0
 800550c:	f7ff fb5e 	bl	8004bcc <at_readbytes>
 8005510:	0003      	movs	r3, r0
 8005512:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 8005514:	4a26      	ldr	r2, [pc, #152]	; (80055b0 <gsm_send_json+0x154>)
 8005516:	4b31      	ldr	r3, [pc, #196]	; (80055dc <gsm_send_json+0x180>)
 8005518:	0011      	movs	r1, r2
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f9ae 	bl	800587c <logbytes>

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPACTION=1\r\n");
 8005520:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <gsm_send_json+0x14c>)
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	4a2e      	ldr	r2, [pc, #184]	; (80055e0 <gsm_send_json+0x184>)
 8005526:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <gsm_send_json+0x154>)
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fc53 	bl	8004dd4 <at_recv_after_send>
	// wait for the \r\n+HTTPACTION: 1, 400,157\r\n
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <gsm_send_json+0x14c>)
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	4a29      	ldr	r2, [pc, #164]	; (80055d8 <gsm_send_json+0x17c>)
 8005534:	481e      	ldr	r0, [pc, #120]	; (80055b0 <gsm_send_json+0x154>)
 8005536:	2300      	movs	r3, #0
 8005538:	f7ff fb48 	bl	8004bcc <at_readbytes>
 800553c:	0003      	movs	r3, r0
 800553e:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <gsm_send_json+0x154>)
 8005542:	4b26      	ldr	r3, [pc, #152]	; (80055dc <gsm_send_json+0x180>)
 8005544:	0011      	movs	r1, r2
 8005546:	0018      	movs	r0, r3
 8005548:	f000 f998 	bl	800587c <logbytes>
	if (strstr(rbuf,"204") != NULL)
 800554c:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <gsm_send_json+0x188>)
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <gsm_send_json+0x154>)
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f002 fe65 	bl	8008222 <strstr>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d001      	beq.n	8005560 <gsm_send_json+0x104>
		result = 1;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]

	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPREAD\r\n");
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <gsm_send_json+0x14c>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <gsm_send_json+0x18c>)
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <gsm_send_json+0x154>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7ff fc33 	bl	8004dd4 <at_recv_after_send>
	i = at_readbytes(rbuf, sz_rbuf, 20000, 0);
 800556e:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <gsm_send_json+0x14c>)
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <gsm_send_json+0x17c>)
 8005574:	480e      	ldr	r0, [pc, #56]	; (80055b0 <gsm_send_json+0x154>)
 8005576:	2300      	movs	r3, #0
 8005578:	f7ff fb28 	bl	8004bcc <at_readbytes>
 800557c:	0003      	movs	r3, r0
 800557e:	613b      	str	r3, [r7, #16]
	logbytes("  = ", rbuf);
 8005580:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <gsm_send_json+0x154>)
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <gsm_send_json+0x180>)
 8005584:	0011      	movs	r1, r2
 8005586:	0018      	movs	r0, r3
 8005588:	f000 f978 	bl	800587c <logbytes>

//	at_recv_after_send(rbuf, sz_rbuf, "AT+CEER\r\n");
	at_recv_after_send(rbuf, sz_rbuf, "AT+HTTPTERM\n");
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <gsm_send_json+0x14c>)
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	4a06      	ldr	r2, [pc, #24]	; (80055ac <gsm_send_json+0x150>)
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <gsm_send_json+0x154>)
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff fc1d 	bl	8004dd4 <at_recv_after_send>
	return result;
 800559a:	697b      	ldr	r3, [r7, #20]
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b007      	add	sp, #28
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	0800a218 	.word	0x0800a218
 80055a8:	20000090 	.word	0x20000090
 80055ac:	0800a228 	.word	0x0800a228
 80055b0:	20003e40 	.word	0x20003e40
 80055b4:	0800a238 	.word	0x0800a238
 80055b8:	0800a248 	.word	0x0800a248
 80055bc:	0800a258 	.word	0x0800a258
 80055c0:	0800a264 	.word	0x0800a264
 80055c4:	0800a27c 	.word	0x0800a27c
 80055c8:	0800a294 	.word	0x0800a294
 80055cc:	0800a2c0 	.word	0x0800a2c0
 80055d0:	0800a2ec 	.word	0x0800a2ec
 80055d4:	0800a304 	.word	0x0800a304
 80055d8:	00004e20 	.word	0x00004e20
 80055dc:	0800a308 	.word	0x0800a308
 80055e0:	0800a310 	.word	0x0800a310
 80055e4:	0800a324 	.word	0x0800a324
 80055e8:	0800a328 	.word	0x0800a328

080055ec <at_wake>:

int at_wake() {
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b097      	sub	sp, #92	; 0x5c
 80055f0:	af02      	add	r7, sp, #8
    char rbuf[50];
    int sz_rbuf = sizeof(rbuf);
 80055f2:	2332      	movs	r3, #50	; 0x32
 80055f4:	64bb      	str	r3, [r7, #72]	; 0x48
    int access, tech, i, fun1, fun2;

    logmsg("...send wakeup\n");
 80055f6:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <at_wake+0x1e4>)
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f91d 	bl	8005838 <logmsg>
    at_recv_after_send(rbuf, sz_rbuf, "AT\n");                 // wakey wakey!
 80055fe:	4a75      	ldr	r2, [pc, #468]	; (80057d4 <at_wake+0x1e8>)
 8005600:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005602:	2314      	movs	r3, #20
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	0018      	movs	r0, r3
 8005608:	f7ff fbe4 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 800560c:	4a71      	ldr	r2, [pc, #452]	; (80057d4 <at_wake+0x1e8>)
 800560e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005610:	2314      	movs	r3, #20
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	0018      	movs	r0, r3
 8005616:	f7ff fbdd 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT+CSCLK=0\n");
 800561a:	4a6f      	ldr	r2, [pc, #444]	; (80057d8 <at_wake+0x1ec>)
 800561c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800561e:	2314      	movs	r3, #20
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	0018      	movs	r0, r3
 8005624:	f7ff fbd6 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT\n");
 8005628:	4a6a      	ldr	r2, [pc, #424]	; (80057d4 <at_wake+0x1e8>)
 800562a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800562c:	2314      	movs	r3, #20
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	0018      	movs	r0, r3
 8005632:	f7ff fbcf 	bl	8004dd4 <at_recv_after_send>

    logmsg("...set full functionality mode\n");
 8005636:	4b69      	ldr	r3, [pc, #420]	; (80057dc <at_wake+0x1f0>)
 8005638:	0018      	movs	r0, r3
 800563a:	f000 f8fd 	bl	8005838 <logmsg>
    at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN?\n");           // check
 800563e:	4a68      	ldr	r2, [pc, #416]	; (80057e0 <at_wake+0x1f4>)
 8005640:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005642:	2314      	movs	r3, #20
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	0018      	movs	r0, r3
 8005648:	f7ff fbc4 	bl	8004dd4 <at_recv_after_send>

	scan(rbuf, "CFUN:", &fun1, -1, &fun2, -1);
 800564c:	2301      	movs	r3, #1
 800564e:	425c      	negs	r4, r3
 8005650:	2308      	movs	r3, #8
 8005652:	18fa      	adds	r2, r7, r3
 8005654:	4963      	ldr	r1, [pc, #396]	; (80057e4 <at_wake+0x1f8>)
 8005656:	2314      	movs	r3, #20
 8005658:	18f8      	adds	r0, r7, r3
 800565a:	2301      	movs	r3, #1
 800565c:	425b      	negs	r3, r3
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	0023      	movs	r3, r4
 8005666:	f7ff fa5d 	bl	8004b24 <scan>
	while (fun1 != 1)
 800566a:	e02b      	b.n	80056c4 <at_wake+0xd8>
	{
		at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN=0\n");          // re-set
 800566c:	4a5e      	ldr	r2, [pc, #376]	; (80057e8 <at_wake+0x1fc>)
 800566e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005670:	2314      	movs	r3, #20
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fbad 	bl	8004dd4 <at_recv_after_send>
		vTaskDelay(MS_TO_TICKS(3000));
 800567a:	4b5c      	ldr	r3, [pc, #368]	; (80057ec <at_wake+0x200>)
 800567c:	0018      	movs	r0, r3
 800567e:	f7fb fe11 	bl	80012a4 <vTaskDelay>
		at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN=1\n");          // re-enable
 8005682:	4a5b      	ldr	r2, [pc, #364]	; (80057f0 <at_wake+0x204>)
 8005684:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005686:	2314      	movs	r3, #20
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	0018      	movs	r0, r3
 800568c:	f7ff fba2 	bl	8004dd4 <at_recv_after_send>
		vTaskDelay(MS_TO_TICKS(3000));
 8005690:	4b56      	ldr	r3, [pc, #344]	; (80057ec <at_wake+0x200>)
 8005692:	0018      	movs	r0, r3
 8005694:	f7fb fe06 	bl	80012a4 <vTaskDelay>
		at_recv_after_send(rbuf, sz_rbuf, "AT+CFUN?\n");           // re-check
 8005698:	4a51      	ldr	r2, [pc, #324]	; (80057e0 <at_wake+0x1f4>)
 800569a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800569c:	2314      	movs	r3, #20
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7ff fb97 	bl	8004dd4 <at_recv_after_send>
		scan(rbuf, "CFUN:", &fun1, -1, &fun2, -1);
 80056a6:	2301      	movs	r3, #1
 80056a8:	425c      	negs	r4, r3
 80056aa:	2308      	movs	r3, #8
 80056ac:	18fa      	adds	r2, r7, r3
 80056ae:	494d      	ldr	r1, [pc, #308]	; (80057e4 <at_wake+0x1f8>)
 80056b0:	2314      	movs	r3, #20
 80056b2:	18f8      	adds	r0, r7, r3
 80056b4:	2301      	movs	r3, #1
 80056b6:	425b      	negs	r3, r3
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	0023      	movs	r3, r4
 80056c0:	f7ff fa30 	bl	8004b24 <scan>
	while (fun1 != 1)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d1d0      	bne.n	800566c <at_wake+0x80>
	}

    for (i=0; i < 10; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ce:	e043      	b.n	8005758 <at_wake+0x16c>
    {
        vTaskDelay(MS_TO_TICKS(5000));
 80056d0:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <at_wake+0x208>)
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7fb fde6 	bl	80012a4 <vTaskDelay>

        logmsg("...check signal strength.  (2: -109db  5: -103db:  8: -97db)\n");
 80056d8:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <at_wake+0x20c>)
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 f8ac 	bl	8005838 <logmsg>
        at_recv_after_send(rbuf, sz_rbuf, "AT+CSQ\n");              // RSSI
 80056e0:	4a46      	ldr	r2, [pc, #280]	; (80057fc <at_wake+0x210>)
 80056e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056e4:	2314      	movs	r3, #20
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fb73 	bl	8004dd4 <at_recv_after_send>

        logmsg("...checking registration: %d of %d\n", i + 1, 10);
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	4b43      	ldr	r3, [pc, #268]	; (8005800 <at_wake+0x214>)
 80056f4:	220a      	movs	r2, #10
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 f89e 	bl	8005838 <logmsg>

        at_recv_after_send(rbuf, sz_rbuf, "AT+CREG?\n");
 80056fc:	4a41      	ldr	r2, [pc, #260]	; (8005804 <at_wake+0x218>)
 80056fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005700:	2314      	movs	r3, #20
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff fb65 	bl	8004dd4 <at_recv_after_send>
        scan(rbuf, "CREG:", &tech, -1, &access, -1);
 800570a:	2301      	movs	r3, #1
 800570c:	425c      	negs	r4, r3
 800570e:	230c      	movs	r3, #12
 8005710:	18fa      	adds	r2, r7, r3
 8005712:	493d      	ldr	r1, [pc, #244]	; (8005808 <at_wake+0x21c>)
 8005714:	2314      	movs	r3, #20
 8005716:	18f8      	adds	r0, r7, r3
 8005718:	2301      	movs	r3, #1
 800571a:	425b      	negs	r3, r3
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	2310      	movs	r3, #16
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	0023      	movs	r3, r4
 8005726:	f7ff f9fd 	bl	8004b24 <scan>

        if (access == 1)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d104      	bne.n	800573a <at_wake+0x14e>
        {
            logmsg("...registered - home network\n");
 8005730:	4b36      	ldr	r3, [pc, #216]	; (800580c <at_wake+0x220>)
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f880 	bl	8005838 <logmsg>
            break;
 8005738:	e011      	b.n	800575e <at_wake+0x172>
        }
        else if (access == 5)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d104      	bne.n	800574a <at_wake+0x15e>
        {
            logmsg("...registered - roaming\n");
 8005740:	4b33      	ldr	r3, [pc, #204]	; (8005810 <at_wake+0x224>)
 8005742:	0018      	movs	r0, r3
 8005744:	f000 f878 	bl	8005838 <logmsg>
            break;
 8005748:	e009      	b.n	800575e <at_wake+0x172>
        }
        else
        {
            logmsg("...not registered\n");
 800574a:	4b32      	ldr	r3, [pc, #200]	; (8005814 <at_wake+0x228>)
 800574c:	0018      	movs	r0, r3
 800574e:	f000 f873 	bl	8005838 <logmsg>
    for (i=0; i < 10; i++)
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	3301      	adds	r3, #1
 8005756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575a:	2b09      	cmp	r3, #9
 800575c:	ddb8      	ble.n	80056d0 <at_wake+0xe4>
        }
    }

    if (access != 1 && access != 5)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d008      	beq.n	8005776 <at_wake+0x18a>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b05      	cmp	r3, #5
 8005768:	d005      	beq.n	8005776 <at_wake+0x18a>
    {
        logmsg("...not registered, 10 attempts, bailing.\n");
 800576a:	4b2b      	ldr	r3, [pc, #172]	; (8005818 <at_wake+0x22c>)
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f863 	bl	8005838 <logmsg>
        return 0;
 8005772:	2300      	movs	r3, #0
 8005774:	e027      	b.n	80057c6 <at_wake+0x1da>
    }

    logmsg("...bunch of SAPBR commands\n");
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <at_wake+0x230>)
 8005778:	0018      	movs	r0, r3
 800577a:	f000 f85d 	bl	8005838 <logmsg>
    at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=0,1\n");
 800577e:	4a28      	ldr	r2, [pc, #160]	; (8005820 <at_wake+0x234>)
 8005780:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005782:	2314      	movs	r3, #20
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff fb24 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"Contype\",\"GPRS\"\n");  // set GPRS mode
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <at_wake+0x238>)
 800578e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005790:	2314      	movs	r3, #20
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff fb1d 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=3,1,\"APN\",\"%s\"\n", g_apn);
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <at_wake+0x23c>)
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <at_wake+0x240>)
 800579e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057a0:	2014      	movs	r0, #20
 80057a2:	1838      	adds	r0, r7, r0
 80057a4:	f7ff fb16 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=1,1\n");  // enable GPRS
 80057a8:	4a21      	ldr	r2, [pc, #132]	; (8005830 <at_wake+0x244>)
 80057aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057ac:	2314      	movs	r3, #20
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff fb0f 	bl	8004dd4 <at_recv_after_send>
    at_recv_after_send(rbuf, sz_rbuf, "AT+SAPBR=2,1\n");  // query status
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <at_wake+0x248>)
 80057b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057ba:	2314      	movs	r3, #20
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff fb08 	bl	8004dd4 <at_recv_after_send>

    return 1;
 80057c4:	2301      	movs	r3, #1
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b015      	add	sp, #84	; 0x54
 80057cc:	bd90      	pop	{r4, r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	0800a338 	.word	0x0800a338
 80057d4:	08009f64 	.word	0x08009f64
 80057d8:	08009fc8 	.word	0x08009fc8
 80057dc:	0800a348 	.word	0x0800a348
 80057e0:	0800a368 	.word	0x0800a368
 80057e4:	0800a374 	.word	0x0800a374
 80057e8:	0800a37c 	.word	0x0800a37c
 80057ec:	00000bb8 	.word	0x00000bb8
 80057f0:	0800a388 	.word	0x0800a388
 80057f4:	00001388 	.word	0x00001388
 80057f8:	0800a394 	.word	0x0800a394
 80057fc:	0800a13c 	.word	0x0800a13c
 8005800:	0800a3d4 	.word	0x0800a3d4
 8005804:	0800a000 	.word	0x0800a000
 8005808:	0800a00c 	.word	0x0800a00c
 800580c:	0800a3f8 	.word	0x0800a3f8
 8005810:	0800a418 	.word	0x0800a418
 8005814:	0800a04c 	.word	0x0800a04c
 8005818:	0800a434 	.word	0x0800a434
 800581c:	0800a460 	.word	0x0800a460
 8005820:	08009f28 	.word	0x08009f28
 8005824:	0800a170 	.word	0x0800a170
 8005828:	20000018 	.word	0x20000018
 800582c:	0800a190 	.word	0x0800a190
 8005830:	0800a1ac 	.word	0x0800a1ac
 8005834:	0800a1bc 	.word	0x0800a1bc

08005838 <logmsg>:

	at_recv_after_send(rbuf, sz_rbuf, "AT+CIPSHUT\n");
}
#endif

void logmsg (char const *fmt, ...) {
 8005838:	b40f      	push	{r0, r1, r2, r3}
 800583a:	b580      	push	{r7, lr}
 800583c:	b0a2      	sub	sp, #136	; 0x88
 800583e:	af00      	add	r7, sp, #0
	char txt[kMAX_LOGMSG];
	va_list vl;

	va_start(vl, fmt);
 8005840:	2394      	movs	r3, #148	; 0x94
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	607b      	str	r3, [r7, #4]
	vsnprintf(txt, sizeof(txt), fmt, vl);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2290      	movs	r2, #144	; 0x90
 800584a:	18ba      	adds	r2, r7, r2
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	2108      	movs	r1, #8
 8005850:	1878      	adds	r0, r7, r1
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	f003 f80a 	bl	800886c <vsniprintf>
	va_end(vl);
	txt[sizeof(txt) - 1] = 0;		// MSFT is buggy and won't zero terminate
 8005858:	2308      	movs	r3, #8
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	227f      	movs	r2, #127	; 0x7f
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

	DEBUG_PUTS(txt);
 8005862:	2308      	movs	r3, #8
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	0018      	movs	r0, r3
 8005868:	f001 fe26 	bl	80074b8 <uart1_Puts>
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b022      	add	sp, #136	; 0x88
 8005872:	bc80      	pop	{r7}
 8005874:	bc08      	pop	{r3}
 8005876:	b004      	add	sp, #16
 8005878:	4718      	bx	r3
	...

0800587c <logbytes>:

void logbytes (char const *prefix, void const *bytes) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	char const *str = (char const *)bytes;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	61bb      	str	r3, [r7, #24]
	int i;

	if (prefix)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <logbytes+0x1c>
		DEBUG_PUTS(prefix);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0018      	movs	r0, r3
 8005894:	f001 fe10 	bl	80074b8 <uart1_Puts>
	for (i = 0; str[i]; i++) {
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e05d      	b.n	800595a <logbytes+0xde>
		unsigned char ch = (unsigned char)str[i];
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	18d2      	adds	r2, r2, r3
 80058a4:	2317      	movs	r3, #23
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	701a      	strb	r2, [r3, #0]
		switch (ch) {
 80058ac:	2317      	movs	r3, #23
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b0d      	cmp	r3, #13
 80058b4:	d016      	beq.n	80058e4 <logbytes+0x68>
 80058b6:	dc04      	bgt.n	80058c2 <logbytes+0x46>
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d018      	beq.n	80058ee <logbytes+0x72>
 80058bc:	2b0a      	cmp	r3, #10
 80058be:	d00c      	beq.n	80058da <logbytes+0x5e>
 80058c0:	e024      	b.n	800590c <logbytes+0x90>
 80058c2:	2b27      	cmp	r3, #39	; 0x27
 80058c4:	d01d      	beq.n	8005902 <logbytes+0x86>
 80058c6:	2b5c      	cmp	r3, #92	; 0x5c
 80058c8:	d002      	beq.n	80058d0 <logbytes+0x54>
 80058ca:	2b22      	cmp	r3, #34	; 0x22
 80058cc:	d014      	beq.n	80058f8 <logbytes+0x7c>
 80058ce:	e01d      	b.n	800590c <logbytes+0x90>
			case '\\': DEBUG_PUTS("\\\\"); break;
 80058d0:	4b29      	ldr	r3, [pc, #164]	; (8005978 <logbytes+0xfc>)
 80058d2:	0018      	movs	r0, r3
 80058d4:	f001 fdf0 	bl	80074b8 <uart1_Puts>
 80058d8:	e03c      	b.n	8005954 <logbytes+0xd8>
			case '\n': DEBUG_PUTS("\\n"); break;
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <logbytes+0x100>)
 80058dc:	0018      	movs	r0, r3
 80058de:	f001 fdeb 	bl	80074b8 <uart1_Puts>
 80058e2:	e037      	b.n	8005954 <logbytes+0xd8>
			case '\r': DEBUG_PUTS("\\r"); break;
 80058e4:	4b26      	ldr	r3, [pc, #152]	; (8005980 <logbytes+0x104>)
 80058e6:	0018      	movs	r0, r3
 80058e8:	f001 fde6 	bl	80074b8 <uart1_Puts>
 80058ec:	e032      	b.n	8005954 <logbytes+0xd8>
			case '\t': DEBUG_PUTS("\\t"); break;
 80058ee:	4b25      	ldr	r3, [pc, #148]	; (8005984 <logbytes+0x108>)
 80058f0:	0018      	movs	r0, r3
 80058f2:	f001 fde1 	bl	80074b8 <uart1_Puts>
 80058f6:	e02d      	b.n	8005954 <logbytes+0xd8>
			case '"': DEBUG_PUTS("\\\""); break;
 80058f8:	4b23      	ldr	r3, [pc, #140]	; (8005988 <logbytes+0x10c>)
 80058fa:	0018      	movs	r0, r3
 80058fc:	f001 fddc 	bl	80074b8 <uart1_Puts>
 8005900:	e028      	b.n	8005954 <logbytes+0xd8>
			case '\'': DEBUG_PUTS("\\'"); break;
 8005902:	4b22      	ldr	r3, [pc, #136]	; (800598c <logbytes+0x110>)
 8005904:	0018      	movs	r0, r3
 8005906:	f001 fdd7 	bl	80074b8 <uart1_Puts>
 800590a:	e023      	b.n	8005954 <logbytes+0xd8>
			default:
				if (ch < ' ') {
 800590c:	2317      	movs	r3, #23
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b1f      	cmp	r3, #31
 8005914:	d80e      	bhi.n	8005934 <logbytes+0xb8>
					char hex[8];
					sprintf(hex, "\\x%02x", ch);
 8005916:	2317      	movs	r3, #23
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	491c      	ldr	r1, [pc, #112]	; (8005990 <logbytes+0x114>)
 800591e:	230c      	movs	r3, #12
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	0018      	movs	r0, r3
 8005924:	f002 fc1a 	bl	800815c <siprintf>
					DEBUG_PUTS(hex);
 8005928:	230c      	movs	r3, #12
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	0018      	movs	r0, r3
 800592e:	f001 fdc3 	bl	80074b8 <uart1_Puts>
					// everything else, including UTF-8 multibyte, put down literally
					chstr[0] = ch;
					chstr[1] = 0;
					DEBUG_PUTS(chstr);
				}
				break;
 8005932:	e00e      	b.n	8005952 <logbytes+0xd6>
					chstr[0] = ch;
 8005934:	2308      	movs	r3, #8
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	2217      	movs	r2, #23
 800593a:	18ba      	adds	r2, r7, r2
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
					chstr[1] = 0;
 8005940:	2308      	movs	r3, #8
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2200      	movs	r2, #0
 8005946:	705a      	strb	r2, [r3, #1]
					DEBUG_PUTS(chstr);
 8005948:	2308      	movs	r3, #8
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	0018      	movs	r0, r3
 800594e:	f001 fdb3 	bl	80074b8 <uart1_Puts>
				break;
 8005952:	46c0      	nop			; (mov r8, r8)
	for (i = 0; str[i]; i++) {
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d19b      	bne.n	800589e <logbytes+0x22>
		}
	}
	DEBUG_PUTS("\n");
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <logbytes+0x118>)
 8005968:	0018      	movs	r0, r3
 800596a:	f001 fda5 	bl	80074b8 <uart1_Puts>
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b008      	add	sp, #32
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	0800a47c 	.word	0x0800a47c
 800597c:	0800a480 	.word	0x0800a480
 8005980:	0800a484 	.word	0x0800a484
 8005984:	0800a488 	.word	0x0800a488
 8005988:	0800a48c 	.word	0x0800a48c
 800598c:	0800a490 	.word	0x0800a490
 8005990:	0800a494 	.word	0x0800a494
 8005994:	0800a49c 	.word	0x0800a49c

08005998 <flush>:
#include "gsmconfig.h"

// hold sampling until modem connects
bool gHoldSamplesDuringModemActivity = true;

static int flush (char *json) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	int retries = 3;
 80059a0:	2303      	movs	r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
	int result;

	// !! modifies json!
	if (json[0]) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d021      	beq.n	80059f0 <flush+0x58>
		strcat(json, "]}]");
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7fa fbb2 	bl	8000118 <strlen>
 80059b4:	0003      	movs	r3, r0
 80059b6:	001a      	movs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	189a      	adds	r2, r3, r2
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <flush+0x64>)
 80059be:	0010      	movs	r0, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	2304      	movs	r3, #4
 80059c4:	001a      	movs	r2, r3
 80059c6:	f002 f930 	bl	8007c2a <memcpy>

		while(retries--) {
 80059ca:	e00c      	b.n	80059e6 <flush+0x4e>
			result = gsm_send_json(g_url, g_auth, json);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	490c      	ldr	r1, [pc, #48]	; (8005a00 <flush+0x68>)
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <flush+0x6c>)
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff fd42 	bl	800545c <gsm_send_json>
 80059d8:	0003      	movs	r3, r0
 80059da:	60bb      	str	r3, [r7, #8]
			if (result)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <flush+0x4e>
				return 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e005      	b.n	80059f2 <flush+0x5a>
		while(retries--) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1e5a      	subs	r2, r3, #1
 80059ea:	60fa      	str	r2, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ed      	bne.n	80059cc <flush+0x34>
		}

	}
	return 0;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	0018      	movs	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b004      	add	sp, #16
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	0800a4a0 	.word	0x0800a4a0
 8005a00:	0800a8cc 	.word	0x0800a8cc
 8005a04:	0800a970 	.word	0x0800a970

08005a08 <add_record>:

static int add_record(char *records, int sz_records, Event_t *pev, char const *long_lat, char const *imsi) {
 8005a08:	b5b0      	push	{r4, r5, r7, lr}
 8005a0a:	b0aa      	sub	sp, #168	; 0xa8
 8005a0c:	af04      	add	r7, sp, #16
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
	char single_rec[128];
	int i;
	int result = 1;	// expect OK to add to buffer
 8005a16:	2301      	movs	r3, #1
 8005a18:	2290      	movs	r2, #144	; 0x90
 8005a1a:	18ba      	adds	r2, r7, r2
 8005a1c:	6013      	str	r3, [r2, #0]

	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
			(unsigned long)pev->TimeStamp,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6819      	ldr	r1, [r3, #0]
			pev->mVolts,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	889b      	ldrh	r3, [r3, #4]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 8005a26:	001c      	movs	r4, r3
			pev->dTemp,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 8005a2c:	001d      	movs	r5, r3
			pev->flags);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	891b      	ldrh	r3, [r3, #8]
	snprintf(single_rec, sizeof(single_rec), "{\"ts\":%lu,\"mv\":%d,\"t\":%d,\"f\":\"%04x\"}",
 8005a32:	4a32      	ldr	r2, [pc, #200]	; (8005afc <add_record+0xf4>)
 8005a34:	2010      	movs	r0, #16
 8005a36:	1838      	adds	r0, r7, r0
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	9501      	str	r5, [sp, #4]
 8005a3c:	9400      	str	r4, [sp, #0]
 8005a3e:	000b      	movs	r3, r1
 8005a40:	2180      	movs	r1, #128	; 0x80
 8005a42:	f002 fb59 	bl	80080f8 <sniprintf>

	i = strlen(records);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fa fb65 	bl	8000118 <strlen>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	2294      	movs	r2, #148	; 0x94
 8005a52:	18ba      	adds	r2, r7, r2
 8005a54:	6013      	str	r3, [r2, #0]

	// flush ?
	if (pev == NULL || i + 1 + strlen(single_rec) + 1 + 1 >= sz_records - 5) {	// 5 for slop
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <add_record+0x72>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fa fb59 	bl	8000118 <strlen>
 8005a66:	0002      	movs	r2, r0
 8005a68:	2394      	movs	r3, #148	; 0x94
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	3303      	adds	r3, #3
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	3a05      	subs	r2, #5
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d315      	bcc.n	8005aa6 <add_record+0x9e>
		if (!flush(records)) {
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff ff8b 	bl	8005998 <flush>
 8005a82:	1e03      	subs	r3, r0, #0
 8005a84:	d104      	bne.n	8005a90 <add_record+0x88>
			result = 0; 	// result FAILED, bail
 8005a86:	2300      	movs	r3, #0
 8005a88:	2290      	movs	r2, #144	; 0x90
 8005a8a:	18ba      	adds	r2, r7, r2
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e003      	b.n	8005a98 <add_record+0x90>
		} else {
			result = 2; 	// indicated sent successfully
 8005a90:	2302      	movs	r3, #2
 8005a92:	2290      	movs	r2, #144	; 0x90
 8005a94:	18ba      	adds	r2, r7, r2
 8005a96:	6013      	str	r3, [r2, #0]
		}

		// restart
		records[0] = 0;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
		i = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2294      	movs	r2, #148	; 0x94
 8005aa2:	18ba      	adds	r2, r7, r2
 8005aa4:	6013      	str	r3, [r2, #0]
	}

	if (i == 0) {
 8005aa6:	2394      	movs	r3, #148	; 0x94
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <add_record+0xba>
		sprintf(records, "[{\"IMSI\":%s,\"gps\":\"%s\",\"records\": [",
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	22a8      	movs	r2, #168	; 0xa8
 8005ab4:	18ba      	adds	r2, r7, r2
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	4911      	ldr	r1, [pc, #68]	; (8005b00 <add_record+0xf8>)
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f002 fb4e 	bl	800815c <siprintf>
 8005ac0:	e00e      	b.n	8005ae0 <add_record+0xd8>
				imsi,
				long_lat);

	} else {
		strcat(records, ",");	// more in list
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7fa fb27 	bl	8000118 <strlen>
 8005aca:	0003      	movs	r3, r0
 8005acc:	001a      	movs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	189a      	adds	r2, r3, r2
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <add_record+0xfc>)
 8005ad4:	0010      	movs	r0, r2
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	2302      	movs	r3, #2
 8005ada:	001a      	movs	r2, r3
 8005adc:	f002 f8a5 	bl	8007c2a <memcpy>
	}
	strcat(records, single_rec);
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	18fa      	adds	r2, r7, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f002 fb59 	bl	80081a0 <strcat>
	return (result);
 8005aee:	2390      	movs	r3, #144	; 0x90
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	681b      	ldr	r3, [r3, #0]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b026      	add	sp, #152	; 0x98
 8005afa:	bdb0      	pop	{r4, r5, r7, pc}
 8005afc:	0800a4a4 	.word	0x0800a4a4
 8005b00:	0800a4cc 	.word	0x0800a4cc
 8005b04:	0800a4f0 	.word	0x0800a4f0

08005b08 <get_time_and_location>:

int get_time_and_location(uint32 *pt, char *long_lat, int cb_long_lat)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
    int i;

    *pt = 0;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

    // get time and location
    for (i = 0; i < 10 && *pt == 0; i++) {
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e00d      	b.n	8005b3c <get_time_and_location+0x34>
        vTaskDelay(MS_TO_TICKS(2000));
 8005b20:	23fa      	movs	r3, #250	; 0xfa
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7fb fbbd 	bl	80012a4 <vTaskDelay>
        gsm_get_location_and_time (long_lat, cb_long_lat, pt);
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7ff fc57 	bl	80053e4 <gsm_get_location_and_time>
    for (i = 0; i < 10 && *pt == 0; i++) {
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	dc03      	bgt.n	8005b4a <get_time_and_location+0x42>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ea      	beq.n	8005b20 <get_time_and_location+0x18>
    }

    if (*pt == 0) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <get_time_and_location+0x58>
        debug_Printf("failed to get time/location from modem");
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <get_time_and_location+0x70>)
 8005b54:	0018      	movs	r0, r3
 8005b56:	f001 fd01 	bl	800755c <uart1_Printf>
        return -1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	e007      	b.n	8005b70 <get_time_and_location+0x68>
    } else {
        debug_Printf("time from modem %d, location %s", *pt, long_lat);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <get_time_and_location+0x74>)
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f001 fcf7 	bl	800755c <uart1_Printf>
    }

    return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b006      	add	sp, #24
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	0800a4f4 	.word	0x0800a4f4
 8005b7c:	0800a51c 	.word	0x0800a51c

08005b80 <send_records>:

char records[1024] = {0};
void send_records(char *IMSI)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b08b      	sub	sp, #44	; 0x2c
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	6078      	str	r0, [r7, #4]
	Event_t ev;
	uint32 t=0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
	int result=0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
	static char long_lat[128];

    if (get_time_and_location(&t, long_lat, sizeof(long_lat)) != 0)
 8005b90:	492b      	ldr	r1, [pc, #172]	; (8005c40 <send_records+0xc0>)
 8005b92:	230c      	movs	r3, #12
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7ff ffb5 	bl	8005b08 <get_time_and_location>
 8005b9e:	1e03      	subs	r3, r0, #0
 8005ba0:	d149      	bne.n	8005c36 <send_records+0xb6>
    {
        return;
    }

    Time_Callback(t);	// sync time    // TODO: This name might suck. what does it do?
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f001 f9f1 	bl	8006f8c <Time_Callback>

    debug_Puts("--- Sending ---");
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <send_records+0xc4>)
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fd f870 	bl	8002c92 <debug_Puts>
   
    Begin_Report();	 // have flash prepare the reports
 8005bb2:	f7fd ffa3 	bl	8003afc <Begin_Report>

    while (Report_Callback(&ev) != -1) 
 8005bb6:	e01d      	b.n	8005bf4 <send_records+0x74>
    {
        result = add_record(records, sizeof(records), &ev, long_lat, IMSI);
 8005bb8:	4c21      	ldr	r4, [pc, #132]	; (8005c40 <send_records+0xc0>)
 8005bba:	2310      	movs	r3, #16
 8005bbc:	18fa      	adds	r2, r7, r3
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	00d9      	lsls	r1, r3, #3
 8005bc2:	4821      	ldr	r0, [pc, #132]	; (8005c48 <send_records+0xc8>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	0023      	movs	r3, r4
 8005bca:	f7ff ff1d 	bl	8005a08 <add_record>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	61fb      	str	r3, [r7, #28]

        if (result == 2) {
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d105      	bne.n	8005be4 <send_records+0x64>
            Successful_Xfer_Callback();		// send ok, tell flash
 8005bd8:	f7fe f8dc 	bl	8003d94 <Successful_Xfer_Callback>
            debug_Printf("**** POST successful, Wrote Page ****\n");
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <send_records+0xcc>)
 8005bde:	0018      	movs	r0, r3
 8005be0:	f001 fcbc 	bl	800755c <uart1_Printf>
        }

        if (result == 0) {
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <send_records+0x74>
            debug_Printf("**** POST failed ****\n");
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <send_records+0xd0>)
 8005bec:	0018      	movs	r0, r3
 8005bee:	f001 fcb5 	bl	800755c <uart1_Printf>
            break;							// bail
 8005bf2:	e007      	b.n	8005c04 <send_records+0x84>
    while (Report_Callback(&ev) != -1) 
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7fd fffb 	bl	8003bf4 <Report_Callback>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	3301      	adds	r3, #1
 8005c02:	d1d9      	bne.n	8005bb8 <send_records+0x38>
        }
    }

    // flush/post final page
    if (result != 0) {
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <send_records+0xac>
        if (flush(records)) {
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <send_records+0xc8>)
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff fec3 	bl	8005998 <flush>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d006      	beq.n	8005c24 <send_records+0xa4>
            Successful_Xfer_Callback();			// sent ok, tell flash
 8005c16:	f7fe f8bd 	bl	8003d94 <Successful_Xfer_Callback>
            debug_Printf("**** POST successful, Wrote Page ****\n");
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <send_records+0xcc>)
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f001 fc9d 	bl	800755c <uart1_Printf>
 8005c22:	e003      	b.n	8005c2c <send_records+0xac>
        } else {
            debug_Printf("** POST failed **\n");
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <send_records+0xd4>)
 8005c26:	0018      	movs	r0, r3
 8005c28:	f001 fc98 	bl	800755c <uart1_Printf>
        }
    }

    debug_Puts("--- Done Send_Records ---");
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <send_records+0xd8>)
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7fd f82f 	bl	8002c92 <debug_Puts>
 8005c34:	e000      	b.n	8005c38 <send_records+0xb8>
        return;
 8005c36:	46c0      	nop			; (mov r8, r8)
}
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b009      	add	sp, #36	; 0x24
 8005c3c:	bd90      	pop	{r4, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	20004808 	.word	0x20004808
 8005c44:	0800a53c 	.word	0x0800a53c
 8005c48:	20004408 	.word	0x20004408
 8005c4c:	0800a54c 	.word	0x0800a54c
 8005c50:	0800a574 	.word	0x0800a574
 8005c54:	0800a58c 	.word	0x0800a58c
 8005c58:	0800a5a0 	.word	0x0800a5a0

08005c5c <WaitForModemInit>:

// Wait for task in main() to finish initial setup, and set state to 1.
void WaitForModemInit()
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
    while (1)
    {
        vTaskDelay(MS_TO_TICKS(1000));
 8005c60:	23fa      	movs	r3, #250	; 0xfa
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7fb fb1d 	bl	80012a4 <vTaskDelay>
        if (g_modemState == 1)
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <WaitForModemInit+0x20>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d000      	beq.n	8005c74 <WaitForModemInit+0x18>
        vTaskDelay(MS_TO_TICKS(1000));
 8005c72:	e7f5      	b.n	8005c60 <WaitForModemInit+0x4>
        {
            break;
 8005c74:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20004928 	.word	0x20004928

08005c80 <prvCellTask>:

void prvCellTask( void *pvParameters )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    static char IMSI[32];
    static char long_lat[128];
    uint32 t=0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

    WaitForModemInit();
 8005c8c:	f7ff ffe6 	bl	8005c5c <WaitForModemInit>

    debug_Printf("--- Do final modem prep ---");
 8005c90:	4b54      	ldr	r3, [pc, #336]	; (8005de4 <prvCellTask+0x164>)
 8005c92:	0018      	movs	r0, r3
 8005c94:	f001 fc62 	bl	800755c <uart1_Printf>
    gsm_set_apn(g_apn);
 8005c98:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <prvCellTask+0x168>)
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7ff fb8e 	bl	80053bc <gsm_set_apn>

    // AT init and get time
    do {
        do_init();
 8005ca0:	f7ff fa8c 	bl	80051bc <do_init>
        at_wake();
 8005ca4:	f7ff fca2 	bl	80055ec <at_wake>

        LED_OFF(GREEN_LED);
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fe f9eb 	bl	8004088 <LED_OFF>
        LED_ON(RED_LED);
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	01db      	lsls	r3, r3, #7
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7fe f9d4 	bl	8004064 <LED_ON>
        vTaskDelay(MS_TO_TICKS(500));
 8005cbc:	23fa      	movs	r3, #250	; 0xfa
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7fb faef 	bl	80012a4 <vTaskDelay>

        gsm_get_location_and_time (long_lat, sizeof(long_lat), &t);
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	18fa      	adds	r2, r7, r3
 8005cca:	4b48      	ldr	r3, [pc, #288]	; (8005dec <prvCellTask+0x16c>)
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7ff fb88 	bl	80053e4 <gsm_get_location_and_time>

        LED_ON(GREEN_LED);
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7fe f9c3 	bl	8004064 <LED_ON>
        LED_OFF(RED_LED);
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	01db      	lsls	r3, r3, #7
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fe f9d0 	bl	8004088 <LED_OFF>
        vTaskDelay(MS_TO_TICKS(500));
 8005ce8:	23fa      	movs	r3, #250	; 0xfa
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7fb fad9 	bl	80012a4 <vTaskDelay>
    } while(t==0);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0d3      	beq.n	8005ca0 <prvCellTask+0x20>

    LED_OFF(RED_LED);		// red off if talking to modem
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	01db      	lsls	r3, r3, #7
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fe f9c3 	bl	8004088 <LED_OFF>
    LED_ON(GREEN_LED);		// solid on after connect
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	0018      	movs	r0, r3
 8005d08:	f7fe f9ac 	bl	8004064 <LED_ON>

    Time_Callback(t);		// set the time for the flash logger
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f001 f93c 	bl	8006f8c <Time_Callback>
    gsm_get_IMSI(IMSI, sizeof(IMSI));
 8005d14:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <prvCellTask+0x170>)
 8005d16:	2120      	movs	r1, #32
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff fb29 	bl	8005370 <gsm_get_IMSI>

    // let main thread know we are ready to rock
    debug_Printf("--- Modem prep complete ---");
 8005d1e:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <prvCellTask+0x174>)
 8005d20:	0018      	movs	r0, r3
 8005d22:	f001 fc1b 	bl	800755c <uart1_Printf>
    g_modemState = 2;
 8005d26:	4b34      	ldr	r3, [pc, #208]	; (8005df8 <prvCellTask+0x178>)
 8005d28:	2202      	movs	r2, #2
 8005d2a:	601a      	str	r2, [r3, #0]

    debug_Puts("--- Sleep ---");
 8005d2c:	4b33      	ldr	r3, [pc, #204]	; (8005dfc <prvCellTask+0x17c>)
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f7fc ffaf 	bl	8002c92 <debug_Puts>
    at_sleep();
 8005d34:	f7ff f878 	bl	8004e28 <at_sleep>

    // Wait a bit so let modem simmer down before measuring again
    vTaskDelay(MS_TO_TICKS(2000));
 8005d38:	23fa      	movs	r3, #250	; 0xfa
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fb fab1 	bl	80012a4 <vTaskDelay>
    gHoldSamplesDuringModemActivity = false;
 8005d42:	4b2f      	ldr	r3, [pc, #188]	; (8005e00 <prvCellTask+0x180>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]

    for( ;; )
    {
        // wait for the semaphore from the main task
        if (xSemaphoreTake(connect_Semaphore, MS_TO_TICKS(Config.Report_Rate * 1000)) == pdTRUE )
 8005d48:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <prvCellTask+0x184>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <prvCellTask+0x188>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	22fa      	movs	r2, #250	; 0xfa
 8005d52:	0092      	lsls	r2, r2, #2
 8005d54:	4353      	muls	r3, r2
 8005d56:	001a      	movs	r2, r3
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f7fa fff3 	bl	8000d46 <xQueueGenericReceive>
 8005d60:	0003      	movs	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d1f0      	bne.n	8005d48 <prvCellTask+0xc8>
        {
            // Stop taking measurements while using the modem
            gHoldSamplesDuringModemActivity = true;
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <prvCellTask+0x180>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]
            vTaskDelay(MS_TO_TICKS(3000));
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <prvCellTask+0x18c>)
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f7fb fa98 	bl	80012a4 <vTaskDelay>

            LED_OFF(GREEN_LED);
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fe f985 	bl	8004088 <LED_OFF>
            LED_ON(BLUE_LED);
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	015b      	lsls	r3, r3, #5
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fe f96e 	bl	8004064 <LED_ON>

            // Wake up the modem
            debug_Puts("--- Wake Up ---");
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <prvCellTask+0x190>)
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fc ff81 	bl	8002c92 <debug_Puts>
            if (at_wake())
 8005d90:	f7ff fc2c 	bl	80055ec <at_wake>
 8005d94:	1e03      	subs	r3, r0, #0
 8005d96:	d008      	beq.n	8005daa <prvCellTask+0x12a>
            {
                debug_Puts("--- Wake Up Successful, Sending Records ---");
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <prvCellTask+0x194>)
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7fc ff79 	bl	8002c92 <debug_Puts>
                send_records(IMSI);
 8005da0:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <prvCellTask+0x170>)
 8005da2:	0018      	movs	r0, r3
 8005da4:	f7ff feec 	bl	8005b80 <send_records>
 8005da8:	e003      	b.n	8005db2 <prvCellTask+0x132>
            }
            else
            {
                debug_Puts("--- Wake Up Failed, Not Sending Records ---");
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <prvCellTask+0x198>)
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7fc ff70 	bl	8002c92 <debug_Puts>
            }

            LED_ON(GREEN_LED);
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7fe f954 	bl	8004064 <LED_ON>
            LED_OFF(BLUE_LED);
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	015b      	lsls	r3, r3, #5
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f7fe f961 	bl	8004088 <LED_OFF>

            debug_Puts("--- Sleep ---");
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <prvCellTask+0x17c>)
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7fc ff62 	bl	8002c92 <debug_Puts>
            at_sleep();
 8005dce:	f7ff f82b 	bl	8004e28 <at_sleep>

            // Wait a bit so let modem simmer down before measuring again
            vTaskDelay(MS_TO_TICKS(2000));
 8005dd2:	23fa      	movs	r3, #250	; 0xfa
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7fb fa64 	bl	80012a4 <vTaskDelay>
            gHoldSamplesDuringModemActivity = false;
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <prvCellTask+0x180>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
        if (xSemaphoreTake(connect_Semaphore, MS_TO_TICKS(Config.Report_Rate * 1000)) == pdTRUE )
 8005de2:	e7b1      	b.n	8005d48 <prvCellTask+0xc8>
 8005de4:	0800a5bc 	.word	0x0800a5bc
 8005de8:	0800a960 	.word	0x0800a960
 8005dec:	20004888 	.word	0x20004888
 8005df0:	20004908 	.word	0x20004908
 8005df4:	0800a5d8 	.word	0x0800a5d8
 8005df8:	20004928 	.word	0x20004928
 8005dfc:	0800a5f4 	.word	0x0800a5f4
 8005e00:	20000094 	.word	0x20000094
 8005e04:	20005a2c 	.word	0x20005a2c
 8005e08:	20005a68 	.word	0x20005a68
 8005e0c:	00000bb8 	.word	0x00000bb8
 8005e10:	0800a604 	.word	0x0800a604
 8005e14:	0800a614 	.word	0x0800a614
 8005e18:	0800a640 	.word	0x0800a640

08005e1c <Clocks_Init>:
};

// ------------------------------------------------------------------------------------------

void Clocks_Init()								//	Enable clocks to the various sub-systems
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);	//	Enable GPIO clock
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	029b      	lsls	r3, r3, #10
 8005e24:	2101      	movs	r1, #1
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7fc fcec 	bl	8002804 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);	//	Enable GPIO clock
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	02db      	lsls	r3, r3, #11
 8005e30:	2101      	movs	r1, #1
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7fc fce6 	bl	8002804 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOC, ENABLE);	//	Enable GPIO clock
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	031b      	lsls	r3, r3, #12
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f7fc fce0 	bl	8002804 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_DMA1,	ENABLE);
 8005e44:	2101      	movs	r1, #1
 8005e46:	2001      	movs	r0, #1
 8005e48:	f7fc fcdc 	bl	8002804 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd (RCC_AHBPeriph_CRC,	ENABLE);
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	2040      	movs	r0, #64	; 0x40
 8005e50:	f7fc fcd8 	bl	8002804 <RCC_AHBPeriphClockCmd>

//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM3,   ENABLE);		///	TODO: delete what's not needed...
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM6,   ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM14,  ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_WWDG,   ENABLE);
	RCC_APB1PeriphClockCmd (RCC_APB1Periph_USART2, ENABLE);
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	2101      	movs	r1, #1
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7fc fd12 	bl	8002884 <RCC_APB1PeriphClockCmd>
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_I2C1,   ENABLE);
//	RCC_APB1PeriphClockCmd (RCC_APB1Periph_I2C2,   ENABLE);
	RCC_APB1PeriphClockCmd (RCC_APB1Periph_PWR,	   ENABLE);
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	055b      	lsls	r3, r3, #21
 8005e64:	2101      	movs	r1, #1
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7fc fd0c 	bl	8002884 <RCC_APB1PeriphClockCmd>

	RCC_APB2PeriphClockCmd (RCC_APB2Periph_SYSCFG, ENABLE);		///	TODO: delete what's not needed...
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f7fc fce8 	bl	8002844 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM1,   ENABLE);
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	2101      	movs	r1, #1
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f7fc fce2 	bl	8002844 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_SPI1,   ENABLE);
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	015b      	lsls	r3, r3, #5
 8005e84:	2101      	movs	r1, #1
 8005e86:	0018      	movs	r0, r3
 8005e88:	f7fc fcdc 	bl	8002844 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1, ENABLE);
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	2101      	movs	r1, #1
 8005e92:	0018      	movs	r0, r3
 8005e94:	f7fc fcd6 	bl	8002844 <RCC_APB2PeriphClockCmd>
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM15,  ENABLE);
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM16,  ENABLE);
//	RCC_APB2PeriphClockCmd (RCC_APB2Periph_TIM17,  ENABLE);
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_DBGMCU, ENABLE);
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	03db      	lsls	r3, r3, #15
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fc fcd0 	bl	8002844 <RCC_APB2PeriphClockCmd>
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <Hardware_Init>:
  * @brief	Initialize the I/O ports and internal peripherals.
  * @param	None
  * @retval None
  */
void Hardware_Init()
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
	int  i, pin;
	GPIO_InitTypeDef GPIO_InitStructure;

	Clocks_Init();					//	Enable clocks to the various sub-systems
 8005eb2:	f7ff ffb3 	bl	8005e1c <Clocks_Init>
									//	Init output pins as low-level
	GPIO_Write (GPIOA, SS_pin);		//	Port A = all low except -SS pin
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	021a      	lsls	r2, r3, #8
 8005eba:	2390      	movs	r3, #144	; 0x90
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	0011      	movs	r1, r2
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fc fa75 	bl	80023b0 <GPIO_Write>
	GPIO_Write (GPIOB, 0);			//	Port B = all low   (ALL LEDs ON)
 8005ec6:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <Hardware_Init+0x104>)
 8005ec8:	2100      	movs	r1, #0
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7fc fa70 	bl	80023b0 <GPIO_Write>
	GPIO_Write (GPIOC, 0);			//	Port C = all low
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <Hardware_Init+0x108>)
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7fc fa6b 	bl	80023b0 <GPIO_Write>

	for (i=0; i<GPIO_COUNT; i++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e04a      	b.n	8005f76 <Hardware_Init+0xca>
	{
		pin = 1 << Pin_Defns[i].Pin;
 8005ee0:	4935      	ldr	r1, [pc, #212]	; (8005fb8 <Hardware_Init+0x10c>)
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	18cb      	adds	r3, r1, r3
 8005eee:	3304      	adds	r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	0013      	movs	r3, r2
 8005ef8:	60bb      	str	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Pin	  = pin;
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	003b      	movs	r3, r7
 8005efe:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Mode  = Pin_Defns[i].Mode;
 8005f00:	492d      	ldr	r1, [pc, #180]	; (8005fb8 <Hardware_Init+0x10c>)
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	0013      	movs	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	189b      	adds	r3, r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	18cb      	adds	r3, r1, r3
 8005f0e:	3308      	adds	r3, #8
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	003b      	movs	r3, r7
 8005f14:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_Speed = Pin_Defns[i].Speed;
 8005f16:	4928      	ldr	r1, [pc, #160]	; (8005fb8 <Hardware_Init+0x10c>)
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	0013      	movs	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	189b      	adds	r3, r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	18cb      	adds	r3, r1, r3
 8005f24:	3309      	adds	r3, #9
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	003b      	movs	r3, r7
 8005f2a:	715a      	strb	r2, [r3, #5]
		GPIO_InitStructure.GPIO_OType = Pin_Defns[i].PP_OD;
 8005f2c:	4922      	ldr	r1, [pc, #136]	; (8005fb8 <Hardware_Init+0x10c>)
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	0013      	movs	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	189b      	adds	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	18cb      	adds	r3, r1, r3
 8005f3a:	330a      	adds	r3, #10
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	003b      	movs	r3, r7
 8005f40:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_PuPd  = Pin_Defns[i].PU_PD;
 8005f42:	491d      	ldr	r1, [pc, #116]	; (8005fb8 <Hardware_Init+0x10c>)
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	0013      	movs	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	189b      	adds	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	18cb      	adds	r3, r1, r3
 8005f50:	330b      	adds	r3, #11
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	003b      	movs	r3, r7
 8005f56:	71da      	strb	r2, [r3, #7]
		GPIO_Init (Pin_Defns[i].Port, &GPIO_InitStructure);
 8005f58:	4917      	ldr	r1, [pc, #92]	; (8005fb8 <Hardware_Init+0x10c>)
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	585b      	ldr	r3, [r3, r1]
 8005f66:	003a      	movs	r2, r7
 8005f68:	0011      	movs	r1, r2
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7fc f970 	bl	8002250 <GPIO_Init>
	for (i=0; i<GPIO_COUNT; i++)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	ddb1      	ble.n	8005ee0 <Hardware_Init+0x34>
	}

	Flash_Disable();				//	This pin normally HI
 8005f7c:	f7fc ffd5 	bl	8002f2a <Flash_Disable>
	uS_Delay (500000);				//	1/2 second delay with all LEDs on
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <Hardware_Init+0x110>)
 8005f82:	0018      	movs	r0, r3
 8005f84:	f000 fa74 	bl	8006470 <uS_Delay>
	LED_OFF (GREEN_LED);			//	Initial state: disconnected from cell
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7fe f87b 	bl	8004088 <LED_OFF>
	LED_OFF (RED_LED);				//		(Red LED off)
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	01db      	lsls	r3, r3, #7
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7fe f876 	bl	8004088 <LED_OFF>
	LED_OFF (BLUE_LED);				//		(Blue LED off)
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	015b      	lsls	r3, r3, #5
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7fe f871 	bl	8004088 <LED_OFF>
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b004      	add	sp, #16
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	48000400 	.word	0x48000400
 8005fb4:	48000800 	.word	0x48000800
 8005fb8:	0800a9d0 	.word	0x0800a9d0
 8005fbc:	0007a120 	.word	0x0007a120

08005fc0 <MODEM_PWRKEY>:


void MODEM_PWRKEY (int x)			//	Set or Clear the Modem PowerKey pin
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <MODEM_PWRKEY+0x18>
 8005fce:	2390      	movs	r3, #144	; 0x90
 8005fd0:	05db      	lsls	r3, r3, #23
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<1);
}
 8005fd6:	e003      	b.n	8005fe0 <MODEM_PWRKEY+0x20>
	else	GPIOA->BRR = (1<<1);
 8005fd8:	2390      	movs	r3, #144	; 0x90
 8005fda:	05db      	lsls	r3, r3, #23
 8005fdc:	2202      	movs	r2, #2
 8005fde:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <TEMP_SCL>:
	else	GPIOA->BRR = (1<<15);
}


void TEMP_SCL (int x)				//	Set or Clear the A/D's I2C SCL pin
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<9);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <TEMP_SCL+0x1a>
 8005ff6:	2390      	movs	r3, #144	; 0x90
 8005ff8:	05db      	lsls	r3, r3, #23
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	0092      	lsls	r2, r2, #2
 8005ffe:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<9);
}
 8006000:	e004      	b.n	800600c <TEMP_SCL+0x24>
	else	GPIOA->BRR = (1<<9);
 8006002:	2390      	movs	r3, #144	; 0x90
 8006004:	05db      	lsls	r3, r3, #23
 8006006:	2280      	movs	r2, #128	; 0x80
 8006008:	0092      	lsls	r2, r2, #2
 800600a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <TEMP_SDA>:


void TEMP_SDA (int x)				//	Set or Clear the A/D's I2C SDA pin
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<10);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <TEMP_SDA+0x1a>
 8006022:	2390      	movs	r3, #144	; 0x90
 8006024:	05db      	lsls	r3, r3, #23
 8006026:	2280      	movs	r2, #128	; 0x80
 8006028:	00d2      	lsls	r2, r2, #3
 800602a:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<10);
}
 800602c:	e004      	b.n	8006038 <TEMP_SDA+0x24>
	else	GPIOA->BRR = (1<<10);
 800602e:	2390      	movs	r3, #144	; 0x90
 8006030:	05db      	lsls	r3, r3, #23
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	00d2      	lsls	r2, r2, #3
 8006036:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}

08006040 <VOLT_SCL>:


void VOLT_SCL (int x)				//	Set or Clear the A/D's I2C SCL pin
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<11);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <VOLT_SCL+0x1a>
 800604e:	2390      	movs	r3, #144	; 0x90
 8006050:	05db      	lsls	r3, r3, #23
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	0112      	lsls	r2, r2, #4
 8006056:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<11);
}
 8006058:	e004      	b.n	8006064 <VOLT_SCL+0x24>
	else	GPIOA->BRR = (1<<11);
 800605a:	2390      	movs	r3, #144	; 0x90
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	0112      	lsls	r2, r2, #4
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	b002      	add	sp, #8
 800606a:	bd80      	pop	{r7, pc}

0800606c <VOLT_SDA>:


void VOLT_SDA (int x)				//	Set or Clear the A/D's I2C SDA pin
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	if (x)	GPIOA->BSRR = (1<<12);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <VOLT_SDA+0x1a>
 800607a:	2390      	movs	r3, #144	; 0x90
 800607c:	05db      	lsls	r3, r3, #23
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	0152      	lsls	r2, r2, #5
 8006082:	619a      	str	r2, [r3, #24]
	else	GPIOA->BRR = (1<<12);
}
 8006084:	e004      	b.n	8006090 <VOLT_SDA+0x24>
	else	GPIOA->BRR = (1<<12);
 8006086:	2390      	movs	r3, #144	; 0x90
 8006088:	05db      	lsls	r3, r3, #23
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	0152      	lsls	r2, r2, #5
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}

08006098 <MODEM_PWR_EN>:


void MODEM_PWR_EN (int x)			//	Set or Clear the Modem Power-Enable pin
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	if (x)	GPIOB->BSRR = (1<<8);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <MODEM_PWR_EN+0x18>
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <MODEM_PWR_EN+0x28>)
 80060a8:	2280      	movs	r2, #128	; 0x80
 80060aa:	0052      	lsls	r2, r2, #1
 80060ac:	619a      	str	r2, [r3, #24]
	else	GPIOB->BRR = (1<<8);
}
 80060ae:	e003      	b.n	80060b8 <MODEM_PWR_EN+0x20>
	else	GPIOB->BRR = (1<<8);
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <MODEM_PWR_EN+0x28>)
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	0052      	lsls	r2, r2, #1
 80060b6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80060b8:	46c0      	nop			; (mov r8, r8)
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	48000400 	.word	0x48000400

080060c4 <main>:
static volatile uint32_t ulCountOfTimerCallbackExecutions = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af04      	add	r7, sp, #16
	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 80060ca:	f000 f9cc 	bl	8006466 <prvSetupHardware>
	Hardware_Init();
 80060ce:	f7ff feed 	bl	8005eac <Hardware_Init>
	Vars_Init();
 80060d2:	f000 fa3f 	bl	8006554 <Vars_Init>
	uS_Delay (500000);			//	1/2 second delay before accessing FLASH
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <main+0xac>)
 80060d8:	0018      	movs	r0, r3
 80060da:	f000 f9c9 	bl	8006470 <uS_Delay>
	Temperature_Init();
 80060de:	f7fe f9d1 	bl	8004484 <Temperature_Init>
	Voltage_Init();
 80060e2:	f7fe fbd5 	bl	8004890 <Voltage_Init>
	debug_Init();
 80060e6:	f7fc fdcd 	bl	8002c84 <debug_Init>
	Modem_Init();		///	TODO: ADD MODEM TEST FOR BOARD-FAILS
 80060ea:	f7fd ffdf 	bl	80040ac <Modem_Init>
	uS_Delay (500000);			//	1/2 second delay before accessing FLASH
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <main+0xac>)
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f9bd 	bl	8006470 <uS_Delay>
	Flash_Init();
 80060f6:	f7fd ff83 	bl	8004000 <Flash_Init>

	vSemaphoreCreateBinary(connect_Semaphore);
 80060fa:	2203      	movs	r2, #3
 80060fc:	2100      	movs	r1, #0
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fa fcb7 	bl	8000a72 <xQueueGenericCreate>
 8006104:	0002      	movs	r2, r0
 8006106:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <main+0xb0>)
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <main+0xb0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <main+0x5c>
 8006112:	4b18      	ldr	r3, [pc, #96]	; (8006174 <main+0xb0>)
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	f7fa fd2e 	bl	8000b7c <xQueueGenericSend>
	epoch_Mutex = xSemaphoreCreateMutex(); // initialize the mutex for access to epoch
 8006120:	2001      	movs	r0, #1
 8006122:	f7fa fce6 	bl	8000af2 <xQueueCreateMutex>
 8006126:	0002      	movs	r2, r0
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <main+0xb4>)
 800612a:	601a      	str	r2, [r3, #0]

	/* Create the main task */
	xTaskCreate( 	prvMainTask,					/* The function that implements the task. */
 800612c:	2396      	movs	r3, #150	; 0x96
 800612e:	005a      	lsls	r2, r3, #1
 8006130:	4912      	ldr	r1, [pc, #72]	; (800617c <main+0xb8>)
 8006132:	4813      	ldr	r0, [pc, #76]	; (8006180 <main+0xbc>)
 8006134:	2300      	movs	r3, #0
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	2300      	movs	r3, #0
 800613a:	9302      	str	r3, [sp, #8]
 800613c:	2300      	movs	r3, #0
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	2302      	movs	r3, #2
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	f7fa ffe3 	bl	8001110 <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvCellTask,
 800614a:	23fa      	movs	r3, #250	; 0xfa
 800614c:	005a      	lsls	r2, r3, #1
 800614e:	490d      	ldr	r1, [pc, #52]	; (8006184 <main+0xc0>)
 8006150:	480d      	ldr	r0, [pc, #52]	; (8006188 <main+0xc4>)
 8006152:	2300      	movs	r3, #0
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	2300      	movs	r3, #0
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	2300      	movs	r3, #0
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	2301      	movs	r3, #1
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	f7fa ffd4 	bl	8001110 <xTaskGenericCreate>
					NULL,
					CELL_TASK_PRIORITY,
					NULL );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8006168:	f7fb f8c8 	bl	80012fc <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 800616c:	e7fe      	b.n	800616c <main+0xa8>
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	0007a120 	.word	0x0007a120
 8006174:	20005a2c 	.word	0x20005a2c
 8006178:	20005a1c 	.word	0x20005a1c
 800617c:	0800a66c 	.word	0x0800a66c
 8006180:	08006255 	.word	0x08006255
 8006184:	0800a674 	.word	0x0800a674
 8006188:	08005c81 	.word	0x08005c81

0800618c <Show_Board_Failure>:
}

/*-----------------------------------------------------------*/

static void Show_Board_Failure()		//	Does not return!
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
	debug_PutLine("\r\nBoard Fail: ");
 8006190:	4b20      	ldr	r3, [pc, #128]	; (8006214 <Show_Board_Failure+0x88>)
 8006192:	0018      	movs	r0, r3
 8006194:	f7fc fd89 	bl	8002caa <debug_PutLine>
	if (Board_Fails & TEMP_FAIL)	debug_PutLine("\tTemp Module");
 8006198:	4b1f      	ldr	r3, [pc, #124]	; (8006218 <Show_Board_Failure+0x8c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	d003      	beq.n	80061aa <Show_Board_Failure+0x1e>
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <Show_Board_Failure+0x90>)
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7fc fd80 	bl	8002caa <debug_PutLine>
	if (Board_Fails & VOLT_FAIL)	debug_PutLine("\tVolt Module");
 80061aa:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <Show_Board_Failure+0x8c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d003      	beq.n	80061bc <Show_Board_Failure+0x30>
 80061b4:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <Show_Board_Failure+0x94>)
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7fc fd77 	bl	8002caa <debug_PutLine>
	if (Board_Fails & FLASH_FAIL)	debug_PutLine("\tFlash Module");
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <Show_Board_Failure+0x8c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2204      	movs	r2, #4
 80061c2:	4013      	ands	r3, r2
 80061c4:	d003      	beq.n	80061ce <Show_Board_Failure+0x42>
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <Show_Board_Failure+0x98>)
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fc fd6e 	bl	8002caa <debug_PutLine>
	if (Board_Fails & DEBUG_FAIL)	debug_PutLine("\tDebug Module");
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <Show_Board_Failure+0x8c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2208      	movs	r2, #8
 80061d4:	4013      	ands	r3, r2
 80061d6:	d003      	beq.n	80061e0 <Show_Board_Failure+0x54>
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <Show_Board_Failure+0x9c>)
 80061da:	0018      	movs	r0, r3
 80061dc:	f7fc fd65 	bl	8002caa <debug_PutLine>
	if (Board_Fails & CELL_FAIL)	debug_PutLine("\tCell Module");
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <Show_Board_Failure+0x8c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2210      	movs	r2, #16
 80061e6:	4013      	ands	r3, r2
 80061e8:	d003      	beq.n	80061f2 <Show_Board_Failure+0x66>
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <Show_Board_Failure+0xa0>)
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7fc fd5c 	bl	8002caa <debug_PutLine>
	LED_OFF (BLUE_LED);
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	015b      	lsls	r3, r3, #5
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7fd ff46 	bl	8004088 <LED_OFF>
	LED_OFF (GREEN_LED);
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	0018      	movs	r0, r3
 8006202:	f7fd ff41 	bl	8004088 <LED_OFF>
	LED_ON  (RED_LED);
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	01db      	lsls	r3, r3, #7
 800620a:	0018      	movs	r0, r3
 800620c:	f7fd ff2a 	bl	8004064 <LED_ON>
	while (1) ;				//	Wait till watchdog timer resets us, and try again
 8006210:	e7fe      	b.n	8006210 <Show_Board_Failure+0x84>
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	0800a67c 	.word	0x0800a67c
 8006218:	20005a14 	.word	0x20005a14
 800621c:	0800a68c 	.word	0x0800a68c
 8006220:	0800a69c 	.word	0x0800a69c
 8006224:	0800a6ac 	.word	0x0800a6ac
 8006228:	0800a6bc 	.word	0x0800a6bc
 800622c:	0800a6cc 	.word	0x0800a6cc

08006230 <WaitForModemFinalReady>:
}

void WaitForModemFinalReady()
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
    // Wait until other task sets modemState to 2.
    while (1)
    {
        vTaskDelay(MS_TO_TICKS(1000));
 8006234:	23fa      	movs	r3, #250	; 0xfa
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	0018      	movs	r0, r3
 800623a:	f7fb f833 	bl	80012a4 <vTaskDelay>
        if (g_modemState == 2)
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <WaitForModemFinalReady+0x20>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d000      	beq.n	8006248 <WaitForModemFinalReady+0x18>
        vTaskDelay(MS_TO_TICKS(1000));
 8006246:	e7f5      	b.n	8006234 <WaitForModemFinalReady+0x4>
        {
            break;
 8006248:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20004928 	.word	0x20004928

08006254 <prvMainTask>:

/*-----------------------------------------------------------*/
static void prvMainTask( void *pvParameters )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	portTickType xDelayTime = 1000 / portTICK_RATE_MS;
 800625c:	23fa      	movs	r3, #250	; 0xfa
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	60fb      	str	r3, [r7, #12]
	portTickType now = xTaskGetTickCount();
 8006262:	f7fb f90f 	bl	8001484 <xTaskGetTickCount>
 8006266:	0003      	movs	r3, r0
 8006268:	60bb      	str	r3, [r7, #8]
	portTickType lastTick = now;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	617b      	str	r3, [r7, #20]
	portTickType compareTo = MS_TO_TICKS(120 * 1000);	// first post at 2 minutes
 800626e:	4b43      	ldr	r3, [pc, #268]	; (800637c <prvMainTask+0x128>)
 8006270:	613b      	str	r3, [r7, #16]

	xSemaphoreTake(connect_Semaphore,MS_TO_TICKS(1));
 8006272:	4b43      	ldr	r3, [pc, #268]	; (8006380 <prvMainTask+0x12c>)
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	2201      	movs	r2, #1
 800627a:	2100      	movs	r1, #0
 800627c:	f7fa fd63 	bl	8000d46 <xQueueGenericReceive>

	debug_Printf("EAI WatchDog - Version: %s\r\n",VERSION);
 8006280:	4a40      	ldr	r2, [pc, #256]	; (8006384 <prvMainTask+0x130>)
 8006282:	4b41      	ldr	r3, [pc, #260]	; (8006388 <prvMainTask+0x134>)
 8006284:	0011      	movs	r1, r2
 8006286:	0018      	movs	r0, r3
 8006288:	f001 f968 	bl	800755c <uart1_Printf>
	MODEM_PWRKEY(0);		// modem on button (HIGH)
 800628c:	2000      	movs	r0, #0
 800628e:	f7ff fe97 	bl	8005fc0 <MODEM_PWRKEY>
	if (Board_Fails)
 8006292:	4b3e      	ldr	r3, [pc, #248]	; (800638c <prvMainTask+0x138>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <prvMainTask+0x4a>
		Show_Board_Failure();		//	Does not return!
 800629a:	f7ff ff77 	bl	800618c <Show_Board_Failure>

	debug_PutLine("Locating latest record...");
 800629e:	4b3c      	ldr	r3, [pc, #240]	; (8006390 <prvMainTask+0x13c>)
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7fc fd02 	bl	8002caa <debug_PutLine>
	Flash_Locate_Latest_Record();
 80062a6:	f7fd fa09 	bl	80036bc <Flash_Locate_Latest_Record>

	// start up the modem the way it wants to
	debug_PutLine("Powering up Modem...");
 80062aa:	4b3a      	ldr	r3, [pc, #232]	; (8006394 <prvMainTask+0x140>)
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7fc fcfc 	bl	8002caa <debug_PutLine>
	MODEM_PWR_EN(1);				// power on Modem
 80062b2:	2001      	movs	r0, #1
 80062b4:	f7ff fef0 	bl	8006098 <MODEM_PWR_EN>
	vTaskDelay(xDelayTime);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7fa fff2 	bl	80012a4 <vTaskDelay>
	debug_PutLine("Button press");
 80062c0:	4b35      	ldr	r3, [pc, #212]	; (8006398 <prvMainTask+0x144>)
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fc fcf1 	bl	8002caa <debug_PutLine>
	MODEM_PWRKEY(1);				// modem on button (LOW) - minimum 1 second
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7ff fe79 	bl	8005fc0 <MODEM_PWRKEY>
	vTaskDelay(xDelayTime);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fa ffe7 	bl	80012a4 <vTaskDelay>
	debug_PutLine("Button release");
 80062d6:	4b31      	ldr	r3, [pc, #196]	; (800639c <prvMainTask+0x148>)
 80062d8:	0018      	movs	r0, r3
 80062da:	f7fc fce6 	bl	8002caa <debug_PutLine>
	MODEM_PWRKEY(0);				// modem on button (HIGH)
 80062de:	2000      	movs	r0, #0
 80062e0:	f7ff fe6e 	bl	8005fc0 <MODEM_PWRKEY>
	if (Board_Fails)				// Check for late-arriving failures
 80062e4:	4b29      	ldr	r3, [pc, #164]	; (800638c <prvMainTask+0x138>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <prvMainTask+0x9c>
		Show_Board_Failure();		// Does not return!
 80062ec:	f7ff ff4e 	bl	800618c <Show_Board_Failure>

    // signal modem thread we are ready to rock
    g_modemState = 1;
 80062f0:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <prvMainTask+0x14c>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    WaitForModemFinalReady();
 80062f6:	f7ff ff9b 	bl	8006230 <WaitForModemFinalReady>

	for (;;)
	{
		vTaskDelay(1);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7fa ffd2 	bl	80012a4 <vTaskDelay>
		Do_Time();
 8006300:	f000 f8ca 	bl	8006498 <Do_Time>

		if (!gHoldSamplesDuringModemActivity)
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <prvMainTask+0x150>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11a      	bne.n	8006342 <prvMainTask+0xee>
		{
			if (Check_VT)
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <prvMainTask+0x154>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <prvMainTask+0xd6>
				{
				Handle_VT();			//	Check V & T values once per second
 8006314:	f000 fd74 	bl	8006e00 <Handle_VT>
#if 1
				debug_Printf("ts:%d, v:%d, t:%d\r\n", TheTime.Epoch,
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <prvMainTask+0x158>)
 800631a:	6819      	ldr	r1, [r3, #0]
 800631c:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <prvMainTask+0x15c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <prvMainTask+0x160>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4824      	ldr	r0, [pc, #144]	; (80063b8 <prvMainTask+0x164>)
 8006326:	f001 f919 	bl	800755c <uart1_Printf>
															  Current_Volts,
															  Current_Temp);
#endif
				}

			if (Need_Volts)
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <prvMainTask+0x168>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <prvMainTask+0xe2>
				Handle_Volts();
 8006332:	f7fe fa7d 	bl	8004830 <Handle_Volts>

			if (Need_Temp)
 8006336:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <prvMainTask+0x16c>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <prvMainTask+0xee>
				Handle_Temp();
 800633e:	f7fe f87d 	bl	800443c <Handle_Temp>
		}

		now = xTaskGetTickCount();
 8006342:	f7fb f89f 	bl	8001484 <xTaskGetTickCount>
 8006346:	0003      	movs	r3, r0
 8006348:	60bb      	str	r3, [r7, #8]
		if (now - lastTick > compareTo)
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d9d1      	bls.n	80062fa <prvMainTask+0xa6>
		{
			compareTo = MS_TO_TICKS(Config.Report_Rate * 1000);
 8006356:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <prvMainTask+0x170>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	22fa      	movs	r2, #250	; 0xfa
 800635c:	0092      	lsls	r2, r2, #2
 800635e:	4353      	muls	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
			lastTick = now;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	617b      	str	r3, [r7, #20]

			// hold off samples
			gHoldSamplesDuringModemActivity = true;
 8006366:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <prvMainTask+0x150>)
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]

			xSemaphoreGive(connect_Semaphore);
 800636c:	4b04      	ldr	r3, [pc, #16]	; (8006380 <prvMainTask+0x12c>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	2200      	movs	r2, #0
 8006374:	2100      	movs	r1, #0
 8006376:	f7fa fc01 	bl	8000b7c <xQueueGenericSend>
		vTaskDelay(1);
 800637a:	e7be      	b.n	80062fa <prvMainTask+0xa6>
 800637c:	0001d4c0 	.word	0x0001d4c0
 8006380:	20005a2c 	.word	0x20005a2c
 8006384:	0800a6dc 	.word	0x0800a6dc
 8006388:	0800a6e4 	.word	0x0800a6e4
 800638c:	20005a14 	.word	0x20005a14
 8006390:	0800a704 	.word	0x0800a704
 8006394:	0800a720 	.word	0x0800a720
 8006398:	0800a738 	.word	0x0800a738
 800639c:	0800a748 	.word	0x0800a748
 80063a0:	20004928 	.word	0x20004928
 80063a4:	20000094 	.word	0x20000094
 80063a8:	20005a00 	.word	0x20005a00
 80063ac:	20005a20 	.word	0x20005a20
 80063b0:	20005a3c 	.word	0x20005a3c
 80063b4:	20005a4c 	.word	0x20005a4c
 80063b8:	0800a758 	.word	0x0800a758
 80063bc:	20005a1a 	.word	0x20005a1a
 80063c0:	20005a34 	.word	0x20005a34
 80063c4:	20005a68 	.word	0x20005a68

080063c8 <vApplicationTickHook>:
}

/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	static int	Last_Tamper=0;

	if (NewSecond) {
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <vApplicationTickHook+0x5c>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <vApplicationTickHook+0x22>
		NewSecond = false;
 80063d6:	4b13      	ldr	r3, [pc, #76]	; (8006424 <vApplicationTickHook+0x5c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
		TheTime.Ticks -= 999;			//	Count real-time, and subtract 1000mS
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <vApplicationTickHook+0x60>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4a12      	ldr	r2, [pc, #72]	; (800642c <vApplicationTickHook+0x64>)
 80063e2:	189a      	adds	r2, r3, r2
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <vApplicationTickHook+0x60>)
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	e004      	b.n	80063f4 <vApplicationTickHook+0x2c>
	}
	else
		TheTime.Ticks++;				//	Count real-time
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <vApplicationTickHook+0x60>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <vApplicationTickHook+0x60>)
 80063f2:	605a      	str	r2, [r3, #4]

	int Tamper = (TAMPER_IN);			//	Tamper = 0 or (1<<13), depending on input state
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <vApplicationTickHook+0x68>)
 80063f6:	8a1b      	ldrh	r3, [r3, #16]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	001a      	movs	r2, r3
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	019b      	lsls	r3, r3, #6
 8006400:	4013      	ands	r3, r2
 8006402:	607b      	str	r3, [r7, #4]
	if (Last_Tamper != Tamper)
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <vApplicationTickHook+0x6c>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d005      	beq.n	800641a <vApplicationTickHook+0x52>
	{
		Tampered = true;				//	Set flag if Tamper changed
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <vApplicationTickHook+0x70>)
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
		Last_Tamper = Tamper;
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <vApplicationTickHook+0x6c>)
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
	}
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b002      	add	sp, #8
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	20005a10 	.word	0x20005a10
 8006428:	20005a20 	.word	0x20005a20
 800642c:	fffffc19 	.word	0xfffffc19
 8006430:	48000800 	.word	0x48000800
 8006434:	2000492c 	.word	0x2000492c
 8006438:	20005a19 	.word	0x20005a19

0800643c <vApplicationMallocFailedHook>:

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8006440:	e7fe      	b.n	8006440 <vApplicationMallocFailedHook+0x4>

08006442 <vApplicationStackOverflowHook>:
}

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 800644c:	e7fe      	b.n	800644c <vApplicationStackOverflowHook+0xa>

0800644e <vApplicationIdleHook>:
}

/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8006454:	f7fa faae 	bl	80009b4 <xPortGetFreeHeapSize>
 8006458:	0003      	movs	r3, r0
 800645a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800645c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b002      	add	sp, #8
 8006464:	bd80      	pop	{r7, pc}

08006466 <prvSetupHardware>:

/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8006466:	b580      	push	{r7, lr}
 8006468:	af00      	add	r7, sp, #0
	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <uS_Delay>:
	* @brief	Inserts a delay time.
	* @param	t: specifies the delay time length, in uS.
	* @retval	None
	*/
int uS_Delay (int32 t)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	int	i=0;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
	while (i < t)
 800647c:	e002      	b.n	8006484 <uS_Delay+0x14>
		i++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
	while (i < t)
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	dbf8      	blt.n	800647e <uS_Delay+0xe>
	return	i;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	0018      	movs	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	b004      	add	sp, #16
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <Do_Time>:
	* @brief	Accumulates Ticks (1 mS each) into Time-Of-Day
	* @param	None
	* @retval	None
	*/
void Do_Time()
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	uint32 n = TheTime.Ticks;
 800649e:	4b23      	ldr	r3, [pc, #140]	; (800652c <Do_Time+0x94>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	607b      	str	r3, [r7, #4]
	portTickType xDelayTime = 10 / portTICK_RATE_MS;
 80064a4:	230a      	movs	r3, #10
 80064a6:	603b      	str	r3, [r7, #0]

	if (NewSecond)
 80064a8:	4b21      	ldr	r3, [pc, #132]	; (8006530 <Do_Time+0x98>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d137      	bne.n	8006520 <Do_Time+0x88>
		return;							//	Do not check Ticks if ISR has not handled previous overflow yet

	if (n & 1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	4013      	ands	r3, r2
 80064b6:	d003      	beq.n	80064c0 <Do_Time+0x28>
		Need_Temp  = true;				//	Poll Temperature A/D every odd mS
 80064b8:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <Do_Time+0x9c>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e002      	b.n	80064c6 <Do_Time+0x2e>
	else
		Need_Volts = true;				//	Poll Voltage A/D every even mS
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <Do_Time+0xa0>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]

	if (n < 1000)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1c      	ldr	r2, [pc, #112]	; (800653c <Do_Time+0xa4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d92a      	bls.n	8006524 <Do_Time+0x8c>
		return;							//	Not a full second yet

	xSemaphoreTake(epoch_Mutex,xDelayTime);	//  lock it
 80064ce:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <Do_Time+0xa8>)
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	f7fa fc35 	bl	8000d46 <xQueueGenericReceive>
	++TheTime.Epoch;					//	Count another second
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <Do_Time+0x94>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <Do_Time+0x94>)
 80064e4:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(epoch_Mutex);
 80064e6:	4b16      	ldr	r3, [pc, #88]	; (8006540 <Do_Time+0xa8>)
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	f7fa fb44 	bl	8000b7c <xQueueGenericSend>
	NewSecond = true;					//	Inform ISR of Ticks overflow
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <Do_Time+0x98>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]

	if (n < 2000)						//	If many seconds have built up, only set flag for final second.
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a11      	ldr	r2, [pc, #68]	; (8006544 <Do_Time+0xac>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d802      	bhi.n	8006508 <Do_Time+0x70>
		Check_VT = true;				//	Check on Voltage and Temperature averages once per second.
 8006502:	4b11      	ldr	r3, [pc, #68]	; (8006548 <Do_Time+0xb0>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]

	if ((TheTime.Epoch & 31) == 0)
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <Do_Time+0x94>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	221f      	movs	r2, #31
 800650e:	4013      	ands	r3, r2
 8006510:	d109      	bne.n	8006526 <Do_Time+0x8e>
	{
		Set_Volt_Update_Rate = true;
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <Do_Time+0xb4>)
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
		Set_Temp_Update_Rate = true;	//	re-establish the A/D conversion periods every 32 seconds
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <Do_Time+0xb8>)
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <Do_Time+0x8e>
		return;							//	Do not check Ticks if ISR has not handled previous overflow yet
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	e000      	b.n	8006526 <Do_Time+0x8e>
		return;							//	Not a full second yet
 8006524:	46c0      	nop			; (mov r8, r8)
	}
}
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20005a20 	.word	0x20005a20
 8006530:	20005a10 	.word	0x20005a10
 8006534:	20005a34 	.word	0x20005a34
 8006538:	20005a1a 	.word	0x20005a1a
 800653c:	000003e7 	.word	0x000003e7
 8006540:	20005a1c 	.word	0x20005a1c
 8006544:	000007cf 	.word	0x000007cf
 8006548:	20005a00 	.word	0x20005a00
 800654c:	20005a18 	.word	0x20005a18
 8006550:	20005a08 	.word	0x20005a08

08006554 <Vars_Init>:
	xSemaphoreGive(epoch_Mutex);
	return t;
}

void Vars_Init()
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
	gPOR = POR_SECONDS;					//	In a state of POR for first X seconds after power-on
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <Vars_Init+0x64>)
 800655a:	221e      	movs	r2, #30
 800655c:	601a      	str	r2, [r3, #0]
	Set_Volt_Update_Rate = true;		//	  until the Vz history is filled in.
 800655e:	4b17      	ldr	r3, [pc, #92]	; (80065bc <Vars_Init+0x68>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
	Set_Temp_Update_Rate = true;
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <Vars_Init+0x6c>)
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
	Need_Volts = false;
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <Vars_Init+0x70>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
	Need_Temp = false;
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <Vars_Init+0x74>)
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
	NewSecond = false;
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <Vars_Init+0x78>)
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
	Tampered  = false;
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <Vars_Init+0x7c>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
	Check_VT  = false;
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <Vars_Init+0x80>)
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]

	Board_Fails = 0;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <Vars_Init+0x84>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
	Current_Mode = 0x00;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <Vars_Init+0x88>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
	TheTime.Epoch = 0;					//	Set default time to  1970/1/1
 8006594:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <Vars_Init+0x8c>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
	TheTime.Ticks = 0;
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <Vars_Init+0x8c>)
 800659c:	2200      	movs	r2, #0
 800659e:	605a      	str	r2, [r3, #4]

	Config.Periodic_Event_Rate = 300;	//  5 minutes = max time between log points
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <Vars_Init+0x90>)
 80065a2:	2296      	movs	r2, #150	; 0x96
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
	Config.Report_Rate = 30*60;			//	30 minutes
 80065a8:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <Vars_Init+0x90>)
 80065aa:	22e1      	movs	r2, #225	; 0xe1
 80065ac:	00d2      	lsls	r2, r2, #3
 80065ae:	605a      	str	r2, [r3, #4]
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	20005a30 	.word	0x20005a30
 80065bc:	20005a18 	.word	0x20005a18
 80065c0:	20005a08 	.word	0x20005a08
 80065c4:	20005a1a 	.word	0x20005a1a
 80065c8:	20005a34 	.word	0x20005a34
 80065cc:	20005a10 	.word	0x20005a10
 80065d0:	20005a19 	.word	0x20005a19
 80065d4:	20005a00 	.word	0x20005a00
 80065d8:	20005a14 	.word	0x20005a14
 80065dc:	20005a0c 	.word	0x20005a0c
 80065e0:	20005a20 	.word	0x20005a20
 80065e4:	20005a68 	.word	0x20005a68

080065e8 <micro_vprintf>:

int micro_vprintf(	  void (*outc)(int ch, void *context)
					, void *context
					, char const *fmt
					, va_list valist )
{
 80065e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ea:	b0b1      	sub	sp, #196	; 0xc4
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6678      	str	r0, [r7, #100]	; 0x64
 80065f0:	6639      	str	r1, [r7, #96]	; 0x60
 80065f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065f4:	65bb      	str	r3, [r7, #88]	; 0x58
	int n = 0;          // number of characters written via 'outc'
 80065f6:	2300      	movs	r3, #0
 80065f8:	22bc      	movs	r2, #188	; 0xbc
 80065fa:	18ba      	adds	r2, r7, r2
 80065fc:	6013      	str	r3, [r2, #0]
	static char const *const hexchar = "0123456789ABCDEF";

    while (*fmt)
 80065fe:	f000 fbef 	bl	8006de0 <micro_vprintf+0x7f8>
    {
    	char const *start_fmt = fmt;	        // where we started for this specifier
 8006602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006604:	22b8      	movs	r2, #184	; 0xb8
 8006606:	18ba      	adds	r2, r7, r2
 8006608:	6013      	str	r3, [r2, #0]
    	bool isneg = false;
 800660a:	235f      	movs	r3, #95	; 0x5f
 800660c:	2258      	movs	r2, #88	; 0x58
 800660e:	18ba      	adds	r2, r7, r2
 8006610:	18d2      	adds	r2, r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	7013      	strb	r3, [r2, #0]
    	bool width_isneg = false;
 8006616:	235e      	movs	r3, #94	; 0x5e
 8006618:	2258      	movs	r2, #88	; 0x58
 800661a:	18ba      	adds	r2, r7, r2
 800661c:	18d2      	adds	r2, r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	7013      	strb	r3, [r2, #0]
    	int width = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	22b0      	movs	r2, #176	; 0xb0
 8006626:	18ba      	adds	r2, r7, r2
 8006628:	6013      	str	r3, [r2, #0]
    	char buffer[24];	                    // big enough for all decimal digits in a 64-bit long
    	int len;
    	uint64_t val;			               // numeric value to convert
    	char modifier = '\0';                   // 'h' or 'l' modifier
 800662a:	234f      	movs	r3, #79	; 0x4f
 800662c:	2258      	movs	r2, #88	; 0x58
 800662e:	18ba      	adds	r2, r7, r2
 8006630:	18d2      	adds	r2, r2, r3
 8006632:	2300      	movs	r3, #0
 8006634:	7013      	strb	r3, [r2, #0]
    	bool zeropad = false;
 8006636:	234e      	movs	r3, #78	; 0x4e
 8006638:	2258      	movs	r2, #88	; 0x58
 800663a:	18ba      	adds	r2, r7, r2
 800663c:	18d2      	adds	r2, r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	7013      	strb	r3, [r2, #0]
    	char *p = &buffer[sizeof(buffer)-1];    // write backwards into the buffer to simplify conversions below
 8006642:	2314      	movs	r3, #20
 8006644:	2258      	movs	r2, #88	; 0x58
 8006646:	4694      	mov	ip, r2
 8006648:	44bc      	add	ip, r7
 800664a:	4463      	add	r3, ip
 800664c:	3317      	adds	r3, #23
 800664e:	22a0      	movs	r2, #160	; 0xa0
 8006650:	18ba      	adds	r2, r7, r2
 8006652:	6013      	str	r3, [r2, #0]
    	*p = '\0';                              // default is an empty string
 8006654:	23a0      	movs	r3, #160	; 0xa0
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	7013      	strb	r3, [r2, #0]


    	// handle literal characters quickly
        if (*fmt != '%')
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b25      	cmp	r3, #37	; 0x25
 8006664:	d011      	beq.n	800668a <micro_vprintf+0xa2>
        	{
			outc(*fmt++,context);
 8006666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006668:	1c53      	adds	r3, r2, #1
 800666a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800666c:	7813      	ldrb	r3, [r2, #0]
 800666e:	0018      	movs	r0, r3
 8006670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006674:	0011      	movs	r1, r2
 8006676:	4798      	blx	r3
			n++;
 8006678:	23bc      	movs	r3, #188	; 0xbc
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	22bc      	movs	r2, #188	; 0xbc
 8006682:	18ba      	adds	r2, r7, r2
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	f000 fbab 	bl	8006de0 <micro_vprintf+0x7f8>
            continue;
        	}

        fmt++;      // skip '%' char
 800668a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800668c:	3301      	adds	r3, #1
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c

        // Get optional zero-pad flag
        if (*fmt == '0')
 8006690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b30      	cmp	r3, #48	; 0x30
 8006696:	d108      	bne.n	80066aa <micro_vprintf+0xc2>
        	{
        	zeropad = true;
 8006698:	234e      	movs	r3, #78	; 0x4e
 800669a:	2258      	movs	r2, #88	; 0x58
 800669c:	18ba      	adds	r2, r7, r2
 800669e:	18d2      	adds	r2, r2, r3
 80066a0:	2301      	movs	r3, #1
 80066a2:	7013      	strb	r3, [r2, #0]
        	fmt++;
 80066a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a6:	3301      	adds	r3, #1
 80066a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        	}

        // Get optional width specifier
		if (*fmt == '-')		// right-aligned?
 80066aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b2d      	cmp	r3, #45	; 0x2d
 80066b0:	d11b      	bne.n	80066ea <micro_vprintf+0x102>
			{
			width_isneg = true;
 80066b2:	235e      	movs	r3, #94	; 0x5e
 80066b4:	2258      	movs	r2, #88	; 0x58
 80066b6:	18ba      	adds	r2, r7, r2
 80066b8:	18d2      	adds	r2, r2, r3
 80066ba:	2301      	movs	r3, #1
 80066bc:	7013      	strb	r3, [r2, #0]
			fmt++;
 80066be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c0:	3301      	adds	r3, #1
 80066c2:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
		while (*fmt >= '0' && *fmt <= '9')
 80066c4:	e011      	b.n	80066ea <micro_vprintf+0x102>
			{
			width = width * 10 + (*fmt - '0');
 80066c6:	23b0      	movs	r3, #176	; 0xb0
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	0013      	movs	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	001a      	movs	r2, r3
 80066d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	3b30      	subs	r3, #48	; 0x30
 80066dc:	18d3      	adds	r3, r2, r3
 80066de:	22b0      	movs	r2, #176	; 0xb0
 80066e0:	18ba      	adds	r2, r7, r2
 80066e2:	6013      	str	r3, [r2, #0]
			fmt++;
 80066e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e6:	3301      	adds	r3, #1
 80066e8:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (*fmt >= '0' && *fmt <= '9')
 80066ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b2f      	cmp	r3, #47	; 0x2f
 80066f0:	d903      	bls.n	80066fa <micro_vprintf+0x112>
 80066f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b39      	cmp	r3, #57	; 0x39
 80066f8:	d9e5      	bls.n	80066c6 <micro_vprintf+0xde>
			}

		// get optional modifier
		switch (*fmt)
 80066fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b68      	cmp	r3, #104	; 0x68
 8006700:	d002      	beq.n	8006708 <micro_vprintf+0x120>
 8006702:	2b6c      	cmp	r3, #108	; 0x6c
 8006704:	d00a      	beq.n	800671c <micro_vprintf+0x134>
 8006706:	e020      	b.n	800674a <micro_vprintf+0x162>
			{
			case 'h':
				modifier = *fmt++;
 8006708:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800670a:	1c4b      	adds	r3, r1, #1
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670e:	234f      	movs	r3, #79	; 0x4f
 8006710:	2258      	movs	r2, #88	; 0x58
 8006712:	18ba      	adds	r2, r7, r2
 8006714:	18d2      	adds	r2, r2, r3
 8006716:	780b      	ldrb	r3, [r1, #0]
 8006718:	7013      	strb	r3, [r2, #0]
				break;
 800671a:	e016      	b.n	800674a <micro_vprintf+0x162>
			case 'l':
				modifier = *fmt++;
 800671c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800671e:	1c4b      	adds	r3, r1, #1
 8006720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006722:	234f      	movs	r3, #79	; 0x4f
 8006724:	2258      	movs	r2, #88	; 0x58
 8006726:	18ba      	adds	r2, r7, r2
 8006728:	18d2      	adds	r2, r2, r3
 800672a:	780b      	ldrb	r3, [r1, #0]
 800672c:	7013      	strb	r3, [r2, #0]
				if (*fmt == 'l')
 800672e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b6c      	cmp	r3, #108	; 0x6c
 8006734:	d108      	bne.n	8006748 <micro_vprintf+0x160>
					{
					modifier = 'L';
 8006736:	234f      	movs	r3, #79	; 0x4f
 8006738:	2258      	movs	r2, #88	; 0x58
 800673a:	18ba      	adds	r2, r7, r2
 800673c:	18d2      	adds	r2, r2, r3
 800673e:	234c      	movs	r3, #76	; 0x4c
 8006740:	7013      	strb	r3, [r2, #0]
					fmt++;
 8006742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006744:	3301      	adds	r3, #1
 8006746:	65fb      	str	r3, [r7, #92]	; 0x5c
					}
				break;
 8006748:	46c0      	nop			; (mov r8, r8)

			}

		// Now handle it;
		switch (*fmt)
 800674a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b64      	cmp	r3, #100	; 0x64
 8006750:	d100      	bne.n	8006754 <micro_vprintf+0x16c>
 8006752:	e0c5      	b.n	80068e0 <micro_vprintf+0x2f8>
 8006754:	dc0b      	bgt.n	800676e <micro_vprintf+0x186>
 8006756:	2b25      	cmp	r3, #37	; 0x25
 8006758:	d01a      	beq.n	8006790 <micro_vprintf+0x1a8>
 800675a:	dc02      	bgt.n	8006762 <micro_vprintf+0x17a>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <micro_vprintf+0x1a0>
 8006760:	e251      	b.n	8006c06 <micro_vprintf+0x61e>
 8006762:	2b58      	cmp	r3, #88	; 0x58
 8006764:	d100      	bne.n	8006768 <micro_vprintf+0x180>
 8006766:	e18e      	b.n	8006a86 <micro_vprintf+0x49e>
 8006768:	2b63      	cmp	r3, #99	; 0x63
 800676a:	d01e      	beq.n	80067aa <micro_vprintf+0x1c2>
 800676c:	e24b      	b.n	8006c06 <micro_vprintf+0x61e>
 800676e:	2b73      	cmp	r3, #115	; 0x73
 8006770:	d032      	beq.n	80067d8 <micro_vprintf+0x1f0>
 8006772:	dc03      	bgt.n	800677c <micro_vprintf+0x194>
 8006774:	2b70      	cmp	r3, #112	; 0x70
 8006776:	d100      	bne.n	800677a <micro_vprintf+0x192>
 8006778:	e179      	b.n	8006a6e <micro_vprintf+0x486>
 800677a:	e244      	b.n	8006c06 <micro_vprintf+0x61e>
 800677c:	2b75      	cmp	r3, #117	; 0x75
 800677e:	d043      	beq.n	8006808 <micro_vprintf+0x220>
 8006780:	2b78      	cmp	r3, #120	; 0x78
 8006782:	d100      	bne.n	8006786 <micro_vprintf+0x19e>
 8006784:	e17f      	b.n	8006a86 <micro_vprintf+0x49e>
 8006786:	e23e      	b.n	8006c06 <micro_vprintf+0x61e>
			{
			case '\0':	// end of format string (ill-formed), just quit
				return n;
 8006788:	23bc      	movs	r3, #188	; 0xbc
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	e330      	b.n	8006df2 <micro_vprintf+0x80a>

			case '%':   // '%' literal
				*--p = '%';
 8006790:	23a0      	movs	r3, #160	; 0xa0
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	22a0      	movs	r2, #160	; 0xa0
 800679a:	18ba      	adds	r2, r7, r2
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	23a0      	movs	r3, #160	; 0xa0
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	2325      	movs	r3, #37	; 0x25
 80067a6:	7013      	strb	r3, [r2, #0]
				break;
 80067a8:	e255      	b.n	8006c56 <micro_vprintf+0x66e>

			case 'c':   // character
				zeropad = false;
 80067aa:	234e      	movs	r3, #78	; 0x4e
 80067ac:	2258      	movs	r2, #88	; 0x58
 80067ae:	18ba      	adds	r2, r7, r2
 80067b0:	18d2      	adds	r2, r2, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	7013      	strb	r3, [r2, #0]
				*--p = (char) va_arg(valist,int);	// promoted to int
 80067b6:	23a0      	movs	r3, #160	; 0xa0
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	22a0      	movs	r2, #160	; 0xa0
 80067c0:	18ba      	adds	r2, r7, r2
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c6:	1d13      	adds	r3, r2, #4
 80067c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	22a0      	movs	r2, #160	; 0xa0
 80067d0:	18ba      	adds	r2, r7, r2
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	7013      	strb	r3, [r2, #0]
				break;
 80067d6:	e23e      	b.n	8006c56 <micro_vprintf+0x66e>

			case 's':   // string
				zeropad = false;
 80067d8:	234e      	movs	r3, #78	; 0x4e
 80067da:	2258      	movs	r2, #88	; 0x58
 80067dc:	18ba      	adds	r2, r7, r2
 80067de:	18d2      	adds	r2, r2, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	7013      	strb	r3, [r2, #0]
				p = va_arg(valist,char *);	// use string as source buffer
 80067e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e6:	1d13      	adds	r3, r2, #4
 80067e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ea:	6813      	ldr	r3, [r2, #0]
 80067ec:	22a0      	movs	r2, #160	; 0xa0
 80067ee:	18ba      	adds	r2, r7, r2
 80067f0:	6013      	str	r3, [r2, #0]
				if (!p)
 80067f2:	23a0      	movs	r3, #160	; 0xa0
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d000      	beq.n	80067fe <micro_vprintf+0x216>
 80067fc:	e226      	b.n	8006c4c <micro_vprintf+0x664>
					p = "(null)";
 80067fe:	4bd2      	ldr	r3, [pc, #840]	; (8006b48 <micro_vprintf+0x560>)
 8006800:	22a0      	movs	r2, #160	; 0xa0
 8006802:	18ba      	adds	r2, r7, r2
 8006804:	6013      	str	r3, [r2, #0]
				break;
 8006806:	e221      	b.n	8006c4c <micro_vprintf+0x664>

			case 'u':   // unsigned
				if (modifier == 'l')
 8006808:	234f      	movs	r3, #79	; 0x4f
 800680a:	2258      	movs	r2, #88	; 0x58
 800680c:	4694      	mov	ip, r2
 800680e:	44bc      	add	ip, r7
 8006810:	4463      	add	r3, ip
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b6c      	cmp	r3, #108	; 0x6c
 8006816:	d10b      	bne.n	8006830 <micro_vprintf+0x248>
					val = va_arg(valist,unsigned long);
 8006818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681a:	1d13      	adds	r3, r2, #4
 800681c:	65bb      	str	r3, [r7, #88]	; 0x58
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	22a8      	movs	r2, #168	; 0xa8
 8006822:	18ba      	adds	r2, r7, r2
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	22ac      	movs	r2, #172	; 0xac
 800682a:	18ba      	adds	r2, r7, r2
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e0da      	b.n	80069e6 <micro_vprintf+0x3fe>
                else if (modifier == 'h')
 8006830:	234f      	movs	r3, #79	; 0x4f
 8006832:	2258      	movs	r2, #88	; 0x58
 8006834:	4694      	mov	ip, r2
 8006836:	44bc      	add	ip, r7
 8006838:	4463      	add	r3, ip
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b68      	cmp	r3, #104	; 0x68
 800683e:	d10c      	bne.n	800685a <micro_vprintf+0x272>
                    val = (unsigned short) va_arg(valist,unsigned);   // passed in as an unsigned!
 8006840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006842:	1d13      	adds	r3, r2, #4
 8006844:	65bb      	str	r3, [r7, #88]	; 0x58
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	22a8      	movs	r2, #168	; 0xa8
 800684c:	18ba      	adds	r2, r7, r2
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	2300      	movs	r3, #0
 8006852:	22ac      	movs	r2, #172	; 0xac
 8006854:	18ba      	adds	r2, r7, r2
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e0c5      	b.n	80069e6 <micro_vprintf+0x3fe>
                else if (modifier == 'L')
 800685a:	234f      	movs	r3, #79	; 0x4f
 800685c:	2258      	movs	r2, #88	; 0x58
 800685e:	4694      	mov	ip, r2
 8006860:	44bc      	add	ip, r7
 8006862:	4463      	add	r3, ip
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b4c      	cmp	r3, #76	; 0x4c
 8006868:	d12e      	bne.n	80068c8 <micro_vprintf+0x2e0>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 800686a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800686c:	1d13      	adds	r3, r2, #4
 800686e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006870:	6813      	ldr	r3, [r2, #0]
 8006872:	229c      	movs	r2, #156	; 0x9c
 8006874:	18ba      	adds	r2, r7, r2
 8006876:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 8006878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800687a:	1d13      	adds	r3, r2, #4
 800687c:	65bb      	str	r3, [r7, #88]	; 0x58
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	2298      	movs	r2, #152	; 0x98
 8006882:	18ba      	adds	r2, r7, r2
 8006884:	6013      	str	r3, [r2, #0]
                    val = ((uint64_t) msw << 32) | lsw;					
 8006886:	2398      	movs	r3, #152	; 0x98
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
 800688e:	2300      	movs	r3, #0
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	001b      	movs	r3, r3
 8006896:	647b      	str	r3, [r7, #68]	; 0x44
 8006898:	2300      	movs	r3, #0
 800689a:	643b      	str	r3, [r7, #64]	; 0x40
 800689c:	239c      	movs	r3, #156	; 0x9c
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80068aa:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80068ac:	0023      	movs	r3, r4
 80068ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068b2:	0008      	movs	r0, r1
 80068b4:	4303      	orrs	r3, r0
 80068b6:	20a8      	movs	r0, #168	; 0xa8
 80068b8:	1838      	adds	r0, r7, r0
 80068ba:	6003      	str	r3, [r0, #0]
 80068bc:	002b      	movs	r3, r5
 80068be:	4313      	orrs	r3, r2
 80068c0:	22ac      	movs	r2, #172	; 0xac
 80068c2:	18ba      	adds	r2, r7, r2
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e08e      	b.n	80069e6 <micro_vprintf+0x3fe>
					}
				else
					val = va_arg(valist,unsigned);
 80068c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ca:	1d13      	adds	r3, r2, #4
 80068cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	22a8      	movs	r2, #168	; 0xa8
 80068d2:	18ba      	adds	r2, r7, r2
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	22ac      	movs	r2, #172	; 0xac
 80068da:	18ba      	adds	r2, r7, r2
 80068dc:	6013      	str	r3, [r2, #0]
				goto dumpdecimal;
 80068de:	e082      	b.n	80069e6 <micro_vprintf+0x3fe>

			case 'd':   // decimal
				if (modifier == 'l')
 80068e0:	234f      	movs	r3, #79	; 0x4f
 80068e2:	2258      	movs	r2, #88	; 0x58
 80068e4:	4694      	mov	ip, r2
 80068e6:	44bc      	add	ip, r7
 80068e8:	4463      	add	r3, ip
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b6c      	cmp	r3, #108	; 0x6c
 80068ee:	d10b      	bne.n	8006908 <micro_vprintf+0x320>
					val = va_arg(valist,long);
 80068f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f2:	1d13      	adds	r3, r2, #4
 80068f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	22a8      	movs	r2, #168	; 0xa8
 80068fa:	18ba      	adds	r2, r7, r2
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	17db      	asrs	r3, r3, #31
 8006900:	22ac      	movs	r2, #172	; 0xac
 8006902:	18ba      	adds	r2, r7, r2
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e058      	b.n	80069ba <micro_vprintf+0x3d2>
				else if (modifier == 'h')
 8006908:	234f      	movs	r3, #79	; 0x4f
 800690a:	2258      	movs	r2, #88	; 0x58
 800690c:	4694      	mov	ip, r2
 800690e:	44bc      	add	ip, r7
 8006910:	4463      	add	r3, ip
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b68      	cmp	r3, #104	; 0x68
 8006916:	d10c      	bne.n	8006932 <micro_vprintf+0x34a>
				    val = (short) va_arg(valist,int);   // passed in as an int!
 8006918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800691a:	1d13      	adds	r3, r2, #4
 800691c:	65bb      	str	r3, [r7, #88]	; 0x58
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b21b      	sxth	r3, r3
 8006922:	22a8      	movs	r2, #168	; 0xa8
 8006924:	18ba      	adds	r2, r7, r2
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	17db      	asrs	r3, r3, #31
 800692a:	22ac      	movs	r2, #172	; 0xac
 800692c:	18ba      	adds	r2, r7, r2
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e043      	b.n	80069ba <micro_vprintf+0x3d2>
                else if (modifier == 'L')
 8006932:	234f      	movs	r3, #79	; 0x4f
 8006934:	2258      	movs	r2, #88	; 0x58
 8006936:	4694      	mov	ip, r2
 8006938:	44bc      	add	ip, r7
 800693a:	4463      	add	r3, ip
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b4c      	cmp	r3, #76	; 0x4c
 8006940:	d130      	bne.n	80069a4 <micro_vprintf+0x3bc>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 8006942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006944:	1d13      	adds	r3, r2, #4
 8006946:	65bb      	str	r3, [r7, #88]	; 0x58
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	2294      	movs	r2, #148	; 0x94
 800694c:	18ba      	adds	r2, r7, r2
 800694e:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 8006950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006952:	1d13      	adds	r3, r2, #4
 8006954:	65bb      	str	r3, [r7, #88]	; 0x58
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	2290      	movs	r2, #144	; 0x90
 800695a:	18ba      	adds	r2, r7, r2
 800695c:	6013      	str	r3, [r2, #0]
                    val = ((int64_t) msw << 32) | lsw;
 800695e:	2390      	movs	r3, #144	; 0x90
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
 8006966:	2300      	movs	r3, #0
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	001b      	movs	r3, r3
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006970:	2300      	movs	r3, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
 8006974:	2394      	movs	r3, #148	; 0x94
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	2300      	movs	r3, #0
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
 8006980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006984:	0008      	movs	r0, r1
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800698a:	001d      	movs	r5, r3
 800698c:	4328      	orrs	r0, r5
 800698e:	61b8      	str	r0, [r7, #24]
 8006990:	0023      	movs	r3, r4
 8006992:	431a      	orrs	r2, r3
 8006994:	61fa      	str	r2, [r7, #28]
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	69fc      	ldr	r4, [r7, #28]
 800699a:	22a8      	movs	r2, #168	; 0xa8
 800699c:	18ba      	adds	r2, r7, r2
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	6054      	str	r4, [r2, #4]
 80069a2:	e00a      	b.n	80069ba <micro_vprintf+0x3d2>
					}
				else
					val = (long) va_arg(valist,int);
 80069a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069a6:	1d13      	adds	r3, r2, #4
 80069a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	22a8      	movs	r2, #168	; 0xa8
 80069ae:	18ba      	adds	r2, r7, r2
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	17db      	asrs	r3, r3, #31
 80069b4:	22ac      	movs	r2, #172	; 0xac
 80069b6:	18ba      	adds	r2, r7, r2
 80069b8:	6013      	str	r3, [r2, #0]
				if ((long)val < 0)
 80069ba:	23a8      	movs	r3, #168	; 0xa8
 80069bc:	18fb      	adds	r3, r7, r3
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da10      	bge.n	80069e6 <micro_vprintf+0x3fe>
					{
					isneg = true;
 80069c4:	235f      	movs	r3, #95	; 0x5f
 80069c6:	2258      	movs	r2, #88	; 0x58
 80069c8:	18ba      	adds	r2, r7, r2
 80069ca:	18d2      	adds	r2, r2, r3
 80069cc:	2301      	movs	r3, #1
 80069ce:	7013      	strb	r3, [r2, #0]
					val = - (long) val;
 80069d0:	23a8      	movs	r3, #168	; 0xa8
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	425b      	negs	r3, r3
 80069d8:	22a8      	movs	r2, #168	; 0xa8
 80069da:	18ba      	adds	r2, r7, r2
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	17db      	asrs	r3, r3, #31
 80069e0:	22ac      	movs	r2, #172	; 0xac
 80069e2:	18ba      	adds	r2, r7, r2
 80069e4:	6013      	str	r3, [r2, #0]
					}
dumpdecimal:
                // Convert the number in 'val' to a decimal string
	            do
	            	{
	                *--p = (val % 10) + '0';
 80069e6:	23a0      	movs	r3, #160	; 0xa0
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	22a0      	movs	r2, #160	; 0xa0
 80069f0:	18ba      	adds	r2, r7, r2
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	23a8      	movs	r3, #168	; 0xa8
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	220a      	movs	r2, #10
 80069fe:	2300      	movs	r3, #0
 8006a00:	f7f9 fd08 	bl	8000414 <__aeabi_uldivmod>
 8006a04:	001c      	movs	r4, r3
 8006a06:	0013      	movs	r3, r2
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	3330      	adds	r3, #48	; 0x30
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	22a0      	movs	r2, #160	; 0xa0
 8006a10:	18ba      	adds	r2, r7, r2
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	7013      	strb	r3, [r2, #0]
	                val /= 10;
 8006a16:	23a8      	movs	r3, #168	; 0xa8
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	220a      	movs	r2, #10
 8006a20:	2300      	movs	r3, #0
 8006a22:	f7f9 fcf7 	bl	8000414 <__aeabi_uldivmod>
 8006a26:	0003      	movs	r3, r0
 8006a28:	000c      	movs	r4, r1
 8006a2a:	22a8      	movs	r2, #168	; 0xa8
 8006a2c:	18ba      	adds	r2, r7, r2
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	6054      	str	r4, [r2, #4]
	            	} while ( (val != 0) && (p > buffer));
 8006a32:	23a8      	movs	r3, #168	; 0xa8
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	23ac      	movs	r3, #172	; 0xac
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	d100      	bne.n	8006a44 <micro_vprintf+0x45c>
 8006a42:	e105      	b.n	8006c50 <micro_vprintf+0x668>
 8006a44:	235f      	movs	r3, #95	; 0x5f
 8006a46:	2258      	movs	r2, #88	; 0x58
 8006a48:	18ba      	adds	r2, r7, r2
 8006a4a:	18d2      	adds	r2, r2, r3
 8006a4c:	235f      	movs	r3, #95	; 0x5f
 8006a4e:	2158      	movs	r1, #88	; 0x58
 8006a50:	468c      	mov	ip, r1
 8006a52:	44bc      	add	ip, r7
 8006a54:	4463      	add	r3, ip
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	7013      	strb	r3, [r2, #0]
 8006a5a:	2314      	movs	r3, #20
 8006a5c:	2258      	movs	r2, #88	; 0x58
 8006a5e:	18ba      	adds	r2, r7, r2
 8006a60:	18d2      	adds	r2, r2, r3
 8006a62:	23a0      	movs	r3, #160	; 0xa0
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d8bc      	bhi.n	80069e6 <micro_vprintf+0x3fe>
				break;
 8006a6c:	e0f0      	b.n	8006c50 <micro_vprintf+0x668>

			case 'p':   // pointer (hex)
				val = (unsigned long) va_arg(valist,void *);
 8006a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a70:	1d13      	adds	r3, r2, #4
 8006a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a74:	6813      	ldr	r3, [r2, #0]
 8006a76:	22a8      	movs	r2, #168	; 0xa8
 8006a78:	18ba      	adds	r2, r7, r2
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	22ac      	movs	r2, #172	; 0xac
 8006a80:	18ba      	adds	r2, r7, r2
 8006a82:	6013      	str	r3, [r2, #0]
				goto dumphex;
 8006a84:	e06d      	b.n	8006b62 <micro_vprintf+0x57a>

			case 'x':   // hex (lowercase)
			case 'X':   // hex (uppercase)
				if (modifier == 'l')
 8006a86:	234f      	movs	r3, #79	; 0x4f
 8006a88:	2258      	movs	r2, #88	; 0x58
 8006a8a:	4694      	mov	ip, r2
 8006a8c:	44bc      	add	ip, r7
 8006a8e:	4463      	add	r3, ip
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b6c      	cmp	r3, #108	; 0x6c
 8006a94:	d10b      	bne.n	8006aae <micro_vprintf+0x4c6>
					val = va_arg(valist,unsigned long);
 8006a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a98:	1d13      	adds	r3, r2, #4
 8006a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a9c:	6813      	ldr	r3, [r2, #0]
 8006a9e:	22a8      	movs	r2, #168	; 0xa8
 8006aa0:	18ba      	adds	r2, r7, r2
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	22ac      	movs	r2, #172	; 0xac
 8006aa8:	18ba      	adds	r2, r7, r2
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	e059      	b.n	8006b62 <micro_vprintf+0x57a>
                else if (modifier == 'h')
 8006aae:	234f      	movs	r3, #79	; 0x4f
 8006ab0:	2258      	movs	r2, #88	; 0x58
 8006ab2:	4694      	mov	ip, r2
 8006ab4:	44bc      	add	ip, r7
 8006ab6:	4463      	add	r3, ip
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b68      	cmp	r3, #104	; 0x68
 8006abc:	d10c      	bne.n	8006ad8 <micro_vprintf+0x4f0>
                    val = (unsigned short) va_arg(valist,unsigned);   // passed in as an unsigned!
 8006abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac0:	1d13      	adds	r3, r2, #4
 8006ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac4:	6813      	ldr	r3, [r2, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	22a8      	movs	r2, #168	; 0xa8
 8006aca:	18ba      	adds	r2, r7, r2
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	22ac      	movs	r2, #172	; 0xac
 8006ad2:	18ba      	adds	r2, r7, r2
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e044      	b.n	8006b62 <micro_vprintf+0x57a>
                else if (modifier == 'L')
 8006ad8:	234f      	movs	r3, #79	; 0x4f
 8006ada:	2258      	movs	r2, #88	; 0x58
 8006adc:	4694      	mov	ip, r2
 8006ade:	44bc      	add	ip, r7
 8006ae0:	4463      	add	r3, ip
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b4c      	cmp	r3, #76	; 0x4c
 8006ae6:	d131      	bne.n	8006b4c <micro_vprintf+0x564>
					// work around bug in XC32 compiler (probably stack alignment problem)
					if (((int) valist & 4) == 0)
						va_arg(valist,unsigned);
#endif
                    // val = (uint64_t) va_arg(valist,uint64_t);
					unsigned lsw = va_arg(valist,unsigned);
 8006ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aea:	1d13      	adds	r3, r2, #4
 8006aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	228c      	movs	r2, #140	; 0x8c
 8006af2:	18ba      	adds	r2, r7, r2
 8006af4:	6013      	str	r3, [r2, #0]
					unsigned msw = va_arg(valist,unsigned);
 8006af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006af8:	1d13      	adds	r3, r2, #4
 8006afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006afc:	6813      	ldr	r3, [r2, #0]
 8006afe:	2288      	movs	r2, #136	; 0x88
 8006b00:	18ba      	adds	r2, r7, r2
 8006b02:	6013      	str	r3, [r2, #0]
                    val = ((uint64_t) msw << 32) | lsw;
 8006b04:	2388      	movs	r3, #136	; 0x88
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	001b      	movs	r3, r3
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	238c      	movs	r3, #140	; 0x8c
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	2300      	movs	r3, #0
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	68bc      	ldr	r4, [r7, #8]
 8006b28:	68fd      	ldr	r5, [r7, #12]
 8006b2a:	0023      	movs	r3, r4
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	0008      	movs	r0, r1
 8006b32:	4303      	orrs	r3, r0
 8006b34:	20a8      	movs	r0, #168	; 0xa8
 8006b36:	1838      	adds	r0, r7, r0
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	002b      	movs	r3, r5
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	22ac      	movs	r2, #172	; 0xac
 8006b40:	18ba      	adds	r2, r7, r2
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e00d      	b.n	8006b62 <micro_vprintf+0x57a>
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	0800a76c 	.word	0x0800a76c
					}
				else
					val = va_arg(valist,unsigned);
 8006b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b4e:	1d13      	adds	r3, r2, #4
 8006b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	22a8      	movs	r2, #168	; 0xa8
 8006b56:	18ba      	adds	r2, r7, r2
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	22ac      	movs	r2, #172	; 0xac
 8006b5e:	18ba      	adds	r2, r7, r2
 8006b60:	6013      	str	r3, [r2, #0]
dumphex:
                // Convert the number in 'val' to a hex string
				do
					{
					*--p = hexchar[val % 16];
 8006b62:	23a0      	movs	r3, #160	; 0xa0
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	22a0      	movs	r2, #160	; 0xa0
 8006b6c:	18ba      	adds	r2, r7, r2
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	4ba2      	ldr	r3, [pc, #648]	; (8006dfc <micro_vprintf+0x814>)
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	23a8      	movs	r3, #168	; 0xa8
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	230f      	movs	r3, #15
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	18cb      	adds	r3, r1, r3
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	22a0      	movs	r2, #160	; 0xa0
 8006b84:	18ba      	adds	r2, r7, r2
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	7013      	strb	r3, [r2, #0]
					if (*fmt == 'x' && *p >= 'A' && *p <= 'F')
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b78      	cmp	r3, #120	; 0x78
 8006b90:	d115      	bne.n	8006bbe <micro_vprintf+0x5d6>
 8006b92:	23a0      	movs	r3, #160	; 0xa0
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d90f      	bls.n	8006bbe <micro_vprintf+0x5d6>
 8006b9e:	23a0      	movs	r3, #160	; 0xa0
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b46      	cmp	r3, #70	; 0x46
 8006ba8:	d809      	bhi.n	8006bbe <micro_vprintf+0x5d6>
						*p += 'a' - 'A';	// convert to lowercase
 8006baa:	23a0      	movs	r3, #160	; 0xa0
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	22a0      	movs	r2, #160	; 0xa0
 8006bb8:	18ba      	adds	r2, r7, r2
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	7013      	strb	r3, [r2, #0]
					val /= 16;
 8006bbe:	23a8      	movs	r3, #168	; 0xa8
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	685c      	ldr	r4, [r3, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	0722      	lsls	r2, r4, #28
 8006bc8:	0919      	lsrs	r1, r3, #4
 8006bca:	6539      	str	r1, [r7, #80]	; 0x50
 8006bcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bce:	4311      	orrs	r1, r2
 8006bd0:	6539      	str	r1, [r7, #80]	; 0x50
 8006bd2:	0923      	lsrs	r3, r4, #4
 8006bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8006bda:	22a8      	movs	r2, #168	; 0xa8
 8006bdc:	18ba      	adds	r2, r7, r2
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	6054      	str	r4, [r2, #4]
					} while ( (val != 0) && (p > buffer));
 8006be2:	23a8      	movs	r3, #168	; 0xa8
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	23ac      	movs	r3, #172	; 0xac
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	d030      	beq.n	8006c54 <micro_vprintf+0x66c>
 8006bf2:	2314      	movs	r3, #20
 8006bf4:	2258      	movs	r2, #88	; 0x58
 8006bf6:	18ba      	adds	r2, r7, r2
 8006bf8:	18d2      	adds	r2, r2, r3
 8006bfa:	23a0      	movs	r3, #160	; 0xa0
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d8ae      	bhi.n	8006b62 <micro_vprintf+0x57a>
				break;
 8006c04:	e026      	b.n	8006c54 <micro_vprintf+0x66c>

			default:
				// unsupported specifier, just print it as a literal to aid debugging
				while (start_fmt <= fmt)
 8006c06:	e01a      	b.n	8006c3e <micro_vprintf+0x656>
					{
					outc(*start_fmt++,context);
 8006c08:	23b8      	movs	r3, #184	; 0xb8
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	1c53      	adds	r3, r2, #1
 8006c10:	21b8      	movs	r1, #184	; 0xb8
 8006c12:	1879      	adds	r1, r7, r1
 8006c14:	600b      	str	r3, [r1, #0]
 8006c16:	7813      	ldrb	r3, [r2, #0]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c1e:	0011      	movs	r1, r2
 8006c20:	4798      	blx	r3
					n++;
 8006c22:	23bc      	movs	r3, #188	; 0xbc
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	22bc      	movs	r2, #188	; 0xbc
 8006c2c:	18ba      	adds	r2, r7, r2
 8006c2e:	6013      	str	r3, [r2, #0]
					width--;
 8006c30:	23b0      	movs	r3, #176	; 0xb0
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	22b0      	movs	r2, #176	; 0xb0
 8006c3a:	18ba      	adds	r2, r7, r2
 8006c3c:	6013      	str	r3, [r2, #0]
				while (start_fmt <= fmt)
 8006c3e:	23b8      	movs	r3, #184	; 0xb8
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d9de      	bls.n	8006c08 <micro_vprintf+0x620>
 8006c4a:	e004      	b.n	8006c56 <micro_vprintf+0x66e>
				break;
 8006c4c:	46c0      	nop			; (mov r8, r8)
 8006c4e:	e002      	b.n	8006c56 <micro_vprintf+0x66e>
				break;
 8006c50:	46c0      	nop			; (mov r8, r8)
 8006c52:	e000      	b.n	8006c56 <micro_vprintf+0x66e>
				break;
 8006c54:	46c0      	nop			; (mov r8, r8)
					}
			}

		len = strlen(p);
 8006c56:	23a0      	movs	r3, #160	; 0xa0
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7f9 fa5b 	bl	8000118 <strlen>
 8006c62:	0003      	movs	r3, r0
 8006c64:	2284      	movs	r2, #132	; 0x84
 8006c66:	18ba      	adds	r2, r7, r2
 8006c68:	6013      	str	r3, [r2, #0]

		// Leading pad
		if (!width_isneg)
 8006c6a:	235e      	movs	r3, #94	; 0x5e
 8006c6c:	2258      	movs	r2, #88	; 0x58
 8006c6e:	4694      	mov	ip, r2
 8006c70:	44bc      	add	ip, r7
 8006c72:	4463      	add	r3, ip
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	2301      	movs	r3, #1
 8006c78:	4053      	eors	r3, r2
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d056      	beq.n	8006d2e <micro_vprintf+0x746>
			{
			if (zeropad && isneg)
 8006c80:	234e      	movs	r3, #78	; 0x4e
 8006c82:	2258      	movs	r2, #88	; 0x58
 8006c84:	4694      	mov	ip, r2
 8006c86:	44bc      	add	ip, r7
 8006c88:	4463      	add	r3, ip
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d03e      	beq.n	8006d0e <micro_vprintf+0x726>
 8006c90:	235f      	movs	r3, #95	; 0x5f
 8006c92:	2258      	movs	r2, #88	; 0x58
 8006c94:	4694      	mov	ip, r2
 8006c96:	44bc      	add	ip, r7
 8006c98:	4463      	add	r3, ip
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d036      	beq.n	8006d0e <micro_vprintf+0x726>
				{
				outc('-', context);
 8006ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ca4:	0011      	movs	r1, r2
 8006ca6:	202d      	movs	r0, #45	; 0x2d
 8006ca8:	4798      	blx	r3
				n++;
 8006caa:	23bc      	movs	r3, #188	; 0xbc
 8006cac:	18fb      	adds	r3, r7, r3
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	22bc      	movs	r2, #188	; 0xbc
 8006cb4:	18ba      	adds	r2, r7, r2
 8006cb6:	6013      	str	r3, [r2, #0]
				width--;
 8006cb8:	23b0      	movs	r3, #176	; 0xb0
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	22b0      	movs	r2, #176	; 0xb0
 8006cc2:	18ba      	adds	r2, r7, r2
 8006cc4:	6013      	str	r3, [r2, #0]
				isneg = false;	// we already handled it
 8006cc6:	235f      	movs	r3, #95	; 0x5f
 8006cc8:	2258      	movs	r2, #88	; 0x58
 8006cca:	18ba      	adds	r2, r7, r2
 8006ccc:	18d2      	adds	r2, r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	7013      	strb	r3, [r2, #0]
				}

			while (len + (isneg ? 1 : 0) < width)
 8006cd2:	e01c      	b.n	8006d0e <micro_vprintf+0x726>
				{
				outc(zeropad ? '0' : ' ', context);
 8006cd4:	234e      	movs	r3, #78	; 0x4e
 8006cd6:	2258      	movs	r2, #88	; 0x58
 8006cd8:	4694      	mov	ip, r2
 8006cda:	44bc      	add	ip, r7
 8006cdc:	4463      	add	r3, ip
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <micro_vprintf+0x700>
 8006ce4:	2030      	movs	r0, #48	; 0x30
 8006ce6:	e000      	b.n	8006cea <micro_vprintf+0x702>
 8006ce8:	2020      	movs	r0, #32
 8006cea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	0011      	movs	r1, r2
 8006cf0:	4798      	blx	r3
				n++;
 8006cf2:	23bc      	movs	r3, #188	; 0xbc
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	22bc      	movs	r2, #188	; 0xbc
 8006cfc:	18ba      	adds	r2, r7, r2
 8006cfe:	6013      	str	r3, [r2, #0]
				width--;
 8006d00:	23b0      	movs	r3, #176	; 0xb0
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	22b0      	movs	r2, #176	; 0xb0
 8006d0a:	18ba      	adds	r2, r7, r2
 8006d0c:	6013      	str	r3, [r2, #0]
			while (len + (isneg ? 1 : 0) < width)
 8006d0e:	235f      	movs	r3, #95	; 0x5f
 8006d10:	2258      	movs	r2, #88	; 0x58
 8006d12:	4694      	mov	ip, r2
 8006d14:	44bc      	add	ip, r7
 8006d16:	4463      	add	r3, ip
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	2384      	movs	r3, #132	; 0x84
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	18d2      	adds	r2, r2, r3
 8006d24:	23b0      	movs	r3, #176	; 0xb0
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	dbd2      	blt.n	8006cd4 <micro_vprintf+0x6ec>
				}
			}

		if (isneg)
 8006d2e:	235f      	movs	r3, #95	; 0x5f
 8006d30:	2258      	movs	r2, #88	; 0x58
 8006d32:	4694      	mov	ip, r2
 8006d34:	44bc      	add	ip, r7
 8006d36:	4463      	add	r3, ip
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02e      	beq.n	8006d9c <micro_vprintf+0x7b4>
			{
			outc('-', context);
 8006d3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d42:	0011      	movs	r1, r2
 8006d44:	202d      	movs	r0, #45	; 0x2d
 8006d46:	4798      	blx	r3
			n++;
 8006d48:	23bc      	movs	r3, #188	; 0xbc
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	22bc      	movs	r2, #188	; 0xbc
 8006d52:	18ba      	adds	r2, r7, r2
 8006d54:	6013      	str	r3, [r2, #0]
			width--;
 8006d56:	23b0      	movs	r3, #176	; 0xb0
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	22b0      	movs	r2, #176	; 0xb0
 8006d60:	18ba      	adds	r2, r7, r2
 8006d62:	6013      	str	r3, [r2, #0]
			}

		// print the buffer
		while (*p)
 8006d64:	e01a      	b.n	8006d9c <micro_vprintf+0x7b4>
			{
			outc(*p++, context);
 8006d66:	23a0      	movs	r3, #160	; 0xa0
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	1c53      	adds	r3, r2, #1
 8006d6e:	21a0      	movs	r1, #160	; 0xa0
 8006d70:	1879      	adds	r1, r7, r1
 8006d72:	600b      	str	r3, [r1, #0]
 8006d74:	7813      	ldrb	r3, [r2, #0]
 8006d76:	0018      	movs	r0, r3
 8006d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7c:	0011      	movs	r1, r2
 8006d7e:	4798      	blx	r3
			n++;
 8006d80:	23bc      	movs	r3, #188	; 0xbc
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	22bc      	movs	r2, #188	; 0xbc
 8006d8a:	18ba      	adds	r2, r7, r2
 8006d8c:	6013      	str	r3, [r2, #0]
			width--;
 8006d8e:	23b0      	movs	r3, #176	; 0xb0
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	22b0      	movs	r2, #176	; 0xb0
 8006d98:	18ba      	adds	r2, r7, r2
 8006d9a:	6013      	str	r3, [r2, #0]
		while (*p)
 8006d9c:	23a0      	movs	r3, #160	; 0xa0
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1de      	bne.n	8006d66 <micro_vprintf+0x77e>
			}

		// trailing pad
		while (width > 0)
 8006da8:	e012      	b.n	8006dd0 <micro_vprintf+0x7e8>
			{
			outc(' ',context);
 8006daa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dae:	0011      	movs	r1, r2
 8006db0:	2020      	movs	r0, #32
 8006db2:	4798      	blx	r3
			n++;
 8006db4:	23bc      	movs	r3, #188	; 0xbc
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	22bc      	movs	r2, #188	; 0xbc
 8006dbe:	18ba      	adds	r2, r7, r2
 8006dc0:	6013      	str	r3, [r2, #0]
			width--;
 8006dc2:	23b0      	movs	r3, #176	; 0xb0
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	22b0      	movs	r2, #176	; 0xb0
 8006dcc:	18ba      	adds	r2, r7, r2
 8006dce:	6013      	str	r3, [r2, #0]
		while (width > 0)
 8006dd0:	23b0      	movs	r3, #176	; 0xb0
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dce7      	bgt.n	8006daa <micro_vprintf+0x7c2>
			}

		fmt++;	// skip over the current char in the format string
 8006dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ddc:	3301      	adds	r3, #1
 8006dde:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (*fmt)
 8006de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <micro_vprintf+0x804>
 8006de8:	f7ff fc0b 	bl	8006602 <micro_vprintf+0x1a>
    	}
	
	return n;
 8006dec:	23bc      	movs	r3, #188	; 0xbc
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	681b      	ldr	r3, [r3, #0]
}	
 8006df2:	0018      	movs	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b031      	add	sp, #196	; 0xc4
 8006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	0800ab5c 	.word	0x0800ab5c

08006e00 <Handle_VT>:
int  T_delx;

// -------------------------------------------------------------------------------

void Handle_VT()					//	Check on Voltage and Temperature averages once per second
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
	int32  dV;
	int32  dVx;						//	One-second voltage delta
	int32  dT_Slope;
	int32  dT;						//  One-second temp change

	Reason = 0;						//	A reason for logging
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
	Check_VT = false;
 8006e0a:	4b52      	ldr	r3, [pc, #328]	; (8006f54 <Handle_VT+0x154>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]

	v = Get_Volts();				//	Get average voltage and restart the averaging for next second
 8006e10:	f7fd fcde 	bl	80047d0 <Get_Volts>
 8006e14:	0003      	movs	r3, r0
 8006e16:	61bb      	str	r3, [r7, #24]
	t = Get_Temperature();			//	Get average temperature and restart the averaging for next second
 8006e18:	f7fd fa9a 	bl	8004350 <Get_Temperature>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	617b      	str	r3, [r7, #20]

	dVx = v - Last_Volts;			//	Change in btty voltage over the last second
 8006e20:	4b4d      	ldr	r3, [pc, #308]	; (8006f58 <Handle_VT+0x158>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	613b      	str	r3, [r7, #16]
	dV = v - Last_Logged_Volts;		//	Change in btty voltage since last logged record
 8006e2a:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <Handle_VT+0x15c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	60fb      	str	r3, [r7, #12]
	Last_Volts = Current_Volts = v;
 8006e34:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <Handle_VT+0x160>)
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	4b49      	ldr	r3, [pc, #292]	; (8006f60 <Handle_VT+0x160>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b46      	ldr	r3, [pc, #280]	; (8006f58 <Handle_VT+0x158>)
 8006e40:	601a      	str	r2, [r3, #0]

	dT_Slope = t - Last_Temp;
 8006e42:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <Handle_VT+0x164>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	60bb      	str	r3, [r7, #8]
	dT = t - Last_Logged_Temp;
 8006e4c:	4b46      	ldr	r3, [pc, #280]	; (8006f68 <Handle_VT+0x168>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	607b      	str	r3, [r7, #4]
	Last_Temp = Current_Temp  = t;
 8006e56:	4b45      	ldr	r3, [pc, #276]	; (8006f6c <Handle_VT+0x16c>)
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <Handle_VT+0x16c>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	4b40      	ldr	r3, [pc, #256]	; (8006f64 <Handle_VT+0x164>)
 8006e62:	601a      	str	r2, [r3, #0]

	while (1)							//	Allow BREAKs to act as "goto Exit"
	{
		if (gPOR > 0)					//	Wait for Power On Cycle
 8006e64:	4b42      	ldr	r3, [pc, #264]	; (8006f70 <Handle_VT+0x170>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dd14      	ble.n	8006e96 <Handle_VT+0x96>
		{
			if (--gPOR > 0)
 8006e6c:	4b40      	ldr	r3, [pc, #256]	; (8006f70 <Handle_VT+0x170>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	4b3f      	ldr	r3, [pc, #252]	; (8006f70 <Handle_VT+0x170>)
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <Handle_VT+0x170>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dd02      	ble.n	8006e84 <Handle_VT+0x84>
			{
				Tampered = false;		//	POR still active:  Keep tamper flag off
 8006e7e:	4b3d      	ldr	r3, [pc, #244]	; (8006f74 <Handle_VT+0x174>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
			}

			if (gPOR == 0)					//  POR done?
 8006e84:	4b3a      	ldr	r3, [pc, #232]	; (8006f70 <Handle_VT+0x170>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d155      	bne.n	8006f38 <Handle_VT+0x138>
			{
				Reason = FLAG_STARTUP;		//	POR just ended:  Generate first log since power-on
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	61fb      	str	r3, [r7, #28]
				process_Init();				//	First time in
 8006e90:	f000 f89a 	bl	8006fc8 <process_Init>
			}
			break;
 8006e94:	e050      	b.n	8006f38 <Handle_VT+0x138>
		}

		if (dV > V_del  ||  dV < -V_del)
 8006e96:	4b38      	ldr	r3, [pc, #224]	; (8006f78 <Handle_VT+0x178>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	dc05      	bgt.n	8006eac <Handle_VT+0xac>
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <Handle_VT+0x178>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	425a      	negs	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	dd01      	ble.n	8006eb0 <Handle_VT+0xb0>
		{
			Reason = FLAG_DV_SLOPE;
 8006eac:	2308      	movs	r3, #8
 8006eae:	61fb      	str	r3, [r7, #28]
		}

		if (dVx > V_delx  ||  dVx < -V_delx)
 8006eb0:	4b32      	ldr	r3, [pc, #200]	; (8006f7c <Handle_VT+0x17c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	dc05      	bgt.n	8006ec6 <Handle_VT+0xc6>
 8006eba:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <Handle_VT+0x17c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	425a      	negs	r2, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	dd03      	ble.n	8006ece <Handle_VT+0xce>
		{
			Reason |= FLAG_DVX;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2210      	movs	r2, #16
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	61fb      	str	r3, [r7, #28]
		}

		if (dT_Slope > T_del  ||  dT_Slope < -T_del)
 8006ece:	4b2c      	ldr	r3, [pc, #176]	; (8006f80 <Handle_VT+0x180>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	dc05      	bgt.n	8006ee4 <Handle_VT+0xe4>
 8006ed8:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <Handle_VT+0x180>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	425a      	negs	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	dd03      	ble.n	8006eec <Handle_VT+0xec>
		{
			Reason |= FLAG_DT_SLOPE;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61fb      	str	r3, [r7, #28]
		}

		if (dT > T_delx  ||  dT < -T_delx)
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <Handle_VT+0x184>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	dc05      	bgt.n	8006f02 <Handle_VT+0x102>
 8006ef6:	4b23      	ldr	r3, [pc, #140]	; (8006f84 <Handle_VT+0x184>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	425a      	negs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	dd04      	ble.n	8006f0c <Handle_VT+0x10c>
		{
			Reason |= FLAG_DT;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2204      	movs	r2, #4
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61fb      	str	r3, [r7, #28]
			break;
 8006f0a:	e018      	b.n	8006f3e <Handle_VT+0x13e>
		}

		if (--Periodic == 0)
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <Handle_VT+0x188>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <Handle_VT+0x188>)
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <Handle_VT+0x188>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <Handle_VT+0x124>
		{								//	Generate a log once an hour if all is quiet
			Reason = FLAG_PERIODIC;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
			break;
 8006f22:	e00c      	b.n	8006f3e <Handle_VT+0x13e>
		}

		if (Tampered)
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <Handle_VT+0x174>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <Handle_VT+0x13c>
		{								//	Generate a log if Tamper input changed
			Tampered = false;
 8006f2c:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <Handle_VT+0x174>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
			Reason = FLAG_TAMPERED;
 8006f32:	2320      	movs	r3, #32
 8006f34:	61fb      	str	r3, [r7, #28]
			break;
 8006f36:	e002      	b.n	8006f3e <Handle_VT+0x13e>
			break;
 8006f38:	46c0      	nop			; (mov r8, r8)
 8006f3a:	e000      	b.n	8006f3e <Handle_VT+0x13e>
		}
		break;							//	Exit now if NOT generating a log point
 8006f3c:	46c0      	nop			; (mov r8, r8)
	}

	if (Reason > 0)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd03      	ble.n	8006f4c <Handle_VT+0x14c>
		flash_Log (Reason);				//	Generate a log point, and show why
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	0018      	movs	r0, r3
 8006f48:	f7fc ff74 	bl	8003e34 <flash_Log>
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b008      	add	sp, #32
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20005a00 	.word	0x20005a00
 8006f58:	20005a40 	.word	0x20005a40
 8006f5c:	20005a60 	.word	0x20005a60
 8006f60:	20005a3c 	.word	0x20005a3c
 8006f64:	20005a58 	.word	0x20005a58
 8006f68:	20005a44 	.word	0x20005a44
 8006f6c:	20005a4c 	.word	0x20005a4c
 8006f70:	20005a30 	.word	0x20005a30
 8006f74:	20005a19 	.word	0x20005a19
 8006f78:	20005a38 	.word	0x20005a38
 8006f7c:	20005a5c 	.word	0x20005a5c
 8006f80:	20005a54 	.word	0x20005a54
 8006f84:	20005a48 	.word	0x20005a48
 8006f88:	20005a04 	.word	0x20005a04

08006f8c <Time_Callback>:
	Config.Periodic_Event_Rate = NewConfig->Periodic_Event_Rate;
}


void Time_Callback (uint32 CurrentEpoch)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	if (gPOR > 0)
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <Time_Callback+0x34>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	dd02      	ble.n	8006fa2 <Time_Callback+0x16>
		flash_Log (FLAG_PERIODIC);				//	Generate a log, just to show time
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fc ff49 	bl	8003e34 <flash_Log>
	TheTime.Epoch = CurrentEpoch;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <Time_Callback+0x38>)
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	601a      	str	r2, [r3, #0]
	if (gPOR > 0)
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <Time_Callback+0x34>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dd02      	ble.n	8006fb6 <Time_Callback+0x2a>
		flash_Log (FLAG_RESYNC);				//	Generate a log, showing true time
 8006fb0:	2080      	movs	r0, #128	; 0x80
 8006fb2:	f7fc ff3f 	bl	8003e34 <flash_Log>
}
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b002      	add	sp, #8
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	20005a30 	.word	0x20005a30
 8006fc4:	20005a20 	.word	0x20005a20

08006fc8 <process_Init>:
	return Get_time();						// has mutex
}


void process_Init()
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
	V_lwr = MODE_MIN_V * Battery_Size;		//	Set voltage trip points, based on nominal btty voltage
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <process_Init+0x5c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	; (8007028 <process_Init+0x60>)
 8006fd2:	435a      	muls	r2, r3
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <process_Init+0x64>)
 8006fd6:	601a      	str	r2, [r3, #0]
	V_upr = MODE_MAX_V * Battery_Size;
 8006fd8:	4b12      	ldr	r3, [pc, #72]	; (8007024 <process_Init+0x5c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a14      	ldr	r2, [pc, #80]	; (8007030 <process_Init+0x68>)
 8006fde:	435a      	muls	r2, r3
 8006fe0:	4b14      	ldr	r3, [pc, #80]	; (8007034 <process_Init+0x6c>)
 8006fe2:	601a      	str	r2, [r3, #0]
	V_del = MODE_dV * Battery_Size;
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <process_Init+0x5c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	22c8      	movs	r2, #200	; 0xc8
 8006fea:	435a      	muls	r2, r3
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <process_Init+0x70>)
 8006fee:	601a      	str	r2, [r3, #0]
	V_delx = MODE_dVx * Battery_Size;
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <process_Init+0x5c>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	0013      	movs	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	189b      	adds	r3, r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <process_Init+0x74>)
 8007000:	601a      	str	r2, [r3, #0]
	T_del = MODE_dT;
 8007002:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <process_Init+0x78>)
 8007004:	2205      	movs	r2, #5
 8007006:	601a      	str	r2, [r3, #0]
	T_delx = MODE_dTx;
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <process_Init+0x7c>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
	Last_Volts = Current_Volts;
 800700e:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <process_Init+0x80>)
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <process_Init+0x84>)
 8007014:	601a      	str	r2, [r3, #0]
	Last_Temp = Current_Temp;
 8007016:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <process_Init+0x88>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <process_Init+0x8c>)
 800701c:	601a      	str	r2, [r3, #0]
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20005a28 	.word	0x20005a28
 8007028:	00002c88 	.word	0x00002c88
 800702c:	20005a50 	.word	0x20005a50
 8007030:	00003458 	.word	0x00003458
 8007034:	20005a64 	.word	0x20005a64
 8007038:	20005a38 	.word	0x20005a38
 800703c:	20005a5c 	.word	0x20005a5c
 8007040:	20005a54 	.word	0x20005a54
 8007044:	20005a48 	.word	0x20005a48
 8007048:	20005a3c 	.word	0x20005a3c
 800704c:	20005a40 	.word	0x20005a40
 8007050:	20005a4c 	.word	0x20005a4c
 8007054:	20005a58 	.word	0x20005a58

08007058 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007058:	4813      	ldr	r0, [pc, #76]	; (80070a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800705a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800705c:	2004      	movs	r0, #4
    LDR R1, [R0]
 800705e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8007060:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8007062:	221f      	movs	r2, #31
    CMP R1, R2
 8007064:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8007066:	d105      	bne.n	8007074 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8007068:	4810      	ldr	r0, [pc, #64]	; (80070ac <LoopForever+0x6>)
    LDR R1,=0x00000001
 800706a:	2101      	movs	r1, #1
    STR R1, [R0]
 800706c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800706e:	4810      	ldr	r0, [pc, #64]	; (80070b0 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8007070:	2100      	movs	r1, #0
    STR R1, [R0]
 8007072:	6001      	str	r1, [r0, #0]

08007074 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007076:	e003      	b.n	8007080 <LoopCopyDataInit>

08007078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 800707a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800707c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800707e:	3104      	adds	r1, #4

08007080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007080:	480d      	ldr	r0, [pc, #52]	; (80070b8 <LoopForever+0x12>)
  ldr r3, =_edata
 8007082:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <LoopForever+0x16>)
  adds r2, r0, r1
 8007084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007088:	d3f6      	bcc.n	8007078 <CopyDataInit>
  ldr r2, =_sbss
 800708a:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <LoopForever+0x1a>)
  b LoopFillZerobss
 800708c:	e002      	b.n	8007094 <LoopFillZerobss>

0800708e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800708e:	2300      	movs	r3, #0
  str  r3, [r2]
 8007090:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007092:	3204      	adds	r2, #4

08007094 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <LoopForever+0x1e>)
  cmp r2, r3
 8007096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007098:	d3f9      	bcc.n	800708e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800709a:	f000 f81f 	bl	80070dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800709e:	f000 fd6d 	bl	8007b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80070a2:	f7ff f80f 	bl	80060c4 <main>

080070a6 <LoopForever>:

LoopForever:
    b LoopForever
 80070a6:	e7fe      	b.n	80070a6 <LoopForever>
  ldr   r0, =_estack
 80070a8:	20008000 	.word	0x20008000
    LDR R0,=0x40021018
 80070ac:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 80070b0:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 80070b4:	0800ae2c 	.word	0x0800ae2c
  ldr r0, =_sdata
 80070b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80070bc:	200002b4 	.word	0x200002b4
  ldr r2, =_sbss
 80070c0:	200002b8 	.word	0x200002b8
  ldr r3, = _ebss
 80070c4:	20005cbc 	.word	0x20005cbc

080070c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070c8:	e7fe      	b.n	80070c8 <ADC1_IRQHandler>

080070ca <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	af00      	add	r7, sp, #0
}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80070d8:	e7fe      	b.n	80070d8 <HardFault_Handler+0x4>
	...

080070dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <SystemInit+0x74>)
 80070e2:	4a1b      	ldr	r2, [pc, #108]	; (8007150 <SystemInit+0x74>)
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	2101      	movs	r1, #1
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <SystemInit+0x74>)
 80070ee:	4a18      	ldr	r2, [pc, #96]	; (8007150 <SystemInit+0x74>)
 80070f0:	6852      	ldr	r2, [r2, #4]
 80070f2:	4918      	ldr	r1, [pc, #96]	; (8007154 <SystemInit+0x78>)
 80070f4:	400a      	ands	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <SystemInit+0x74>)
 80070fa:	4a15      	ldr	r2, [pc, #84]	; (8007150 <SystemInit+0x74>)
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	4916      	ldr	r1, [pc, #88]	; (8007158 <SystemInit+0x7c>)
 8007100:	400a      	ands	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <SystemInit+0x74>)
 8007106:	4a12      	ldr	r2, [pc, #72]	; (8007150 <SystemInit+0x74>)
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4914      	ldr	r1, [pc, #80]	; (800715c <SystemInit+0x80>)
 800710c:	400a      	ands	r2, r1
 800710e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <SystemInit+0x74>)
 8007112:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <SystemInit+0x74>)
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	4912      	ldr	r1, [pc, #72]	; (8007160 <SystemInit+0x84>)
 8007118:	400a      	ands	r2, r1
 800711a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <SystemInit+0x74>)
 800711e:	4a0c      	ldr	r2, [pc, #48]	; (8007150 <SystemInit+0x74>)
 8007120:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007122:	210f      	movs	r1, #15
 8007124:	438a      	bics	r2, r1
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <SystemInit+0x74>)
 800712a:	4a09      	ldr	r2, [pc, #36]	; (8007150 <SystemInit+0x74>)
 800712c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <SystemInit+0x88>)
 8007130:	400a      	ands	r2, r1
 8007132:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <SystemInit+0x74>)
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <SystemInit+0x74>)
 8007138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800713a:	2101      	movs	r1, #1
 800713c:	438a      	bics	r2, r1
 800713e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <SystemInit+0x74>)
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8007146:	f000 f80f 	bl	8007168 <SetSysClock>
}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40021000 	.word	0x40021000
 8007154:	f8ffb80c 	.word	0xf8ffb80c
 8007158:	fef6ffff 	.word	0xfef6ffff
 800715c:	fffbffff 	.word	0xfffbffff
 8007160:	ffc0ffff 	.word	0xffc0ffff
 8007164:	fffffeac 	.word	0xfffffeac

08007168 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	2300      	movs	r3, #0
 8007174:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8007176:	4b31      	ldr	r3, [pc, #196]	; (800723c <SetSysClock+0xd4>)
 8007178:	4a30      	ldr	r2, [pc, #192]	; (800723c <SetSysClock+0xd4>)
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	0249      	lsls	r1, r1, #9
 8007180:	430a      	orrs	r2, r1
 8007182:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8007184:	4b2d      	ldr	r3, [pc, #180]	; (800723c <SetSysClock+0xd4>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	029b      	lsls	r3, r3, #10
 800718c:	4013      	ands	r3, r2
 800718e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3301      	adds	r3, #1
 8007194:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <SetSysClock+0x3e>
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	23a0      	movs	r3, #160	; 0xa0
 80071a0:	01db      	lsls	r3, r3, #7
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d1ee      	bne.n	8007184 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80071a6:	4b25      	ldr	r3, [pc, #148]	; (800723c <SetSysClock+0xd4>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	4013      	ands	r3, r2
 80071b0:	d002      	beq.n	80071b8 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 80071b2:	2301      	movs	r3, #1
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	e001      	b.n	80071bc <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d138      	bne.n	8007234 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80071c2:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <SetSysClock+0xd8>)
 80071c4:	2211      	movs	r2, #17
 80071c6:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80071c8:	4b1c      	ldr	r3, [pc, #112]	; (800723c <SetSysClock+0xd4>)
 80071ca:	4a1c      	ldr	r2, [pc, #112]	; (800723c <SetSysClock+0xd4>)
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80071d0:	4b1a      	ldr	r3, [pc, #104]	; (800723c <SetSysClock+0xd4>)
 80071d2:	4a1a      	ldr	r2, [pc, #104]	; (800723c <SetSysClock+0xd4>)
 80071d4:	6852      	ldr	r2, [r2, #4]
 80071d6:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 2 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80071d8:	4b18      	ldr	r3, [pc, #96]	; (800723c <SetSysClock+0xd4>)
 80071da:	4a18      	ldr	r2, [pc, #96]	; (800723c <SetSysClock+0xd4>)
 80071dc:	6852      	ldr	r2, [r2, #4]
 80071de:	4919      	ldr	r1, [pc, #100]	; (8007244 <SetSysClock+0xdc>)
 80071e0:	400a      	ands	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <SetSysClock+0xd4>)
 80071e6:	4a15      	ldr	r2, [pc, #84]	; (800723c <SetSysClock+0xd4>)
 80071e8:	6852      	ldr	r2, [r2, #4]
 80071ea:	2180      	movs	r1, #128	; 0x80
 80071ec:	0249      	lsls	r1, r1, #9
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <SetSysClock+0xd4>)
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <SetSysClock+0xd4>)
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	0449      	lsls	r1, r1, #17
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	4b0e      	ldr	r3, [pc, #56]	; (800723c <SetSysClock+0xd4>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	2380      	movs	r3, #128	; 0x80
 8007208:	049b      	lsls	r3, r3, #18
 800720a:	4013      	ands	r3, r2
 800720c:	d0f9      	beq.n	8007202 <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <SetSysClock+0xd4>)
 8007210:	4a0a      	ldr	r2, [pc, #40]	; (800723c <SetSysClock+0xd4>)
 8007212:	6852      	ldr	r2, [r2, #4]
 8007214:	2103      	movs	r1, #3
 8007216:	438a      	bics	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800721a:	4b08      	ldr	r3, [pc, #32]	; (800723c <SetSysClock+0xd4>)
 800721c:	4a07      	ldr	r2, [pc, #28]	; (800723c <SetSysClock+0xd4>)
 800721e:	6852      	ldr	r2, [r2, #4]
 8007220:	2102      	movs	r1, #2
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <SetSysClock+0xd4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	220c      	movs	r2, #12
 800722e:	4013      	ands	r3, r2
 8007230:	2b08      	cmp	r3, #8
 8007232:	d1f9      	bne.n	8007228 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b002      	add	sp, #8
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021000 	.word	0x40021000
 8007240:	40022000 	.word	0x40022000
 8007244:	ffc07fff 	.word	0xffc07fff

08007248 <uart1_Init>:
xSemaphoreHandle	uart1_TxMutex;
xSemaphoreHandle	uart1_RxMutex;


void uart1_Init()
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
	// USART peripheral initialization settings
	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uart1_RxBufHead = 0;
 800724e:	4b5e      	ldr	r3, [pc, #376]	; (80073c8 <uart1_Init+0x180>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
	uart1_RxBufTail = 0;
 8007254:	4b5d      	ldr	r3, [pc, #372]	; (80073cc <uart1_Init+0x184>)
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
	uart1_TxBufHead = 0;
 800725a:	4b5d      	ldr	r3, [pc, #372]	; (80073d0 <uart1_Init+0x188>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
	uart1_TxBufTail = 0;
 8007260:	4b5c      	ldr	r3, [pc, #368]	; (80073d4 <uart1_Init+0x18c>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
	uart1_RxFlags = 0;
 8007266:	4b5c      	ldr	r3, [pc, #368]	; (80073d8 <uart1_Init+0x190>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(uart1_RxAvailableSemaphore);
 800726c:	2203      	movs	r2, #3
 800726e:	2100      	movs	r1, #0
 8007270:	2001      	movs	r0, #1
 8007272:	f7f9 fbfe 	bl	8000a72 <xQueueGenericCreate>
 8007276:	0002      	movs	r2, r0
 8007278:	4b58      	ldr	r3, [pc, #352]	; (80073dc <uart1_Init+0x194>)
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	4b57      	ldr	r3, [pc, #348]	; (80073dc <uart1_Init+0x194>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <uart1_Init+0x4a>
 8007284:	4b55      	ldr	r3, [pc, #340]	; (80073dc <uart1_Init+0x194>)
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	f7f9 fc75 	bl	8000b7c <xQueueGenericSend>

	vSemaphoreCreateBinary(uart1_TxDrainedSemaphore);
 8007292:	2203      	movs	r2, #3
 8007294:	2100      	movs	r1, #0
 8007296:	2001      	movs	r0, #1
 8007298:	f7f9 fbeb 	bl	8000a72 <xQueueGenericCreate>
 800729c:	0002      	movs	r2, r0
 800729e:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <uart1_Init+0x198>)
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <uart1_Init+0x198>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d006      	beq.n	80072b8 <uart1_Init+0x70>
 80072aa:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <uart1_Init+0x198>)
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	f7f9 fc62 	bl	8000b7c <xQueueGenericSend>
	xSemaphoreGive(uart1_TxDrainedSemaphore);	// initially drained
 80072b8:	4b49      	ldr	r3, [pc, #292]	; (80073e0 <uart1_Init+0x198>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	f7f9 fc5b 	bl	8000b7c <xQueueGenericSend>

	uart1_RxMutex = xSemaphoreCreateMutex();
 80072c6:	2001      	movs	r0, #1
 80072c8:	f7f9 fc13 	bl	8000af2 <xQueueCreateMutex>
 80072cc:	0002      	movs	r2, r0
 80072ce:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <uart1_Init+0x19c>)
 80072d0:	601a      	str	r2, [r3, #0]
	uart1_TxMutex = xSemaphoreCreateMutex();
 80072d2:	2001      	movs	r0, #1
 80072d4:	f7f9 fc0d 	bl	8000af2 <xQueueCreateMutex>
 80072d8:	0002      	movs	r2, r0
 80072da:	4b43      	ldr	r3, [pc, #268]	; (80073e8 <uart1_Init+0x1a0>)
 80072dc:	601a      	str	r2, [r3, #0]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 80072de:	2380      	movs	r3, #128	; 0x80
 80072e0:	01db      	lsls	r3, r3, #7
 80072e2:	2101      	movs	r1, #1
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7fb faad 	bl	8002844 <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	02db      	lsls	r3, r3, #11
 80072ee:	2101      	movs	r1, #1
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7fb fa87 	bl	8002804 <RCC_AHBPeriphClockCmd>

	//Configure USART1 pins: Tx (PB6) and Rx (PB7)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80072f6:	2308      	movs	r3, #8
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	22c0      	movs	r2, #192	; 0xc0
 80072fc:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80072fe:	2308      	movs	r3, #8
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	2203      	movs	r2, #3
 8007304:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007306:	2308      	movs	r3, #8
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	2202      	movs	r2, #2
 800730c:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800730e:	2308      	movs	r3, #8
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2200      	movs	r2, #0
 8007314:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8007316:	2308      	movs	r3, #8
 8007318:	18fb      	adds	r3, r7, r3
 800731a:	2201      	movs	r2, #1
 800731c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800731e:	2308      	movs	r3, #8
 8007320:	18fb      	adds	r3, r7, r3
 8007322:	4a32      	ldr	r2, [pc, #200]	; (80073ec <uart1_Init+0x1a4>)
 8007324:	0019      	movs	r1, r3
 8007326:	0010      	movs	r0, r2
 8007328:	f7fa ff92 	bl	8002250 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_0);	// Alternate Function 0 == USART1_TX
 800732c:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <uart1_Init+0x1a4>)
 800732e:	2200      	movs	r2, #0
 8007330:	2106      	movs	r1, #6
 8007332:	0018      	movs	r0, r3
 8007334:	f7fb f84b 	bl	80023ce <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_0);	// Alternate Function 0 == USART1_RX
 8007338:	4b2c      	ldr	r3, [pc, #176]	; (80073ec <uart1_Init+0x1a4>)
 800733a:	2200      	movs	r2, #0
 800733c:	2107      	movs	r1, #7
 800733e:	0018      	movs	r0, r3
 8007340:	f7fb f845 	bl	80023ce <GPIO_PinAFConfig>
	//Configure USART1 setting: ----------------------------
	USART_InitStructure.USART_BaudRate = UART1_BAUDRATE;
 8007344:	2310      	movs	r3, #16
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	22e1      	movs	r2, #225	; 0xe1
 800734a:	0252      	lsls	r2, r2, #9
 800734c:	601a      	str	r2, [r3, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800734e:	2310      	movs	r3, #16
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	2200      	movs	r2, #0
 8007354:	605a      	str	r2, [r3, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8007356:	2310      	movs	r3, #16
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800735e:	2310      	movs	r3, #16
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	2200      	movs	r2, #0
 8007364:	60da      	str	r2, [r3, #12]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007366:	2310      	movs	r3, #16
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	2200      	movs	r2, #0
 800736c:	615a      	str	r2, [r3, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800736e:	2310      	movs	r3, #16
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	220c      	movs	r2, #12
 8007374:	611a      	str	r2, [r3, #16]
	USART_Init(USART1, &USART_InitStructure);
 8007376:	2310      	movs	r3, #16
 8007378:	18fb      	adds	r3, r7, r3
 800737a:	4a1d      	ldr	r2, [pc, #116]	; (80073f0 <uart1_Init+0x1a8>)
 800737c:	0019      	movs	r1, r3
 800737e:	0010      	movs	r0, r2
 8007380:	f7fb fac8 	bl	8002914 <USART_Init>

	/* Here the USART1 transmit interrupt is disabled. This is generated when the
	 * transmit data register is empty
	 */
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE); 			// disable the USART1 receive interrupt
 8007384:	491b      	ldr	r1, [pc, #108]	; (80073f4 <uart1_Init+0x1ac>)
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <uart1_Init+0x1a8>)
 8007388:	2200      	movs	r2, #0
 800738a:	0018      	movs	r0, r3
 800738c:	f7fb fbb7 	bl	8002afe <USART_ITConfig>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); 			// enable the USART1 receive interrupt
 8007390:	4919      	ldr	r1, [pc, #100]	; (80073f8 <uart1_Init+0x1b0>)
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <uart1_Init+0x1a8>)
 8007394:	2201      	movs	r2, #1
 8007396:	0018      	movs	r0, r3
 8007398:	f7fb fbb1 	bl	8002afe <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	221b      	movs	r2, #27
 80073a0:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;			 // this sets the priority group of the USART1 interrupts
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	2200      	movs	r2, #0
 80073a6:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 80073a8:	1d3b      	adds	r3, r7, #4
 80073aa:	2201      	movs	r2, #1
 80073ac:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	0018      	movs	r0, r3
 80073b2:	f7fb f85f 	bl	8002474 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 80073b6:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <uart1_Init+0x1a8>)
 80073b8:	2101      	movs	r1, #1
 80073ba:	0018      	movs	r0, r3
 80073bc:	f7fb fb70 	bl	8002aa0 <USART_Cmd>
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b00a      	add	sp, #40	; 0x28
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20005b00 	.word	0x20005b00
 80073cc:	20005b0c 	.word	0x20005b0c
 80073d0:	20005b04 	.word	0x20005b04
 80073d4:	20005afc 	.word	0x20005afc
 80073d8:	20005a74 	.word	0x20005a74
 80073dc:	20005b08 	.word	0x20005b08
 80073e0:	20005b10 	.word	0x20005b10
 80073e4:	20005a70 	.word	0x20005a70
 80073e8:	20005a78 	.word	0x20005a78
 80073ec:	48000400 	.word	0x48000400
 80073f0:	40013800 	.word	0x40013800
 80073f4:	00070107 	.word	0x00070107
 80073f8:	00050105 	.word	0x00050105

080073fc <uart1_Putc>:

void uart1_Putc(int c, void *unused)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	// wait until data register is empty
	while( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	4b08      	ldr	r3, [pc, #32]	; (800742c <uart1_Putc+0x30>)
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	0018      	movs	r0, r3
 800740e:	f7fb fbb8 	bl	8002b82 <USART_GetFlagStatus>
 8007412:	1e03      	subs	r3, r0, #0
 8007414:	d0f8      	beq.n	8007408 <uart1_Putc+0xc>
		;
	USART_SendData(USART1,c);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	b29b      	uxth	r3, r3
 800741a:	4a04      	ldr	r2, [pc, #16]	; (800742c <uart1_Putc+0x30>)
 800741c:	0019      	movs	r1, r3
 800741e:	0010      	movs	r0, r2
 8007420:	f7fb fb5b 	bl	8002ada <USART_SendData>
}
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b002      	add	sp, #8
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40013800 	.word	0x40013800

08007430 <uart1_PutByteNoLock>:

int uart1_PutByteNoLock(int ch)
	{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	unsigned newtail;

	newtail = uart1_TxBufTail + 1;
 8007438:	4b19      	ldr	r3, [pc, #100]	; (80074a0 <uart1_PutByteNoLock+0x70>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
	if (newtail >= TX_BUFSIZE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b7f      	cmp	r3, #127	; 0x7f
 8007444:	d913      	bls.n	800746e <uart1_PutByteNoLock+0x3e>
		newtail = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
	while (newtail == uart1_TxBufHead)
 800744a:	e010      	b.n	800746e <uart1_PutByteNoLock+0x3e>
		{
		// no more space in the buffer
		// Make sure the TX interrupt is enabled so the buffer will drain
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE); 			// enable the USART1 receive interrupt
 800744c:	4915      	ldr	r1, [pc, #84]	; (80074a4 <uart1_PutByteNoLock+0x74>)
 800744e:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <uart1_PutByteNoLock+0x78>)
 8007450:	2201      	movs	r2, #1
 8007452:	0018      	movs	r0, r3
 8007454:	f7fb fb53 	bl	8002afe <USART_ITConfig>
		if (!xSemaphoreTake(uart1_TxDrainedSemaphore,MS_TO_TICKS(100)))
 8007458:	4b14      	ldr	r3, [pc, #80]	; (80074ac <uart1_PutByteNoLock+0x7c>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	2300      	movs	r3, #0
 800745e:	2264      	movs	r2, #100	; 0x64
 8007460:	2100      	movs	r1, #0
 8007462:	f7f9 fc70 	bl	8000d46 <xQueueGenericReceive>
 8007466:	1e03      	subs	r3, r0, #0
 8007468:	d101      	bne.n	800746e <uart1_PutByteNoLock+0x3e>
			return 0;
 800746a:	2300      	movs	r3, #0
 800746c:	e014      	b.n	8007498 <uart1_PutByteNoLock+0x68>
	while (newtail == uart1_TxBufHead)
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <uart1_PutByteNoLock+0x80>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d0e9      	beq.n	800744c <uart1_PutByteNoLock+0x1c>
		}
	uart1_TxBuf[uart1_TxBufTail] = ch;
 8007478:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <uart1_PutByteNoLock+0x70>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	b2d1      	uxtb	r1, r2
 8007480:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <uart1_PutByteNoLock+0x84>)
 8007482:	54d1      	strb	r1, [r2, r3]
	uart1_TxBufTail = newtail;
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <uart1_PutByteNoLock+0x70>)
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE); 			// enable the USART1 receive interrupt
 800748a:	4906      	ldr	r1, [pc, #24]	; (80074a4 <uart1_PutByteNoLock+0x74>)
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <uart1_PutByteNoLock+0x78>)
 800748e:	2201      	movs	r2, #1
 8007490:	0018      	movs	r0, r3
 8007492:	f7fb fb34 	bl	8002afe <USART_ITConfig>
	return 1;
 8007496:	2301      	movs	r3, #1
	}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b004      	add	sp, #16
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20005afc 	.word	0x20005afc
 80074a4:	00070107 	.word	0x00070107
 80074a8:	40013800 	.word	0x40013800
 80074ac:	20005b10 	.word	0x20005b10
 80074b0:	20005b04 	.word	0x20005b04
 80074b4:	20005a7c 	.word	0x20005a7c

080074b8 <uart1_Puts>:
	xSemaphoreGive(uart1_TxMutex);
	return nwritten;
	}

void uart1_Puts(char const *s)
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uart1_TxMutex,portMAX_DELAY);
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <uart1_Puts+0x48>)
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	2301      	movs	r3, #1
 80074c6:	425a      	negs	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	f7f9 fc3b 	bl	8000d46 <xQueueGenericReceive>
	while (*s)
 80074d0:	e006      	b.n	80074e0 <uart1_Puts+0x28>
		uart1_PutByteNoLock(*s++);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff ffa8 	bl	8007430 <uart1_PutByteNoLock>
	while (*s)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f4      	bne.n	80074d2 <uart1_Puts+0x1a>
	//uart1_PutByteNoLock('\r');		// for Windows compatibility
	//uart1_PutByteNoLock('\n');
	xSemaphoreGive(uart1_TxMutex);
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <uart1_Puts+0x48>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	f7f9 fb43 	bl	8000b7c <xQueueGenericSend>
	}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b002      	add	sp, #8
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	20005a78 	.word	0x20005a78

08007504 <uart1_PutLine>:

void uart1_PutLine(char const *s)
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uart1_TxMutex,portMAX_DELAY);
 800750c:	4b12      	ldr	r3, [pc, #72]	; (8007558 <uart1_PutLine+0x54>)
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	2301      	movs	r3, #1
 8007512:	425a      	negs	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	2100      	movs	r1, #0
 8007518:	f7f9 fc15 	bl	8000d46 <xQueueGenericReceive>
	while (*s)
 800751c:	e006      	b.n	800752c <uart1_PutLine+0x28>
		uart1_PutByteNoLock(*s++);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	0018      	movs	r0, r3
 8007528:	f7ff ff82 	bl	8007430 <uart1_PutByteNoLock>
	while (*s)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f4      	bne.n	800751e <uart1_PutLine+0x1a>
	uart1_PutByteNoLock('\r');		// for Windows compatibility
 8007534:	200d      	movs	r0, #13
 8007536:	f7ff ff7b 	bl	8007430 <uart1_PutByteNoLock>
	uart1_PutByteNoLock('\n');
 800753a:	200a      	movs	r0, #10
 800753c:	f7ff ff78 	bl	8007430 <uart1_PutByteNoLock>
	xSemaphoreGive(uart1_TxMutex);
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <uart1_PutLine+0x54>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	f7f9 fb17 	bl	8000b7c <xQueueGenericSend>
	}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	46bd      	mov	sp, r7
 8007552:	b002      	add	sp, #8
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	20005a78 	.word	0x20005a78

0800755c <uart1_Printf>:
	return nread;
	}


int uart1_Printf(char const *fmt, ... )
	{
 800755c:	b40f      	push	{r0, r1, r2, r3}
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
	va_list arg;
	int n;

	va_start(arg,fmt);
 8007564:	2314      	movs	r3, #20
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	603b      	str	r3, [r7, #0]
	n = micro_vprintf(uart1_Putc,NULL,fmt,arg);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4807      	ldr	r0, [pc, #28]	; (800758c <uart1_Printf+0x30>)
 8007570:	2100      	movs	r1, #0
 8007572:	f7ff f839 	bl	80065e8 <micro_vprintf>
 8007576:	0003      	movs	r3, r0
 8007578:	607b      	str	r3, [r7, #4]
	va_end(arg);

	return n;
 800757a:	687b      	ldr	r3, [r7, #4]
	}
 800757c:	0018      	movs	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	b002      	add	sp, #8
 8007582:	bc80      	pop	{r7}
 8007584:	bc08      	pop	{r3}
 8007586:	b004      	add	sp, #16
 8007588:	4718      	bx	r3
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	080073fd 	.word	0x080073fd

08007590 <USART1_IRQHandler>:



// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
	signed portBASE_TYPE	should_yield = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	603b      	str	r3, [r7, #0]
	FlagStatus status;

	// Is this an RX interrupt?
	if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 800759a:	4a4d      	ldr	r2, [pc, #308]	; (80076d0 <USART1_IRQHandler+0x140>)
 800759c:	4b4d      	ldr	r3, [pc, #308]	; (80076d4 <USART1_IRQHandler+0x144>)
 800759e:	0011      	movs	r1, r2
 80075a0:	0018      	movs	r0, r3
 80075a2:	f7fb fb18 	bl	8002bd6 <USART_GetITStatus>
 80075a6:	1e03      	subs	r3, r0, #0
 80075a8:	d04a      	beq.n	8007640 <USART1_IRQHandler+0xb0>
		{
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_RXNE)) )
 80075aa:	e01f      	b.n	80075ec <USART1_IRQHandler+0x5c>
			{
			uart1_RxBuf[uart1_RxBufTail] = USART1->RDR; // read character, resets flag
 80075ac:	4b4a      	ldr	r3, [pc, #296]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a48      	ldr	r2, [pc, #288]	; (80076d4 <USART1_IRQHandler+0x144>)
 80075b2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80075b4:	b292      	uxth	r2, r2
 80075b6:	b2d1      	uxtb	r1, r2
 80075b8:	4a48      	ldr	r2, [pc, #288]	; (80076dc <USART1_IRQHandler+0x14c>)
 80075ba:	54d1      	strb	r1, [r2, r3]
			if (++uart1_RxBufTail >= RX_BUFSIZE)
 80075bc:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	4b45      	ldr	r3, [pc, #276]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	4b44      	ldr	r3, [pc, #272]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d902      	bls.n	80075d4 <USART1_IRQHandler+0x44>
				uart1_RxBufTail = 0;
 80075ce:	4b42      	ldr	r3, [pc, #264]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
			if (uart1_RxBufTail == uart1_RxBufHead)
 80075d4:	4b40      	ldr	r3, [pc, #256]	; (80076d8 <USART1_IRQHandler+0x148>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	4b41      	ldr	r3, [pc, #260]	; (80076e0 <USART1_IRQHandler+0x150>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d105      	bne.n	80075ec <USART1_IRQHandler+0x5c>
				uart1_RxFlags |= RX_FLAG_BUFFER_OVERFLOW;
 80075e0:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <USART1_IRQHandler+0x154>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2208      	movs	r2, #8
 80075e6:	431a      	orrs	r2, r3
 80075e8:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <USART1_IRQHandler+0x154>)
 80075ea:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_RXNE)) )
 80075ec:	1dfc      	adds	r4, r7, #7
 80075ee:	4b39      	ldr	r3, [pc, #228]	; (80076d4 <USART1_IRQHandler+0x144>)
 80075f0:	2120      	movs	r1, #32
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7fb fac5 	bl	8002b82 <USART_GetFlagStatus>
 80075f8:	0003      	movs	r3, r0
 80075fa:	7023      	strb	r3, [r4, #0]
 80075fc:	1dfb      	adds	r3, r7, #7
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1d3      	bne.n	80075ac <USART1_IRQHandler+0x1c>
//			if (status & UART_PARITY_ERROR)
//				uart1_RxFlags |= RX_FLAG_PARITY_ERROR;
//			if (status & UART_FRAMING_ERROR)
//				uart1_RxFlags |= RX_FLAG_FRAMING_ERROR;
			}
		status=USART_GetFlagStatus(USART1, USART_FLAG_ORE);
 8007604:	1dfc      	adds	r4, r7, #7
 8007606:	4b33      	ldr	r3, [pc, #204]	; (80076d4 <USART1_IRQHandler+0x144>)
 8007608:	2108      	movs	r1, #8
 800760a:	0018      	movs	r0, r3
 800760c:	f7fb fab9 	bl	8002b82 <USART_GetFlagStatus>
 8007610:	0003      	movs	r3, r0
 8007612:	7023      	strb	r3, [r4, #0]
		if (status)
 8007614:	1dfb      	adds	r3, r7, #7
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <USART1_IRQHandler+0xa2>
			{
			USART_ClearFlag(USART1, USART_FLAG_ORE);
 800761c:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <USART1_IRQHandler+0x144>)
 800761e:	2108      	movs	r1, #8
 8007620:	0018      	movs	r0, r3
 8007622:	f7fb facc 	bl	8002bbe <USART_ClearFlag>
			uart1_RxFlags |= RX_FLAG_OVERRUN_ERROR;
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <USART1_IRQHandler+0x154>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2204      	movs	r2, #4
 800762c:	431a      	orrs	r2, r3
 800762e:	4b2d      	ldr	r3, [pc, #180]	; (80076e4 <USART1_IRQHandler+0x154>)
 8007630:	601a      	str	r2, [r3, #0]
			}
		xSemaphoreGiveFromISR(uart1_RxAvailableSemaphore,&should_yield);	// new data is available
 8007632:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <USART1_IRQHandler+0x158>)
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	003a      	movs	r2, r7
 8007638:	2300      	movs	r3, #0
 800763a:	2100      	movs	r1, #0
 800763c:	f7f9 fb34 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	// Is this a TX interrupt?
	if( USART_GetITStatus(USART1, USART_IT_TXE) )
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <USART1_IRQHandler+0x15c>)
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <USART1_IRQHandler+0x144>)
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f7fb fac5 	bl	8002bd6 <USART_GetITStatus>
 800764c:	1e03      	subs	r3, r0, #0
 800764e:	d036      	beq.n	80076be <USART1_IRQHandler+0x12e>
		{
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_TXE)) )
 8007650:	e022      	b.n	8007698 <USART1_IRQHandler+0x108>
			{
			if (uart1_TxBufHead == uart1_TxBufTail)
 8007652:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <USART1_IRQHandler+0x160>)
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <USART1_IRQHandler+0x164>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d106      	bne.n	800766c <USART1_IRQHandler+0xdc>
				{
				// no more data pending, disable the TX interrupt
				USART_ITConfig(USART1, USART_IT_TXE, DISABLE); 			// disable the USART1 transmit interrupt
 800765e:	4923      	ldr	r1, [pc, #140]	; (80076ec <USART1_IRQHandler+0x15c>)
 8007660:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <USART1_IRQHandler+0x144>)
 8007662:	2200      	movs	r2, #0
 8007664:	0018      	movs	r0, r3
 8007666:	f7fb fa4a 	bl	8002afe <USART_ITConfig>
				break;
 800766a:	e021      	b.n	80076b0 <USART1_IRQHandler+0x120>
				}
			else
				{
				USART_SendData(USART1,uart1_TxBuf[uart1_TxBufHead]);
 800766c:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <USART1_IRQHandler+0x160>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a21      	ldr	r2, [pc, #132]	; (80076f8 <USART1_IRQHandler+0x168>)
 8007672:	5cd3      	ldrb	r3, [r2, r3]
 8007674:	b29b      	uxth	r3, r3
 8007676:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <USART1_IRQHandler+0x144>)
 8007678:	0019      	movs	r1, r3
 800767a:	0010      	movs	r0, r2
 800767c:	f7fb fa2d 	bl	8002ada <USART_SendData>
				if (++uart1_TxBufHead >= TX_BUFSIZE)
 8007680:	4b1b      	ldr	r3, [pc, #108]	; (80076f0 <USART1_IRQHandler+0x160>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <USART1_IRQHandler+0x160>)
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <USART1_IRQHandler+0x160>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b7f      	cmp	r3, #127	; 0x7f
 8007690:	d902      	bls.n	8007698 <USART1_IRQHandler+0x108>
					uart1_TxBufHead = 0;
 8007692:	4b17      	ldr	r3, [pc, #92]	; (80076f0 <USART1_IRQHandler+0x160>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
		while ( (status=USART_GetFlagStatus(USART1, USART_FLAG_TXE)) )
 8007698:	1dfc      	adds	r4, r7, #7
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <USART1_IRQHandler+0x144>)
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	0018      	movs	r0, r3
 80076a0:	f7fb fa6f 	bl	8002b82 <USART_GetFlagStatus>
 80076a4:	0003      	movs	r3, r0
 80076a6:	7023      	strb	r3, [r4, #0]
 80076a8:	1dfb      	adds	r3, r7, #7
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1d0      	bne.n	8007652 <USART1_IRQHandler+0xc2>
				}
			}
		xSemaphoreGiveFromISR(uart1_TxDrainedSemaphore,&should_yield);	// now drained, at least partially
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <USART1_IRQHandler+0x16c>)
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	003a      	movs	r2, r7
 80076b6:	2300      	movs	r3, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	f7f9 faf5 	bl	8000ca8 <xQueueGenericSendFromISR>
		}

	if (should_yield != pdFALSE)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USART1_IRQHandler+0x138>
		{
		taskYIELD();
 80076c4:	f7f9 f8ba 	bl	800083c <vPortYieldFromISR>
		}

}
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b003      	add	sp, #12
 80076ce:	bd90      	pop	{r4, r7, pc}
 80076d0:	00050105 	.word	0x00050105
 80076d4:	40013800 	.word	0x40013800
 80076d8:	20005b0c 	.word	0x20005b0c
 80076dc:	20005b14 	.word	0x20005b14
 80076e0:	20005b00 	.word	0x20005b00
 80076e4:	20005a74 	.word	0x20005a74
 80076e8:	20005b08 	.word	0x20005b08
 80076ec:	00070107 	.word	0x00070107
 80076f0:	20005b04 	.word	0x20005b04
 80076f4:	20005afc 	.word	0x20005afc
 80076f8:	20005a7c 	.word	0x20005a7c
 80076fc:	20005b10 	.word	0x20005b10

08007700 <uart5_Init>:
xSemaphoreHandle	uart5_TxMutex;
xSemaphoreHandle	uart5_RxMutex;


void uart5_Init()
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	; 0x28
 8007704:	af00      	add	r7, sp, #0
	// USART peripheral initialization settings
	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uart5_RxBufHead = 0;
 8007706:	4b5e      	ldr	r3, [pc, #376]	; (8007880 <uart5_Init+0x180>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
	uart5_RxBufTail = 0;
 800770c:	4b5d      	ldr	r3, [pc, #372]	; (8007884 <uart5_Init+0x184>)
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
	uart5_TxBufHead = 0;
 8007712:	4b5d      	ldr	r3, [pc, #372]	; (8007888 <uart5_Init+0x188>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
	uart5_TxBufTail = 0;
 8007718:	4b5c      	ldr	r3, [pc, #368]	; (800788c <uart5_Init+0x18c>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
	uart5_RxFlags = 0;
 800771e:	4b5c      	ldr	r3, [pc, #368]	; (8007890 <uart5_Init+0x190>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(uart5_RxAvailableSemaphore);
 8007724:	2203      	movs	r2, #3
 8007726:	2100      	movs	r1, #0
 8007728:	2001      	movs	r0, #1
 800772a:	f7f9 f9a2 	bl	8000a72 <xQueueGenericCreate>
 800772e:	0002      	movs	r2, r0
 8007730:	4b58      	ldr	r3, [pc, #352]	; (8007894 <uart5_Init+0x194>)
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	4b57      	ldr	r3, [pc, #348]	; (8007894 <uart5_Init+0x194>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d006      	beq.n	800774a <uart5_Init+0x4a>
 800773c:	4b55      	ldr	r3, [pc, #340]	; (8007894 <uart5_Init+0x194>)
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	f7f9 fa19 	bl	8000b7c <xQueueGenericSend>

	vSemaphoreCreateBinary(uart5_TxDrainedSemaphore);
 800774a:	2203      	movs	r2, #3
 800774c:	2100      	movs	r1, #0
 800774e:	2001      	movs	r0, #1
 8007750:	f7f9 f98f 	bl	8000a72 <xQueueGenericCreate>
 8007754:	0002      	movs	r2, r0
 8007756:	4b50      	ldr	r3, [pc, #320]	; (8007898 <uart5_Init+0x198>)
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	4b4f      	ldr	r3, [pc, #316]	; (8007898 <uart5_Init+0x198>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <uart5_Init+0x70>
 8007762:	4b4d      	ldr	r3, [pc, #308]	; (8007898 <uart5_Init+0x198>)
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	f7f9 fa06 	bl	8000b7c <xQueueGenericSend>
	xSemaphoreGive(uart5_TxDrainedSemaphore);	// initially drained
 8007770:	4b49      	ldr	r3, [pc, #292]	; (8007898 <uart5_Init+0x198>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	f7f9 f9ff 	bl	8000b7c <xQueueGenericSend>

	uart5_RxMutex = xSemaphoreCreateMutex();
 800777e:	2001      	movs	r0, #1
 8007780:	f7f9 f9b7 	bl	8000af2 <xQueueCreateMutex>
 8007784:	0002      	movs	r2, r0
 8007786:	4b45      	ldr	r3, [pc, #276]	; (800789c <uart5_Init+0x19c>)
 8007788:	601a      	str	r2, [r3, #0]
	uart5_TxMutex = xSemaphoreCreateMutex();
 800778a:	2001      	movs	r0, #1
 800778c:	f7f9 f9b1 	bl	8000af2 <xQueueCreateMutex>
 8007790:	0002      	movs	r2, r0
 8007792:	4b43      	ldr	r3, [pc, #268]	; (80078a0 <uart5_Init+0x1a0>)
 8007794:	601a      	str	r2, [r3, #0]

	/* enable APB1 peripheral clock for USART5
	 * note that only USART5 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART5,ENABLE);
 8007796:	2380      	movs	r3, #128	; 0x80
 8007798:	035b      	lsls	r3, r3, #13
 800779a:	2101      	movs	r1, #1
 800779c:	0018      	movs	r0, r3
 800779e:	f7fb f871 	bl	8002884 <RCC_APB1PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART5, PB3 for TX and PB4 for RX
	 */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80077a2:	2380      	movs	r3, #128	; 0x80
 80077a4:	02db      	lsls	r3, r3, #11
 80077a6:	2101      	movs	r1, #1
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7fb f82b 	bl	8002804 <RCC_AHBPeriphClockCmd>

	//Configure USART5 pins: Tx (PB3) and Rx (PB4)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4;
 80077ae:	2308      	movs	r3, #8
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	2218      	movs	r2, #24
 80077b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80077b6:	2308      	movs	r3, #8
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	2203      	movs	r2, #3
 80077bc:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80077be:	2308      	movs	r3, #8
 80077c0:	18fb      	adds	r3, r7, r3
 80077c2:	2202      	movs	r2, #2
 80077c4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80077c6:	2308      	movs	r3, #8
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	2200      	movs	r2, #0
 80077cc:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80077ce:	2308      	movs	r3, #8
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	2201      	movs	r2, #1
 80077d4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80077d6:	2308      	movs	r3, #8
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	4a32      	ldr	r2, [pc, #200]	; (80078a4 <uart5_Init+0x1a4>)
 80077dc:	0019      	movs	r1, r3
 80077de:	0010      	movs	r0, r2
 80077e0:	f7fa fd36 	bl	8002250 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART5 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_4);	// Alternate Function 4 == USART5_TX
 80077e4:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <uart5_Init+0x1a4>)
 80077e6:	2204      	movs	r2, #4
 80077e8:	2103      	movs	r1, #3
 80077ea:	0018      	movs	r0, r3
 80077ec:	f7fa fdef 	bl	80023ce <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_4);	// Alternate Function 4 == USART5_RX
 80077f0:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <uart5_Init+0x1a4>)
 80077f2:	2204      	movs	r2, #4
 80077f4:	2104      	movs	r1, #4
 80077f6:	0018      	movs	r0, r3
 80077f8:	f7fa fde9 	bl	80023ce <GPIO_PinAFConfig>
	//Configure USART5 setting: ----------------------------
	USART_InitStructure.USART_BaudRate = UART5_BAUDRATE;
 80077fc:	2310      	movs	r3, #16
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	22e1      	movs	r2, #225	; 0xe1
 8007802:	0252      	lsls	r2, r2, #9
 8007804:	601a      	str	r2, [r3, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8007806:	2310      	movs	r3, #16
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800780e:	2310      	movs	r3, #16
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8007816:	2310      	movs	r3, #16
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	2200      	movs	r2, #0
 800781c:	60da      	str	r2, [r3, #12]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800781e:	2310      	movs	r3, #16
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	2200      	movs	r2, #0
 8007824:	615a      	str	r2, [r3, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8007826:	2310      	movs	r3, #16
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	220c      	movs	r2, #12
 800782c:	611a      	str	r2, [r3, #16]
	USART_Init(USART5, &USART_InitStructure);
 800782e:	2310      	movs	r3, #16
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <uart5_Init+0x1a8>)
 8007834:	0019      	movs	r1, r3
 8007836:	0010      	movs	r0, r2
 8007838:	f7fb f86c 	bl	8002914 <USART_Init>

	/* Here the USART5 transmit interrupt is disabled. This is generated when the
	 * transmit data register is empty
	 */
	USART_ITConfig(USART5, USART_IT_TXE, DISABLE); 			// disable the USART5 receive interrupt
 800783c:	491b      	ldr	r1, [pc, #108]	; (80078ac <uart5_Init+0x1ac>)
 800783e:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <uart5_Init+0x1a8>)
 8007840:	2200      	movs	r2, #0
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb f95b 	bl	8002afe <USART_ITConfig>
	/* Here the USART5 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART5_IRQHandler() function
	 * if the USART5 receive interrupt occurs
	 */
	USART_ITConfig(USART5, USART_IT_RXNE, ENABLE); // enable the USART5 receive interrupt
 8007848:	4919      	ldr	r1, [pc, #100]	; (80078b0 <uart5_Init+0x1b0>)
 800784a:	4b17      	ldr	r3, [pc, #92]	; (80078a8 <uart5_Init+0x1a8>)
 800784c:	2201      	movs	r2, #1
 800784e:	0018      	movs	r0, r3
 8007850:	f7fb f955 	bl	8002afe <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART3_6_IRQn;		 // we want to configure the USART5 interrupts
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	221d      	movs	r2, #29
 8007858:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;			 // this sets the priority group of the USART5 interrupts
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	2200      	movs	r2, #0
 800785e:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART5 interrupts are globally enabled
 8007860:	1d3b      	adds	r3, r7, #4
 8007862:	2201      	movs	r2, #1
 8007864:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8007866:	1d3b      	adds	r3, r7, #4
 8007868:	0018      	movs	r0, r3
 800786a:	f7fa fe03 	bl	8002474 <NVIC_Init>

	// finally this enables the complete USART5 peripheral
	USART_Cmd(USART5, ENABLE);
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <uart5_Init+0x1a8>)
 8007870:	2101      	movs	r1, #1
 8007872:	0018      	movs	r0, r3
 8007874:	f7fb f914 	bl	8002aa0 <USART_Cmd>
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b00a      	add	sp, #40	; 0x28
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20005b94 	.word	0x20005b94
 8007884:	20005c24 	.word	0x20005c24
 8007888:	20005c2c 	.word	0x20005c2c
 800788c:	20005c28 	.word	0x20005c28
 8007890:	20005c30 	.word	0x20005c30
 8007894:	20005c20 	.word	0x20005c20
 8007898:	20005c18 	.word	0x20005c18
 800789c:	20005cb4 	.word	0x20005cb4
 80078a0:	20005c1c 	.word	0x20005c1c
 80078a4:	48000400 	.word	0x48000400
 80078a8:	40005000 	.word	0x40005000
 80078ac:	00070107 	.word	0x00070107
 80078b0:	00050105 	.word	0x00050105

080078b4 <uart5_PutByteNoLock>:
		;
	USART_SendData(USART5,c);
}

int uart5_PutByteNoLock(int ch)
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	unsigned newtail;

	newtail = uart5_TxBufTail + 1;
 80078bc:	4b19      	ldr	r3, [pc, #100]	; (8007924 <uart5_PutByteNoLock+0x70>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
	if (newtail >= TX_BUFSIZE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b7f      	cmp	r3, #127	; 0x7f
 80078c8:	d913      	bls.n	80078f2 <uart5_PutByteNoLock+0x3e>
		newtail = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
	while (newtail == uart5_TxBufHead)
 80078ce:	e010      	b.n	80078f2 <uart5_PutByteNoLock+0x3e>
		{
		// no more space in the buffer
		// Make sure the TX interrupt is enabled so the buffer will drain
		USART_ITConfig(USART5, USART_IT_TXE, ENABLE); 			// enable the USART5 receive interrupt
 80078d0:	4915      	ldr	r1, [pc, #84]	; (8007928 <uart5_PutByteNoLock+0x74>)
 80078d2:	4b16      	ldr	r3, [pc, #88]	; (800792c <uart5_PutByteNoLock+0x78>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	0018      	movs	r0, r3
 80078d8:	f7fb f911 	bl	8002afe <USART_ITConfig>
		if (!xSemaphoreTake(uart5_TxDrainedSemaphore,MS_TO_TICKS(100)))
 80078dc:	4b14      	ldr	r3, [pc, #80]	; (8007930 <uart5_PutByteNoLock+0x7c>)
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	2264      	movs	r2, #100	; 0x64
 80078e4:	2100      	movs	r1, #0
 80078e6:	f7f9 fa2e 	bl	8000d46 <xQueueGenericReceive>
 80078ea:	1e03      	subs	r3, r0, #0
 80078ec:	d101      	bne.n	80078f2 <uart5_PutByteNoLock+0x3e>
			return 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e014      	b.n	800791c <uart5_PutByteNoLock+0x68>
	while (newtail == uart5_TxBufHead)
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <uart5_PutByteNoLock+0x80>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d0e9      	beq.n	80078d0 <uart5_PutByteNoLock+0x1c>
		}
	uart5_TxBuf[uart5_TxBufTail] = ch;
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <uart5_PutByteNoLock+0x70>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	b2d1      	uxtb	r1, r2
 8007904:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <uart5_PutByteNoLock+0x84>)
 8007906:	54d1      	strb	r1, [r2, r3]
	uart5_TxBufTail = newtail;
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <uart5_PutByteNoLock+0x70>)
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]
	USART_ITConfig(USART5, USART_IT_TXE, ENABLE); 			// enable the USART5 receive interrupt
 800790e:	4906      	ldr	r1, [pc, #24]	; (8007928 <uart5_PutByteNoLock+0x74>)
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <uart5_PutByteNoLock+0x78>)
 8007912:	2201      	movs	r2, #1
 8007914:	0018      	movs	r0, r3
 8007916:	f7fb f8f2 	bl	8002afe <USART_ITConfig>
	return 1;
 800791a:	2301      	movs	r3, #1
	}
 800791c:	0018      	movs	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	b004      	add	sp, #16
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20005c28 	.word	0x20005c28
 8007928:	00070107 	.word	0x00070107
 800792c:	40005000 	.word	0x40005000
 8007930:	20005c18 	.word	0x20005c18
 8007934:	20005c2c 	.word	0x20005c2c
 8007938:	20005b98 	.word	0x20005b98

0800793c <uart5_PutByte>:

int uart5_PutByte(int ch)
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	int rval;
	xSemaphoreTake(uart5_TxMutex,portMAX_DELAY);
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <uart5_PutByte+0x3c>)
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	2301      	movs	r3, #1
 800794a:	425a      	negs	r2, r3
 800794c:	2300      	movs	r3, #0
 800794e:	2100      	movs	r1, #0
 8007950:	f7f9 f9f9 	bl	8000d46 <xQueueGenericReceive>
	rval = uart5_PutByteNoLock(ch);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	0018      	movs	r0, r3
 8007958:	f7ff ffac 	bl	80078b4 <uart5_PutByteNoLock>
 800795c:	0003      	movs	r3, r0
 800795e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGive(uart5_TxMutex);
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <uart5_PutByte+0x3c>)
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	2200      	movs	r2, #0
 8007968:	2100      	movs	r1, #0
 800796a:	f7f9 f907 	bl	8000b7c <xQueueGenericSend>
	return rval;
 800796e:	68fb      	ldr	r3, [r7, #12]
	}
 8007970:	0018      	movs	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	b004      	add	sp, #16
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20005c1c 	.word	0x20005c1c

0800797c <uart5_WaitForByte>:
		}
	return ch;
	}

int uart5_WaitForByte(int timeout_ms)
	{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	int ch = -1;
 8007984:	2301      	movs	r3, #1
 8007986:	425b      	negs	r3, r3
 8007988:	60fb      	str	r3, [r7, #12]
	// Wait for at least one byte to arrive
	if (uart5_RxBufHead == uart5_RxBufTail && timeout_ms > 0)
 800798a:	4b1c      	ldr	r3, [pc, #112]	; (80079fc <uart5_WaitForByte+0x80>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4b1c      	ldr	r3, [pc, #112]	; (8007a00 <uart5_WaitForByte+0x84>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d109      	bne.n	80079aa <uart5_WaitForByte+0x2e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	dd06      	ble.n	80079aa <uart5_WaitForByte+0x2e>
		{
		// wait for at least one character
		xSemaphoreTake(uart5_RxAvailableSemaphore,MS_TO_TICKS(timeout_ms));
 800799c:	4b19      	ldr	r3, [pc, #100]	; (8007a04 <uart5_WaitForByte+0x88>)
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	2300      	movs	r3, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	f7f9 f9ce 	bl	8000d46 <xQueueGenericReceive>
		}
	if (uart5_RxBufHead != uart5_RxBufTail)
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <uart5_WaitForByte+0x80>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b14      	ldr	r3, [pc, #80]	; (8007a00 <uart5_WaitForByte+0x84>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d01d      	beq.n	80079f2 <uart5_WaitForByte+0x76>
		{
		unsigned newhead = uart5_RxBufHead + 1;
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <uart5_WaitForByte+0x80>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60bb      	str	r3, [r7, #8]
		if (newhead >= RX_BUFSIZE)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b7f      	cmp	r3, #127	; 0x7f
 80079c2:	d901      	bls.n	80079c8 <uart5_WaitForByte+0x4c>
			newhead = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60bb      	str	r3, [r7, #8]
		ch = uart5_RxBuf[uart5_RxBufHead];
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <uart5_WaitForByte+0x80>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <uart5_WaitForByte+0x8c>)
 80079ce:	5cd3      	ldrb	r3, [r2, r3]
 80079d0:	60fb      	str	r3, [r7, #12]
		uart5_RxBufHead = newhead;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <uart5_WaitForByte+0x80>)
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	601a      	str	r2, [r3, #0]
		if (uart5_RxBufHead == uart5_RxBufTail)
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <uart5_WaitForByte+0x80>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <uart5_WaitForByte+0x84>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d106      	bne.n	80079f2 <uart5_WaitForByte+0x76>
			xSemaphoreTake(uart5_RxAvailableSemaphore,MS_TO_TICKS(1));	// take it, we are done
 80079e4:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <uart5_WaitForByte+0x88>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	2300      	movs	r3, #0
 80079ea:	2201      	movs	r2, #1
 80079ec:	2100      	movs	r1, #0
 80079ee:	f7f9 f9aa 	bl	8000d46 <xQueueGenericReceive>
		}
	return ch;
 80079f2:	68fb      	ldr	r3, [r7, #12]
	}
 80079f4:	0018      	movs	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b004      	add	sp, #16
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20005b94 	.word	0x20005b94
 8007a00:	20005c24 	.word	0x20005c24
 8007a04:	20005c20 	.word	0x20005c20
 8007a08:	20005c34 	.word	0x20005c34

08007a0c <USART3_6_IRQHandler>:



// this is the interrupt request handler (IRQ) for ALL USART5 interrupts
void USART3_6_IRQHandler(void)
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
    signed portBASE_TYPE	should_yield = pdFALSE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	603b      	str	r3, [r7, #0]
    FlagStatus status;

    // Is this an RX interrupt?
    if( USART_GetITStatus(USART5, USART_IT_RXNE) )
 8007a16:	4a4d      	ldr	r2, [pc, #308]	; (8007b4c <USART3_6_IRQHandler+0x140>)
 8007a18:	4b4d      	ldr	r3, [pc, #308]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7fb f8da 	bl	8002bd6 <USART_GetITStatus>
 8007a22:	1e03      	subs	r3, r0, #0
 8007a24:	d04a      	beq.n	8007abc <USART3_6_IRQHandler+0xb0>
    {
        while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_RXNE)) )
 8007a26:	e01f      	b.n	8007a68 <USART3_6_IRQHandler+0x5c>
        {
            uart5_RxBuf[uart5_RxBufTail] = USART5->RDR; // read character, resets flag
 8007a28:	4b4a      	ldr	r3, [pc, #296]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a48      	ldr	r2, [pc, #288]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007a2e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007a30:	b292      	uxth	r2, r2
 8007a32:	b2d1      	uxtb	r1, r2
 8007a34:	4a48      	ldr	r2, [pc, #288]	; (8007b58 <USART3_6_IRQHandler+0x14c>)
 8007a36:	54d1      	strb	r1, [r2, r3]
            if (++uart5_RxBufTail >= RX_BUFSIZE)
 8007a38:	4b46      	ldr	r3, [pc, #280]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	4b45      	ldr	r3, [pc, #276]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	4b44      	ldr	r3, [pc, #272]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b7f      	cmp	r3, #127	; 0x7f
 8007a48:	d902      	bls.n	8007a50 <USART3_6_IRQHandler+0x44>
                uart5_RxBufTail = 0;
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
            if (uart5_RxBufTail == uart5_RxBufHead)
 8007a50:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <USART3_6_IRQHandler+0x148>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4b41      	ldr	r3, [pc, #260]	; (8007b5c <USART3_6_IRQHandler+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d105      	bne.n	8007a68 <USART3_6_IRQHandler+0x5c>
                uart5_RxFlags |= RX_FLAG_BUFFER_OVERFLOW;
 8007a5c:	4b40      	ldr	r3, [pc, #256]	; (8007b60 <USART3_6_IRQHandler+0x154>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2208      	movs	r2, #8
 8007a62:	431a      	orrs	r2, r3
 8007a64:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <USART3_6_IRQHandler+0x154>)
 8007a66:	601a      	str	r2, [r3, #0]
        while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_RXNE)) )
 8007a68:	1dfc      	adds	r4, r7, #7
 8007a6a:	4b39      	ldr	r3, [pc, #228]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007a6c:	2120      	movs	r1, #32
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f7fb f887 	bl	8002b82 <USART_GetFlagStatus>
 8007a74:	0003      	movs	r3, r0
 8007a76:	7023      	strb	r3, [r4, #0]
 8007a78:	1dfb      	adds	r3, r7, #7
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1d3      	bne.n	8007a28 <USART3_6_IRQHandler+0x1c>
            //			if (status & UART_PARITY_ERROR)
            //				uart5_RxFlags |= RX_FLAG_PARITY_ERROR;
            //			if (status & UART_FRAMING_ERROR)
            //				uart5_RxFlags |= RX_FLAG_FRAMING_ERROR;
        }
        status=USART_GetFlagStatus(USART5, USART_FLAG_ORE);
 8007a80:	1dfc      	adds	r4, r7, #7
 8007a82:	4b33      	ldr	r3, [pc, #204]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007a84:	2108      	movs	r1, #8
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7fb f87b 	bl	8002b82 <USART_GetFlagStatus>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	7023      	strb	r3, [r4, #0]
        if (status)
 8007a90:	1dfb      	adds	r3, r7, #7
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <USART3_6_IRQHandler+0xa2>
        {
            USART_ClearFlag(USART5, USART_FLAG_ORE);
 8007a98:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007a9a:	2108      	movs	r1, #8
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f7fb f88e 	bl	8002bbe <USART_ClearFlag>
            uart5_RxFlags |= RX_FLAG_OVERRUN_ERROR;
 8007aa2:	4b2f      	ldr	r3, [pc, #188]	; (8007b60 <USART3_6_IRQHandler+0x154>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	4b2d      	ldr	r3, [pc, #180]	; (8007b60 <USART3_6_IRQHandler+0x154>)
 8007aac:	601a      	str	r2, [r3, #0]
        }
        xSemaphoreGiveFromISR(uart5_RxAvailableSemaphore,&should_yield);	// new data is available
 8007aae:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <USART3_6_IRQHandler+0x158>)
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	003a      	movs	r2, r7
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	f7f9 f8f6 	bl	8000ca8 <xQueueGenericSendFromISR>
    }

    // Is this a TX interrupt?
    if( USART_GetITStatus(USART5, USART_IT_TXE) )
 8007abc:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <USART3_6_IRQHandler+0x15c>)
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007ac0:	0011      	movs	r1, r2
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f7fb f887 	bl	8002bd6 <USART_GetITStatus>
 8007ac8:	1e03      	subs	r3, r0, #0
 8007aca:	d036      	beq.n	8007b3a <USART3_6_IRQHandler+0x12e>
    {
        while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_TXE)) )
 8007acc:	e022      	b.n	8007b14 <USART3_6_IRQHandler+0x108>
        {
            if (uart5_TxBufHead == uart5_TxBufTail)
 8007ace:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <USART3_6_IRQHandler+0x164>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d106      	bne.n	8007ae8 <USART3_6_IRQHandler+0xdc>
            {
                // no more data pending, disable the TX interrupt
                USART_ITConfig(USART5, USART_IT_TXE, DISABLE); 			// disable the USART5 transmit interrupt
 8007ada:	4923      	ldr	r1, [pc, #140]	; (8007b68 <USART3_6_IRQHandler+0x15c>)
 8007adc:	4b1c      	ldr	r3, [pc, #112]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f7fb f80c 	bl	8002afe <USART_ITConfig>
                break;
 8007ae6:	e021      	b.n	8007b2c <USART3_6_IRQHandler+0x120>
            }
            else
            {
                USART_SendData(USART5,uart5_TxBuf[uart5_TxBufHead]);
 8007ae8:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <USART3_6_IRQHandler+0x168>)
 8007aee:	5cd3      	ldrb	r3, [r2, r3]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4a17      	ldr	r2, [pc, #92]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007af4:	0019      	movs	r1, r3
 8007af6:	0010      	movs	r0, r2
 8007af8:	f7fa ffef 	bl	8002ada <USART_SendData>
                if (++uart5_TxBufHead >= TX_BUFSIZE)
 8007afc:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b0c:	d902      	bls.n	8007b14 <USART3_6_IRQHandler+0x108>
                    uart5_TxBufHead = 0;
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <USART3_6_IRQHandler+0x160>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
        while ( (status=USART_GetFlagStatus(USART5, USART_FLAG_TXE)) )
 8007b14:	1dfc      	adds	r4, r7, #7
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <USART3_6_IRQHandler+0x144>)
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7fb f831 	bl	8002b82 <USART_GetFlagStatus>
 8007b20:	0003      	movs	r3, r0
 8007b22:	7023      	strb	r3, [r4, #0]
 8007b24:	1dfb      	adds	r3, r7, #7
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1d0      	bne.n	8007ace <USART3_6_IRQHandler+0xc2>
            }
        }
        xSemaphoreGiveFromISR(uart5_TxDrainedSemaphore,&should_yield);	// now drained, at least partially
 8007b2c:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <USART3_6_IRQHandler+0x16c>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	003a      	movs	r2, r7
 8007b32:	2300      	movs	r3, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	f7f9 f8b7 	bl	8000ca8 <xQueueGenericSendFromISR>
    }

    if (should_yield != pdFALSE)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <USART3_6_IRQHandler+0x138>
    {
        taskYIELD();
 8007b40:	f7f8 fe7c 	bl	800083c <vPortYieldFromISR>
    }

}
 8007b44:	46c0      	nop			; (mov r8, r8)
 8007b46:	46bd      	mov	sp, r7
 8007b48:	b003      	add	sp, #12
 8007b4a:	bd90      	pop	{r4, r7, pc}
 8007b4c:	00050105 	.word	0x00050105
 8007b50:	40005000 	.word	0x40005000
 8007b54:	20005c24 	.word	0x20005c24
 8007b58:	20005c34 	.word	0x20005c34
 8007b5c:	20005b94 	.word	0x20005b94
 8007b60:	20005c30 	.word	0x20005c30
 8007b64:	20005c20 	.word	0x20005c20
 8007b68:	00070107 	.word	0x00070107
 8007b6c:	20005c2c 	.word	0x20005c2c
 8007b70:	20005c28 	.word	0x20005c28
 8007b74:	20005b98 	.word	0x20005b98
 8007b78:	20005c18 	.word	0x20005c18

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	2600      	movs	r6, #0
 8007b80:	4d0c      	ldr	r5, [pc, #48]	; (8007bb4 <__libc_init_array+0x38>)
 8007b82:	4c0d      	ldr	r4, [pc, #52]	; (8007bb8 <__libc_init_array+0x3c>)
 8007b84:	1b64      	subs	r4, r4, r5
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	42a6      	cmp	r6, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	f001 ff8b 	bl	8009aa8 <_init>
 8007b92:	4d0a      	ldr	r5, [pc, #40]	; (8007bbc <__libc_init_array+0x40>)
 8007b94:	4c0a      	ldr	r4, [pc, #40]	; (8007bc0 <__libc_init_array+0x44>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	00b3      	lsls	r3, r6, #2
 8007ba2:	58eb      	ldr	r3, [r5, r3]
 8007ba4:	4798      	blx	r3
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	00b3      	lsls	r3, r6, #2
 8007bac:	58eb      	ldr	r3, [r5, r3]
 8007bae:	4798      	blx	r3
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	0800ae24 	.word	0x0800ae24
 8007bb8:	0800ae24 	.word	0x0800ae24
 8007bbc:	0800ae24 	.word	0x0800ae24
 8007bc0:	0800ae28 	.word	0x0800ae28

08007bc4 <__locale_ctype_ptr_l>:
 8007bc4:	30ec      	adds	r0, #236	; 0xec
 8007bc6:	6800      	ldr	r0, [r0, #0]
 8007bc8:	4770      	bx	lr
	...

08007bcc <__locale_ctype_ptr>:
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <__locale_ctype_ptr+0x14>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d100      	bne.n	8007bd8 <__locale_ctype_ptr+0xc>
 8007bd6:	4b03      	ldr	r3, [pc, #12]	; (8007be4 <__locale_ctype_ptr+0x18>)
 8007bd8:	33ec      	adds	r3, #236	; 0xec
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	4770      	bx	lr
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	2000024c 	.word	0x2000024c
 8007be4:	20000098 	.word	0x20000098

08007be8 <__ascii_mbtowc>:
 8007be8:	b082      	sub	sp, #8
 8007bea:	2900      	cmp	r1, #0
 8007bec:	d100      	bne.n	8007bf0 <__ascii_mbtowc+0x8>
 8007bee:	a901      	add	r1, sp, #4
 8007bf0:	1e10      	subs	r0, r2, #0
 8007bf2:	d006      	beq.n	8007c02 <__ascii_mbtowc+0x1a>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <__ascii_mbtowc+0x1e>
 8007bf8:	7813      	ldrb	r3, [r2, #0]
 8007bfa:	600b      	str	r3, [r1, #0]
 8007bfc:	7810      	ldrb	r0, [r2, #0]
 8007bfe:	1e43      	subs	r3, r0, #1
 8007c00:	4198      	sbcs	r0, r3
 8007c02:	b002      	add	sp, #8
 8007c04:	4770      	bx	lr
 8007c06:	2002      	movs	r0, #2
 8007c08:	4240      	negs	r0, r0
 8007c0a:	e7fa      	b.n	8007c02 <__ascii_mbtowc+0x1a>

08007c0c <memcmp>:
 8007c0c:	b530      	push	{r4, r5, lr}
 8007c0e:	2400      	movs	r4, #0
 8007c10:	42a2      	cmp	r2, r4
 8007c12:	d101      	bne.n	8007c18 <memcmp+0xc>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e005      	b.n	8007c24 <memcmp+0x18>
 8007c18:	5d03      	ldrb	r3, [r0, r4]
 8007c1a:	1c65      	adds	r5, r4, #1
 8007c1c:	5d0c      	ldrb	r4, [r1, r4]
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	d001      	beq.n	8007c26 <memcmp+0x1a>
 8007c22:	1b18      	subs	r0, r3, r4
 8007c24:	bd30      	pop	{r4, r5, pc}
 8007c26:	002c      	movs	r4, r5
 8007c28:	e7f2      	b.n	8007c10 <memcmp+0x4>

08007c2a <memcpy>:
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d100      	bne.n	8007c34 <memcpy+0xa>
 8007c32:	bd10      	pop	{r4, pc}
 8007c34:	5ccc      	ldrb	r4, [r1, r3]
 8007c36:	54c4      	strb	r4, [r0, r3]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	e7f8      	b.n	8007c2e <memcpy+0x4>

08007c3c <memset>:
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	1882      	adds	r2, r0, r2
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d100      	bne.n	8007c46 <memset+0xa>
 8007c44:	4770      	bx	lr
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	e7f9      	b.n	8007c40 <memset+0x4>

08007c4c <validate_structure>:
 8007c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c4e:	6801      	ldr	r1, [r0, #0]
 8007c50:	0004      	movs	r4, r0
 8007c52:	293b      	cmp	r1, #59	; 0x3b
 8007c54:	d90b      	bls.n	8007c6e <validate_structure+0x22>
 8007c56:	223c      	movs	r2, #60	; 0x3c
 8007c58:	4668      	mov	r0, sp
 8007c5a:	f000 fe1f 	bl	800889c <div>
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	9a01      	ldr	r2, [sp, #4]
 8007c64:	185b      	adds	r3, r3, r1
 8007c66:	6063      	str	r3, [r4, #4]
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	db6c      	blt.n	8007d46 <validate_structure+0xfa>
 8007c6c:	6022      	str	r2, [r4, #0]
 8007c6e:	6861      	ldr	r1, [r4, #4]
 8007c70:	293b      	cmp	r1, #59	; 0x3b
 8007c72:	d90b      	bls.n	8007c8c <validate_structure+0x40>
 8007c74:	223c      	movs	r2, #60	; 0x3c
 8007c76:	4668      	mov	r0, sp
 8007c78:	f000 fe10 	bl	800889c <div>
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	9900      	ldr	r1, [sp, #0]
 8007c80:	9a01      	ldr	r2, [sp, #4]
 8007c82:	185b      	adds	r3, r3, r1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	db62      	blt.n	8007d50 <validate_structure+0x104>
 8007c8a:	6062      	str	r2, [r4, #4]
 8007c8c:	68a1      	ldr	r1, [r4, #8]
 8007c8e:	2917      	cmp	r1, #23
 8007c90:	d90b      	bls.n	8007caa <validate_structure+0x5e>
 8007c92:	2218      	movs	r2, #24
 8007c94:	4668      	mov	r0, sp
 8007c96:	f000 fe01 	bl	800889c <div>
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	9900      	ldr	r1, [sp, #0]
 8007c9e:	9a01      	ldr	r2, [sp, #4]
 8007ca0:	185b      	adds	r3, r3, r1
 8007ca2:	60e3      	str	r3, [r4, #12]
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	db58      	blt.n	8007d5a <validate_structure+0x10e>
 8007ca8:	60a2      	str	r2, [r4, #8]
 8007caa:	6921      	ldr	r1, [r4, #16]
 8007cac:	290b      	cmp	r1, #11
 8007cae:	d90b      	bls.n	8007cc8 <validate_structure+0x7c>
 8007cb0:	220c      	movs	r2, #12
 8007cb2:	4668      	mov	r0, sp
 8007cb4:	f000 fdf2 	bl	800889c <div>
 8007cb8:	6963      	ldr	r3, [r4, #20]
 8007cba:	9900      	ldr	r1, [sp, #0]
 8007cbc:	9a01      	ldr	r2, [sp, #4]
 8007cbe:	185b      	adds	r3, r3, r1
 8007cc0:	6163      	str	r3, [r4, #20]
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	db4e      	blt.n	8007d64 <validate_structure+0x118>
 8007cc6:	6122      	str	r2, [r4, #16]
 8007cc8:	6965      	ldr	r5, [r4, #20]
 8007cca:	231c      	movs	r3, #28
 8007ccc:	07aa      	lsls	r2, r5, #30
 8007cce:	d10f      	bne.n	8007cf0 <validate_structure+0xa4>
 8007cd0:	2164      	movs	r1, #100	; 0x64
 8007cd2:	0028      	movs	r0, r5
 8007cd4:	f7f8 fb98 	bl	8000408 <__aeabi_idivmod>
 8007cd8:	231d      	movs	r3, #29
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d108      	bne.n	8007cf0 <validate_structure+0xa4>
 8007cde:	4b3d      	ldr	r3, [pc, #244]	; (8007dd4 <validate_structure+0x188>)
 8007ce0:	3191      	adds	r1, #145	; 0x91
 8007ce2:	18e8      	adds	r0, r5, r3
 8007ce4:	31ff      	adds	r1, #255	; 0xff
 8007ce6:	f7f8 fb8f 	bl	8000408 <__aeabi_idivmod>
 8007cea:	424b      	negs	r3, r1
 8007cec:	414b      	adcs	r3, r1
 8007cee:	331c      	adds	r3, #28
 8007cf0:	68e2      	ldr	r2, [r4, #12]
 8007cf2:	2a00      	cmp	r2, #0
 8007cf4:	dd3b      	ble.n	8007d6e <validate_structure+0x122>
 8007cf6:	2602      	movs	r6, #2
 8007cf8:	4f37      	ldr	r7, [pc, #220]	; (8007dd8 <validate_structure+0x18c>)
 8007cfa:	6921      	ldr	r1, [r4, #16]
 8007cfc:	68e2      	ldr	r2, [r4, #12]
 8007cfe:	2901      	cmp	r1, #1
 8007d00:	d061      	beq.n	8007dc6 <validate_structure+0x17a>
 8007d02:	0088      	lsls	r0, r1, #2
 8007d04:	59c0      	ldr	r0, [r0, r7]
 8007d06:	4282      	cmp	r2, r0
 8007d08:	dd35      	ble.n	8007d76 <validate_structure+0x12a>
 8007d0a:	1a12      	subs	r2, r2, r0
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	60e2      	str	r2, [r4, #12]
 8007d10:	6121      	str	r1, [r4, #16]
 8007d12:	290c      	cmp	r1, #12
 8007d14:	d1f1      	bne.n	8007cfa <validate_structure+0xae>
 8007d16:	2300      	movs	r3, #0
 8007d18:	6965      	ldr	r5, [r4, #20]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	1c68      	adds	r0, r5, #1
 8007d1e:	6160      	str	r0, [r4, #20]
 8007d20:	331c      	adds	r3, #28
 8007d22:	0782      	lsls	r2, r0, #30
 8007d24:	d1e9      	bne.n	8007cfa <validate_structure+0xae>
 8007d26:	3158      	adds	r1, #88	; 0x58
 8007d28:	f7f8 fb6e 	bl	8000408 <__aeabi_idivmod>
 8007d2c:	231d      	movs	r3, #29
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d1e3      	bne.n	8007cfa <validate_structure+0xae>
 8007d32:	4b2a      	ldr	r3, [pc, #168]	; (8007ddc <validate_structure+0x190>)
 8007d34:	3191      	adds	r1, #145	; 0x91
 8007d36:	18e8      	adds	r0, r5, r3
 8007d38:	31ff      	adds	r1, #255	; 0xff
 8007d3a:	f7f8 fb65 	bl	8000408 <__aeabi_idivmod>
 8007d3e:	424b      	negs	r3, r1
 8007d40:	414b      	adcs	r3, r1
 8007d42:	331c      	adds	r3, #28
 8007d44:	e7d9      	b.n	8007cfa <validate_structure+0xae>
 8007d46:	323c      	adds	r2, #60	; 0x3c
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	6063      	str	r3, [r4, #4]
 8007d4e:	e78e      	b.n	8007c6e <validate_structure+0x22>
 8007d50:	323c      	adds	r2, #60	; 0x3c
 8007d52:	3b01      	subs	r3, #1
 8007d54:	6062      	str	r2, [r4, #4]
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	e798      	b.n	8007c8c <validate_structure+0x40>
 8007d5a:	3218      	adds	r2, #24
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	60a2      	str	r2, [r4, #8]
 8007d60:	60e3      	str	r3, [r4, #12]
 8007d62:	e7a2      	b.n	8007caa <validate_structure+0x5e>
 8007d64:	320c      	adds	r2, #12
 8007d66:	3b01      	subs	r3, #1
 8007d68:	6122      	str	r2, [r4, #16]
 8007d6a:	6163      	str	r3, [r4, #20]
 8007d6c:	e7ac      	b.n	8007cc8 <validate_structure+0x7c>
 8007d6e:	271d      	movs	r7, #29
 8007d70:	68e6      	ldr	r6, [r4, #12]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	dd00      	ble.n	8007d78 <validate_structure+0x12c>
 8007d76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007d78:	6922      	ldr	r2, [r4, #16]
 8007d7a:	3a01      	subs	r2, #1
 8007d7c:	6122      	str	r2, [r4, #16]
 8007d7e:	3201      	adds	r2, #1
 8007d80:	d117      	bne.n	8007db2 <validate_structure+0x166>
 8007d82:	230b      	movs	r3, #11
 8007d84:	2203      	movs	r2, #3
 8007d86:	6965      	ldr	r5, [r4, #20]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	1e68      	subs	r0, r5, #1
 8007d8c:	6160      	str	r0, [r4, #20]
 8007d8e:	3311      	adds	r3, #17
 8007d90:	4210      	tst	r0, r2
 8007d92:	d10e      	bne.n	8007db2 <validate_structure+0x166>
 8007d94:	2164      	movs	r1, #100	; 0x64
 8007d96:	f7f8 fb37 	bl	8000408 <__aeabi_idivmod>
 8007d9a:	003b      	movs	r3, r7
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d108      	bne.n	8007db2 <validate_structure+0x166>
 8007da0:	4b0f      	ldr	r3, [pc, #60]	; (8007de0 <validate_structure+0x194>)
 8007da2:	3191      	adds	r1, #145	; 0x91
 8007da4:	18e8      	adds	r0, r5, r3
 8007da6:	31ff      	adds	r1, #255	; 0xff
 8007da8:	f7f8 fb2e 	bl	8000408 <__aeabi_idivmod>
 8007dac:	424b      	negs	r3, r1
 8007dae:	414b      	adcs	r3, r1
 8007db0:	331c      	adds	r3, #28
 8007db2:	6921      	ldr	r1, [r4, #16]
 8007db4:	001a      	movs	r2, r3
 8007db6:	2901      	cmp	r1, #1
 8007db8:	d002      	beq.n	8007dc0 <validate_structure+0x174>
 8007dba:	4a07      	ldr	r2, [pc, #28]	; (8007dd8 <validate_structure+0x18c>)
 8007dbc:	0089      	lsls	r1, r1, #2
 8007dbe:	588a      	ldr	r2, [r1, r2]
 8007dc0:	1996      	adds	r6, r2, r6
 8007dc2:	60e6      	str	r6, [r4, #12]
 8007dc4:	e7d4      	b.n	8007d70 <validate_structure+0x124>
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	dad5      	bge.n	8007d76 <validate_structure+0x12a>
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	60e2      	str	r2, [r4, #12]
 8007dce:	6126      	str	r6, [r4, #16]
 8007dd0:	e793      	b.n	8007cfa <validate_structure+0xae>
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	0000076c 	.word	0x0000076c
 8007dd8:	0800ab6c 	.word	0x0800ab6c
 8007ddc:	0000076d 	.word	0x0000076d
 8007de0:	0000076b 	.word	0x0000076b

08007de4 <mktime>:
 8007de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de6:	b087      	sub	sp, #28
 8007de8:	0004      	movs	r4, r0
 8007dea:	f000 fdb5 	bl	8008958 <__gettzinfo>
 8007dee:	9004      	str	r0, [sp, #16]
 8007df0:	0020      	movs	r0, r4
 8007df2:	f7ff ff2b 	bl	8007c4c <validate_structure>
 8007df6:	233c      	movs	r3, #60	; 0x3c
 8007df8:	6862      	ldr	r2, [r4, #4]
 8007dfa:	68a1      	ldr	r1, [r4, #8]
 8007dfc:	4353      	muls	r3, r2
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	6965      	ldr	r5, [r4, #20]
 8007e02:	189b      	adds	r3, r3, r2
 8007e04:	22e1      	movs	r2, #225	; 0xe1
 8007e06:	0112      	lsls	r2, r2, #4
 8007e08:	434a      	muls	r2, r1
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	68e2      	ldr	r2, [r4, #12]
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	1e50      	subs	r0, r2, #1
 8007e14:	4ab1      	ldr	r2, [pc, #708]	; (80080dc <mktime+0x2f8>)
 8007e16:	0099      	lsls	r1, r3, #2
 8007e18:	588a      	ldr	r2, [r1, r2]
 8007e1a:	1882      	adds	r2, r0, r2
 8007e1c:	9201      	str	r2, [sp, #4]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	dd12      	ble.n	8007e48 <mktime+0x64>
 8007e22:	07ab      	lsls	r3, r5, #30
 8007e24:	d110      	bne.n	8007e48 <mktime+0x64>
 8007e26:	2164      	movs	r1, #100	; 0x64
 8007e28:	0028      	movs	r0, r5
 8007e2a:	f7f8 faed 	bl	8000408 <__aeabi_idivmod>
 8007e2e:	2900      	cmp	r1, #0
 8007e30:	d107      	bne.n	8007e42 <mktime+0x5e>
 8007e32:	4bab      	ldr	r3, [pc, #684]	; (80080e0 <mktime+0x2fc>)
 8007e34:	3191      	adds	r1, #145	; 0x91
 8007e36:	31ff      	adds	r1, #255	; 0xff
 8007e38:	18e8      	adds	r0, r5, r3
 8007e3a:	f7f8 fae5 	bl	8000408 <__aeabi_idivmod>
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d102      	bne.n	8007e48 <mktime+0x64>
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	3301      	adds	r3, #1
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	4aa6      	ldr	r2, [pc, #664]	; (80080e4 <mktime+0x300>)
 8007e4c:	61e3      	str	r3, [r4, #28]
 8007e4e:	4ba6      	ldr	r3, [pc, #664]	; (80080e8 <mktime+0x304>)
 8007e50:	18eb      	adds	r3, r5, r3
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d900      	bls.n	8007e58 <mktime+0x74>
 8007e56:	e0f8      	b.n	800804a <mktime+0x266>
 8007e58:	2346      	movs	r3, #70	; 0x46
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	2d46      	cmp	r5, #70	; 0x46
 8007e5e:	dc00      	bgt.n	8007e62 <mktime+0x7e>
 8007e60:	e072      	b.n	8007f48 <mktime+0x164>
 8007e62:	27b7      	movs	r7, #183	; 0xb7
 8007e64:	26c8      	movs	r6, #200	; 0xc8
 8007e66:	007f      	lsls	r7, r7, #1
 8007e68:	0076      	lsls	r6, r6, #1
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	4213      	tst	r3, r2
 8007e70:	d168      	bne.n	8007f44 <mktime+0x160>
 8007e72:	0018      	movs	r0, r3
 8007e74:	2164      	movs	r1, #100	; 0x64
 8007e76:	f7f8 fac7 	bl	8000408 <__aeabi_idivmod>
 8007e7a:	003b      	movs	r3, r7
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d109      	bne.n	8007e94 <mktime+0xb0>
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	4a97      	ldr	r2, [pc, #604]	; (80080e0 <mktime+0x2fc>)
 8007e84:	0031      	movs	r1, r6
 8007e86:	1898      	adds	r0, r3, r2
 8007e88:	f7f8 fabe 	bl	8000408 <__aeabi_idivmod>
 8007e8c:	424b      	negs	r3, r1
 8007e8e:	414b      	adcs	r3, r1
 8007e90:	336e      	adds	r3, #110	; 0x6e
 8007e92:	33ff      	adds	r3, #255	; 0xff
 8007e94:	9a01      	ldr	r2, [sp, #4]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	429d      	cmp	r5, r3
 8007ea2:	d1e2      	bne.n	8007e6a <mktime+0x86>
 8007ea4:	9a01      	ldr	r2, [sp, #4]
 8007ea6:	4b91      	ldr	r3, [pc, #580]	; (80080ec <mktime+0x308>)
 8007ea8:	4353      	muls	r3, r2
 8007eaa:	9a03      	ldr	r2, [sp, #12]
 8007eac:	189b      	adds	r3, r3, r2
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	f000 fb28 	bl	8008504 <__tz_lock>
 8007eb4:	f000 fb28 	bl	8008508 <_tzset_unlocked>
 8007eb8:	4b8d      	ldr	r3, [pc, #564]	; (80080f0 <mktime+0x30c>)
 8007eba:	681d      	ldr	r5, [r3, #0]
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d100      	bne.n	8007ec2 <mktime+0xde>
 8007ec0:	e107      	b.n	80080d2 <mktime+0x2ee>
 8007ec2:	6963      	ldr	r3, [r4, #20]
 8007ec4:	4a86      	ldr	r2, [pc, #536]	; (80080e0 <mktime+0x2fc>)
 8007ec6:	6a26      	ldr	r6, [r4, #32]
 8007ec8:	1898      	adds	r0, r3, r2
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	dd00      	ble.n	8007ed0 <mktime+0xec>
 8007ece:	2601      	movs	r6, #1
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	d000      	beq.n	8007edc <mktime+0xf8>
 8007eda:	e073      	b.n	8007fc4 <mktime+0x1e0>
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	9d03      	ldr	r5, [sp, #12]
 8007ee0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	9305      	str	r3, [sp, #20]
 8007ee6:	1a1a      	subs	r2, r3, r0
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	1acf      	subs	r7, r1, r3
 8007ef0:	42bd      	cmp	r5, r7
 8007ef2:	db00      	blt.n	8007ef6 <mktime+0x112>
 8007ef4:	e06d      	b.n	8007fd2 <mktime+0x1ee>
 8007ef6:	9904      	ldr	r1, [sp, #16]
 8007ef8:	6809      	ldr	r1, [r1, #0]
 8007efa:	2900      	cmp	r1, #0
 8007efc:	d100      	bne.n	8007f00 <mktime+0x11c>
 8007efe:	e06d      	b.n	8007fdc <mktime+0x1f8>
 8007f00:	9903      	ldr	r1, [sp, #12]
 8007f02:	4291      	cmp	r1, r2
 8007f04:	da00      	bge.n	8007f08 <mktime+0x124>
 8007f06:	e0e1      	b.n	80080cc <mktime+0x2e8>
 8007f08:	2501      	movs	r5, #1
 8007f0a:	42b9      	cmp	r1, r7
 8007f0c:	db00      	blt.n	8007f10 <mktime+0x12c>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	db00      	blt.n	8007f16 <mktime+0x132>
 8007f14:	e0a0      	b.n	8008058 <mktime+0x274>
 8007f16:	2d01      	cmp	r5, #1
 8007f18:	d000      	beq.n	8007f1c <mktime+0x138>
 8007f1a:	e0da      	b.n	80080d2 <mktime+0x2ee>
 8007f1c:	2501      	movs	r5, #1
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	199e      	adds	r6, r3, r6
 8007f26:	f000 faee 	bl	8008506 <__tz_unlock>
 8007f2a:	9801      	ldr	r0, [sp, #4]
 8007f2c:	6225      	str	r5, [r4, #32]
 8007f2e:	3004      	adds	r0, #4
 8007f30:	2107      	movs	r1, #7
 8007f32:	f7f8 fa69 	bl	8000408 <__aeabi_idivmod>
 8007f36:	2900      	cmp	r1, #0
 8007f38:	da00      	bge.n	8007f3c <mktime+0x158>
 8007f3a:	e084      	b.n	8008046 <mktime+0x262>
 8007f3c:	61a1      	str	r1, [r4, #24]
 8007f3e:	0030      	movs	r0, r6
 8007f40:	b007      	add	sp, #28
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	236e      	movs	r3, #110	; 0x6e
 8007f46:	e7a4      	b.n	8007e92 <mktime+0xae>
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	d0ab      	beq.n	8007ea4 <mktime+0xc0>
 8007f4c:	2645      	movs	r6, #69	; 0x45
 8007f4e:	2703      	movs	r7, #3
 8007f50:	42ae      	cmp	r6, r5
 8007f52:	dc17      	bgt.n	8007f84 <mktime+0x1a0>
 8007f54:	423d      	tst	r5, r7
 8007f56:	d130      	bne.n	8007fba <mktime+0x1d6>
 8007f58:	2164      	movs	r1, #100	; 0x64
 8007f5a:	0028      	movs	r0, r5
 8007f5c:	f7f8 fa54 	bl	8000408 <__aeabi_idivmod>
 8007f60:	2900      	cmp	r1, #0
 8007f62:	d12c      	bne.n	8007fbe <mktime+0x1da>
 8007f64:	4b5e      	ldr	r3, [pc, #376]	; (80080e0 <mktime+0x2fc>)
 8007f66:	3191      	adds	r1, #145	; 0x91
 8007f68:	18e8      	adds	r0, r5, r3
 8007f6a:	31ff      	adds	r1, #255	; 0xff
 8007f6c:	f7f8 fa4c 	bl	8000408 <__aeabi_idivmod>
 8007f70:	000b      	movs	r3, r1
 8007f72:	4259      	negs	r1, r3
 8007f74:	4159      	adcs	r1, r3
 8007f76:	316e      	adds	r1, #110	; 0x6e
 8007f78:	31ff      	adds	r1, #255	; 0xff
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	9502      	str	r5, [sp, #8]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	e78f      	b.n	8007ea4 <mktime+0xc0>
 8007f84:	423e      	tst	r6, r7
 8007f86:	d116      	bne.n	8007fb6 <mktime+0x1d2>
 8007f88:	2164      	movs	r1, #100	; 0x64
 8007f8a:	0030      	movs	r0, r6
 8007f8c:	f7f8 fa3c 	bl	8000408 <__aeabi_idivmod>
 8007f90:	23b7      	movs	r3, #183	; 0xb7
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d109      	bne.n	8007fac <mktime+0x1c8>
 8007f98:	4b51      	ldr	r3, [pc, #324]	; (80080e0 <mktime+0x2fc>)
 8007f9a:	3191      	adds	r1, #145	; 0x91
 8007f9c:	18f0      	adds	r0, r6, r3
 8007f9e:	31ff      	adds	r1, #255	; 0xff
 8007fa0:	f7f8 fa32 	bl	8000408 <__aeabi_idivmod>
 8007fa4:	424b      	negs	r3, r1
 8007fa6:	414b      	adcs	r3, r1
 8007fa8:	336e      	adds	r3, #110	; 0x6e
 8007faa:	33ff      	adds	r3, #255	; 0xff
 8007fac:	9a01      	ldr	r2, [sp, #4]
 8007fae:	3e01      	subs	r6, #1
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	e7cc      	b.n	8007f50 <mktime+0x16c>
 8007fb6:	236e      	movs	r3, #110	; 0x6e
 8007fb8:	e7f7      	b.n	8007faa <mktime+0x1c6>
 8007fba:	216e      	movs	r1, #110	; 0x6e
 8007fbc:	e7dc      	b.n	8007f78 <mktime+0x194>
 8007fbe:	21b7      	movs	r1, #183	; 0xb7
 8007fc0:	0049      	lsls	r1, r1, #1
 8007fc2:	e7da      	b.n	8007f7a <mktime+0x196>
 8007fc4:	f000 f9f0 	bl	80083a8 <__tzcalc_limits>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d000      	beq.n	8007fce <mktime+0x1ea>
 8007fcc:	e786      	b.n	8007edc <mktime+0xf8>
 8007fce:	0035      	movs	r5, r6
 8007fd0:	e7a1      	b.n	8007f16 <mktime+0x132>
 8007fd2:	9d03      	ldr	r5, [sp, #12]
 8007fd4:	1a09      	subs	r1, r1, r0
 8007fd6:	428d      	cmp	r5, r1
 8007fd8:	dbf9      	blt.n	8007fce <mktime+0x1ea>
 8007fda:	e78c      	b.n	8007ef6 <mktime+0x112>
 8007fdc:	9d03      	ldr	r5, [sp, #12]
 8007fde:	4295      	cmp	r5, r2
 8007fe0:	da36      	bge.n	8008050 <mktime+0x26c>
 8007fe2:	9a03      	ldr	r2, [sp, #12]
 8007fe4:	2501      	movs	r5, #1
 8007fe6:	42ba      	cmp	r2, r7
 8007fe8:	da00      	bge.n	8007fec <mktime+0x208>
 8007fea:	e791      	b.n	8007f10 <mktime+0x12c>
 8007fec:	000d      	movs	r5, r1
 8007fee:	e78f      	b.n	8007f10 <mktime+0x12c>
 8007ff0:	2701      	movs	r7, #1
 8007ff2:	427f      	negs	r7, r7
 8007ff4:	e04b      	b.n	800808e <mktime+0x2aa>
 8007ff6:	21b6      	movs	r1, #182	; 0xb6
 8007ff8:	0049      	lsls	r1, r1, #1
 8007ffa:	61e1      	str	r1, [r4, #28]
 8007ffc:	e78b      	b.n	8007f16 <mktime+0x132>
 8007ffe:	216e      	movs	r1, #110	; 0x6e
 8008000:	e062      	b.n	80080c8 <mktime+0x2e4>
 8008002:	9a02      	ldr	r2, [sp, #8]
 8008004:	421a      	tst	r2, r3
 8008006:	d117      	bne.n	8008038 <mktime+0x254>
 8008008:	2164      	movs	r1, #100	; 0x64
 800800a:	0010      	movs	r0, r2
 800800c:	f7f8 f9fc 	bl	8000408 <__aeabi_idivmod>
 8008010:	2900      	cmp	r1, #0
 8008012:	d113      	bne.n	800803c <mktime+0x258>
 8008014:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <mktime+0x2fc>)
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	4694      	mov	ip, r2
 800801a:	3191      	adds	r1, #145	; 0x91
 800801c:	4463      	add	r3, ip
 800801e:	0018      	movs	r0, r3
 8008020:	31ff      	adds	r1, #255	; 0xff
 8008022:	f7f8 f9f1 	bl	8000408 <__aeabi_idivmod>
 8008026:	000b      	movs	r3, r1
 8008028:	4259      	negs	r1, r3
 800802a:	4159      	adcs	r1, r3
 800802c:	316e      	adds	r1, #110	; 0x6e
 800802e:	31ff      	adds	r1, #255	; 0xff
 8008030:	42b9      	cmp	r1, r7
 8008032:	dd06      	ble.n	8008042 <mktime+0x25e>
 8008034:	61e7      	str	r7, [r4, #28]
 8008036:	e76e      	b.n	8007f16 <mktime+0x132>
 8008038:	216e      	movs	r1, #110	; 0x6e
 800803a:	e7f8      	b.n	800802e <mktime+0x24a>
 800803c:	21b7      	movs	r1, #183	; 0xb7
 800803e:	0049      	lsls	r1, r1, #1
 8008040:	e7f6      	b.n	8008030 <mktime+0x24c>
 8008042:	1a7f      	subs	r7, r7, r1
 8008044:	e7f6      	b.n	8008034 <mktime+0x250>
 8008046:	3107      	adds	r1, #7
 8008048:	e778      	b.n	8007f3c <mktime+0x158>
 800804a:	2601      	movs	r6, #1
 800804c:	4276      	negs	r6, r6
 800804e:	e776      	b.n	8007f3e <mktime+0x15a>
 8008050:	2501      	movs	r5, #1
 8008052:	2e00      	cmp	r6, #0
 8008054:	da00      	bge.n	8008058 <mktime+0x274>
 8008056:	e761      	b.n	8007f1c <mktime+0x138>
 8008058:	406e      	eors	r6, r5
 800805a:	2e01      	cmp	r6, #1
 800805c:	d000      	beq.n	8008060 <mktime+0x27c>
 800805e:	e75a      	b.n	8007f16 <mktime+0x132>
 8008060:	1a1b      	subs	r3, r3, r0
 8008062:	2d00      	cmp	r5, #0
 8008064:	d100      	bne.n	8008068 <mktime+0x284>
 8008066:	425b      	negs	r3, r3
 8008068:	6822      	ldr	r2, [r4, #0]
 800806a:	0020      	movs	r0, r4
 800806c:	18d2      	adds	r2, r2, r3
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	68e7      	ldr	r7, [r4, #12]
 8008074:	18d3      	adds	r3, r2, r3
 8008076:	9303      	str	r3, [sp, #12]
 8008078:	f7ff fde8 	bl	8007c4c <validate_structure>
 800807c:	68e3      	ldr	r3, [r4, #12]
 800807e:	1bdf      	subs	r7, r3, r7
 8008080:	d100      	bne.n	8008084 <mktime+0x2a0>
 8008082:	e748      	b.n	8007f16 <mktime+0x132>
 8008084:	2f01      	cmp	r7, #1
 8008086:	dcb3      	bgt.n	8007ff0 <mktime+0x20c>
 8008088:	1c7b      	adds	r3, r7, #1
 800808a:	da00      	bge.n	800808e <mktime+0x2aa>
 800808c:	0037      	movs	r7, r6
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	69e2      	ldr	r2, [r4, #28]
 8008092:	19db      	adds	r3, r3, r7
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	2303      	movs	r3, #3
 8008098:	18bf      	adds	r7, r7, r2
 800809a:	d5b2      	bpl.n	8008002 <mktime+0x21e>
 800809c:	9a02      	ldr	r2, [sp, #8]
 800809e:	1e50      	subs	r0, r2, #1
 80080a0:	4218      	tst	r0, r3
 80080a2:	d1a8      	bne.n	8007ff6 <mktime+0x212>
 80080a4:	2164      	movs	r1, #100	; 0x64
 80080a6:	f7f8 f9af 	bl	8000408 <__aeabi_idivmod>
 80080aa:	2900      	cmp	r1, #0
 80080ac:	d1a7      	bne.n	8007ffe <mktime+0x21a>
 80080ae:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <mktime+0x310>)
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	4694      	mov	ip, r2
 80080b4:	3191      	adds	r1, #145	; 0x91
 80080b6:	4463      	add	r3, ip
 80080b8:	0018      	movs	r0, r3
 80080ba:	31ff      	adds	r1, #255	; 0xff
 80080bc:	f7f8 f9a4 	bl	8000408 <__aeabi_idivmod>
 80080c0:	000b      	movs	r3, r1
 80080c2:	4259      	negs	r1, r3
 80080c4:	4159      	adcs	r1, r3
 80080c6:	316d      	adds	r1, #109	; 0x6d
 80080c8:	31ff      	adds	r1, #255	; 0xff
 80080ca:	e796      	b.n	8007ffa <mktime+0x216>
 80080cc:	2500      	movs	r5, #0
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	dac2      	bge.n	8008058 <mktime+0x274>
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	6a1e      	ldr	r6, [r3, #32]
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	199e      	adds	r6, r3, r6
 80080da:	e724      	b.n	8007f26 <mktime+0x142>
 80080dc:	0800ab9c 	.word	0x0800ab9c
 80080e0:	0000076c 	.word	0x0000076c
 80080e4:	00004e20 	.word	0x00004e20
 80080e8:	00002710 	.word	0x00002710
 80080ec:	00015180 	.word	0x00015180
 80080f0:	2000494c 	.word	0x2000494c
 80080f4:	0000076b 	.word	0x0000076b

080080f8 <sniprintf>:
 80080f8:	b40c      	push	{r2, r3}
 80080fa:	b530      	push	{r4, r5, lr}
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <sniprintf+0x60>)
 80080fe:	b09d      	sub	sp, #116	; 0x74
 8008100:	1e0c      	subs	r4, r1, #0
 8008102:	681d      	ldr	r5, [r3, #0]
 8008104:	da08      	bge.n	8008118 <sniprintf+0x20>
 8008106:	238b      	movs	r3, #139	; 0x8b
 8008108:	2001      	movs	r0, #1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	4240      	negs	r0, r0
 800810e:	b01d      	add	sp, #116	; 0x74
 8008110:	bc30      	pop	{r4, r5}
 8008112:	bc08      	pop	{r3}
 8008114:	b002      	add	sp, #8
 8008116:	4718      	bx	r3
 8008118:	2382      	movs	r3, #130	; 0x82
 800811a:	a902      	add	r1, sp, #8
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	818b      	strh	r3, [r1, #12]
 8008120:	2300      	movs	r3, #0
 8008122:	9002      	str	r0, [sp, #8]
 8008124:	6108      	str	r0, [r1, #16]
 8008126:	429c      	cmp	r4, r3
 8008128:	d000      	beq.n	800812c <sniprintf+0x34>
 800812a:	1e63      	subs	r3, r4, #1
 800812c:	608b      	str	r3, [r1, #8]
 800812e:	614b      	str	r3, [r1, #20]
 8008130:	2301      	movs	r3, #1
 8008132:	425b      	negs	r3, r3
 8008134:	81cb      	strh	r3, [r1, #14]
 8008136:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008138:	ab21      	add	r3, sp, #132	; 0x84
 800813a:	0028      	movs	r0, r5
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	f000 fd23 	bl	8008b88 <_svfiprintf_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	da01      	bge.n	800814a <sniprintf+0x52>
 8008146:	238b      	movs	r3, #139	; 0x8b
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	2c00      	cmp	r4, #0
 800814c:	d0df      	beq.n	800810e <sniprintf+0x16>
 800814e:	2300      	movs	r3, #0
 8008150:	9a02      	ldr	r2, [sp, #8]
 8008152:	7013      	strb	r3, [r2, #0]
 8008154:	e7db      	b.n	800810e <sniprintf+0x16>
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	2000024c 	.word	0x2000024c

0800815c <siprintf>:
 800815c:	b40e      	push	{r1, r2, r3}
 800815e:	b510      	push	{r4, lr}
 8008160:	b09d      	sub	sp, #116	; 0x74
 8008162:	a902      	add	r1, sp, #8
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	6108      	str	r0, [r1, #16]
 8008168:	480b      	ldr	r0, [pc, #44]	; (8008198 <siprintf+0x3c>)
 800816a:	2482      	movs	r4, #130	; 0x82
 800816c:	6088      	str	r0, [r1, #8]
 800816e:	6148      	str	r0, [r1, #20]
 8008170:	2001      	movs	r0, #1
 8008172:	4240      	negs	r0, r0
 8008174:	ab1f      	add	r3, sp, #124	; 0x7c
 8008176:	81c8      	strh	r0, [r1, #14]
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <siprintf+0x40>)
 800817a:	cb04      	ldmia	r3!, {r2}
 800817c:	00a4      	lsls	r4, r4, #2
 800817e:	6800      	ldr	r0, [r0, #0]
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	818c      	strh	r4, [r1, #12]
 8008184:	f000 fd00 	bl	8008b88 <_svfiprintf_r>
 8008188:	2300      	movs	r3, #0
 800818a:	9a02      	ldr	r2, [sp, #8]
 800818c:	7013      	strb	r3, [r2, #0]
 800818e:	b01d      	add	sp, #116	; 0x74
 8008190:	bc10      	pop	{r4}
 8008192:	bc08      	pop	{r3}
 8008194:	b003      	add	sp, #12
 8008196:	4718      	bx	r3
 8008198:	7fffffff 	.word	0x7fffffff
 800819c:	2000024c 	.word	0x2000024c

080081a0 <strcat>:
 80081a0:	0002      	movs	r2, r0
 80081a2:	b510      	push	{r4, lr}
 80081a4:	7813      	ldrb	r3, [r2, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <strcat+0x16>
 80081aa:	5ccc      	ldrb	r4, [r1, r3]
 80081ac:	54d4      	strb	r4, [r2, r3]
 80081ae:	3301      	adds	r3, #1
 80081b0:	2c00      	cmp	r4, #0
 80081b2:	d1fa      	bne.n	80081aa <strcat+0xa>
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	3201      	adds	r2, #1
 80081b8:	e7f4      	b.n	80081a4 <strcat+0x4>

080081ba <strchr>:
 80081ba:	b2c9      	uxtb	r1, r1
 80081bc:	7803      	ldrb	r3, [r0, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <strchr+0x12>
 80081c2:	4299      	cmp	r1, r3
 80081c4:	d100      	bne.n	80081c8 <strchr+0xe>
 80081c6:	4770      	bx	lr
 80081c8:	3001      	adds	r0, #1
 80081ca:	e7f7      	b.n	80081bc <strchr+0x2>
 80081cc:	424b      	negs	r3, r1
 80081ce:	4159      	adcs	r1, r3
 80081d0:	4249      	negs	r1, r1
 80081d2:	4008      	ands	r0, r1
 80081d4:	e7f7      	b.n	80081c6 <strchr+0xc>

080081d6 <strncmp>:
 80081d6:	2300      	movs	r3, #0
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	429a      	cmp	r2, r3
 80081dc:	d00a      	beq.n	80081f4 <strncmp+0x1e>
 80081de:	3a01      	subs	r2, #1
 80081e0:	5cc4      	ldrb	r4, [r0, r3]
 80081e2:	5ccd      	ldrb	r5, [r1, r3]
 80081e4:	42ac      	cmp	r4, r5
 80081e6:	d104      	bne.n	80081f2 <strncmp+0x1c>
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d002      	beq.n	80081f2 <strncmp+0x1c>
 80081ec:	3301      	adds	r3, #1
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d1f6      	bne.n	80081e0 <strncmp+0xa>
 80081f2:	1b63      	subs	r3, r4, r5
 80081f4:	0018      	movs	r0, r3
 80081f6:	bd30      	pop	{r4, r5, pc}

080081f8 <strncpy>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	0004      	movs	r4, r0
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d100      	bne.n	8008202 <strncpy+0xa>
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	780d      	ldrb	r5, [r1, #0]
 8008204:	1e56      	subs	r6, r2, #1
 8008206:	1c63      	adds	r3, r4, #1
 8008208:	7025      	strb	r5, [r4, #0]
 800820a:	3101      	adds	r1, #1
 800820c:	2d00      	cmp	r5, #0
 800820e:	d105      	bne.n	800821c <strncpy+0x24>
 8008210:	18a4      	adds	r4, r4, r2
 8008212:	429c      	cmp	r4, r3
 8008214:	d0f4      	beq.n	8008200 <strncpy+0x8>
 8008216:	701d      	strb	r5, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	e7fa      	b.n	8008212 <strncpy+0x1a>
 800821c:	001c      	movs	r4, r3
 800821e:	0032      	movs	r2, r6
 8008220:	e7ec      	b.n	80081fc <strncpy+0x4>

08008222 <strstr>:
 8008222:	b510      	push	{r4, lr}
 8008224:	0002      	movs	r2, r0
 8008226:	7800      	ldrb	r0, [r0, #0]
 8008228:	2800      	cmp	r0, #0
 800822a:	d104      	bne.n	8008236 <strstr+0x14>
 800822c:	7809      	ldrb	r1, [r1, #0]
 800822e:	2900      	cmp	r1, #0
 8008230:	d00d      	beq.n	800824e <strstr+0x2c>
 8008232:	bd10      	pop	{r4, pc}
 8008234:	3201      	adds	r2, #1
 8008236:	7810      	ldrb	r0, [r2, #0]
 8008238:	2800      	cmp	r0, #0
 800823a:	d0fa      	beq.n	8008232 <strstr+0x10>
 800823c:	2300      	movs	r3, #0
 800823e:	5cc8      	ldrb	r0, [r1, r3]
 8008240:	2800      	cmp	r0, #0
 8008242:	d004      	beq.n	800824e <strstr+0x2c>
 8008244:	5cd4      	ldrb	r4, [r2, r3]
 8008246:	4284      	cmp	r4, r0
 8008248:	d1f4      	bne.n	8008234 <strstr+0x12>
 800824a:	3301      	adds	r3, #1
 800824c:	e7f7      	b.n	800823e <strstr+0x1c>
 800824e:	0010      	movs	r0, r2
 8008250:	e7ef      	b.n	8008232 <strstr+0x10>
	...

08008254 <_strtol_l.isra.0>:
 8008254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008256:	001f      	movs	r7, r3
 8008258:	000e      	movs	r6, r1
 800825a:	b087      	sub	sp, #28
 800825c:	9005      	str	r0, [sp, #20]
 800825e:	9103      	str	r1, [sp, #12]
 8008260:	9202      	str	r2, [sp, #8]
 8008262:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008264:	7834      	ldrb	r4, [r6, #0]
 8008266:	f7ff fcad 	bl	8007bc4 <__locale_ctype_ptr_l>
 800826a:	2208      	movs	r2, #8
 800826c:	1900      	adds	r0, r0, r4
 800826e:	7843      	ldrb	r3, [r0, #1]
 8008270:	1c75      	adds	r5, r6, #1
 8008272:	4013      	ands	r3, r2
 8008274:	d10c      	bne.n	8008290 <_strtol_l.isra.0+0x3c>
 8008276:	2c2d      	cmp	r4, #45	; 0x2d
 8008278:	d10c      	bne.n	8008294 <_strtol_l.isra.0+0x40>
 800827a:	3301      	adds	r3, #1
 800827c:	782c      	ldrb	r4, [r5, #0]
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	1cb5      	adds	r5, r6, #2
 8008282:	2f00      	cmp	r7, #0
 8008284:	d00c      	beq.n	80082a0 <_strtol_l.isra.0+0x4c>
 8008286:	2f10      	cmp	r7, #16
 8008288:	d114      	bne.n	80082b4 <_strtol_l.isra.0+0x60>
 800828a:	2c30      	cmp	r4, #48	; 0x30
 800828c:	d00a      	beq.n	80082a4 <_strtol_l.isra.0+0x50>
 800828e:	e011      	b.n	80082b4 <_strtol_l.isra.0+0x60>
 8008290:	002e      	movs	r6, r5
 8008292:	e7e6      	b.n	8008262 <_strtol_l.isra.0+0xe>
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	2c2b      	cmp	r4, #43	; 0x2b
 8008298:	d1f3      	bne.n	8008282 <_strtol_l.isra.0+0x2e>
 800829a:	782c      	ldrb	r4, [r5, #0]
 800829c:	1cb5      	adds	r5, r6, #2
 800829e:	e7f0      	b.n	8008282 <_strtol_l.isra.0+0x2e>
 80082a0:	2c30      	cmp	r4, #48	; 0x30
 80082a2:	d12f      	bne.n	8008304 <_strtol_l.isra.0+0xb0>
 80082a4:	2220      	movs	r2, #32
 80082a6:	782b      	ldrb	r3, [r5, #0]
 80082a8:	4393      	bics	r3, r2
 80082aa:	2b58      	cmp	r3, #88	; 0x58
 80082ac:	d151      	bne.n	8008352 <_strtol_l.isra.0+0xfe>
 80082ae:	2710      	movs	r7, #16
 80082b0:	786c      	ldrb	r4, [r5, #1]
 80082b2:	3502      	adds	r5, #2
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	4a29      	ldr	r2, [pc, #164]	; (800835c <_strtol_l.isra.0+0x108>)
 80082b8:	0039      	movs	r1, r7
 80082ba:	189e      	adds	r6, r3, r2
 80082bc:	0030      	movs	r0, r6
 80082be:	f7f7 ffb9 	bl	8000234 <__aeabi_uidivmod>
 80082c2:	0030      	movs	r0, r6
 80082c4:	9104      	str	r1, [sp, #16]
 80082c6:	0039      	movs	r1, r7
 80082c8:	f7f7 ff2e 	bl	8000128 <__udivsi3>
 80082cc:	2101      	movs	r1, #1
 80082ce:	2300      	movs	r3, #0
 80082d0:	4249      	negs	r1, r1
 80082d2:	0002      	movs	r2, r0
 80082d4:	468c      	mov	ip, r1
 80082d6:	0018      	movs	r0, r3
 80082d8:	0021      	movs	r1, r4
 80082da:	3930      	subs	r1, #48	; 0x30
 80082dc:	2909      	cmp	r1, #9
 80082de:	d813      	bhi.n	8008308 <_strtol_l.isra.0+0xb4>
 80082e0:	000c      	movs	r4, r1
 80082e2:	42a7      	cmp	r7, r4
 80082e4:	dd1c      	ble.n	8008320 <_strtol_l.isra.0+0xcc>
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	d009      	beq.n	80082fe <_strtol_l.isra.0+0xaa>
 80082ea:	4663      	mov	r3, ip
 80082ec:	4282      	cmp	r2, r0
 80082ee:	d306      	bcc.n	80082fe <_strtol_l.isra.0+0xaa>
 80082f0:	d102      	bne.n	80082f8 <_strtol_l.isra.0+0xa4>
 80082f2:	9904      	ldr	r1, [sp, #16]
 80082f4:	42a1      	cmp	r1, r4
 80082f6:	db02      	blt.n	80082fe <_strtol_l.isra.0+0xaa>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4378      	muls	r0, r7
 80082fc:	1820      	adds	r0, r4, r0
 80082fe:	782c      	ldrb	r4, [r5, #0]
 8008300:	3501      	adds	r5, #1
 8008302:	e7e9      	b.n	80082d8 <_strtol_l.isra.0+0x84>
 8008304:	270a      	movs	r7, #10
 8008306:	e7d5      	b.n	80082b4 <_strtol_l.isra.0+0x60>
 8008308:	0021      	movs	r1, r4
 800830a:	3941      	subs	r1, #65	; 0x41
 800830c:	2919      	cmp	r1, #25
 800830e:	d801      	bhi.n	8008314 <_strtol_l.isra.0+0xc0>
 8008310:	3c37      	subs	r4, #55	; 0x37
 8008312:	e7e6      	b.n	80082e2 <_strtol_l.isra.0+0x8e>
 8008314:	0021      	movs	r1, r4
 8008316:	3961      	subs	r1, #97	; 0x61
 8008318:	2919      	cmp	r1, #25
 800831a:	d801      	bhi.n	8008320 <_strtol_l.isra.0+0xcc>
 800831c:	3c57      	subs	r4, #87	; 0x57
 800831e:	e7e0      	b.n	80082e2 <_strtol_l.isra.0+0x8e>
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	d108      	bne.n	8008336 <_strtol_l.isra.0+0xe2>
 8008324:	9a05      	ldr	r2, [sp, #20]
 8008326:	3323      	adds	r3, #35	; 0x23
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	9b02      	ldr	r3, [sp, #8]
 800832c:	0030      	movs	r0, r6
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10b      	bne.n	800834a <_strtol_l.isra.0+0xf6>
 8008332:	b007      	add	sp, #28
 8008334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008336:	9a01      	ldr	r2, [sp, #4]
 8008338:	2a00      	cmp	r2, #0
 800833a:	d000      	beq.n	800833e <_strtol_l.isra.0+0xea>
 800833c:	4240      	negs	r0, r0
 800833e:	9a02      	ldr	r2, [sp, #8]
 8008340:	2a00      	cmp	r2, #0
 8008342:	d0f6      	beq.n	8008332 <_strtol_l.isra.0+0xde>
 8008344:	9a03      	ldr	r2, [sp, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d000      	beq.n	800834c <_strtol_l.isra.0+0xf8>
 800834a:	1e6a      	subs	r2, r5, #1
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e7ef      	b.n	8008332 <_strtol_l.isra.0+0xde>
 8008352:	2430      	movs	r4, #48	; 0x30
 8008354:	2f00      	cmp	r7, #0
 8008356:	d1ad      	bne.n	80082b4 <_strtol_l.isra.0+0x60>
 8008358:	3708      	adds	r7, #8
 800835a:	e7ab      	b.n	80082b4 <_strtol_l.isra.0+0x60>
 800835c:	7fffffff 	.word	0x7fffffff

08008360 <_strtol_r>:
 8008360:	b513      	push	{r0, r1, r4, lr}
 8008362:	4c05      	ldr	r4, [pc, #20]	; (8008378 <_strtol_r+0x18>)
 8008364:	6824      	ldr	r4, [r4, #0]
 8008366:	6a24      	ldr	r4, [r4, #32]
 8008368:	2c00      	cmp	r4, #0
 800836a:	d100      	bne.n	800836e <_strtol_r+0xe>
 800836c:	4c03      	ldr	r4, [pc, #12]	; (800837c <_strtol_r+0x1c>)
 800836e:	9400      	str	r4, [sp, #0]
 8008370:	f7ff ff70 	bl	8008254 <_strtol_l.isra.0>
 8008374:	bd16      	pop	{r1, r2, r4, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	2000024c 	.word	0x2000024c
 800837c:	20000098 	.word	0x20000098

08008380 <strtol>:
 8008380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008382:	0013      	movs	r3, r2
 8008384:	4a06      	ldr	r2, [pc, #24]	; (80083a0 <strtol+0x20>)
 8008386:	0005      	movs	r5, r0
 8008388:	6810      	ldr	r0, [r2, #0]
 800838a:	6a04      	ldr	r4, [r0, #32]
 800838c:	2c00      	cmp	r4, #0
 800838e:	d100      	bne.n	8008392 <strtol+0x12>
 8008390:	4c04      	ldr	r4, [pc, #16]	; (80083a4 <strtol+0x24>)
 8008392:	000a      	movs	r2, r1
 8008394:	9400      	str	r4, [sp, #0]
 8008396:	0029      	movs	r1, r5
 8008398:	f7ff ff5c 	bl	8008254 <_strtol_l.isra.0>
 800839c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	2000024c 	.word	0x2000024c
 80083a4:	20000098 	.word	0x20000098

080083a8 <__tzcalc_limits>:
 80083a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083aa:	b089      	sub	sp, #36	; 0x24
 80083ac:	0004      	movs	r4, r0
 80083ae:	f000 fad3 	bl	8008958 <__gettzinfo>
 80083b2:	4b4c      	ldr	r3, [pc, #304]	; (80084e4 <__tzcalc_limits+0x13c>)
 80083b4:	0007      	movs	r7, r0
 80083b6:	2000      	movs	r0, #0
 80083b8:	429c      	cmp	r4, r3
 80083ba:	dd58      	ble.n	800846e <__tzcalc_limits+0xc6>
 80083bc:	256e      	movs	r5, #110	; 0x6e
 80083be:	2164      	movs	r1, #100	; 0x64
 80083c0:	4b49      	ldr	r3, [pc, #292]	; (80084e8 <__tzcalc_limits+0x140>)
 80083c2:	35ff      	adds	r5, #255	; 0xff
 80083c4:	18e0      	adds	r0, r4, r3
 80083c6:	4345      	muls	r5, r0
 80083c8:	4b48      	ldr	r3, [pc, #288]	; (80084ec <__tzcalc_limits+0x144>)
 80083ca:	607c      	str	r4, [r7, #4]
 80083cc:	18e0      	adds	r0, r4, r3
 80083ce:	4b48      	ldr	r3, [pc, #288]	; (80084f0 <__tzcalc_limits+0x148>)
 80083d0:	1080      	asrs	r0, r0, #2
 80083d2:	182d      	adds	r5, r5, r0
 80083d4:	4249      	negs	r1, r1
 80083d6:	18e0      	adds	r0, r4, r3
 80083d8:	f7f7 ff30 	bl	800023c <__divsi3>
 80083dc:	21c8      	movs	r1, #200	; 0xc8
 80083de:	4b45      	ldr	r3, [pc, #276]	; (80084f4 <__tzcalc_limits+0x14c>)
 80083e0:	182d      	adds	r5, r5, r0
 80083e2:	0049      	lsls	r1, r1, #1
 80083e4:	18e0      	adds	r0, r4, r3
 80083e6:	f7f7 ff29 	bl	800023c <__divsi3>
 80083ea:	2164      	movs	r1, #100	; 0x64
 80083ec:	182b      	adds	r3, r5, r0
 80083ee:	0020      	movs	r0, r4
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	f7f8 f809 	bl	8000408 <__aeabi_idivmod>
 80083f6:	9102      	str	r1, [sp, #8]
 80083f8:	21c8      	movs	r1, #200	; 0xc8
 80083fa:	0020      	movs	r0, r4
 80083fc:	0049      	lsls	r1, r1, #1
 80083fe:	f7f8 f803 	bl	8000408 <__aeabi_idivmod>
 8008402:	000a      	movs	r2, r1
 8008404:	4253      	negs	r3, r2
 8008406:	415a      	adcs	r2, r3
 8008408:	003b      	movs	r3, r7
 800840a:	3340      	adds	r3, #64	; 0x40
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	2303      	movs	r3, #3
 8008410:	003d      	movs	r5, r7
 8008412:	401c      	ands	r4, r3
 8008414:	9103      	str	r1, [sp, #12]
 8008416:	9205      	str	r2, [sp, #20]
 8008418:	3508      	adds	r5, #8
 800841a:	9406      	str	r4, [sp, #24]
 800841c:	782b      	ldrb	r3, [r5, #0]
 800841e:	2b4a      	cmp	r3, #74	; 0x4a
 8008420:	d127      	bne.n	8008472 <__tzcalc_limits+0xca>
 8008422:	9a01      	ldr	r2, [sp, #4]
 8008424:	68eb      	ldr	r3, [r5, #12]
 8008426:	18d1      	adds	r1, r2, r3
 8008428:	9a06      	ldr	r2, [sp, #24]
 800842a:	2a00      	cmp	r2, #0
 800842c:	d102      	bne.n	8008434 <__tzcalc_limits+0x8c>
 800842e:	9a02      	ldr	r2, [sp, #8]
 8008430:	2a00      	cmp	r2, #0
 8008432:	d103      	bne.n	800843c <__tzcalc_limits+0x94>
 8008434:	2400      	movs	r4, #0
 8008436:	9a03      	ldr	r2, [sp, #12]
 8008438:	42a2      	cmp	r2, r4
 800843a:	d103      	bne.n	8008444 <__tzcalc_limits+0x9c>
 800843c:	2401      	movs	r4, #1
 800843e:	2b3b      	cmp	r3, #59	; 0x3b
 8008440:	dc00      	bgt.n	8008444 <__tzcalc_limits+0x9c>
 8008442:	2400      	movs	r4, #0
 8008444:	1864      	adds	r4, r4, r1
 8008446:	3c01      	subs	r4, #1
 8008448:	492b      	ldr	r1, [pc, #172]	; (80084f8 <__tzcalc_limits+0x150>)
 800844a:	692b      	ldr	r3, [r5, #16]
 800844c:	434c      	muls	r4, r1
 800844e:	18e4      	adds	r4, r4, r3
 8008450:	69ab      	ldr	r3, [r5, #24]
 8008452:	18e4      	adds	r4, r4, r3
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	616c      	str	r4, [r5, #20]
 8008458:	351c      	adds	r5, #28
 800845a:	42ab      	cmp	r3, r5
 800845c:	d1de      	bne.n	800841c <__tzcalc_limits+0x74>
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008462:	2301      	movs	r3, #1
 8008464:	428a      	cmp	r2, r1
 8008466:	db00      	blt.n	800846a <__tzcalc_limits+0xc2>
 8008468:	2300      	movs	r3, #0
 800846a:	2001      	movs	r0, #1
 800846c:	603b      	str	r3, [r7, #0]
 800846e:	b009      	add	sp, #36	; 0x24
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008472:	2b44      	cmp	r3, #68	; 0x44
 8008474:	d103      	bne.n	800847e <__tzcalc_limits+0xd6>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	68ea      	ldr	r2, [r5, #12]
 800847a:	189c      	adds	r4, r3, r2
 800847c:	e7e4      	b.n	8008448 <__tzcalc_limits+0xa0>
 800847e:	9a06      	ldr	r2, [sp, #24]
 8008480:	9b05      	ldr	r3, [sp, #20]
 8008482:	2a00      	cmp	r2, #0
 8008484:	d103      	bne.n	800848e <__tzcalc_limits+0xe6>
 8008486:	9a02      	ldr	r2, [sp, #8]
 8008488:	2a00      	cmp	r2, #0
 800848a:	d000      	beq.n	800848e <__tzcalc_limits+0xe6>
 800848c:	2301      	movs	r3, #1
 800848e:	2230      	movs	r2, #48	; 0x30
 8008490:	4353      	muls	r3, r2
 8008492:	4a1a      	ldr	r2, [pc, #104]	; (80084fc <__tzcalc_limits+0x154>)
 8008494:	686e      	ldr	r6, [r5, #4]
 8008496:	189b      	adds	r3, r3, r2
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	001a      	movs	r2, r3
 800849c:	2301      	movs	r3, #1
 800849e:	9c01      	ldr	r4, [sp, #4]
 80084a0:	42b3      	cmp	r3, r6
 80084a2:	db18      	blt.n	80084d6 <__tzcalc_limits+0x12e>
 80084a4:	2e00      	cmp	r6, #0
 80084a6:	dc00      	bgt.n	80084aa <__tzcalc_limits+0x102>
 80084a8:	2601      	movs	r6, #1
 80084aa:	1d20      	adds	r0, r4, #4
 80084ac:	2107      	movs	r1, #7
 80084ae:	f7f7 ffab 	bl	8000408 <__aeabi_idivmod>
 80084b2:	68eb      	ldr	r3, [r5, #12]
 80084b4:	1a5b      	subs	r3, r3, r1
 80084b6:	d500      	bpl.n	80084ba <__tzcalc_limits+0x112>
 80084b8:	3307      	adds	r3, #7
 80084ba:	2107      	movs	r1, #7
 80084bc:	68aa      	ldr	r2, [r5, #8]
 80084be:	3a01      	subs	r2, #1
 80084c0:	4351      	muls	r1, r2
 80084c2:	18c9      	adds	r1, r1, r3
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <__tzcalc_limits+0x158>)
 80084c6:	18f6      	adds	r6, r6, r3
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	00b6      	lsls	r6, r6, #2
 80084cc:	58f3      	ldr	r3, [r6, r3]
 80084ce:	4299      	cmp	r1, r3
 80084d0:	da05      	bge.n	80084de <__tzcalc_limits+0x136>
 80084d2:	1864      	adds	r4, r4, r1
 80084d4:	e7b8      	b.n	8008448 <__tzcalc_limits+0xa0>
 80084d6:	ca02      	ldmia	r2!, {r1}
 80084d8:	3301      	adds	r3, #1
 80084da:	1864      	adds	r4, r4, r1
 80084dc:	e7e0      	b.n	80084a0 <__tzcalc_limits+0xf8>
 80084de:	3907      	subs	r1, #7
 80084e0:	e7f5      	b.n	80084ce <__tzcalc_limits+0x126>
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	000007b1 	.word	0x000007b1
 80084e8:	fffff84e 	.word	0xfffff84e
 80084ec:	fffff84f 	.word	0xfffff84f
 80084f0:	fffff893 	.word	0xfffff893
 80084f4:	fffff9bf 	.word	0xfffff9bf
 80084f8:	00015180 	.word	0x00015180
 80084fc:	0800ad0c 	.word	0x0800ad0c
 8008500:	3fffffff 	.word	0x3fffffff

08008504 <__tz_lock>:
 8008504:	4770      	bx	lr

08008506 <__tz_unlock>:
 8008506:	4770      	bx	lr

08008508 <_tzset_unlocked>:
 8008508:	b510      	push	{r4, lr}
 800850a:	4b02      	ldr	r3, [pc, #8]	; (8008514 <_tzset_unlocked+0xc>)
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	f000 f803 	bl	8008518 <_tzset_unlocked_r>
 8008512:	bd10      	pop	{r4, pc}
 8008514:	2000024c 	.word	0x2000024c

08008518 <_tzset_unlocked_r>:
 8008518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800851a:	b08d      	sub	sp, #52	; 0x34
 800851c:	0007      	movs	r7, r0
 800851e:	f000 fa1b 	bl	8008958 <__gettzinfo>
 8008522:	49af      	ldr	r1, [pc, #700]	; (80087e0 <_tzset_unlocked_r+0x2c8>)
 8008524:	0006      	movs	r6, r0
 8008526:	0038      	movs	r0, r7
 8008528:	f000 fa10 	bl	800894c <_getenv_r>
 800852c:	4dad      	ldr	r5, [pc, #692]	; (80087e4 <_tzset_unlocked_r+0x2cc>)
 800852e:	1e04      	subs	r4, r0, #0
 8008530:	d10d      	bne.n	800854e <_tzset_unlocked_r+0x36>
 8008532:	4bad      	ldr	r3, [pc, #692]	; (80087e8 <_tzset_unlocked_r+0x2d0>)
 8008534:	4aad      	ldr	r2, [pc, #692]	; (80087ec <_tzset_unlocked_r+0x2d4>)
 8008536:	6018      	str	r0, [r3, #0]
 8008538:	4bad      	ldr	r3, [pc, #692]	; (80087f0 <_tzset_unlocked_r+0x2d8>)
 800853a:	6018      	str	r0, [r3, #0]
 800853c:	4bad      	ldr	r3, [pc, #692]	; (80087f4 <_tzset_unlocked_r+0x2dc>)
 800853e:	6828      	ldr	r0, [r5, #0]
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	f000 fa0c 	bl	8008960 <free>
 8008548:	602c      	str	r4, [r5, #0]
 800854a:	b00d      	add	sp, #52	; 0x34
 800854c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854e:	6829      	ldr	r1, [r5, #0]
 8008550:	2900      	cmp	r1, #0
 8008552:	d15a      	bne.n	800860a <_tzset_unlocked_r+0xf2>
 8008554:	6828      	ldr	r0, [r5, #0]
 8008556:	f000 fa03 	bl	8008960 <free>
 800855a:	0020      	movs	r0, r4
 800855c:	f7f7 fddc 	bl	8000118 <strlen>
 8008560:	1c41      	adds	r1, r0, #1
 8008562:	0038      	movs	r0, r7
 8008564:	f000 fa50 	bl	8008a08 <_malloc_r>
 8008568:	6028      	str	r0, [r5, #0]
 800856a:	2800      	cmp	r0, #0
 800856c:	d152      	bne.n	8008614 <_tzset_unlocked_r+0xfc>
 800856e:	7823      	ldrb	r3, [r4, #0]
 8008570:	3b3a      	subs	r3, #58	; 0x3a
 8008572:	4259      	negs	r1, r3
 8008574:	4159      	adcs	r1, r3
 8008576:	1864      	adds	r4, r4, r1
 8008578:	ab0a      	add	r3, sp, #40	; 0x28
 800857a:	4a9f      	ldr	r2, [pc, #636]	; (80087f8 <_tzset_unlocked_r+0x2e0>)
 800857c:	499f      	ldr	r1, [pc, #636]	; (80087fc <_tzset_unlocked_r+0x2e4>)
 800857e:	0020      	movs	r0, r4
 8008580:	f000 fda0 	bl	80090c4 <siscanf>
 8008584:	2800      	cmp	r0, #0
 8008586:	dde0      	ble.n	800854a <_tzset_unlocked_r+0x32>
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	18e4      	adds	r4, r4, r3
 800858c:	7823      	ldrb	r3, [r4, #0]
 800858e:	2b2d      	cmp	r3, #45	; 0x2d
 8008590:	d144      	bne.n	800861c <_tzset_unlocked_r+0x104>
 8008592:	3b2e      	subs	r3, #46	; 0x2e
 8008594:	3401      	adds	r4, #1
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	2716      	movs	r7, #22
 800859a:	ab02      	add	r3, sp, #8
 800859c:	18ff      	adds	r7, r7, r3
 800859e:	2300      	movs	r3, #0
 80085a0:	803b      	strh	r3, [r7, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	ad08      	add	r5, sp, #32
 80085a6:	802b      	strh	r3, [r5, #0]
 80085a8:	ab0a      	add	r3, sp, #40	; 0x28
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	9502      	str	r5, [sp, #8]
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	9700      	str	r7, [sp, #0]
 80085b2:	aa07      	add	r2, sp, #28
 80085b4:	4992      	ldr	r1, [pc, #584]	; (8008800 <_tzset_unlocked_r+0x2e8>)
 80085b6:	0020      	movs	r0, r4
 80085b8:	f000 fd84 	bl	80090c4 <siscanf>
 80085bc:	2800      	cmp	r0, #0
 80085be:	ddc4      	ble.n	800854a <_tzset_unlocked_r+0x32>
 80085c0:	233c      	movs	r3, #60	; 0x3c
 80085c2:	883a      	ldrh	r2, [r7, #0]
 80085c4:	4f8f      	ldr	r7, [pc, #572]	; (8008804 <_tzset_unlocked_r+0x2ec>)
 80085c6:	4353      	muls	r3, r2
 80085c8:	882a      	ldrh	r2, [r5, #0]
 80085ca:	4d8a      	ldr	r5, [pc, #552]	; (80087f4 <_tzset_unlocked_r+0x2dc>)
 80085cc:	189b      	adds	r3, r3, r2
 80085ce:	aa02      	add	r2, sp, #8
 80085d0:	8a91      	ldrh	r1, [r2, #20]
 80085d2:	22e1      	movs	r2, #225	; 0xe1
 80085d4:	0112      	lsls	r2, r2, #4
 80085d6:	434a      	muls	r2, r1
 80085d8:	189b      	adds	r3, r3, r2
 80085da:	9a04      	ldr	r2, [sp, #16]
 80085dc:	4987      	ldr	r1, [pc, #540]	; (80087fc <_tzset_unlocked_r+0x2e4>)
 80085de:	435a      	muls	r2, r3
 80085e0:	4b85      	ldr	r3, [pc, #532]	; (80087f8 <_tzset_unlocked_r+0x2e0>)
 80085e2:	6232      	str	r2, [r6, #32]
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e8:	003a      	movs	r2, r7
 80085ea:	18e4      	adds	r4, r4, r3
 80085ec:	0020      	movs	r0, r4
 80085ee:	ab0a      	add	r3, sp, #40	; 0x28
 80085f0:	f000 fd68 	bl	80090c4 <siscanf>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	dc18      	bgt.n	800862a <_tzset_unlocked_r+0x112>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	6a32      	ldr	r2, [r6, #32]
 80085fc:	606b      	str	r3, [r5, #4]
 80085fe:	4b7a      	ldr	r3, [pc, #488]	; (80087e8 <_tzset_unlocked_r+0x2d0>)
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	4b7a      	ldr	r3, [pc, #488]	; (80087f0 <_tzset_unlocked_r+0x2d8>)
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e79f      	b.n	800854a <_tzset_unlocked_r+0x32>
 800860a:	f7f7 fd7b 	bl	8000104 <strcmp>
 800860e:	2800      	cmp	r0, #0
 8008610:	d09b      	beq.n	800854a <_tzset_unlocked_r+0x32>
 8008612:	e79f      	b.n	8008554 <_tzset_unlocked_r+0x3c>
 8008614:	0021      	movs	r1, r4
 8008616:	f000 fd7f 	bl	8009118 <strcpy>
 800861a:	e7a8      	b.n	800856e <_tzset_unlocked_r+0x56>
 800861c:	2201      	movs	r2, #1
 800861e:	3b2b      	subs	r3, #43	; 0x2b
 8008620:	9204      	str	r2, [sp, #16]
 8008622:	4259      	negs	r1, r3
 8008624:	4159      	adcs	r1, r3
 8008626:	1864      	adds	r4, r4, r1
 8008628:	e7b6      	b.n	8008598 <_tzset_unlocked_r+0x80>
 800862a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862c:	606f      	str	r7, [r5, #4]
 800862e:	18e4      	adds	r4, r4, r3
 8008630:	7823      	ldrb	r3, [r4, #0]
 8008632:	2b2d      	cmp	r3, #45	; 0x2d
 8008634:	d000      	beq.n	8008638 <_tzset_unlocked_r+0x120>
 8008636:	e08f      	b.n	8008758 <_tzset_unlocked_r+0x240>
 8008638:	3b2e      	subs	r3, #46	; 0x2e
 800863a:	3401      	adds	r4, #1
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	2716      	movs	r7, #22
 8008640:	2300      	movs	r3, #0
 8008642:	aa02      	add	r2, sp, #8
 8008644:	18bf      	adds	r7, r7, r2
 8008646:	ad07      	add	r5, sp, #28
 8008648:	8313      	strh	r3, [r2, #24]
 800864a:	802b      	strh	r3, [r5, #0]
 800864c:	803b      	strh	r3, [r7, #0]
 800864e:	aa08      	add	r2, sp, #32
 8008650:	930a      	str	r3, [sp, #40]	; 0x28
 8008652:	ab0a      	add	r3, sp, #40	; 0x28
 8008654:	9202      	str	r2, [sp, #8]
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	9700      	str	r7, [sp, #0]
 800865c:	002a      	movs	r2, r5
 800865e:	4968      	ldr	r1, [pc, #416]	; (8008800 <_tzset_unlocked_r+0x2e8>)
 8008660:	0020      	movs	r0, r4
 8008662:	f000 fd2f 	bl	80090c4 <siscanf>
 8008666:	2800      	cmp	r0, #0
 8008668:	dd00      	ble.n	800866c <_tzset_unlocked_r+0x154>
 800866a:	e07c      	b.n	8008766 <_tzset_unlocked_r+0x24e>
 800866c:	6a33      	ldr	r3, [r6, #32]
 800866e:	4a66      	ldr	r2, [pc, #408]	; (8008808 <_tzset_unlocked_r+0x2f0>)
 8008670:	189b      	adds	r3, r3, r2
 8008672:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008676:	0037      	movs	r7, r6
 8008678:	18e4      	adds	r4, r4, r3
 800867a:	2300      	movs	r3, #0
 800867c:	3708      	adds	r7, #8
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	7823      	ldrb	r3, [r4, #0]
 8008682:	3b2c      	subs	r3, #44	; 0x2c
 8008684:	4259      	negs	r1, r3
 8008686:	4159      	adcs	r1, r3
 8008688:	1864      	adds	r4, r4, r1
 800868a:	7825      	ldrb	r5, [r4, #0]
 800868c:	2d4d      	cmp	r5, #77	; 0x4d
 800868e:	d000      	beq.n	8008692 <_tzset_unlocked_r+0x17a>
 8008690:	e078      	b.n	8008784 <_tzset_unlocked_r+0x26c>
 8008692:	221e      	movs	r2, #30
 8008694:	a902      	add	r1, sp, #8
 8008696:	1852      	adds	r2, r2, r1
 8008698:	9202      	str	r2, [sp, #8]
 800869a:	aa09      	add	r2, sp, #36	; 0x24
 800869c:	9200      	str	r2, [sp, #0]
 800869e:	221a      	movs	r2, #26
 80086a0:	ab0a      	add	r3, sp, #40	; 0x28
 80086a2:	1852      	adds	r2, r2, r1
 80086a4:	9303      	str	r3, [sp, #12]
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	4958      	ldr	r1, [pc, #352]	; (800880c <_tzset_unlocked_r+0x2f4>)
 80086aa:	0020      	movs	r0, r4
 80086ac:	f000 fd0a 	bl	80090c4 <siscanf>
 80086b0:	2803      	cmp	r0, #3
 80086b2:	d000      	beq.n	80086b6 <_tzset_unlocked_r+0x19e>
 80086b4:	e749      	b.n	800854a <_tzset_unlocked_r+0x32>
 80086b6:	ab02      	add	r3, sp, #8
 80086b8:	8b59      	ldrh	r1, [r3, #26]
 80086ba:	1e4b      	subs	r3, r1, #1
 80086bc:	2b0b      	cmp	r3, #11
 80086be:	d900      	bls.n	80086c2 <_tzset_unlocked_r+0x1aa>
 80086c0:	e743      	b.n	800854a <_tzset_unlocked_r+0x32>
 80086c2:	ab02      	add	r3, sp, #8
 80086c4:	8b9a      	ldrh	r2, [r3, #28]
 80086c6:	1e53      	subs	r3, r2, #1
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d900      	bls.n	80086ce <_tzset_unlocked_r+0x1b6>
 80086cc:	e73d      	b.n	800854a <_tzset_unlocked_r+0x32>
 80086ce:	ab02      	add	r3, sp, #8
 80086d0:	8bdb      	ldrh	r3, [r3, #30]
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d900      	bls.n	80086d8 <_tzset_unlocked_r+0x1c0>
 80086d6:	e738      	b.n	800854a <_tzset_unlocked_r+0x32>
 80086d8:	703d      	strb	r5, [r7, #0]
 80086da:	6079      	str	r1, [r7, #4]
 80086dc:	60ba      	str	r2, [r7, #8]
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e2:	18e5      	adds	r5, r4, r3
 80086e4:	2302      	movs	r3, #2
 80086e6:	aa07      	add	r2, sp, #28
 80086e8:	8013      	strh	r3, [r2, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	a902      	add	r1, sp, #8
 80086ee:	ac08      	add	r4, sp, #32
 80086f0:	82cb      	strh	r3, [r1, #22]
 80086f2:	8023      	strh	r3, [r4, #0]
 80086f4:	930a      	str	r3, [sp, #40]	; 0x28
 80086f6:	782b      	ldrb	r3, [r5, #0]
 80086f8:	2b2f      	cmp	r3, #47	; 0x2f
 80086fa:	d10b      	bne.n	8008714 <_tzset_unlocked_r+0x1fc>
 80086fc:	2116      	movs	r1, #22
 80086fe:	a802      	add	r0, sp, #8
 8008700:	1809      	adds	r1, r1, r0
 8008702:	ab0a      	add	r3, sp, #40	; 0x28
 8008704:	9100      	str	r1, [sp, #0]
 8008706:	9303      	str	r3, [sp, #12]
 8008708:	9402      	str	r4, [sp, #8]
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	4940      	ldr	r1, [pc, #256]	; (8008810 <_tzset_unlocked_r+0x2f8>)
 800870e:	0028      	movs	r0, r5
 8008710:	f000 fcd8 	bl	80090c4 <siscanf>
 8008714:	ab02      	add	r3, sp, #8
 8008716:	8ada      	ldrh	r2, [r3, #22]
 8008718:	233c      	movs	r3, #60	; 0x3c
 800871a:	4353      	muls	r3, r2
 800871c:	8822      	ldrh	r2, [r4, #0]
 800871e:	189b      	adds	r3, r3, r2
 8008720:	aa07      	add	r2, sp, #28
 8008722:	8811      	ldrh	r1, [r2, #0]
 8008724:	22e1      	movs	r2, #225	; 0xe1
 8008726:	0112      	lsls	r2, r2, #4
 8008728:	434a      	muls	r2, r1
 800872a:	189b      	adds	r3, r3, r2
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	371c      	adds	r7, #28
 8008732:	18ec      	adds	r4, r5, r3
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	3301      	adds	r3, #1
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d1a0      	bne.n	8008680 <_tzset_unlocked_r+0x168>
 800873e:	6870      	ldr	r0, [r6, #4]
 8008740:	f7ff fe32 	bl	80083a8 <__tzcalc_limits>
 8008744:	6a32      	ldr	r2, [r6, #32]
 8008746:	4b28      	ldr	r3, [pc, #160]	; (80087e8 <_tzset_unlocked_r+0x2d0>)
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	1e5a      	subs	r2, r3, #1
 8008750:	4193      	sbcs	r3, r2
 8008752:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <_tzset_unlocked_r+0x2d8>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e6f8      	b.n	800854a <_tzset_unlocked_r+0x32>
 8008758:	2201      	movs	r2, #1
 800875a:	3b2b      	subs	r3, #43	; 0x2b
 800875c:	9204      	str	r2, [sp, #16]
 800875e:	4259      	negs	r1, r3
 8008760:	4159      	adcs	r1, r3
 8008762:	1864      	adds	r4, r4, r1
 8008764:	e76b      	b.n	800863e <_tzset_unlocked_r+0x126>
 8008766:	233c      	movs	r3, #60	; 0x3c
 8008768:	883a      	ldrh	r2, [r7, #0]
 800876a:	8829      	ldrh	r1, [r5, #0]
 800876c:	4353      	muls	r3, r2
 800876e:	aa02      	add	r2, sp, #8
 8008770:	8b12      	ldrh	r2, [r2, #24]
 8008772:	189b      	adds	r3, r3, r2
 8008774:	22e1      	movs	r2, #225	; 0xe1
 8008776:	0112      	lsls	r2, r2, #4
 8008778:	434a      	muls	r2, r1
 800877a:	189b      	adds	r3, r3, r2
 800877c:	9a04      	ldr	r2, [sp, #16]
 800877e:	435a      	muls	r2, r3
 8008780:	0013      	movs	r3, r2
 8008782:	e776      	b.n	8008672 <_tzset_unlocked_r+0x15a>
 8008784:	2344      	movs	r3, #68	; 0x44
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	2d4a      	cmp	r5, #74	; 0x4a
 800878a:	d101      	bne.n	8008790 <_tzset_unlocked_r+0x278>
 800878c:	3401      	adds	r4, #1
 800878e:	9505      	str	r5, [sp, #20]
 8008790:	220a      	movs	r2, #10
 8008792:	a90b      	add	r1, sp, #44	; 0x2c
 8008794:	0020      	movs	r0, r4
 8008796:	f000 fd5f 	bl	8009258 <strtoul>
 800879a:	231e      	movs	r3, #30
 800879c:	aa02      	add	r2, sp, #8
 800879e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087a0:	189b      	adds	r3, r3, r2
 80087a2:	8018      	strh	r0, [r3, #0]
 80087a4:	42ac      	cmp	r4, r5
 80087a6:	d115      	bne.n	80087d4 <_tzset_unlocked_r+0x2bc>
 80087a8:	9b04      	ldr	r3, [sp, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d108      	bne.n	80087c0 <_tzset_unlocked_r+0x2a8>
 80087ae:	334d      	adds	r3, #77	; 0x4d
 80087b0:	7233      	strb	r3, [r6, #8]
 80087b2:	2303      	movs	r3, #3
 80087b4:	60f3      	str	r3, [r6, #12]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	6133      	str	r3, [r6, #16]
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	6173      	str	r3, [r6, #20]
 80087be:	e791      	b.n	80086e4 <_tzset_unlocked_r+0x1cc>
 80087c0:	224d      	movs	r2, #77	; 0x4d
 80087c2:	1d73      	adds	r3, r6, #5
 80087c4:	77da      	strb	r2, [r3, #31]
 80087c6:	230b      	movs	r3, #11
 80087c8:	62b3      	str	r3, [r6, #40]	; 0x28
 80087ca:	3b0a      	subs	r3, #10
 80087cc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80087ce:	2300      	movs	r3, #0
 80087d0:	6333      	str	r3, [r6, #48]	; 0x30
 80087d2:	e787      	b.n	80086e4 <_tzset_unlocked_r+0x1cc>
 80087d4:	466b      	mov	r3, sp
 80087d6:	7d1b      	ldrb	r3, [r3, #20]
 80087d8:	b280      	uxth	r0, r0
 80087da:	703b      	strb	r3, [r7, #0]
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	e781      	b.n	80086e4 <_tzset_unlocked_r+0x1cc>
 80087e0:	0800abcc 	.word	0x0800abcc
 80087e4:	20004948 	.word	0x20004948
 80087e8:	20004950 	.word	0x20004950
 80087ec:	0800abcf 	.word	0x0800abcf
 80087f0:	2000494c 	.word	0x2000494c
 80087f4:	20000204 	.word	0x20000204
 80087f8:	2000493b 	.word	0x2000493b
 80087fc:	0800abd3 	.word	0x0800abd3
 8008800:	0800abf6 	.word	0x0800abf6
 8008804:	20004930 	.word	0x20004930
 8008808:	fffff1f0 	.word	0xfffff1f0
 800880c:	0800abe2 	.word	0x0800abe2
 8008810:	0800abf5 	.word	0x0800abf5

08008814 <_vsniprintf_r>:
 8008814:	b530      	push	{r4, r5, lr}
 8008816:	0014      	movs	r4, r2
 8008818:	b09b      	sub	sp, #108	; 0x6c
 800881a:	0005      	movs	r5, r0
 800881c:	001a      	movs	r2, r3
 800881e:	2c00      	cmp	r4, #0
 8008820:	da05      	bge.n	800882e <_vsniprintf_r+0x1a>
 8008822:	238b      	movs	r3, #139	; 0x8b
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	2001      	movs	r0, #1
 8008828:	4240      	negs	r0, r0
 800882a:	b01b      	add	sp, #108	; 0x6c
 800882c:	bd30      	pop	{r4, r5, pc}
 800882e:	2382      	movs	r3, #130	; 0x82
 8008830:	4668      	mov	r0, sp
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	8183      	strh	r3, [r0, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	9100      	str	r1, [sp, #0]
 800883a:	9104      	str	r1, [sp, #16]
 800883c:	429c      	cmp	r4, r3
 800883e:	d000      	beq.n	8008842 <_vsniprintf_r+0x2e>
 8008840:	1e63      	subs	r3, r4, #1
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	2301      	movs	r3, #1
 8008848:	4669      	mov	r1, sp
 800884a:	425b      	negs	r3, r3
 800884c:	81cb      	strh	r3, [r1, #14]
 800884e:	0028      	movs	r0, r5
 8008850:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008852:	f000 f999 	bl	8008b88 <_svfiprintf_r>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	da01      	bge.n	800885e <_vsniprintf_r+0x4a>
 800885a:	238b      	movs	r3, #139	; 0x8b
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	2c00      	cmp	r4, #0
 8008860:	d0e3      	beq.n	800882a <_vsniprintf_r+0x16>
 8008862:	2300      	movs	r3, #0
 8008864:	9a00      	ldr	r2, [sp, #0]
 8008866:	7013      	strb	r3, [r2, #0]
 8008868:	e7df      	b.n	800882a <_vsniprintf_r+0x16>
	...

0800886c <vsniprintf>:
 800886c:	b507      	push	{r0, r1, r2, lr}
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	0013      	movs	r3, r2
 8008872:	000a      	movs	r2, r1
 8008874:	0001      	movs	r1, r0
 8008876:	4802      	ldr	r0, [pc, #8]	; (8008880 <vsniprintf+0x14>)
 8008878:	6800      	ldr	r0, [r0, #0]
 800887a:	f7ff ffcb 	bl	8008814 <_vsniprintf_r>
 800887e:	bd0e      	pop	{r1, r2, r3, pc}
 8008880:	2000024c 	.word	0x2000024c

08008884 <__ascii_wctomb>:
 8008884:	1e0b      	subs	r3, r1, #0
 8008886:	d004      	beq.n	8008892 <__ascii_wctomb+0xe>
 8008888:	2aff      	cmp	r2, #255	; 0xff
 800888a:	d904      	bls.n	8008896 <__ascii_wctomb+0x12>
 800888c:	238a      	movs	r3, #138	; 0x8a
 800888e:	6003      	str	r3, [r0, #0]
 8008890:	3b8b      	subs	r3, #139	; 0x8b
 8008892:	0018      	movs	r0, r3
 8008894:	4770      	bx	lr
 8008896:	700a      	strb	r2, [r1, #0]
 8008898:	2301      	movs	r3, #1
 800889a:	e7fa      	b.n	8008892 <__ascii_wctomb+0xe>

0800889c <div>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	000f      	movs	r7, r1
 80088a0:	0006      	movs	r6, r0
 80088a2:	0011      	movs	r1, r2
 80088a4:	0038      	movs	r0, r7
 80088a6:	0015      	movs	r5, r2
 80088a8:	f7f7 fcc8 	bl	800023c <__divsi3>
 80088ac:	0029      	movs	r1, r5
 80088ae:	0004      	movs	r4, r0
 80088b0:	0038      	movs	r0, r7
 80088b2:	f7f7 fda9 	bl	8000408 <__aeabi_idivmod>
 80088b6:	2f00      	cmp	r7, #0
 80088b8:	db07      	blt.n	80088ca <div+0x2e>
 80088ba:	2900      	cmp	r1, #0
 80088bc:	da01      	bge.n	80088c2 <div+0x26>
 80088be:	3401      	adds	r4, #1
 80088c0:	1b49      	subs	r1, r1, r5
 80088c2:	0030      	movs	r0, r6
 80088c4:	6034      	str	r4, [r6, #0]
 80088c6:	6071      	str	r1, [r6, #4]
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ca:	2900      	cmp	r1, #0
 80088cc:	ddf9      	ble.n	80088c2 <div+0x26>
 80088ce:	3c01      	subs	r4, #1
 80088d0:	1949      	adds	r1, r1, r5
 80088d2:	e7f6      	b.n	80088c2 <div+0x26>

080088d4 <_findenv_r>:
 80088d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d6:	000e      	movs	r6, r1
 80088d8:	b085      	sub	sp, #20
 80088da:	0007      	movs	r7, r0
 80088dc:	9203      	str	r2, [sp, #12]
 80088de:	f000 fccf 	bl	8009280 <__env_lock>
 80088e2:	4c19      	ldr	r4, [pc, #100]	; (8008948 <_findenv_r+0x74>)
 80088e4:	0033      	movs	r3, r6
 80088e6:	6825      	ldr	r5, [r4, #0]
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	d106      	bne.n	80088fa <_findenv_r+0x26>
 80088ec:	0038      	movs	r0, r7
 80088ee:	f000 fcc8 	bl	8009282 <__env_unlock>
 80088f2:	2000      	movs	r0, #0
 80088f4:	b005      	add	sp, #20
 80088f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f8:	3301      	adds	r3, #1
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d01f      	beq.n	8008940 <_findenv_r+0x6c>
 8008900:	2a3d      	cmp	r2, #61	; 0x3d
 8008902:	d1f9      	bne.n	80088f8 <_findenv_r+0x24>
 8008904:	e7f2      	b.n	80088ec <_findenv_r+0x18>
 8008906:	3504      	adds	r5, #4
 8008908:	6828      	ldr	r0, [r5, #0]
 800890a:	2800      	cmp	r0, #0
 800890c:	d0ee      	beq.n	80088ec <_findenv_r+0x18>
 800890e:	9a01      	ldr	r2, [sp, #4]
 8008910:	0031      	movs	r1, r6
 8008912:	f7ff fc60 	bl	80081d6 <strncmp>
 8008916:	2800      	cmp	r0, #0
 8008918:	d1f5      	bne.n	8008906 <_findenv_r+0x32>
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	4694      	mov	ip, r2
 8008920:	4463      	add	r3, ip
 8008922:	9302      	str	r3, [sp, #8]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b3d      	cmp	r3, #61	; 0x3d
 8008928:	d1ed      	bne.n	8008906 <_findenv_r+0x32>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	0038      	movs	r0, r7
 800892e:	1aed      	subs	r5, r5, r3
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	10ad      	asrs	r5, r5, #2
 8008934:	601d      	str	r5, [r3, #0]
 8008936:	f000 fca4 	bl	8009282 <__env_unlock>
 800893a:	9802      	ldr	r0, [sp, #8]
 800893c:	3001      	adds	r0, #1
 800893e:	e7d9      	b.n	80088f4 <_findenv_r+0x20>
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	e7e0      	b.n	8008908 <_findenv_r+0x34>
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	200002b0 	.word	0x200002b0

0800894c <_getenv_r>:
 800894c:	b507      	push	{r0, r1, r2, lr}
 800894e:	aa01      	add	r2, sp, #4
 8008950:	f7ff ffc0 	bl	80088d4 <_findenv_r>
 8008954:	bd0e      	pop	{r1, r2, r3, pc}
	...

08008958 <__gettzinfo>:
 8008958:	4800      	ldr	r0, [pc, #0]	; (800895c <__gettzinfo+0x4>)
 800895a:	4770      	bx	lr
 800895c:	2000020c 	.word	0x2000020c

08008960 <free>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <free+0x10>)
 8008964:	0001      	movs	r1, r0
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	f000 f804 	bl	8008974 <_free_r>
 800896c:	bd10      	pop	{r4, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	2000024c 	.word	0x2000024c

08008974 <_free_r>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	0005      	movs	r5, r0
 8008978:	2900      	cmp	r1, #0
 800897a:	d010      	beq.n	800899e <_free_r+0x2a>
 800897c:	1f0c      	subs	r4, r1, #4
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da00      	bge.n	8008986 <_free_r+0x12>
 8008984:	18e4      	adds	r4, r4, r3
 8008986:	0028      	movs	r0, r5
 8008988:	f000 fc99 	bl	80092be <__malloc_lock>
 800898c:	4a1d      	ldr	r2, [pc, #116]	; (8008a04 <_free_r+0x90>)
 800898e:	6813      	ldr	r3, [r2, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <_free_r+0x2c>
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	6014      	str	r4, [r2, #0]
 8008998:	0028      	movs	r0, r5
 800899a:	f000 fc91 	bl	80092c0 <__malloc_unlock>
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	d909      	bls.n	80089b8 <_free_r+0x44>
 80089a4:	6821      	ldr	r1, [r4, #0]
 80089a6:	1860      	adds	r0, r4, r1
 80089a8:	4283      	cmp	r3, r0
 80089aa:	d1f3      	bne.n	8008994 <_free_r+0x20>
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	1841      	adds	r1, r0, r1
 80089b2:	6021      	str	r1, [r4, #0]
 80089b4:	e7ee      	b.n	8008994 <_free_r+0x20>
 80089b6:	0013      	movs	r3, r2
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d001      	beq.n	80089c2 <_free_r+0x4e>
 80089be:	42a2      	cmp	r2, r4
 80089c0:	d9f9      	bls.n	80089b6 <_free_r+0x42>
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	1858      	adds	r0, r3, r1
 80089c6:	42a0      	cmp	r0, r4
 80089c8:	d10b      	bne.n	80089e2 <_free_r+0x6e>
 80089ca:	6820      	ldr	r0, [r4, #0]
 80089cc:	1809      	adds	r1, r1, r0
 80089ce:	1858      	adds	r0, r3, r1
 80089d0:	6019      	str	r1, [r3, #0]
 80089d2:	4282      	cmp	r2, r0
 80089d4:	d1e0      	bne.n	8008998 <_free_r+0x24>
 80089d6:	6810      	ldr	r0, [r2, #0]
 80089d8:	6852      	ldr	r2, [r2, #4]
 80089da:	1841      	adds	r1, r0, r1
 80089dc:	6019      	str	r1, [r3, #0]
 80089de:	605a      	str	r2, [r3, #4]
 80089e0:	e7da      	b.n	8008998 <_free_r+0x24>
 80089e2:	42a0      	cmp	r0, r4
 80089e4:	d902      	bls.n	80089ec <_free_r+0x78>
 80089e6:	230c      	movs	r3, #12
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	e7d5      	b.n	8008998 <_free_r+0x24>
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	1860      	adds	r0, r4, r1
 80089f0:	4282      	cmp	r2, r0
 80089f2:	d103      	bne.n	80089fc <_free_r+0x88>
 80089f4:	6810      	ldr	r0, [r2, #0]
 80089f6:	6852      	ldr	r2, [r2, #4]
 80089f8:	1841      	adds	r1, r0, r1
 80089fa:	6021      	str	r1, [r4, #0]
 80089fc:	6062      	str	r2, [r4, #4]
 80089fe:	605c      	str	r4, [r3, #4]
 8008a00:	e7ca      	b.n	8008998 <_free_r+0x24>
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	20004954 	.word	0x20004954

08008a08 <_malloc_r>:
 8008a08:	2303      	movs	r3, #3
 8008a0a:	b570      	push	{r4, r5, r6, lr}
 8008a0c:	1ccd      	adds	r5, r1, #3
 8008a0e:	439d      	bics	r5, r3
 8008a10:	3508      	adds	r5, #8
 8008a12:	0006      	movs	r6, r0
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	d21e      	bcs.n	8008a56 <_malloc_r+0x4e>
 8008a18:	250c      	movs	r5, #12
 8008a1a:	42a9      	cmp	r1, r5
 8008a1c:	d81d      	bhi.n	8008a5a <_malloc_r+0x52>
 8008a1e:	0030      	movs	r0, r6
 8008a20:	f000 fc4d 	bl	80092be <__malloc_lock>
 8008a24:	4a25      	ldr	r2, [pc, #148]	; (8008abc <_malloc_r+0xb4>)
 8008a26:	6814      	ldr	r4, [r2, #0]
 8008a28:	0021      	movs	r1, r4
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d119      	bne.n	8008a62 <_malloc_r+0x5a>
 8008a2e:	4c24      	ldr	r4, [pc, #144]	; (8008ac0 <_malloc_r+0xb8>)
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <_malloc_r+0x36>
 8008a36:	0030      	movs	r0, r6
 8008a38:	f000 fb32 	bl	80090a0 <_sbrk_r>
 8008a3c:	6020      	str	r0, [r4, #0]
 8008a3e:	0029      	movs	r1, r5
 8008a40:	0030      	movs	r0, r6
 8008a42:	f000 fb2d 	bl	80090a0 <_sbrk_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d12c      	bne.n	8008aa4 <_malloc_r+0x9c>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	6033      	str	r3, [r6, #0]
 8008a50:	f000 fc36 	bl	80092c0 <__malloc_unlock>
 8008a54:	e003      	b.n	8008a5e <_malloc_r+0x56>
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	dadf      	bge.n	8008a1a <_malloc_r+0x12>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	6033      	str	r3, [r6, #0]
 8008a5e:	2000      	movs	r0, #0
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	680b      	ldr	r3, [r1, #0]
 8008a64:	1b5b      	subs	r3, r3, r5
 8008a66:	d41a      	bmi.n	8008a9e <_malloc_r+0x96>
 8008a68:	2b0b      	cmp	r3, #11
 8008a6a:	d903      	bls.n	8008a74 <_malloc_r+0x6c>
 8008a6c:	600b      	str	r3, [r1, #0]
 8008a6e:	18cc      	adds	r4, r1, r3
 8008a70:	6025      	str	r5, [r4, #0]
 8008a72:	e003      	b.n	8008a7c <_malloc_r+0x74>
 8008a74:	428c      	cmp	r4, r1
 8008a76:	d10e      	bne.n	8008a96 <_malloc_r+0x8e>
 8008a78:	6863      	ldr	r3, [r4, #4]
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	0030      	movs	r0, r6
 8008a7e:	f000 fc1f 	bl	80092c0 <__malloc_unlock>
 8008a82:	0020      	movs	r0, r4
 8008a84:	2207      	movs	r2, #7
 8008a86:	300b      	adds	r0, #11
 8008a88:	1d23      	adds	r3, r4, #4
 8008a8a:	4390      	bics	r0, r2
 8008a8c:	1ac3      	subs	r3, r0, r3
 8008a8e:	d0e7      	beq.n	8008a60 <_malloc_r+0x58>
 8008a90:	425a      	negs	r2, r3
 8008a92:	50e2      	str	r2, [r4, r3]
 8008a94:	e7e4      	b.n	8008a60 <_malloc_r+0x58>
 8008a96:	684b      	ldr	r3, [r1, #4]
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	000c      	movs	r4, r1
 8008a9c:	e7ee      	b.n	8008a7c <_malloc_r+0x74>
 8008a9e:	000c      	movs	r4, r1
 8008aa0:	6849      	ldr	r1, [r1, #4]
 8008aa2:	e7c2      	b.n	8008a2a <_malloc_r+0x22>
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	1cc4      	adds	r4, r0, #3
 8008aa8:	439c      	bics	r4, r3
 8008aaa:	42a0      	cmp	r0, r4
 8008aac:	d0e0      	beq.n	8008a70 <_malloc_r+0x68>
 8008aae:	1a21      	subs	r1, r4, r0
 8008ab0:	0030      	movs	r0, r6
 8008ab2:	f000 faf5 	bl	80090a0 <_sbrk_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	d1da      	bne.n	8008a70 <_malloc_r+0x68>
 8008aba:	e7c6      	b.n	8008a4a <_malloc_r+0x42>
 8008abc:	20004954 	.word	0x20004954
 8008ac0:	20004958 	.word	0x20004958

08008ac4 <__ssputs_r>:
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	688e      	ldr	r6, [r1, #8]
 8008ac8:	b085      	sub	sp, #20
 8008aca:	0007      	movs	r7, r0
 8008acc:	000c      	movs	r4, r1
 8008ace:	9203      	str	r2, [sp, #12]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	429e      	cmp	r6, r3
 8008ad4:	d839      	bhi.n	8008b4a <__ssputs_r+0x86>
 8008ad6:	2390      	movs	r3, #144	; 0x90
 8008ad8:	898a      	ldrh	r2, [r1, #12]
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	421a      	tst	r2, r3
 8008ade:	d034      	beq.n	8008b4a <__ssputs_r+0x86>
 8008ae0:	2503      	movs	r5, #3
 8008ae2:	6909      	ldr	r1, [r1, #16]
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	1a5b      	subs	r3, r3, r1
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	6963      	ldr	r3, [r4, #20]
 8008aec:	9802      	ldr	r0, [sp, #8]
 8008aee:	435d      	muls	r5, r3
 8008af0:	0feb      	lsrs	r3, r5, #31
 8008af2:	195d      	adds	r5, r3, r5
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	106d      	asrs	r5, r5, #1
 8008af8:	3301      	adds	r3, #1
 8008afa:	181b      	adds	r3, r3, r0
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	d900      	bls.n	8008b02 <__ssputs_r+0x3e>
 8008b00:	001d      	movs	r5, r3
 8008b02:	0553      	lsls	r3, r2, #21
 8008b04:	d532      	bpl.n	8008b6c <__ssputs_r+0xa8>
 8008b06:	0029      	movs	r1, r5
 8008b08:	0038      	movs	r0, r7
 8008b0a:	f7ff ff7d 	bl	8008a08 <_malloc_r>
 8008b0e:	1e06      	subs	r6, r0, #0
 8008b10:	d109      	bne.n	8008b26 <__ssputs_r+0x62>
 8008b12:	230c      	movs	r3, #12
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	2340      	movs	r3, #64	; 0x40
 8008b18:	2001      	movs	r0, #1
 8008b1a:	89a2      	ldrh	r2, [r4, #12]
 8008b1c:	4240      	negs	r0, r0
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	b005      	add	sp, #20
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b26:	9a02      	ldr	r2, [sp, #8]
 8008b28:	6921      	ldr	r1, [r4, #16]
 8008b2a:	f7ff f87e 	bl	8007c2a <memcpy>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	4a14      	ldr	r2, [pc, #80]	; (8008b84 <__ssputs_r+0xc0>)
 8008b32:	401a      	ands	r2, r3
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	4313      	orrs	r3, r2
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	6126      	str	r6, [r4, #16]
 8008b3e:	18f6      	adds	r6, r6, r3
 8008b40:	6026      	str	r6, [r4, #0]
 8008b42:	6165      	str	r5, [r4, #20]
 8008b44:	9e01      	ldr	r6, [sp, #4]
 8008b46:	1aed      	subs	r5, r5, r3
 8008b48:	60a5      	str	r5, [r4, #8]
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	42b3      	cmp	r3, r6
 8008b4e:	d200      	bcs.n	8008b52 <__ssputs_r+0x8e>
 8008b50:	001e      	movs	r6, r3
 8008b52:	0032      	movs	r2, r6
 8008b54:	9903      	ldr	r1, [sp, #12]
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	f000 fb9f 	bl	800929a <memmove>
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	2000      	movs	r0, #0
 8008b60:	1b9b      	subs	r3, r3, r6
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	199e      	adds	r6, r3, r6
 8008b68:	6026      	str	r6, [r4, #0]
 8008b6a:	e7da      	b.n	8008b22 <__ssputs_r+0x5e>
 8008b6c:	002a      	movs	r2, r5
 8008b6e:	0038      	movs	r0, r7
 8008b70:	f000 fba7 	bl	80092c2 <_realloc_r>
 8008b74:	1e06      	subs	r6, r0, #0
 8008b76:	d1e0      	bne.n	8008b3a <__ssputs_r+0x76>
 8008b78:	6921      	ldr	r1, [r4, #16]
 8008b7a:	0038      	movs	r0, r7
 8008b7c:	f7ff fefa 	bl	8008974 <_free_r>
 8008b80:	e7c7      	b.n	8008b12 <__ssputs_r+0x4e>
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	fffffb7f 	.word	0xfffffb7f

08008b88 <_svfiprintf_r>:
 8008b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8a:	b09f      	sub	sp, #124	; 0x7c
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	9305      	str	r3, [sp, #20]
 8008b90:	898b      	ldrh	r3, [r1, #12]
 8008b92:	000f      	movs	r7, r1
 8008b94:	0016      	movs	r6, r2
 8008b96:	061b      	lsls	r3, r3, #24
 8008b98:	d511      	bpl.n	8008bbe <_svfiprintf_r+0x36>
 8008b9a:	690b      	ldr	r3, [r1, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10e      	bne.n	8008bbe <_svfiprintf_r+0x36>
 8008ba0:	2140      	movs	r1, #64	; 0x40
 8008ba2:	f7ff ff31 	bl	8008a08 <_malloc_r>
 8008ba6:	6038      	str	r0, [r7, #0]
 8008ba8:	6138      	str	r0, [r7, #16]
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d105      	bne.n	8008bba <_svfiprintf_r+0x32>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	9a02      	ldr	r2, [sp, #8]
 8008bb2:	3801      	subs	r0, #1
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	b01f      	add	sp, #124	; 0x7c
 8008bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bba:	2340      	movs	r3, #64	; 0x40
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	ad06      	add	r5, sp, #24
 8008bc2:	616b      	str	r3, [r5, #20]
 8008bc4:	3320      	adds	r3, #32
 8008bc6:	766b      	strb	r3, [r5, #25]
 8008bc8:	3310      	adds	r3, #16
 8008bca:	76ab      	strb	r3, [r5, #26]
 8008bcc:	0034      	movs	r4, r6
 8008bce:	7823      	ldrb	r3, [r4, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d147      	bne.n	8008c64 <_svfiprintf_r+0xdc>
 8008bd4:	1ba3      	subs	r3, r4, r6
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	d00d      	beq.n	8008bf6 <_svfiprintf_r+0x6e>
 8008bda:	1ba3      	subs	r3, r4, r6
 8008bdc:	0032      	movs	r2, r6
 8008bde:	0039      	movs	r1, r7
 8008be0:	9802      	ldr	r0, [sp, #8]
 8008be2:	f7ff ff6f 	bl	8008ac4 <__ssputs_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d100      	bne.n	8008bec <_svfiprintf_r+0x64>
 8008bea:	e0b5      	b.n	8008d58 <_svfiprintf_r+0x1d0>
 8008bec:	696a      	ldr	r2, [r5, #20]
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	4694      	mov	ip, r2
 8008bf2:	4463      	add	r3, ip
 8008bf4:	616b      	str	r3, [r5, #20]
 8008bf6:	7823      	ldrb	r3, [r4, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d100      	bne.n	8008bfe <_svfiprintf_r+0x76>
 8008bfc:	e0ac      	b.n	8008d58 <_svfiprintf_r+0x1d0>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	2300      	movs	r3, #0
 8008c02:	4252      	negs	r2, r2
 8008c04:	606a      	str	r2, [r5, #4]
 8008c06:	a902      	add	r1, sp, #8
 8008c08:	3254      	adds	r2, #84	; 0x54
 8008c0a:	1852      	adds	r2, r2, r1
 8008c0c:	3401      	adds	r4, #1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	60eb      	str	r3, [r5, #12]
 8008c12:	60ab      	str	r3, [r5, #8]
 8008c14:	7013      	strb	r3, [r2, #0]
 8008c16:	65ab      	str	r3, [r5, #88]	; 0x58
 8008c18:	4e58      	ldr	r6, [pc, #352]	; (8008d7c <_svfiprintf_r+0x1f4>)
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	7821      	ldrb	r1, [r4, #0]
 8008c1e:	0030      	movs	r0, r6
 8008c20:	f000 fb30 	bl	8009284 <memchr>
 8008c24:	1c62      	adds	r2, r4, #1
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d120      	bne.n	8008c6c <_svfiprintf_r+0xe4>
 8008c2a:	6829      	ldr	r1, [r5, #0]
 8008c2c:	06cb      	lsls	r3, r1, #27
 8008c2e:	d504      	bpl.n	8008c3a <_svfiprintf_r+0xb2>
 8008c30:	2353      	movs	r3, #83	; 0x53
 8008c32:	ae02      	add	r6, sp, #8
 8008c34:	3020      	adds	r0, #32
 8008c36:	199b      	adds	r3, r3, r6
 8008c38:	7018      	strb	r0, [r3, #0]
 8008c3a:	070b      	lsls	r3, r1, #28
 8008c3c:	d504      	bpl.n	8008c48 <_svfiprintf_r+0xc0>
 8008c3e:	2353      	movs	r3, #83	; 0x53
 8008c40:	202b      	movs	r0, #43	; 0x2b
 8008c42:	ae02      	add	r6, sp, #8
 8008c44:	199b      	adds	r3, r3, r6
 8008c46:	7018      	strb	r0, [r3, #0]
 8008c48:	7823      	ldrb	r3, [r4, #0]
 8008c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4c:	d016      	beq.n	8008c7c <_svfiprintf_r+0xf4>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	210a      	movs	r1, #10
 8008c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c54:	7822      	ldrb	r2, [r4, #0]
 8008c56:	3a30      	subs	r2, #48	; 0x30
 8008c58:	2a09      	cmp	r2, #9
 8008c5a:	d955      	bls.n	8008d08 <_svfiprintf_r+0x180>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d015      	beq.n	8008c8c <_svfiprintf_r+0x104>
 8008c60:	9309      	str	r3, [sp, #36]	; 0x24
 8008c62:	e013      	b.n	8008c8c <_svfiprintf_r+0x104>
 8008c64:	2b25      	cmp	r3, #37	; 0x25
 8008c66:	d0b5      	beq.n	8008bd4 <_svfiprintf_r+0x4c>
 8008c68:	3401      	adds	r4, #1
 8008c6a:	e7b0      	b.n	8008bce <_svfiprintf_r+0x46>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	1b80      	subs	r0, r0, r6
 8008c70:	4083      	lsls	r3, r0
 8008c72:	6829      	ldr	r1, [r5, #0]
 8008c74:	0014      	movs	r4, r2
 8008c76:	430b      	orrs	r3, r1
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	e7cd      	b.n	8008c18 <_svfiprintf_r+0x90>
 8008c7c:	9b05      	ldr	r3, [sp, #20]
 8008c7e:	1d18      	adds	r0, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	9005      	str	r0, [sp, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	db39      	blt.n	8008cfc <_svfiprintf_r+0x174>
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	0014      	movs	r4, r2
 8008c8c:	7823      	ldrb	r3, [r4, #0]
 8008c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c90:	d10b      	bne.n	8008caa <_svfiprintf_r+0x122>
 8008c92:	7863      	ldrb	r3, [r4, #1]
 8008c94:	1c62      	adds	r2, r4, #1
 8008c96:	2b2a      	cmp	r3, #42	; 0x2a
 8008c98:	d13e      	bne.n	8008d18 <_svfiprintf_r+0x190>
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	3402      	adds	r4, #2
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9205      	str	r2, [sp, #20]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	db34      	blt.n	8008d12 <_svfiprintf_r+0x18a>
 8008ca8:	9307      	str	r3, [sp, #28]
 8008caa:	4e35      	ldr	r6, [pc, #212]	; (8008d80 <_svfiprintf_r+0x1f8>)
 8008cac:	7821      	ldrb	r1, [r4, #0]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	0030      	movs	r0, r6
 8008cb2:	f000 fae7 	bl	8009284 <memchr>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d006      	beq.n	8008cc8 <_svfiprintf_r+0x140>
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	1b80      	subs	r0, r0, r6
 8008cbe:	4083      	lsls	r3, r0
 8008cc0:	682a      	ldr	r2, [r5, #0]
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	7821      	ldrb	r1, [r4, #0]
 8008cca:	2206      	movs	r2, #6
 8008ccc:	482d      	ldr	r0, [pc, #180]	; (8008d84 <_svfiprintf_r+0x1fc>)
 8008cce:	1c66      	adds	r6, r4, #1
 8008cd0:	7629      	strb	r1, [r5, #24]
 8008cd2:	f000 fad7 	bl	8009284 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d046      	beq.n	8008d68 <_svfiprintf_r+0x1e0>
 8008cda:	4b2b      	ldr	r3, [pc, #172]	; (8008d88 <_svfiprintf_r+0x200>)
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d12f      	bne.n	8008d40 <_svfiprintf_r+0x1b8>
 8008ce0:	6829      	ldr	r1, [r5, #0]
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	05c9      	lsls	r1, r1, #23
 8008ce8:	d528      	bpl.n	8008d3c <_svfiprintf_r+0x1b4>
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	4393      	bics	r3, r2
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9305      	str	r3, [sp, #20]
 8008cf2:	696b      	ldr	r3, [r5, #20]
 8008cf4:	9a03      	ldr	r2, [sp, #12]
 8008cf6:	189b      	adds	r3, r3, r2
 8008cf8:	616b      	str	r3, [r5, #20]
 8008cfa:	e767      	b.n	8008bcc <_svfiprintf_r+0x44>
 8008cfc:	425b      	negs	r3, r3
 8008cfe:	60eb      	str	r3, [r5, #12]
 8008d00:	2302      	movs	r3, #2
 8008d02:	430b      	orrs	r3, r1
 8008d04:	602b      	str	r3, [r5, #0]
 8008d06:	e7c0      	b.n	8008c8a <_svfiprintf_r+0x102>
 8008d08:	434b      	muls	r3, r1
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	189b      	adds	r3, r3, r2
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7a0      	b.n	8008c54 <_svfiprintf_r+0xcc>
 8008d12:	2301      	movs	r3, #1
 8008d14:	425b      	negs	r3, r3
 8008d16:	e7c7      	b.n	8008ca8 <_svfiprintf_r+0x120>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	0014      	movs	r4, r2
 8008d1c:	200a      	movs	r0, #10
 8008d1e:	001a      	movs	r2, r3
 8008d20:	606b      	str	r3, [r5, #4]
 8008d22:	7821      	ldrb	r1, [r4, #0]
 8008d24:	3930      	subs	r1, #48	; 0x30
 8008d26:	2909      	cmp	r1, #9
 8008d28:	d903      	bls.n	8008d32 <_svfiprintf_r+0x1aa>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0bd      	beq.n	8008caa <_svfiprintf_r+0x122>
 8008d2e:	9207      	str	r2, [sp, #28]
 8008d30:	e7bb      	b.n	8008caa <_svfiprintf_r+0x122>
 8008d32:	4342      	muls	r2, r0
 8008d34:	3401      	adds	r4, #1
 8008d36:	1852      	adds	r2, r2, r1
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7f2      	b.n	8008d22 <_svfiprintf_r+0x19a>
 8008d3c:	3307      	adds	r3, #7
 8008d3e:	e7d5      	b.n	8008cec <_svfiprintf_r+0x164>
 8008d40:	ab05      	add	r3, sp, #20
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	003a      	movs	r2, r7
 8008d46:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <_svfiprintf_r+0x204>)
 8008d48:	0029      	movs	r1, r5
 8008d4a:	9802      	ldr	r0, [sp, #8]
 8008d4c:	e000      	b.n	8008d50 <_svfiprintf_r+0x1c8>
 8008d4e:	bf00      	nop
 8008d50:	9003      	str	r0, [sp, #12]
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	d1cc      	bne.n	8008cf2 <_svfiprintf_r+0x16a>
 8008d58:	89bb      	ldrh	r3, [r7, #12]
 8008d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008d5c:	065b      	lsls	r3, r3, #25
 8008d5e:	d400      	bmi.n	8008d62 <_svfiprintf_r+0x1da>
 8008d60:	e729      	b.n	8008bb6 <_svfiprintf_r+0x2e>
 8008d62:	2001      	movs	r0, #1
 8008d64:	4240      	negs	r0, r0
 8008d66:	e726      	b.n	8008bb6 <_svfiprintf_r+0x2e>
 8008d68:	ab05      	add	r3, sp, #20
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	003a      	movs	r2, r7
 8008d6e:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <_svfiprintf_r+0x204>)
 8008d70:	0029      	movs	r1, r5
 8008d72:	9802      	ldr	r0, [sp, #8]
 8008d74:	f000 f87a 	bl	8008e6c <_printf_i>
 8008d78:	e7ea      	b.n	8008d50 <_svfiprintf_r+0x1c8>
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	0800ad6c 	.word	0x0800ad6c
 8008d80:	0800ad72 	.word	0x0800ad72
 8008d84:	0800ad76 	.word	0x0800ad76
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	08008ac5 	.word	0x08008ac5

08008d90 <_printf_common>:
 8008d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d92:	0015      	movs	r5, r2
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	688a      	ldr	r2, [r1, #8]
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	9000      	str	r0, [sp, #0]
 8008d9c:	000c      	movs	r4, r1
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	da00      	bge.n	8008da4 <_printf_common+0x14>
 8008da2:	0013      	movs	r3, r2
 8008da4:	0022      	movs	r2, r4
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	3243      	adds	r2, #67	; 0x43
 8008daa:	7812      	ldrb	r2, [r2, #0]
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d001      	beq.n	8008db4 <_printf_common+0x24>
 8008db0:	3301      	adds	r3, #1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	069b      	lsls	r3, r3, #26
 8008db8:	d502      	bpl.n	8008dc0 <_printf_common+0x30>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	2706      	movs	r7, #6
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	401f      	ands	r7, r3
 8008dc6:	d027      	beq.n	8008e18 <_printf_common+0x88>
 8008dc8:	0023      	movs	r3, r4
 8008dca:	3343      	adds	r3, #67	; 0x43
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	1e5a      	subs	r2, r3, #1
 8008dd0:	4193      	sbcs	r3, r2
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	0692      	lsls	r2, r2, #26
 8008dd6:	d430      	bmi.n	8008e3a <_printf_common+0xaa>
 8008dd8:	0022      	movs	r2, r4
 8008dda:	9901      	ldr	r1, [sp, #4]
 8008ddc:	3243      	adds	r2, #67	; 0x43
 8008dde:	9800      	ldr	r0, [sp, #0]
 8008de0:	9e08      	ldr	r6, [sp, #32]
 8008de2:	47b0      	blx	r6
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d025      	beq.n	8008e34 <_printf_common+0xa4>
 8008de8:	2306      	movs	r3, #6
 8008dea:	6820      	ldr	r0, [r4, #0]
 8008dec:	682a      	ldr	r2, [r5, #0]
 8008dee:	68e1      	ldr	r1, [r4, #12]
 8008df0:	4003      	ands	r3, r0
 8008df2:	2500      	movs	r5, #0
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d103      	bne.n	8008e00 <_printf_common+0x70>
 8008df8:	1a8d      	subs	r5, r1, r2
 8008dfa:	43eb      	mvns	r3, r5
 8008dfc:	17db      	asrs	r3, r3, #31
 8008dfe:	401d      	ands	r5, r3
 8008e00:	68a3      	ldr	r3, [r4, #8]
 8008e02:	6922      	ldr	r2, [r4, #16]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	dd01      	ble.n	8008e0c <_printf_common+0x7c>
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	18ed      	adds	r5, r5, r3
 8008e0c:	2700      	movs	r7, #0
 8008e0e:	42bd      	cmp	r5, r7
 8008e10:	d120      	bne.n	8008e54 <_printf_common+0xc4>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e010      	b.n	8008e38 <_printf_common+0xa8>
 8008e16:	3701      	adds	r7, #1
 8008e18:	68e3      	ldr	r3, [r4, #12]
 8008e1a:	682a      	ldr	r2, [r5, #0]
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	429f      	cmp	r7, r3
 8008e20:	dad2      	bge.n	8008dc8 <_printf_common+0x38>
 8008e22:	0022      	movs	r2, r4
 8008e24:	2301      	movs	r3, #1
 8008e26:	3219      	adds	r2, #25
 8008e28:	9901      	ldr	r1, [sp, #4]
 8008e2a:	9800      	ldr	r0, [sp, #0]
 8008e2c:	9e08      	ldr	r6, [sp, #32]
 8008e2e:	47b0      	blx	r6
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d1f0      	bne.n	8008e16 <_printf_common+0x86>
 8008e34:	2001      	movs	r0, #1
 8008e36:	4240      	negs	r0, r0
 8008e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e3a:	2030      	movs	r0, #48	; 0x30
 8008e3c:	18e1      	adds	r1, r4, r3
 8008e3e:	3143      	adds	r1, #67	; 0x43
 8008e40:	7008      	strb	r0, [r1, #0]
 8008e42:	0021      	movs	r1, r4
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	3145      	adds	r1, #69	; 0x45
 8008e48:	7809      	ldrb	r1, [r1, #0]
 8008e4a:	18a2      	adds	r2, r4, r2
 8008e4c:	3243      	adds	r2, #67	; 0x43
 8008e4e:	3302      	adds	r3, #2
 8008e50:	7011      	strb	r1, [r2, #0]
 8008e52:	e7c1      	b.n	8008dd8 <_printf_common+0x48>
 8008e54:	0022      	movs	r2, r4
 8008e56:	2301      	movs	r3, #1
 8008e58:	321a      	adds	r2, #26
 8008e5a:	9901      	ldr	r1, [sp, #4]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	9e08      	ldr	r6, [sp, #32]
 8008e60:	47b0      	blx	r6
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d0e6      	beq.n	8008e34 <_printf_common+0xa4>
 8008e66:	3701      	adds	r7, #1
 8008e68:	e7d1      	b.n	8008e0e <_printf_common+0x7e>
	...

08008e6c <_printf_i>:
 8008e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6e:	b08b      	sub	sp, #44	; 0x2c
 8008e70:	9206      	str	r2, [sp, #24]
 8008e72:	000a      	movs	r2, r1
 8008e74:	3243      	adds	r2, #67	; 0x43
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	9005      	str	r0, [sp, #20]
 8008e7a:	9204      	str	r2, [sp, #16]
 8008e7c:	7e0a      	ldrb	r2, [r1, #24]
 8008e7e:	000c      	movs	r4, r1
 8008e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e82:	2a6e      	cmp	r2, #110	; 0x6e
 8008e84:	d100      	bne.n	8008e88 <_printf_i+0x1c>
 8008e86:	e08f      	b.n	8008fa8 <_printf_i+0x13c>
 8008e88:	d817      	bhi.n	8008eba <_printf_i+0x4e>
 8008e8a:	2a63      	cmp	r2, #99	; 0x63
 8008e8c:	d02c      	beq.n	8008ee8 <_printf_i+0x7c>
 8008e8e:	d808      	bhi.n	8008ea2 <_printf_i+0x36>
 8008e90:	2a00      	cmp	r2, #0
 8008e92:	d100      	bne.n	8008e96 <_printf_i+0x2a>
 8008e94:	e099      	b.n	8008fca <_printf_i+0x15e>
 8008e96:	2a58      	cmp	r2, #88	; 0x58
 8008e98:	d054      	beq.n	8008f44 <_printf_i+0xd8>
 8008e9a:	0026      	movs	r6, r4
 8008e9c:	3642      	adds	r6, #66	; 0x42
 8008e9e:	7032      	strb	r2, [r6, #0]
 8008ea0:	e029      	b.n	8008ef6 <_printf_i+0x8a>
 8008ea2:	2a64      	cmp	r2, #100	; 0x64
 8008ea4:	d001      	beq.n	8008eaa <_printf_i+0x3e>
 8008ea6:	2a69      	cmp	r2, #105	; 0x69
 8008ea8:	d1f7      	bne.n	8008e9a <_printf_i+0x2e>
 8008eaa:	6821      	ldr	r1, [r4, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	0608      	lsls	r0, r1, #24
 8008eb0:	d523      	bpl.n	8008efa <_printf_i+0x8e>
 8008eb2:	1d11      	adds	r1, r2, #4
 8008eb4:	6019      	str	r1, [r3, #0]
 8008eb6:	6815      	ldr	r5, [r2, #0]
 8008eb8:	e025      	b.n	8008f06 <_printf_i+0x9a>
 8008eba:	2a73      	cmp	r2, #115	; 0x73
 8008ebc:	d100      	bne.n	8008ec0 <_printf_i+0x54>
 8008ebe:	e088      	b.n	8008fd2 <_printf_i+0x166>
 8008ec0:	d808      	bhi.n	8008ed4 <_printf_i+0x68>
 8008ec2:	2a6f      	cmp	r2, #111	; 0x6f
 8008ec4:	d029      	beq.n	8008f1a <_printf_i+0xae>
 8008ec6:	2a70      	cmp	r2, #112	; 0x70
 8008ec8:	d1e7      	bne.n	8008e9a <_printf_i+0x2e>
 8008eca:	2220      	movs	r2, #32
 8008ecc:	6809      	ldr	r1, [r1, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	6022      	str	r2, [r4, #0]
 8008ed2:	e003      	b.n	8008edc <_printf_i+0x70>
 8008ed4:	2a75      	cmp	r2, #117	; 0x75
 8008ed6:	d020      	beq.n	8008f1a <_printf_i+0xae>
 8008ed8:	2a78      	cmp	r2, #120	; 0x78
 8008eda:	d1de      	bne.n	8008e9a <_printf_i+0x2e>
 8008edc:	0022      	movs	r2, r4
 8008ede:	2178      	movs	r1, #120	; 0x78
 8008ee0:	3245      	adds	r2, #69	; 0x45
 8008ee2:	7011      	strb	r1, [r2, #0]
 8008ee4:	4a6c      	ldr	r2, [pc, #432]	; (8009098 <_printf_i+0x22c>)
 8008ee6:	e030      	b.n	8008f4a <_printf_i+0xde>
 8008ee8:	000e      	movs	r6, r1
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	3642      	adds	r6, #66	; 0x42
 8008eee:	1d11      	adds	r1, r2, #4
 8008ef0:	6019      	str	r1, [r3, #0]
 8008ef2:	6813      	ldr	r3, [r2, #0]
 8008ef4:	7033      	strb	r3, [r6, #0]
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e079      	b.n	8008fee <_printf_i+0x182>
 8008efa:	0649      	lsls	r1, r1, #25
 8008efc:	d5d9      	bpl.n	8008eb2 <_printf_i+0x46>
 8008efe:	1d11      	adds	r1, r2, #4
 8008f00:	6019      	str	r1, [r3, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	5ed5      	ldrsh	r5, [r2, r3]
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	da03      	bge.n	8008f12 <_printf_i+0xa6>
 8008f0a:	232d      	movs	r3, #45	; 0x2d
 8008f0c:	9a04      	ldr	r2, [sp, #16]
 8008f0e:	426d      	negs	r5, r5
 8008f10:	7013      	strb	r3, [r2, #0]
 8008f12:	4b62      	ldr	r3, [pc, #392]	; (800909c <_printf_i+0x230>)
 8008f14:	270a      	movs	r7, #10
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	e02f      	b.n	8008f7a <_printf_i+0x10e>
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	6819      	ldr	r1, [r3, #0]
 8008f1e:	0605      	lsls	r5, r0, #24
 8008f20:	d503      	bpl.n	8008f2a <_printf_i+0xbe>
 8008f22:	1d08      	adds	r0, r1, #4
 8008f24:	6018      	str	r0, [r3, #0]
 8008f26:	680d      	ldr	r5, [r1, #0]
 8008f28:	e005      	b.n	8008f36 <_printf_i+0xca>
 8008f2a:	0640      	lsls	r0, r0, #25
 8008f2c:	d5f9      	bpl.n	8008f22 <_printf_i+0xb6>
 8008f2e:	680d      	ldr	r5, [r1, #0]
 8008f30:	1d08      	adds	r0, r1, #4
 8008f32:	6018      	str	r0, [r3, #0]
 8008f34:	b2ad      	uxth	r5, r5
 8008f36:	4b59      	ldr	r3, [pc, #356]	; (800909c <_printf_i+0x230>)
 8008f38:	2708      	movs	r7, #8
 8008f3a:	9303      	str	r3, [sp, #12]
 8008f3c:	2a6f      	cmp	r2, #111	; 0x6f
 8008f3e:	d018      	beq.n	8008f72 <_printf_i+0x106>
 8008f40:	270a      	movs	r7, #10
 8008f42:	e016      	b.n	8008f72 <_printf_i+0x106>
 8008f44:	3145      	adds	r1, #69	; 0x45
 8008f46:	700a      	strb	r2, [r1, #0]
 8008f48:	4a54      	ldr	r2, [pc, #336]	; (800909c <_printf_i+0x230>)
 8008f4a:	9203      	str	r2, [sp, #12]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	6821      	ldr	r1, [r4, #0]
 8008f50:	1d10      	adds	r0, r2, #4
 8008f52:	6018      	str	r0, [r3, #0]
 8008f54:	6815      	ldr	r5, [r2, #0]
 8008f56:	0608      	lsls	r0, r1, #24
 8008f58:	d522      	bpl.n	8008fa0 <_printf_i+0x134>
 8008f5a:	07cb      	lsls	r3, r1, #31
 8008f5c:	d502      	bpl.n	8008f64 <_printf_i+0xf8>
 8008f5e:	2320      	movs	r3, #32
 8008f60:	4319      	orrs	r1, r3
 8008f62:	6021      	str	r1, [r4, #0]
 8008f64:	2710      	movs	r7, #16
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	d103      	bne.n	8008f72 <_printf_i+0x106>
 8008f6a:	2320      	movs	r3, #32
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	439a      	bics	r2, r3
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	0023      	movs	r3, r4
 8008f74:	2200      	movs	r2, #0
 8008f76:	3343      	adds	r3, #67	; 0x43
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	db5c      	blt.n	800903c <_printf_i+0x1d0>
 8008f82:	2204      	movs	r2, #4
 8008f84:	6821      	ldr	r1, [r4, #0]
 8008f86:	4391      	bics	r1, r2
 8008f88:	6021      	str	r1, [r4, #0]
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	d158      	bne.n	8009040 <_printf_i+0x1d4>
 8008f8e:	9e04      	ldr	r6, [sp, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d064      	beq.n	800905e <_printf_i+0x1f2>
 8008f94:	0026      	movs	r6, r4
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	3642      	adds	r6, #66	; 0x42
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	7033      	strb	r3, [r6, #0]
 8008f9e:	e05e      	b.n	800905e <_printf_i+0x1f2>
 8008fa0:	0648      	lsls	r0, r1, #25
 8008fa2:	d5da      	bpl.n	8008f5a <_printf_i+0xee>
 8008fa4:	b2ad      	uxth	r5, r5
 8008fa6:	e7d8      	b.n	8008f5a <_printf_i+0xee>
 8008fa8:	6809      	ldr	r1, [r1, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	0608      	lsls	r0, r1, #24
 8008fae:	d505      	bpl.n	8008fbc <_printf_i+0x150>
 8008fb0:	1d11      	adds	r1, r2, #4
 8008fb2:	6019      	str	r1, [r3, #0]
 8008fb4:	6813      	ldr	r3, [r2, #0]
 8008fb6:	6962      	ldr	r2, [r4, #20]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e006      	b.n	8008fca <_printf_i+0x15e>
 8008fbc:	0649      	lsls	r1, r1, #25
 8008fbe:	d5f7      	bpl.n	8008fb0 <_printf_i+0x144>
 8008fc0:	1d11      	adds	r1, r2, #4
 8008fc2:	6019      	str	r1, [r3, #0]
 8008fc4:	6813      	ldr	r3, [r2, #0]
 8008fc6:	8aa2      	ldrh	r2, [r4, #20]
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9e04      	ldr	r6, [sp, #16]
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	e054      	b.n	800907c <_printf_i+0x210>
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	1d11      	adds	r1, r2, #4
 8008fd6:	6019      	str	r1, [r3, #0]
 8008fd8:	6816      	ldr	r6, [r2, #0]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	6862      	ldr	r2, [r4, #4]
 8008fde:	0030      	movs	r0, r6
 8008fe0:	f000 f950 	bl	8009284 <memchr>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d001      	beq.n	8008fec <_printf_i+0x180>
 8008fe8:	1b80      	subs	r0, r0, r6
 8008fea:	6060      	str	r0, [r4, #4]
 8008fec:	6863      	ldr	r3, [r4, #4]
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	7013      	strb	r3, [r2, #0]
 8008ff6:	e041      	b.n	800907c <_printf_i+0x210>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	0032      	movs	r2, r6
 8008ffc:	9906      	ldr	r1, [sp, #24]
 8008ffe:	9805      	ldr	r0, [sp, #20]
 8009000:	9d07      	ldr	r5, [sp, #28]
 8009002:	47a8      	blx	r5
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d043      	beq.n	8009090 <_printf_i+0x224>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	2500      	movs	r5, #0
 800900c:	079b      	lsls	r3, r3, #30
 800900e:	d40f      	bmi.n	8009030 <_printf_i+0x1c4>
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	68e0      	ldr	r0, [r4, #12]
 8009014:	4298      	cmp	r0, r3
 8009016:	da3d      	bge.n	8009094 <_printf_i+0x228>
 8009018:	0018      	movs	r0, r3
 800901a:	e03b      	b.n	8009094 <_printf_i+0x228>
 800901c:	0022      	movs	r2, r4
 800901e:	2301      	movs	r3, #1
 8009020:	3219      	adds	r2, #25
 8009022:	9906      	ldr	r1, [sp, #24]
 8009024:	9805      	ldr	r0, [sp, #20]
 8009026:	9e07      	ldr	r6, [sp, #28]
 8009028:	47b0      	blx	r6
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d030      	beq.n	8009090 <_printf_i+0x224>
 800902e:	3501      	adds	r5, #1
 8009030:	68e3      	ldr	r3, [r4, #12]
 8009032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	429d      	cmp	r5, r3
 8009038:	dbf0      	blt.n	800901c <_printf_i+0x1b0>
 800903a:	e7e9      	b.n	8009010 <_printf_i+0x1a4>
 800903c:	2d00      	cmp	r5, #0
 800903e:	d0a9      	beq.n	8008f94 <_printf_i+0x128>
 8009040:	9e04      	ldr	r6, [sp, #16]
 8009042:	0028      	movs	r0, r5
 8009044:	0039      	movs	r1, r7
 8009046:	f7f7 f8f5 	bl	8000234 <__aeabi_uidivmod>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3e01      	subs	r6, #1
 800904e:	5c5b      	ldrb	r3, [r3, r1]
 8009050:	0028      	movs	r0, r5
 8009052:	7033      	strb	r3, [r6, #0]
 8009054:	0039      	movs	r1, r7
 8009056:	f7f7 f867 	bl	8000128 <__udivsi3>
 800905a:	1e05      	subs	r5, r0, #0
 800905c:	d1f1      	bne.n	8009042 <_printf_i+0x1d6>
 800905e:	2f08      	cmp	r7, #8
 8009060:	d109      	bne.n	8009076 <_printf_i+0x20a>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	07db      	lsls	r3, r3, #31
 8009066:	d506      	bpl.n	8009076 <_printf_i+0x20a>
 8009068:	6863      	ldr	r3, [r4, #4]
 800906a:	6922      	ldr	r2, [r4, #16]
 800906c:	4293      	cmp	r3, r2
 800906e:	dc02      	bgt.n	8009076 <_printf_i+0x20a>
 8009070:	2330      	movs	r3, #48	; 0x30
 8009072:	3e01      	subs	r6, #1
 8009074:	7033      	strb	r3, [r6, #0]
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	6123      	str	r3, [r4, #16]
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	aa09      	add	r2, sp, #36	; 0x24
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	0021      	movs	r1, r4
 8009084:	9b06      	ldr	r3, [sp, #24]
 8009086:	9805      	ldr	r0, [sp, #20]
 8009088:	f7ff fe82 	bl	8008d90 <_printf_common>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d1b3      	bne.n	8008ff8 <_printf_i+0x18c>
 8009090:	2001      	movs	r0, #1
 8009092:	4240      	negs	r0, r0
 8009094:	b00b      	add	sp, #44	; 0x2c
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	0800ad8e 	.word	0x0800ad8e
 800909c:	0800ad7d 	.word	0x0800ad7d

080090a0 <_sbrk_r>:
 80090a0:	2300      	movs	r3, #0
 80090a2:	b570      	push	{r4, r5, r6, lr}
 80090a4:	4c06      	ldr	r4, [pc, #24]	; (80090c0 <_sbrk_r+0x20>)
 80090a6:	0005      	movs	r5, r0
 80090a8:	0008      	movs	r0, r1
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	f000 fcec 	bl	8009a88 <_sbrk>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d103      	bne.n	80090bc <_sbrk_r+0x1c>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d000      	beq.n	80090bc <_sbrk_r+0x1c>
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	20005cb8 	.word	0x20005cb8

080090c4 <siscanf>:
 80090c4:	b40e      	push	{r1, r2, r3}
 80090c6:	2381      	movs	r3, #129	; 0x81
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	b09d      	sub	sp, #116	; 0x74
 80090cc:	ac02      	add	r4, sp, #8
 80090ce:	ad21      	add	r5, sp, #132	; 0x84
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	cd40      	ldmia	r5!, {r6}
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	9002      	str	r0, [sp, #8]
 80090d8:	9006      	str	r0, [sp, #24]
 80090da:	f7f7 f81d 	bl	8000118 <strlen>
 80090de:	4b0b      	ldr	r3, [pc, #44]	; (800910c <siscanf+0x48>)
 80090e0:	6060      	str	r0, [r4, #4]
 80090e2:	6263      	str	r3, [r4, #36]	; 0x24
 80090e4:	2300      	movs	r3, #0
 80090e6:	6160      	str	r0, [r4, #20]
 80090e8:	4809      	ldr	r0, [pc, #36]	; (8009110 <siscanf+0x4c>)
 80090ea:	6363      	str	r3, [r4, #52]	; 0x34
 80090ec:	64a3      	str	r3, [r4, #72]	; 0x48
 80090ee:	3b01      	subs	r3, #1
 80090f0:	81e3      	strh	r3, [r4, #14]
 80090f2:	0032      	movs	r2, r6
 80090f4:	002b      	movs	r3, r5
 80090f6:	0021      	movs	r1, r4
 80090f8:	6800      	ldr	r0, [r0, #0]
 80090fa:	9501      	str	r5, [sp, #4]
 80090fc:	f000 f962 	bl	80093c4 <__ssvfiscanf_r>
 8009100:	b01d      	add	sp, #116	; 0x74
 8009102:	bc70      	pop	{r4, r5, r6}
 8009104:	bc08      	pop	{r3}
 8009106:	b003      	add	sp, #12
 8009108:	4718      	bx	r3
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	08009115 	.word	0x08009115
 8009110:	2000024c 	.word	0x2000024c

08009114 <__seofread>:
 8009114:	2000      	movs	r0, #0
 8009116:	4770      	bx	lr

08009118 <strcpy>:
 8009118:	1c03      	adds	r3, r0, #0
 800911a:	780a      	ldrb	r2, [r1, #0]
 800911c:	3101      	adds	r1, #1
 800911e:	701a      	strb	r2, [r3, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1f9      	bne.n	800911a <strcpy+0x2>
 8009126:	4770      	bx	lr

08009128 <_strtoul_l.isra.0>:
 8009128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912a:	001f      	movs	r7, r3
 800912c:	000e      	movs	r6, r1
 800912e:	b087      	sub	sp, #28
 8009130:	9005      	str	r0, [sp, #20]
 8009132:	9103      	str	r1, [sp, #12]
 8009134:	9201      	str	r2, [sp, #4]
 8009136:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009138:	7834      	ldrb	r4, [r6, #0]
 800913a:	f7fe fd43 	bl	8007bc4 <__locale_ctype_ptr_l>
 800913e:	2208      	movs	r2, #8
 8009140:	1900      	adds	r0, r0, r4
 8009142:	7843      	ldrb	r3, [r0, #1]
 8009144:	1c75      	adds	r5, r6, #1
 8009146:	4013      	ands	r3, r2
 8009148:	d10c      	bne.n	8009164 <_strtoul_l.isra.0+0x3c>
 800914a:	2c2d      	cmp	r4, #45	; 0x2d
 800914c:	d10c      	bne.n	8009168 <_strtoul_l.isra.0+0x40>
 800914e:	3301      	adds	r3, #1
 8009150:	782c      	ldrb	r4, [r5, #0]
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	1cb5      	adds	r5, r6, #2
 8009156:	2f00      	cmp	r7, #0
 8009158:	d00c      	beq.n	8009174 <_strtoul_l.isra.0+0x4c>
 800915a:	2f10      	cmp	r7, #16
 800915c:	d114      	bne.n	8009188 <_strtoul_l.isra.0+0x60>
 800915e:	2c30      	cmp	r4, #48	; 0x30
 8009160:	d00a      	beq.n	8009178 <_strtoul_l.isra.0+0x50>
 8009162:	e011      	b.n	8009188 <_strtoul_l.isra.0+0x60>
 8009164:	002e      	movs	r6, r5
 8009166:	e7e6      	b.n	8009136 <_strtoul_l.isra.0+0xe>
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	2c2b      	cmp	r4, #43	; 0x2b
 800916c:	d1f3      	bne.n	8009156 <_strtoul_l.isra.0+0x2e>
 800916e:	782c      	ldrb	r4, [r5, #0]
 8009170:	1cb5      	adds	r5, r6, #2
 8009172:	e7f0      	b.n	8009156 <_strtoul_l.isra.0+0x2e>
 8009174:	2c30      	cmp	r4, #48	; 0x30
 8009176:	d12f      	bne.n	80091d8 <_strtoul_l.isra.0+0xb0>
 8009178:	2220      	movs	r2, #32
 800917a:	782b      	ldrb	r3, [r5, #0]
 800917c:	4393      	bics	r3, r2
 800917e:	2b58      	cmp	r3, #88	; 0x58
 8009180:	d154      	bne.n	800922c <_strtoul_l.isra.0+0x104>
 8009182:	2710      	movs	r7, #16
 8009184:	786c      	ldrb	r4, [r5, #1]
 8009186:	3502      	adds	r5, #2
 8009188:	2001      	movs	r0, #1
 800918a:	0039      	movs	r1, r7
 800918c:	4240      	negs	r0, r0
 800918e:	f7f6 ffcb 	bl	8000128 <__udivsi3>
 8009192:	0006      	movs	r6, r0
 8009194:	2001      	movs	r0, #1
 8009196:	0039      	movs	r1, r7
 8009198:	4240      	negs	r0, r0
 800919a:	f7f7 f84b 	bl	8000234 <__aeabi_uidivmod>
 800919e:	2300      	movs	r3, #0
 80091a0:	9104      	str	r1, [sp, #16]
 80091a2:	2101      	movs	r1, #1
 80091a4:	2201      	movs	r2, #1
 80091a6:	0018      	movs	r0, r3
 80091a8:	468c      	mov	ip, r1
 80091aa:	4252      	negs	r2, r2
 80091ac:	0021      	movs	r1, r4
 80091ae:	3930      	subs	r1, #48	; 0x30
 80091b0:	2909      	cmp	r1, #9
 80091b2:	d813      	bhi.n	80091dc <_strtoul_l.isra.0+0xb4>
 80091b4:	000c      	movs	r4, r1
 80091b6:	42a7      	cmp	r7, r4
 80091b8:	dd1e      	ble.n	80091f8 <_strtoul_l.isra.0+0xd0>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	db1a      	blt.n	80091f4 <_strtoul_l.isra.0+0xcc>
 80091be:	0013      	movs	r3, r2
 80091c0:	4286      	cmp	r6, r0
 80091c2:	d306      	bcc.n	80091d2 <_strtoul_l.isra.0+0xaa>
 80091c4:	d102      	bne.n	80091cc <_strtoul_l.isra.0+0xa4>
 80091c6:	9904      	ldr	r1, [sp, #16]
 80091c8:	42a1      	cmp	r1, r4
 80091ca:	db02      	blt.n	80091d2 <_strtoul_l.isra.0+0xaa>
 80091cc:	4663      	mov	r3, ip
 80091ce:	4378      	muls	r0, r7
 80091d0:	1820      	adds	r0, r4, r0
 80091d2:	782c      	ldrb	r4, [r5, #0]
 80091d4:	3501      	adds	r5, #1
 80091d6:	e7e9      	b.n	80091ac <_strtoul_l.isra.0+0x84>
 80091d8:	270a      	movs	r7, #10
 80091da:	e7d5      	b.n	8009188 <_strtoul_l.isra.0+0x60>
 80091dc:	0021      	movs	r1, r4
 80091de:	3941      	subs	r1, #65	; 0x41
 80091e0:	2919      	cmp	r1, #25
 80091e2:	d801      	bhi.n	80091e8 <_strtoul_l.isra.0+0xc0>
 80091e4:	3c37      	subs	r4, #55	; 0x37
 80091e6:	e7e6      	b.n	80091b6 <_strtoul_l.isra.0+0x8e>
 80091e8:	0021      	movs	r1, r4
 80091ea:	3961      	subs	r1, #97	; 0x61
 80091ec:	2919      	cmp	r1, #25
 80091ee:	d803      	bhi.n	80091f8 <_strtoul_l.isra.0+0xd0>
 80091f0:	3c57      	subs	r4, #87	; 0x57
 80091f2:	e7e0      	b.n	80091b6 <_strtoul_l.isra.0+0x8e>
 80091f4:	0013      	movs	r3, r2
 80091f6:	e7ec      	b.n	80091d2 <_strtoul_l.isra.0+0xaa>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da09      	bge.n	8009210 <_strtoul_l.isra.0+0xe8>
 80091fc:	2322      	movs	r3, #34	; 0x22
 80091fe:	2001      	movs	r0, #1
 8009200:	9a05      	ldr	r2, [sp, #20]
 8009202:	4240      	negs	r0, r0
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10b      	bne.n	8009224 <_strtoul_l.isra.0+0xfc>
 800920c:	b007      	add	sp, #28
 800920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009210:	9a02      	ldr	r2, [sp, #8]
 8009212:	2a00      	cmp	r2, #0
 8009214:	d000      	beq.n	8009218 <_strtoul_l.isra.0+0xf0>
 8009216:	4240      	negs	r0, r0
 8009218:	9a01      	ldr	r2, [sp, #4]
 800921a:	2a00      	cmp	r2, #0
 800921c:	d0f6      	beq.n	800920c <_strtoul_l.isra.0+0xe4>
 800921e:	9a03      	ldr	r2, [sp, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d000      	beq.n	8009226 <_strtoul_l.isra.0+0xfe>
 8009224:	1e6a      	subs	r2, r5, #1
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	e7ef      	b.n	800920c <_strtoul_l.isra.0+0xe4>
 800922c:	2430      	movs	r4, #48	; 0x30
 800922e:	2f00      	cmp	r7, #0
 8009230:	d1aa      	bne.n	8009188 <_strtoul_l.isra.0+0x60>
 8009232:	3708      	adds	r7, #8
 8009234:	e7a8      	b.n	8009188 <_strtoul_l.isra.0+0x60>
	...

08009238 <_strtoul_r>:
 8009238:	b513      	push	{r0, r1, r4, lr}
 800923a:	4c05      	ldr	r4, [pc, #20]	; (8009250 <_strtoul_r+0x18>)
 800923c:	6824      	ldr	r4, [r4, #0]
 800923e:	6a24      	ldr	r4, [r4, #32]
 8009240:	2c00      	cmp	r4, #0
 8009242:	d100      	bne.n	8009246 <_strtoul_r+0xe>
 8009244:	4c03      	ldr	r4, [pc, #12]	; (8009254 <_strtoul_r+0x1c>)
 8009246:	9400      	str	r4, [sp, #0]
 8009248:	f7ff ff6e 	bl	8009128 <_strtoul_l.isra.0>
 800924c:	bd16      	pop	{r1, r2, r4, pc}
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	2000024c 	.word	0x2000024c
 8009254:	20000098 	.word	0x20000098

08009258 <strtoul>:
 8009258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800925a:	0013      	movs	r3, r2
 800925c:	4a06      	ldr	r2, [pc, #24]	; (8009278 <strtoul+0x20>)
 800925e:	0005      	movs	r5, r0
 8009260:	6810      	ldr	r0, [r2, #0]
 8009262:	6a04      	ldr	r4, [r0, #32]
 8009264:	2c00      	cmp	r4, #0
 8009266:	d100      	bne.n	800926a <strtoul+0x12>
 8009268:	4c04      	ldr	r4, [pc, #16]	; (800927c <strtoul+0x24>)
 800926a:	000a      	movs	r2, r1
 800926c:	9400      	str	r4, [sp, #0]
 800926e:	0029      	movs	r1, r5
 8009270:	f7ff ff5a 	bl	8009128 <_strtoul_l.isra.0>
 8009274:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	2000024c 	.word	0x2000024c
 800927c:	20000098 	.word	0x20000098

08009280 <__env_lock>:
 8009280:	4770      	bx	lr

08009282 <__env_unlock>:
 8009282:	4770      	bx	lr

08009284 <memchr>:
 8009284:	b2c9      	uxtb	r1, r1
 8009286:	1882      	adds	r2, r0, r2
 8009288:	4290      	cmp	r0, r2
 800928a:	d101      	bne.n	8009290 <memchr+0xc>
 800928c:	2000      	movs	r0, #0
 800928e:	4770      	bx	lr
 8009290:	7803      	ldrb	r3, [r0, #0]
 8009292:	428b      	cmp	r3, r1
 8009294:	d0fb      	beq.n	800928e <memchr+0xa>
 8009296:	3001      	adds	r0, #1
 8009298:	e7f6      	b.n	8009288 <memchr+0x4>

0800929a <memmove>:
 800929a:	b510      	push	{r4, lr}
 800929c:	4288      	cmp	r0, r1
 800929e:	d902      	bls.n	80092a6 <memmove+0xc>
 80092a0:	188b      	adds	r3, r1, r2
 80092a2:	4298      	cmp	r0, r3
 80092a4:	d308      	bcc.n	80092b8 <memmove+0x1e>
 80092a6:	2300      	movs	r3, #0
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d007      	beq.n	80092bc <memmove+0x22>
 80092ac:	5ccc      	ldrb	r4, [r1, r3]
 80092ae:	54c4      	strb	r4, [r0, r3]
 80092b0:	3301      	adds	r3, #1
 80092b2:	e7f9      	b.n	80092a8 <memmove+0xe>
 80092b4:	5c8b      	ldrb	r3, [r1, r2]
 80092b6:	5483      	strb	r3, [r0, r2]
 80092b8:	3a01      	subs	r2, #1
 80092ba:	d2fb      	bcs.n	80092b4 <memmove+0x1a>
 80092bc:	bd10      	pop	{r4, pc}

080092be <__malloc_lock>:
 80092be:	4770      	bx	lr

080092c0 <__malloc_unlock>:
 80092c0:	4770      	bx	lr

080092c2 <_realloc_r>:
 80092c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c4:	0007      	movs	r7, r0
 80092c6:	000d      	movs	r5, r1
 80092c8:	0016      	movs	r6, r2
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d105      	bne.n	80092da <_realloc_r+0x18>
 80092ce:	0011      	movs	r1, r2
 80092d0:	f7ff fb9a 	bl	8008a08 <_malloc_r>
 80092d4:	0004      	movs	r4, r0
 80092d6:	0020      	movs	r0, r4
 80092d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d103      	bne.n	80092e6 <_realloc_r+0x24>
 80092de:	f7ff fb49 	bl	8008974 <_free_r>
 80092e2:	0034      	movs	r4, r6
 80092e4:	e7f7      	b.n	80092d6 <_realloc_r+0x14>
 80092e6:	f000 fbc7 	bl	8009a78 <_malloc_usable_size_r>
 80092ea:	002c      	movs	r4, r5
 80092ec:	4286      	cmp	r6, r0
 80092ee:	d9f2      	bls.n	80092d6 <_realloc_r+0x14>
 80092f0:	0031      	movs	r1, r6
 80092f2:	0038      	movs	r0, r7
 80092f4:	f7ff fb88 	bl	8008a08 <_malloc_r>
 80092f8:	1e04      	subs	r4, r0, #0
 80092fa:	d0ec      	beq.n	80092d6 <_realloc_r+0x14>
 80092fc:	0029      	movs	r1, r5
 80092fe:	0032      	movs	r2, r6
 8009300:	f7fe fc93 	bl	8007c2a <memcpy>
 8009304:	0029      	movs	r1, r5
 8009306:	0038      	movs	r0, r7
 8009308:	f7ff fb34 	bl	8008974 <_free_r>
 800930c:	e7e3      	b.n	80092d6 <_realloc_r+0x14>

0800930e <_sungetc_r>:
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	0014      	movs	r4, r2
 8009312:	1c4b      	adds	r3, r1, #1
 8009314:	d103      	bne.n	800931e <_sungetc_r+0x10>
 8009316:	2501      	movs	r5, #1
 8009318:	426d      	negs	r5, r5
 800931a:	0028      	movs	r0, r5
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	8993      	ldrh	r3, [r2, #12]
 8009320:	2220      	movs	r2, #32
 8009322:	4393      	bics	r3, r2
 8009324:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	b2ce      	uxtb	r6, r1
 800932a:	b2cd      	uxtb	r5, r1
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	2a00      	cmp	r2, #0
 8009330:	d010      	beq.n	8009354 <_sungetc_r+0x46>
 8009332:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009334:	4293      	cmp	r3, r2
 8009336:	da07      	bge.n	8009348 <_sungetc_r+0x3a>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	701e      	strb	r6, [r3, #0]
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	3301      	adds	r3, #1
 8009344:	6063      	str	r3, [r4, #4]
 8009346:	e7e8      	b.n	800931a <_sungetc_r+0xc>
 8009348:	0021      	movs	r1, r4
 800934a:	f000 fb57 	bl	80099fc <__submore>
 800934e:	2800      	cmp	r0, #0
 8009350:	d0f2      	beq.n	8009338 <_sungetc_r+0x2a>
 8009352:	e7e0      	b.n	8009316 <_sungetc_r+0x8>
 8009354:	6921      	ldr	r1, [r4, #16]
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	2900      	cmp	r1, #0
 800935a:	d007      	beq.n	800936c <_sungetc_r+0x5e>
 800935c:	4291      	cmp	r1, r2
 800935e:	d205      	bcs.n	800936c <_sungetc_r+0x5e>
 8009360:	1e51      	subs	r1, r2, #1
 8009362:	7808      	ldrb	r0, [r1, #0]
 8009364:	4285      	cmp	r5, r0
 8009366:	d101      	bne.n	800936c <_sungetc_r+0x5e>
 8009368:	6021      	str	r1, [r4, #0]
 800936a:	e7ea      	b.n	8009342 <_sungetc_r+0x34>
 800936c:	6423      	str	r3, [r4, #64]	; 0x40
 800936e:	0023      	movs	r3, r4
 8009370:	3344      	adds	r3, #68	; 0x44
 8009372:	6363      	str	r3, [r4, #52]	; 0x34
 8009374:	2303      	movs	r3, #3
 8009376:	63a3      	str	r3, [r4, #56]	; 0x38
 8009378:	0023      	movs	r3, r4
 800937a:	3346      	adds	r3, #70	; 0x46
 800937c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800937e:	701e      	strb	r6, [r3, #0]
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2301      	movs	r3, #1
 8009384:	e7de      	b.n	8009344 <_sungetc_r+0x36>

08009386 <__ssrefill_r>:
 8009386:	b510      	push	{r4, lr}
 8009388:	000c      	movs	r4, r1
 800938a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800938c:	2900      	cmp	r1, #0
 800938e:	d00e      	beq.n	80093ae <__ssrefill_r+0x28>
 8009390:	0023      	movs	r3, r4
 8009392:	3344      	adds	r3, #68	; 0x44
 8009394:	4299      	cmp	r1, r3
 8009396:	d001      	beq.n	800939c <__ssrefill_r+0x16>
 8009398:	f7ff faec 	bl	8008974 <_free_r>
 800939c:	2000      	movs	r0, #0
 800939e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093a0:	6360      	str	r0, [r4, #52]	; 0x34
 80093a2:	6063      	str	r3, [r4, #4]
 80093a4:	4283      	cmp	r3, r0
 80093a6:	d002      	beq.n	80093ae <__ssrefill_r+0x28>
 80093a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	2001      	movs	r0, #1
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	2300      	movs	r3, #0
 80093b6:	89a2      	ldrh	r2, [r4, #12]
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	3320      	adds	r3, #32
 80093bc:	4313      	orrs	r3, r2
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	4240      	negs	r0, r0
 80093c2:	e7f3      	b.n	80093ac <__ssrefill_r+0x26>

080093c4 <__ssvfiscanf_r>:
 80093c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c6:	4cbd      	ldr	r4, [pc, #756]	; (80096bc <__ssvfiscanf_r+0x2f8>)
 80093c8:	2586      	movs	r5, #134	; 0x86
 80093ca:	44a5      	add	sp, r4
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	2300      	movs	r3, #0
 80093d0:	9348      	str	r3, [sp, #288]	; 0x120
 80093d2:	9349      	str	r3, [sp, #292]	; 0x124
 80093d4:	ab05      	add	r3, sp, #20
 80093d6:	934a      	str	r3, [sp, #296]	; 0x128
 80093d8:	23be      	movs	r3, #190	; 0xbe
 80093da:	006d      	lsls	r5, r5, #1
 80093dc:	9000      	str	r0, [sp, #0]
 80093de:	000c      	movs	r4, r1
 80093e0:	a802      	add	r0, sp, #8
 80093e2:	49b7      	ldr	r1, [pc, #732]	; (80096c0 <__ssvfiscanf_r+0x2fc>)
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	1940      	adds	r0, r0, r5
 80093e8:	27c0      	movs	r7, #192	; 0xc0
 80093ea:	50c1      	str	r1, [r0, r3]
 80093ec:	ab02      	add	r3, sp, #8
 80093ee:	195b      	adds	r3, r3, r5
 80093f0:	0015      	movs	r5, r2
 80093f2:	49b4      	ldr	r1, [pc, #720]	; (80096c4 <__ssvfiscanf_r+0x300>)
 80093f4:	007f      	lsls	r7, r7, #1
 80093f6:	51d9      	str	r1, [r3, r7]
 80093f8:	782b      	ldrb	r3, [r5, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d100      	bne.n	8009400 <__ssvfiscanf_r+0x3c>
 80093fe:	e15b      	b.n	80096b8 <__ssvfiscanf_r+0x2f4>
 8009400:	f7fe fbe4 	bl	8007bcc <__locale_ctype_ptr>
 8009404:	2208      	movs	r2, #8
 8009406:	782b      	ldrb	r3, [r5, #0]
 8009408:	18c0      	adds	r0, r0, r3
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	7843      	ldrb	r3, [r0, #1]
 800940e:	4013      	ands	r3, r2
 8009410:	d141      	bne.n	8009496 <__ssvfiscanf_r+0xd2>
 8009412:	9a01      	ldr	r2, [sp, #4]
 8009414:	1c6e      	adds	r6, r5, #1
 8009416:	2a25      	cmp	r2, #37	; 0x25
 8009418:	d000      	beq.n	800941c <__ssvfiscanf_r+0x58>
 800941a:	e0a8      	b.n	800956e <__ssvfiscanf_r+0x1aa>
 800941c:	9347      	str	r3, [sp, #284]	; 0x11c
 800941e:	9345      	str	r3, [sp, #276]	; 0x114
 8009420:	786b      	ldrb	r3, [r5, #1]
 8009422:	2b2a      	cmp	r3, #42	; 0x2a
 8009424:	d102      	bne.n	800942c <__ssvfiscanf_r+0x68>
 8009426:	3b1a      	subs	r3, #26
 8009428:	9345      	str	r3, [sp, #276]	; 0x114
 800942a:	1cae      	adds	r6, r5, #2
 800942c:	0035      	movs	r5, r6
 800942e:	220a      	movs	r2, #10
 8009430:	7829      	ldrb	r1, [r5, #0]
 8009432:	000b      	movs	r3, r1
 8009434:	3b30      	subs	r3, #48	; 0x30
 8009436:	2b09      	cmp	r3, #9
 8009438:	d948      	bls.n	80094cc <__ssvfiscanf_r+0x108>
 800943a:	4ea3      	ldr	r6, [pc, #652]	; (80096c8 <__ssvfiscanf_r+0x304>)
 800943c:	2203      	movs	r2, #3
 800943e:	0030      	movs	r0, r6
 8009440:	f7ff ff20 	bl	8009284 <memchr>
 8009444:	2800      	cmp	r0, #0
 8009446:	d007      	beq.n	8009458 <__ssvfiscanf_r+0x94>
 8009448:	2301      	movs	r3, #1
 800944a:	1b80      	subs	r0, r0, r6
 800944c:	4083      	lsls	r3, r0
 800944e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009450:	3501      	adds	r5, #1
 8009452:	4313      	orrs	r3, r2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	9345      	str	r3, [sp, #276]	; 0x114
 8009458:	782b      	ldrb	r3, [r5, #0]
 800945a:	1c6e      	adds	r6, r5, #1
 800945c:	2b67      	cmp	r3, #103	; 0x67
 800945e:	d858      	bhi.n	8009512 <__ssvfiscanf_r+0x14e>
 8009460:	2b65      	cmp	r3, #101	; 0x65
 8009462:	d300      	bcc.n	8009466 <__ssvfiscanf_r+0xa2>
 8009464:	e0dd      	b.n	8009622 <__ssvfiscanf_r+0x25e>
 8009466:	2b47      	cmp	r3, #71	; 0x47
 8009468:	d838      	bhi.n	80094dc <__ssvfiscanf_r+0x118>
 800946a:	2b45      	cmp	r3, #69	; 0x45
 800946c:	d300      	bcc.n	8009470 <__ssvfiscanf_r+0xac>
 800946e:	e0d8      	b.n	8009622 <__ssvfiscanf_r+0x25e>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d100      	bne.n	8009476 <__ssvfiscanf_r+0xb2>
 8009474:	e11d      	b.n	80096b2 <__ssvfiscanf_r+0x2ee>
 8009476:	2b25      	cmp	r3, #37	; 0x25
 8009478:	d079      	beq.n	800956e <__ssvfiscanf_r+0x1aa>
 800947a:	2303      	movs	r3, #3
 800947c:	934b      	str	r3, [sp, #300]	; 0x12c
 800947e:	3307      	adds	r3, #7
 8009480:	9346      	str	r3, [sp, #280]	; 0x118
 8009482:	e053      	b.n	800952c <__ssvfiscanf_r+0x168>
 8009484:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009486:	3301      	adds	r3, #1
 8009488:	9201      	str	r2, [sp, #4]
 800948a:	3201      	adds	r2, #1
 800948c:	9249      	str	r2, [sp, #292]	; 0x124
 800948e:	6862      	ldr	r2, [r4, #4]
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	3a01      	subs	r2, #1
 8009494:	6062      	str	r2, [r4, #4]
 8009496:	6863      	ldr	r3, [r4, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	dd0b      	ble.n	80094b4 <__ssvfiscanf_r+0xf0>
 800949c:	f7fe fb96 	bl	8007bcc <__locale_ctype_ptr>
 80094a0:	2108      	movs	r1, #8
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	781a      	ldrb	r2, [r3, #0]
 80094a6:	1880      	adds	r0, r0, r2
 80094a8:	7842      	ldrb	r2, [r0, #1]
 80094aa:	420a      	tst	r2, r1
 80094ac:	d1ea      	bne.n	8009484 <__ssvfiscanf_r+0xc0>
 80094ae:	1c6e      	adds	r6, r5, #1
 80094b0:	0035      	movs	r5, r6
 80094b2:	e7a1      	b.n	80093f8 <__ssvfiscanf_r+0x34>
 80094b4:	2286      	movs	r2, #134	; 0x86
 80094b6:	ab02      	add	r3, sp, #8
 80094b8:	0052      	lsls	r2, r2, #1
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	59db      	ldr	r3, [r3, r7]
 80094be:	0021      	movs	r1, r4
 80094c0:	9800      	ldr	r0, [sp, #0]
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	4798      	blx	r3
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0e8      	beq.n	800949c <__ssvfiscanf_r+0xd8>
 80094ca:	e7f0      	b.n	80094ae <__ssvfiscanf_r+0xea>
 80094cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80094ce:	3501      	adds	r5, #1
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	4353      	muls	r3, r2
 80094d4:	3b30      	subs	r3, #48	; 0x30
 80094d6:	1859      	adds	r1, r3, r1
 80094d8:	9147      	str	r1, [sp, #284]	; 0x11c
 80094da:	e7a9      	b.n	8009430 <__ssvfiscanf_r+0x6c>
 80094dc:	2b5b      	cmp	r3, #91	; 0x5b
 80094de:	d100      	bne.n	80094e2 <__ssvfiscanf_r+0x11e>
 80094e0:	e077      	b.n	80095d2 <__ssvfiscanf_r+0x20e>
 80094e2:	d80f      	bhi.n	8009504 <__ssvfiscanf_r+0x140>
 80094e4:	2b58      	cmp	r3, #88	; 0x58
 80094e6:	d1c8      	bne.n	800947a <__ssvfiscanf_r+0xb6>
 80094e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80094ea:	9201      	str	r2, [sp, #4]
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	9901      	ldr	r1, [sp, #4]
 80094f0:	0092      	lsls	r2, r2, #2
 80094f2:	430a      	orrs	r2, r1
 80094f4:	9245      	str	r2, [sp, #276]	; 0x114
 80094f6:	2210      	movs	r2, #16
 80094f8:	9246      	str	r2, [sp, #280]	; 0x118
 80094fa:	2203      	movs	r2, #3
 80094fc:	2b6e      	cmp	r3, #110	; 0x6e
 80094fe:	dd14      	ble.n	800952a <__ssvfiscanf_r+0x166>
 8009500:	3201      	adds	r2, #1
 8009502:	e012      	b.n	800952a <__ssvfiscanf_r+0x166>
 8009504:	2b63      	cmp	r3, #99	; 0x63
 8009506:	d100      	bne.n	800950a <__ssvfiscanf_r+0x146>
 8009508:	e071      	b.n	80095ee <__ssvfiscanf_r+0x22a>
 800950a:	2b64      	cmp	r3, #100	; 0x64
 800950c:	d1b5      	bne.n	800947a <__ssvfiscanf_r+0xb6>
 800950e:	220a      	movs	r2, #10
 8009510:	e7f2      	b.n	80094f8 <__ssvfiscanf_r+0x134>
 8009512:	2b70      	cmp	r3, #112	; 0x70
 8009514:	d052      	beq.n	80095bc <__ssvfiscanf_r+0x1f8>
 8009516:	d822      	bhi.n	800955e <__ssvfiscanf_r+0x19a>
 8009518:	2b6e      	cmp	r3, #110	; 0x6e
 800951a:	d100      	bne.n	800951e <__ssvfiscanf_r+0x15a>
 800951c:	e06f      	b.n	80095fe <__ssvfiscanf_r+0x23a>
 800951e:	d854      	bhi.n	80095ca <__ssvfiscanf_r+0x206>
 8009520:	2b69      	cmp	r3, #105	; 0x69
 8009522:	d1aa      	bne.n	800947a <__ssvfiscanf_r+0xb6>
 8009524:	2300      	movs	r3, #0
 8009526:	2203      	movs	r2, #3
 8009528:	9346      	str	r3, [sp, #280]	; 0x118
 800952a:	924b      	str	r2, [sp, #300]	; 0x12c
 800952c:	6863      	ldr	r3, [r4, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dc00      	bgt.n	8009534 <__ssvfiscanf_r+0x170>
 8009532:	e078      	b.n	8009626 <__ssvfiscanf_r+0x262>
 8009534:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	065b      	lsls	r3, r3, #25
 800953a:	d400      	bmi.n	800953e <__ssvfiscanf_r+0x17a>
 800953c:	e08b      	b.n	8009656 <__ssvfiscanf_r+0x292>
 800953e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8009540:	2b02      	cmp	r3, #2
 8009542:	dd00      	ble.n	8009546 <__ssvfiscanf_r+0x182>
 8009544:	e09d      	b.n	8009682 <__ssvfiscanf_r+0x2be>
 8009546:	ab03      	add	r3, sp, #12
 8009548:	0022      	movs	r2, r4
 800954a:	a945      	add	r1, sp, #276	; 0x114
 800954c:	9800      	ldr	r0, [sp, #0]
 800954e:	f000 f8bf 	bl	80096d0 <_scanf_chars>
 8009552:	2801      	cmp	r0, #1
 8009554:	d100      	bne.n	8009558 <__ssvfiscanf_r+0x194>
 8009556:	e0af      	b.n	80096b8 <__ssvfiscanf_r+0x2f4>
 8009558:	2802      	cmp	r0, #2
 800955a:	d1a9      	bne.n	80094b0 <__ssvfiscanf_r+0xec>
 800955c:	e025      	b.n	80095aa <__ssvfiscanf_r+0x1e6>
 800955e:	2b75      	cmp	r3, #117	; 0x75
 8009560:	d0d5      	beq.n	800950e <__ssvfiscanf_r+0x14a>
 8009562:	2b78      	cmp	r3, #120	; 0x78
 8009564:	d0c0      	beq.n	80094e8 <__ssvfiscanf_r+0x124>
 8009566:	2b73      	cmp	r3, #115	; 0x73
 8009568:	d187      	bne.n	800947a <__ssvfiscanf_r+0xb6>
 800956a:	2302      	movs	r3, #2
 800956c:	e03d      	b.n	80095ea <__ssvfiscanf_r+0x226>
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dd0f      	ble.n	8009594 <__ssvfiscanf_r+0x1d0>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	9901      	ldr	r1, [sp, #4]
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	4291      	cmp	r1, r2
 800957c:	d000      	beq.n	8009580 <__ssvfiscanf_r+0x1bc>
 800957e:	e09b      	b.n	80096b8 <__ssvfiscanf_r+0x2f4>
 8009580:	3301      	adds	r3, #1
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8009588:	3a01      	subs	r2, #1
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	3301      	adds	r3, #1
 800958e:	6062      	str	r2, [r4, #4]
 8009590:	9349      	str	r3, [sp, #292]	; 0x124
 8009592:	e78d      	b.n	80094b0 <__ssvfiscanf_r+0xec>
 8009594:	2286      	movs	r2, #134	; 0x86
 8009596:	ab02      	add	r3, sp, #8
 8009598:	0052      	lsls	r2, r2, #1
 800959a:	189b      	adds	r3, r3, r2
 800959c:	59db      	ldr	r3, [r3, r7]
 800959e:	0021      	movs	r1, r4
 80095a0:	9800      	ldr	r0, [sp, #0]
 80095a2:	9302      	str	r3, [sp, #8]
 80095a4:	4798      	blx	r3
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0e4      	beq.n	8009574 <__ssvfiscanf_r+0x1b0>
 80095aa:	9848      	ldr	r0, [sp, #288]	; 0x120
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d000      	beq.n	80095b2 <__ssvfiscanf_r+0x1ee>
 80095b0:	e07b      	b.n	80096aa <__ssvfiscanf_r+0x2e6>
 80095b2:	3801      	subs	r0, #1
 80095b4:	23a7      	movs	r3, #167	; 0xa7
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	449d      	add	sp, r3
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	9901      	ldr	r1, [sp, #4]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	9245      	str	r2, [sp, #276]	; 0x114
 80095c8:	e78e      	b.n	80094e8 <__ssvfiscanf_r+0x124>
 80095ca:	2308      	movs	r3, #8
 80095cc:	2204      	movs	r2, #4
 80095ce:	9346      	str	r3, [sp, #280]	; 0x118
 80095d0:	e7ab      	b.n	800952a <__ssvfiscanf_r+0x166>
 80095d2:	0031      	movs	r1, r6
 80095d4:	a805      	add	r0, sp, #20
 80095d6:	f000 f9df 	bl	8009998 <__sccl>
 80095da:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095dc:	0006      	movs	r6, r0
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	9a01      	ldr	r2, [sp, #4]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	9345      	str	r3, [sp, #276]	; 0x114
 80095e8:	2301      	movs	r3, #1
 80095ea:	934b      	str	r3, [sp, #300]	; 0x12c
 80095ec:	e79e      	b.n	800952c <__ssvfiscanf_r+0x168>
 80095ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2340      	movs	r3, #64	; 0x40
 80095f4:	9a01      	ldr	r2, [sp, #4]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	9345      	str	r3, [sp, #276]	; 0x114
 80095fa:	2300      	movs	r3, #0
 80095fc:	e7f5      	b.n	80095ea <__ssvfiscanf_r+0x226>
 80095fe:	9945      	ldr	r1, [sp, #276]	; 0x114
 8009600:	06cb      	lsls	r3, r1, #27
 8009602:	d500      	bpl.n	8009606 <__ssvfiscanf_r+0x242>
 8009604:	e754      	b.n	80094b0 <__ssvfiscanf_r+0xec>
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800960a:	07c8      	lsls	r0, r1, #31
 800960c:	d504      	bpl.n	8009618 <__ssvfiscanf_r+0x254>
 800960e:	1d19      	adds	r1, r3, #4
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e74b      	b.n	80094b0 <__ssvfiscanf_r+0xec>
 8009618:	1d19      	adds	r1, r3, #4
 800961a:	9103      	str	r1, [sp, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e746      	b.n	80094b0 <__ssvfiscanf_r+0xec>
 8009622:	2305      	movs	r3, #5
 8009624:	e7e1      	b.n	80095ea <__ssvfiscanf_r+0x226>
 8009626:	2286      	movs	r2, #134	; 0x86
 8009628:	ab02      	add	r3, sp, #8
 800962a:	0052      	lsls	r2, r2, #1
 800962c:	189b      	adds	r3, r3, r2
 800962e:	59db      	ldr	r3, [r3, r7]
 8009630:	0021      	movs	r1, r4
 8009632:	9800      	ldr	r0, [sp, #0]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	4798      	blx	r3
 8009638:	2800      	cmp	r0, #0
 800963a:	d100      	bne.n	800963e <__ssvfiscanf_r+0x27a>
 800963c:	e77a      	b.n	8009534 <__ssvfiscanf_r+0x170>
 800963e:	e7b4      	b.n	80095aa <__ssvfiscanf_r+0x1e6>
 8009640:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009642:	9201      	str	r2, [sp, #4]
 8009644:	3201      	adds	r2, #1
 8009646:	9249      	str	r2, [sp, #292]	; 0x124
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	3a01      	subs	r2, #1
 800964c:	6062      	str	r2, [r4, #4]
 800964e:	2a00      	cmp	r2, #0
 8009650:	dd0b      	ble.n	800966a <__ssvfiscanf_r+0x2a6>
 8009652:	3301      	adds	r3, #1
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	f7fe fab9 	bl	8007bcc <__locale_ctype_ptr>
 800965a:	2108      	movs	r1, #8
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	1880      	adds	r0, r0, r2
 8009662:	7842      	ldrb	r2, [r0, #1]
 8009664:	420a      	tst	r2, r1
 8009666:	d1eb      	bne.n	8009640 <__ssvfiscanf_r+0x27c>
 8009668:	e769      	b.n	800953e <__ssvfiscanf_r+0x17a>
 800966a:	2286      	movs	r2, #134	; 0x86
 800966c:	ab02      	add	r3, sp, #8
 800966e:	0052      	lsls	r2, r2, #1
 8009670:	189b      	adds	r3, r3, r2
 8009672:	59db      	ldr	r3, [r3, r7]
 8009674:	0021      	movs	r1, r4
 8009676:	9800      	ldr	r0, [sp, #0]
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	4798      	blx	r3
 800967c:	2800      	cmp	r0, #0
 800967e:	d0ea      	beq.n	8009656 <__ssvfiscanf_r+0x292>
 8009680:	e793      	b.n	80095aa <__ssvfiscanf_r+0x1e6>
 8009682:	2b04      	cmp	r3, #4
 8009684:	dc06      	bgt.n	8009694 <__ssvfiscanf_r+0x2d0>
 8009686:	ab03      	add	r3, sp, #12
 8009688:	0022      	movs	r2, r4
 800968a:	a945      	add	r1, sp, #276	; 0x114
 800968c:	9800      	ldr	r0, [sp, #0]
 800968e:	f000 f883 	bl	8009798 <_scanf_i>
 8009692:	e75e      	b.n	8009552 <__ssvfiscanf_r+0x18e>
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <__ssvfiscanf_r+0x308>)
 8009696:	2b00      	cmp	r3, #0
 8009698:	d100      	bne.n	800969c <__ssvfiscanf_r+0x2d8>
 800969a:	e709      	b.n	80094b0 <__ssvfiscanf_r+0xec>
 800969c:	ab03      	add	r3, sp, #12
 800969e:	0022      	movs	r2, r4
 80096a0:	a945      	add	r1, sp, #276	; 0x114
 80096a2:	9800      	ldr	r0, [sp, #0]
 80096a4:	e000      	b.n	80096a8 <__ssvfiscanf_r+0x2e4>
 80096a6:	bf00      	nop
 80096a8:	e753      	b.n	8009552 <__ssvfiscanf_r+0x18e>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	065b      	lsls	r3, r3, #25
 80096ae:	d400      	bmi.n	80096b2 <__ssvfiscanf_r+0x2ee>
 80096b0:	e780      	b.n	80095b4 <__ssvfiscanf_r+0x1f0>
 80096b2:	2001      	movs	r0, #1
 80096b4:	4240      	negs	r0, r0
 80096b6:	e77d      	b.n	80095b4 <__ssvfiscanf_r+0x1f0>
 80096b8:	9848      	ldr	r0, [sp, #288]	; 0x120
 80096ba:	e77b      	b.n	80095b4 <__ssvfiscanf_r+0x1f0>
 80096bc:	fffffd64 	.word	0xfffffd64
 80096c0:	0800930f 	.word	0x0800930f
 80096c4:	08009387 	.word	0x08009387
 80096c8:	0800ad72 	.word	0x0800ad72
 80096cc:	00000000 	.word	0x00000000

080096d0 <_scanf_chars>:
 80096d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096d2:	0015      	movs	r5, r2
 80096d4:	688a      	ldr	r2, [r1, #8]
 80096d6:	9001      	str	r0, [sp, #4]
 80096d8:	000c      	movs	r4, r1
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d106      	bne.n	80096ec <_scanf_chars+0x1c>
 80096de:	698a      	ldr	r2, [r1, #24]
 80096e0:	1e51      	subs	r1, r2, #1
 80096e2:	418a      	sbcs	r2, r1
 80096e4:	2101      	movs	r1, #1
 80096e6:	4252      	negs	r2, r2
 80096e8:	430a      	orrs	r2, r1
 80096ea:	60a2      	str	r2, [r4, #8]
 80096ec:	6822      	ldr	r2, [r4, #0]
 80096ee:	06d2      	lsls	r2, r2, #27
 80096f0:	d403      	bmi.n	80096fa <_scanf_chars+0x2a>
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	1d11      	adds	r1, r2, #4
 80096f6:	6019      	str	r1, [r3, #0]
 80096f8:	6817      	ldr	r7, [r2, #0]
 80096fa:	2600      	movs	r6, #0
 80096fc:	69a3      	ldr	r3, [r4, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d01c      	beq.n	800973c <_scanf_chars+0x6c>
 8009702:	2b01      	cmp	r3, #1
 8009704:	d108      	bne.n	8009718 <_scanf_chars+0x48>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	6962      	ldr	r2, [r4, #20]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	5cd3      	ldrb	r3, [r2, r3]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d114      	bne.n	800973c <_scanf_chars+0x6c>
 8009712:	2e00      	cmp	r6, #0
 8009714:	d130      	bne.n	8009778 <_scanf_chars+0xa8>
 8009716:	e006      	b.n	8009726 <_scanf_chars+0x56>
 8009718:	2b02      	cmp	r3, #2
 800971a:	d006      	beq.n	800972a <_scanf_chars+0x5a>
 800971c:	2e00      	cmp	r6, #0
 800971e:	d12b      	bne.n	8009778 <_scanf_chars+0xa8>
 8009720:	69a3      	ldr	r3, [r4, #24]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d128      	bne.n	8009778 <_scanf_chars+0xa8>
 8009726:	2001      	movs	r0, #1
 8009728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800972a:	f7fe fa4f 	bl	8007bcc <__locale_ctype_ptr>
 800972e:	2208      	movs	r2, #8
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	18c0      	adds	r0, r0, r3
 8009736:	7843      	ldrb	r3, [r0, #1]
 8009738:	4213      	tst	r3, r2
 800973a:	d1ef      	bne.n	800971c <_scanf_chars+0x4c>
 800973c:	2210      	movs	r2, #16
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	3601      	adds	r6, #1
 8009742:	4213      	tst	r3, r2
 8009744:	d103      	bne.n	800974e <_scanf_chars+0x7e>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	703b      	strb	r3, [r7, #0]
 800974c:	3701      	adds	r7, #1
 800974e:	682a      	ldr	r2, [r5, #0]
 8009750:	686b      	ldr	r3, [r5, #4]
 8009752:	3201      	adds	r2, #1
 8009754:	602a      	str	r2, [r5, #0]
 8009756:	68a2      	ldr	r2, [r4, #8]
 8009758:	3b01      	subs	r3, #1
 800975a:	3a01      	subs	r2, #1
 800975c:	606b      	str	r3, [r5, #4]
 800975e:	60a2      	str	r2, [r4, #8]
 8009760:	2a00      	cmp	r2, #0
 8009762:	d009      	beq.n	8009778 <_scanf_chars+0xa8>
 8009764:	2b00      	cmp	r3, #0
 8009766:	dcc9      	bgt.n	80096fc <_scanf_chars+0x2c>
 8009768:	23c0      	movs	r3, #192	; 0xc0
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	58e3      	ldr	r3, [r4, r3]
 800976e:	0029      	movs	r1, r5
 8009770:	9801      	ldr	r0, [sp, #4]
 8009772:	4798      	blx	r3
 8009774:	2800      	cmp	r0, #0
 8009776:	d0c1      	beq.n	80096fc <_scanf_chars+0x2c>
 8009778:	2310      	movs	r3, #16
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	4013      	ands	r3, r2
 800977e:	d106      	bne.n	800978e <_scanf_chars+0xbe>
 8009780:	68e2      	ldr	r2, [r4, #12]
 8009782:	3201      	adds	r2, #1
 8009784:	60e2      	str	r2, [r4, #12]
 8009786:	69a2      	ldr	r2, [r4, #24]
 8009788:	2a00      	cmp	r2, #0
 800978a:	d000      	beq.n	800978e <_scanf_chars+0xbe>
 800978c:	703b      	strb	r3, [r7, #0]
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	2000      	movs	r0, #0
 8009792:	199e      	adds	r6, r3, r6
 8009794:	6126      	str	r6, [r4, #16]
 8009796:	e7c7      	b.n	8009728 <_scanf_chars+0x58>

08009798 <_scanf_i>:
 8009798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800979a:	000c      	movs	r4, r1
 800979c:	b08d      	sub	sp, #52	; 0x34
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	4b77      	ldr	r3, [pc, #476]	; (8009980 <_scanf_i+0x1e8>)
 80097a2:	9005      	str	r0, [sp, #20]
 80097a4:	0016      	movs	r6, r2
 80097a6:	aa09      	add	r2, sp, #36	; 0x24
 80097a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80097aa:	c223      	stmia	r2!, {r0, r1, r5}
 80097ac:	4b75      	ldr	r3, [pc, #468]	; (8009984 <_scanf_i+0x1ec>)
 80097ae:	9306      	str	r3, [sp, #24]
 80097b0:	69a3      	ldr	r3, [r4, #24]
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d001      	beq.n	80097ba <_scanf_i+0x22>
 80097b6:	4b74      	ldr	r3, [pc, #464]	; (8009988 <_scanf_i+0x1f0>)
 80097b8:	9306      	str	r3, [sp, #24]
 80097ba:	22ae      	movs	r2, #174	; 0xae
 80097bc:	2000      	movs	r0, #0
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	0052      	lsls	r2, r2, #1
 80097c2:	1e59      	subs	r1, r3, #1
 80097c4:	9004      	str	r0, [sp, #16]
 80097c6:	4291      	cmp	r1, r2
 80097c8:	d905      	bls.n	80097d6 <_scanf_i+0x3e>
 80097ca:	3b5e      	subs	r3, #94	; 0x5e
 80097cc:	3bff      	subs	r3, #255	; 0xff
 80097ce:	9304      	str	r3, [sp, #16]
 80097d0:	235e      	movs	r3, #94	; 0x5e
 80097d2:	33ff      	adds	r3, #255	; 0xff
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	0023      	movs	r3, r4
 80097d8:	331c      	adds	r3, #28
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	23d0      	movs	r3, #208	; 0xd0
 80097de:	2700      	movs	r7, #0
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	4313      	orrs	r3, r2
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	9303      	str	r3, [sp, #12]
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	a809      	add	r0, sp, #36	; 0x24
 80097f0:	7819      	ldrb	r1, [r3, #0]
 80097f2:	00bb      	lsls	r3, r7, #2
 80097f4:	2202      	movs	r2, #2
 80097f6:	5818      	ldr	r0, [r3, r0]
 80097f8:	f7ff fd44 	bl	8009284 <memchr>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d02b      	beq.n	8009858 <_scanf_i+0xc0>
 8009800:	2f01      	cmp	r7, #1
 8009802:	d15f      	bne.n	80098c4 <_scanf_i+0x12c>
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <_scanf_i+0x80>
 800980a:	3308      	adds	r3, #8
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	6063      	str	r3, [r4, #4]
 8009810:	33f9      	adds	r3, #249	; 0xf9
 8009812:	33ff      	adds	r3, #255	; 0xff
 8009814:	4313      	orrs	r3, r2
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	4b5c      	ldr	r3, [pc, #368]	; (800998c <_scanf_i+0x1f4>)
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	4013      	ands	r3, r2
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	60a2      	str	r2, [r4, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d016      	beq.n	8009858 <_scanf_i+0xc0>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	1c5d      	adds	r5, r3, #1
 800982e:	6833      	ldr	r3, [r6, #0]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	6032      	str	r2, [r6, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	9a03      	ldr	r2, [sp, #12]
 8009838:	9503      	str	r5, [sp, #12]
 800983a:	7013      	strb	r3, [r2, #0]
 800983c:	6873      	ldr	r3, [r6, #4]
 800983e:	3b01      	subs	r3, #1
 8009840:	6073      	str	r3, [r6, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	dc08      	bgt.n	8009858 <_scanf_i+0xc0>
 8009846:	23c0      	movs	r3, #192	; 0xc0
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	58e3      	ldr	r3, [r4, r3]
 800984c:	0031      	movs	r1, r6
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	4798      	blx	r3
 8009854:	2800      	cmp	r0, #0
 8009856:	d17d      	bne.n	8009954 <_scanf_i+0x1bc>
 8009858:	3701      	adds	r7, #1
 800985a:	2f03      	cmp	r7, #3
 800985c:	d1c6      	bne.n	80097ec <_scanf_i+0x54>
 800985e:	6863      	ldr	r3, [r4, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <_scanf_i+0xd0>
 8009864:	330a      	adds	r3, #10
 8009866:	6063      	str	r3, [r4, #4]
 8009868:	2110      	movs	r1, #16
 800986a:	2700      	movs	r7, #0
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	6960      	ldr	r0, [r4, #20]
 8009870:	1ac9      	subs	r1, r1, r3
 8009872:	4b47      	ldr	r3, [pc, #284]	; (8009990 <_scanf_i+0x1f8>)
 8009874:	18c9      	adds	r1, r1, r3
 8009876:	f000 f88f 	bl	8009998 <__sccl>
 800987a:	9d03      	ldr	r5, [sp, #12]
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d041      	beq.n	8009906 <_scanf_i+0x16e>
 8009882:	6832      	ldr	r2, [r6, #0]
 8009884:	6960      	ldr	r0, [r4, #20]
 8009886:	7811      	ldrb	r1, [r2, #0]
 8009888:	5c40      	ldrb	r0, [r0, r1]
 800988a:	2800      	cmp	r0, #0
 800988c:	d03b      	beq.n	8009906 <_scanf_i+0x16e>
 800988e:	2930      	cmp	r1, #48	; 0x30
 8009890:	d128      	bne.n	80098e4 <_scanf_i+0x14c>
 8009892:	2080      	movs	r0, #128	; 0x80
 8009894:	6821      	ldr	r1, [r4, #0]
 8009896:	0100      	lsls	r0, r0, #4
 8009898:	4201      	tst	r1, r0
 800989a:	d023      	beq.n	80098e4 <_scanf_i+0x14c>
 800989c:	9a04      	ldr	r2, [sp, #16]
 800989e:	3701      	adds	r7, #1
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	d003      	beq.n	80098ac <_scanf_i+0x114>
 80098a4:	3a01      	subs	r2, #1
 80098a6:	3301      	adds	r3, #1
 80098a8:	9204      	str	r2, [sp, #16]
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	6873      	ldr	r3, [r6, #4]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	6073      	str	r3, [r6, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd1e      	ble.n	80098f4 <_scanf_i+0x15c>
 80098b6:	6833      	ldr	r3, [r6, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	68a3      	ldr	r3, [r4, #8]
 80098be:	3b01      	subs	r3, #1
 80098c0:	60a3      	str	r3, [r4, #8]
 80098c2:	e7db      	b.n	800987c <_scanf_i+0xe4>
 80098c4:	2f02      	cmp	r7, #2
 80098c6:	d1ab      	bne.n	8009820 <_scanf_i+0x88>
 80098c8:	21c0      	movs	r1, #192	; 0xc0
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	00c9      	lsls	r1, r1, #3
 80098d0:	4011      	ands	r1, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d1c2      	bne.n	800985e <_scanf_i+0xc6>
 80098d8:	3bf1      	subs	r3, #241	; 0xf1
 80098da:	3bff      	subs	r3, #255	; 0xff
 80098dc:	6063      	str	r3, [r4, #4]
 80098de:	33f0      	adds	r3, #240	; 0xf0
 80098e0:	4313      	orrs	r3, r2
 80098e2:	e79c      	b.n	800981e <_scanf_i+0x86>
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	4b2b      	ldr	r3, [pc, #172]	; (8009994 <_scanf_i+0x1fc>)
 80098e8:	400b      	ands	r3, r1
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	7813      	ldrb	r3, [r2, #0]
 80098ee:	702b      	strb	r3, [r5, #0]
 80098f0:	3501      	adds	r5, #1
 80098f2:	e7db      	b.n	80098ac <_scanf_i+0x114>
 80098f4:	23c0      	movs	r3, #192	; 0xc0
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	58e3      	ldr	r3, [r4, r3]
 80098fa:	0031      	movs	r1, r6
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	4798      	blx	r3
 8009902:	2800      	cmp	r0, #0
 8009904:	d0da      	beq.n	80098bc <_scanf_i+0x124>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	05db      	lsls	r3, r3, #23
 800990a:	d50e      	bpl.n	800992a <_scanf_i+0x192>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	429d      	cmp	r5, r3
 8009910:	d907      	bls.n	8009922 <_scanf_i+0x18a>
 8009912:	23be      	movs	r3, #190	; 0xbe
 8009914:	3d01      	subs	r5, #1
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	7829      	ldrb	r1, [r5, #0]
 800991a:	58e3      	ldr	r3, [r4, r3]
 800991c:	0032      	movs	r2, r6
 800991e:	9805      	ldr	r0, [sp, #20]
 8009920:	4798      	blx	r3
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	2001      	movs	r0, #1
 8009926:	429d      	cmp	r5, r3
 8009928:	d027      	beq.n	800997a <_scanf_i+0x1e2>
 800992a:	2210      	movs	r2, #16
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	401a      	ands	r2, r3
 8009930:	d11c      	bne.n	800996c <_scanf_i+0x1d4>
 8009932:	702a      	strb	r2, [r5, #0]
 8009934:	6863      	ldr	r3, [r4, #4]
 8009936:	9901      	ldr	r1, [sp, #4]
 8009938:	9805      	ldr	r0, [sp, #20]
 800993a:	9e06      	ldr	r6, [sp, #24]
 800993c:	47b0      	blx	r6
 800993e:	9b02      	ldr	r3, [sp, #8]
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	0691      	lsls	r1, r2, #26
 8009946:	d507      	bpl.n	8009958 <_scanf_i+0x1c0>
 8009948:	9902      	ldr	r1, [sp, #8]
 800994a:	1d1a      	adds	r2, r3, #4
 800994c:	600a      	str	r2, [r1, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	e008      	b.n	8009966 <_scanf_i+0x1ce>
 8009954:	2700      	movs	r7, #0
 8009956:	e7d6      	b.n	8009906 <_scanf_i+0x16e>
 8009958:	07d1      	lsls	r1, r2, #31
 800995a:	d5f5      	bpl.n	8009948 <_scanf_i+0x1b0>
 800995c:	9902      	ldr	r1, [sp, #8]
 800995e:	1d1a      	adds	r2, r3, #4
 8009960:	600a      	str	r2, [r1, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	8018      	strh	r0, [r3, #0]
 8009966:	68e3      	ldr	r3, [r4, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60e3      	str	r3, [r4, #12]
 800996c:	2000      	movs	r0, #0
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	1aed      	subs	r5, r5, r3
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	19ef      	adds	r7, r5, r7
 8009976:	19df      	adds	r7, r3, r7
 8009978:	6127      	str	r7, [r4, #16]
 800997a:	b00d      	add	sp, #52	; 0x34
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	0800a788 	.word	0x0800a788
 8009984:	08008361 	.word	0x08008361
 8009988:	08009239 	.word	0x08009239
 800998c:	fffffaff 	.word	0xfffffaff
 8009990:	0800ad9f 	.word	0x0800ad9f
 8009994:	fffff6ff 	.word	0xfffff6ff

08009998 <__sccl>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	780b      	ldrb	r3, [r1, #0]
 800999c:	2b5e      	cmp	r3, #94	; 0x5e
 800999e:	d00d      	beq.n	80099bc <__sccl+0x24>
 80099a0:	1c4a      	adds	r2, r1, #1
 80099a2:	2100      	movs	r1, #0
 80099a4:	0004      	movs	r4, r0
 80099a6:	1c45      	adds	r5, r0, #1
 80099a8:	35ff      	adds	r5, #255	; 0xff
 80099aa:	7021      	strb	r1, [r4, #0]
 80099ac:	3401      	adds	r4, #1
 80099ae:	42a5      	cmp	r5, r4
 80099b0:	d1fb      	bne.n	80099aa <__sccl+0x12>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <__sccl+0x2c>
 80099b6:	3a01      	subs	r2, #1
 80099b8:	0010      	movs	r0, r2
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	1c8a      	adds	r2, r1, #2
 80099be:	784b      	ldrb	r3, [r1, #1]
 80099c0:	2101      	movs	r1, #1
 80099c2:	e7ef      	b.n	80099a4 <__sccl+0xc>
 80099c4:	2401      	movs	r4, #1
 80099c6:	404c      	eors	r4, r1
 80099c8:	0011      	movs	r1, r2
 80099ca:	54c4      	strb	r4, [r0, r3]
 80099cc:	780d      	ldrb	r5, [r1, #0]
 80099ce:	1c4a      	adds	r2, r1, #1
 80099d0:	2d2d      	cmp	r5, #45	; 0x2d
 80099d2:	d007      	beq.n	80099e4 <__sccl+0x4c>
 80099d4:	2d5d      	cmp	r5, #93	; 0x5d
 80099d6:	d0ef      	beq.n	80099b8 <__sccl+0x20>
 80099d8:	2d00      	cmp	r5, #0
 80099da:	d101      	bne.n	80099e0 <__sccl+0x48>
 80099dc:	000a      	movs	r2, r1
 80099de:	e7eb      	b.n	80099b8 <__sccl+0x20>
 80099e0:	002b      	movs	r3, r5
 80099e2:	e7f1      	b.n	80099c8 <__sccl+0x30>
 80099e4:	784e      	ldrb	r6, [r1, #1]
 80099e6:	2e5d      	cmp	r6, #93	; 0x5d
 80099e8:	d0fa      	beq.n	80099e0 <__sccl+0x48>
 80099ea:	42b3      	cmp	r3, r6
 80099ec:	dcf8      	bgt.n	80099e0 <__sccl+0x48>
 80099ee:	3102      	adds	r1, #2
 80099f0:	3301      	adds	r3, #1
 80099f2:	54c4      	strb	r4, [r0, r3]
 80099f4:	429e      	cmp	r6, r3
 80099f6:	dcfb      	bgt.n	80099f0 <__sccl+0x58>
 80099f8:	e7e8      	b.n	80099cc <__sccl+0x34>
	...

080099fc <__submore>:
 80099fc:	000b      	movs	r3, r1
 80099fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a00:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8009a02:	3344      	adds	r3, #68	; 0x44
 8009a04:	000c      	movs	r4, r1
 8009a06:	429d      	cmp	r5, r3
 8009a08:	d11c      	bne.n	8009a44 <__submore+0x48>
 8009a0a:	2680      	movs	r6, #128	; 0x80
 8009a0c:	00f6      	lsls	r6, r6, #3
 8009a0e:	0031      	movs	r1, r6
 8009a10:	f7fe fffa 	bl	8008a08 <_malloc_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d102      	bne.n	8009a1e <__submore+0x22>
 8009a18:	2001      	movs	r0, #1
 8009a1a:	4240      	negs	r0, r0
 8009a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a1e:	0023      	movs	r3, r4
 8009a20:	6360      	str	r0, [r4, #52]	; 0x34
 8009a22:	63a6      	str	r6, [r4, #56]	; 0x38
 8009a24:	3346      	adds	r3, #70	; 0x46
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <__submore+0x70>)
 8009a2a:	54c2      	strb	r2, [r0, r3]
 8009a2c:	0023      	movs	r3, r4
 8009a2e:	3345      	adds	r3, #69	; 0x45
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <__submore+0x74>)
 8009a34:	54c2      	strb	r2, [r0, r3]
 8009a36:	782a      	ldrb	r2, [r5, #0]
 8009a38:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <__submore+0x78>)
 8009a3a:	54c2      	strb	r2, [r0, r3]
 8009a3c:	18c0      	adds	r0, r0, r3
 8009a3e:	6020      	str	r0, [r4, #0]
 8009a40:	2000      	movs	r0, #0
 8009a42:	e7eb      	b.n	8009a1c <__submore+0x20>
 8009a44:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8009a46:	0029      	movs	r1, r5
 8009a48:	0073      	lsls	r3, r6, #1
 8009a4a:	001a      	movs	r2, r3
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	f7ff fc38 	bl	80092c2 <_realloc_r>
 8009a52:	1e05      	subs	r5, r0, #0
 8009a54:	d0e0      	beq.n	8009a18 <__submore+0x1c>
 8009a56:	1987      	adds	r7, r0, r6
 8009a58:	0001      	movs	r1, r0
 8009a5a:	0032      	movs	r2, r6
 8009a5c:	0038      	movs	r0, r7
 8009a5e:	f7fe f8e4 	bl	8007c2a <memcpy>
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	6027      	str	r7, [r4, #0]
 8009a66:	6365      	str	r5, [r4, #52]	; 0x34
 8009a68:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a6a:	e7e9      	b.n	8009a40 <__submore+0x44>
 8009a6c:	000003ff 	.word	0x000003ff
 8009a70:	000003fe 	.word	0x000003fe
 8009a74:	000003fd 	.word	0x000003fd

08009a78 <_malloc_usable_size_r>:
 8009a78:	1f0b      	subs	r3, r1, #4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	1f18      	subs	r0, r3, #4
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da01      	bge.n	8009a86 <_malloc_usable_size_r+0xe>
 8009a82:	580b      	ldr	r3, [r1, r0]
 8009a84:	18c0      	adds	r0, r0, r3
 8009a86:	4770      	bx	lr

08009a88 <_sbrk>:
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <_sbrk+0x18>)
 8009a8a:	0002      	movs	r2, r0
 8009a8c:	6819      	ldr	r1, [r3, #0]
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	d101      	bne.n	8009a96 <_sbrk+0xe>
 8009a92:	4904      	ldr	r1, [pc, #16]	; (8009aa4 <_sbrk+0x1c>)
 8009a94:	6019      	str	r1, [r3, #0]
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	1882      	adds	r2, r0, r2
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	4770      	bx	lr
 8009a9e:	46c0      	nop			; (mov r8, r8)
 8009aa0:	20004960 	.word	0x20004960
 8009aa4:	20005cbc 	.word	0x20005cbc

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
